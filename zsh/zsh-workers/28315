From zsh-workers-return-28315-mason-zsh=primenet.com.au@zsh.org Tue Oct 05 15:01:33 2010
Return-Path: <zsh-workers-return-28315-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28903 invoked by alias); 5 Oct 2010 15:01:33 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 28315
Received: (qmail 6593 invoked from network); 5 Oct 2010 15:01:30 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <101005080059.ZM4862@torch.brasslantern.com>
Date: Tue, 05 Oct 2010 08:00:57 -0700
In-reply-to: <AANLkTi=PxKX2x5M_oseccYWsSgztpWY_n8Lz9gTu=3vE@mail.gmail.com>
Comments: In reply to Mikael Magnusson <mikachu@gmail.com>
 "noclobber overzealous with multios and /dev/stdout" (Oct  4, 11:32pm)
References: <AANLkTi=PxKX2x5M_oseccYWsSgztpWY_n8Lz9gTu=3vE@mail.gmail.com>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh workers <zsh-workers@zsh.org>
Subject: Re: noclobber overzealous with multios and /dev/stdout
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Oct 4, 11:32pm, Mikael Magnusson wrote:
}
} I can't really see the logic here, so I'm guessing it's a bug somewhere:

This is not really a zsh issue; it depends on the implementation of the
device special files that refer to existing descriptors.

Internally zsh always does these steps:
(1) Attempt to open the file for exclusive write.
    [If this succeeds, we're done, the file didn't exist before.]
(2) Open the file for write, but without truncation, then fstat the
    descriptor and close/fail if a regular file.

The special files /dev/stdout and /dev/fd/1 etc. are oddballs in that
they may appear to be (or not) a regular file depending on how the
related descriptors were previously opened.

So in these two cases ...
 
} % rm file
} % echo test > file > /dev/stdout
} zsh: file exists: /dev/stdout
} 
} % rm file
} % echo test > file > /dev/fd/1
} zsh: file exists: /dev/fd/1

... what has happened is that zsh has opened "file" as the standard
output (fd 1), which changes the meaning of /dev/stdout and /dev/fd/1
to refer to the regular file "file".  This is in turn causes noclobber
to refuse to truncate them; zsh has no way of knowing that the OS has
magically created a new reference to a file that zsh itself created
only a fraction of a second before, it knows only that it may not
truncate an existing file.

} both 0 and 1 are symlinks to /dev/pts/33

No, they aren't.  Left-to-right order is important with multios, as
it is with descriptor duplication using >&DIGITS.

-- 

