From zsh-workers-return-12291-mason-zsh=primenet.com.au@sunsite.auc.dk Tue Jul 18 05:23:30 2000
Return-Path: <zsh-workers-return-12291-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 20039 invoked from network); 18 Jul 2000 05:23:28 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 18 Jul 2000 05:23:28 -0000
Received: (qmail 25273 invoked by alias); 18 Jul 2000 05:23:19 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 12291
Received: (qmail 25217 invoked from network); 18 Jul 2000 05:23:18 -0000
Message-ID: <20000718052317.200.qmail@web1303.mail.yahoo.com>
Date: Mon, 17 Jul 2000 22:23:17 -0700 (PDT)
From: Felix Rosencrantz <f_rosencrantz@yahoo.com>
Subject: Re: spaceflag question; remhist() going away
To: zsh-workers <zsh-workers@sunsite.auc.dk>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

 Wayne Davison wrote:
>The matching rule would allow more general command-name rules, plus
>line-oriented rules that name-oriented support don't allow.  For
>instance:  ignoring lines that are just 1 or 2 chars long; ignoring
>the make command unless it had an argument or was a part of a compound
>statement; ignoring the history command, but only if it is not a part
>of a compound statement (such as having its output piped into a
>script); ignoring lines that begin with whitespace (including tab)
>without having any extra alias-checking rules done; ignoring a lynx
>command that uses the -auth option; etc.
>
>The plus side is that a line-matching rule is much more flexible.  The
>down side is that a user has to understand complex patterns to be able
>to use it effectively.  Some good examples would get the casual user
>going, though.

Yeah, I was talking about something similar that could be used with
Bart's new smart-insert-last-word widget.  Seems like some common ability
to match and filter history would be useful in several situations.  Sort of
a regex for command history... 8)

Another thing I would use is a "soft" or "fuzzy" history mechanism.  For
example, I would really like to be able to intercept a "!$" history option
and replace it with a call to smart-insert-last-word (w/command line matching).
Or the ability to intercept other history calls like !* or !!.  It seems like
it would be useful to have an option that would allow us to play with this
history mechanism, so it's a little more DWIM.

-FR

__________________________________________________
Do You Yahoo!?
Get Yahoo! Mail – Free email you can access from anywhere!
http://mail.yahoo.com/

