From zsh-users-return-13363-mason-zsh=primenet.com.au@sunsite.dk Tue Oct 21 23:15:34 2008
Return-Path: <zsh-users-return-13363-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15825 invoked from network); 21 Oct 2008 23:15:29 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 21 Oct 2008 23:15:29 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 40664 invoked from network); 21 Oct 2008 23:14:31 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 21 Oct 2008 23:14:31 -0000
Received: (qmail 23662 invoked by alias); 21 Oct 2008 23:13:38 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13363
Received: (qmail 23634 invoked from network); 21 Oct 2008 23:13:33 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 21 Oct 2008 23:13:33 -0000
Received: from mx.spodhuis.org (redoubt.spodhuis.org [193.202.115.177])
	by bifrost.dotsrc.org (Postfix) with ESMTPS id 6C4EF80524C0
	for <zsh-users@sunsite.dk>; Wed, 22 Oct 2008 01:13:27 +0200 (CEST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws; s=d200807; d=spodhuis.org;
	h=Received:Date:From:To:Cc:Subject:Message-ID:Mail-Followup-To:References:MIME-Version:Content-Type:Content-Disposition:In-Reply-To;
	b=mbJN69LHkBT4Xbx6AFw/6xXOeZFMZtqBh6GmV2g1I0R5BSTP8I34o81B3Yg/TccleqQ6nuF9flswbfsjncdk5vxA8iJ5OM98ipsTFaVFq8LW7Eqq0HA8B5Q6ntfW+wLDwpKHufH6JpRDpMQ21GLyTKLrEv7uNA7K0RVad0RmerQ=;
Received: by smtp.spodhuis.org with local 
	id 1KsQPj-000NlS-CS; Tue, 21 Oct 2008 23:13:23 +0000
Date: Tue, 21 Oct 2008 16:13:23 -0700
From: Phil Pennock <zsh-workers+phil.pennock@spodhuis.org>
To: Peter Stephenson <p.w.stephenson@ntlworld.com>
Cc: dqarras@yahoo.com, ZSH Users <zsh-users@sunsite.dk>,
	pws@pws-pc.ntlworld.com
Subject: Re: SHELL not always correct
Message-ID: <20081021231323.GA89901@redoubt.spodhuis.org>
Mail-Followup-To: Peter Stephenson <p.w.stephenson@ntlworld.com>,
	dqarras@yahoo.com, ZSH Users <zsh-users@sunsite.dk>,
	pws@pws-pc.ntlworld.com
References: <903527.44182.qm@web36808.mail.mud.yahoo.com> <200810212058.m9LKwXQe009278@pws-pc.ntlworld.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <200810212058.m9LKwXQe009278@pws-pc.ntlworld.com>
X-Virus-Scanned: ClamAV 0.92.1/8465/Tue Oct 21 22:14:56 2008 on bifrost
X-Virus-Status: Clean

On 2008-10-21 at 21:58 +0100, Peter Stephenson wrote:
> I very much doubt whether bash is altering SHELL internally; try
> starting with -x to see if it's coming from an initialisation file.

I don't want to read the bash source and end up with tainted knowledge
or whatever the term is, but this seems safe enough:

# cd /usr/ports/shells/bash
# make extract
# fgrep -r '"SHELL"' work
work/bash-3.2/variables.c:  temp_var = find_variable ("SHELL");
work/bash-3.2/variables.c:      temp_var = bind_variable ("SHELL", current_user.shell, 0);
work/bash-3.2/shell.c:      set_var_read_only ("SHELL");

Okay, I peeked at variables.c and this comment:
/* Set $SHELL to the user's login shell if it is not already set.  Call
   get_current_user_info if we haven't already fetched the shell. */
decorates set_shell_var() which forcibly claims SHELL for itself.

Seems rather presumptuous, to claim to child processes that you are the
user's chosen preferred shell, merely because you're running.

Single Unix Specification v3, XBD, Chapter 8:
----------------------------8< cut here >8------------------------------
SHELL
    This variable shall represent a pathname of the user's preferred
    command language interpreter. If this interpreter does not conform
    to the Shell Command Language in the Shell and Utilities volume of
    IEEE Std 1003.1-2001, Chapter 2, Shell Command Language, utilities
    may behave differently from those described in IEEE Std 1003.1-2001.
----------------------------8< cut here >8------------------------------

which is consistent with my understanding that programs setting up an
environment based on getpwnam() may set $SHELL (login, sshd, crontab) or
a user may set it themselves but it shouldn't be otherwise overriden
without good cause.  Good cause might be a build system which wants to
guarantee POSIX sh instead of csh might set SHELL for the environment of
the build to get a known-good setup.

(I'm sure Peter knows all that, I'm answering the OP).

-Phil

