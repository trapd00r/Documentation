From zsh-users-return-12740-mason-zsh=primenet.com.au@sunsite.dk Fri Mar 28 13:17:35 2008
Return-Path: <zsh-users-return-12740-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27843 invoked from network); 28 Mar 2008 13:17:24 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.2 required=5.0 tests=BAYES_00,PLING_QUERY
	autolearn=no version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 28 Mar 2008 13:17:24 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 38371 invoked from network); 28 Mar 2008 13:16:54 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 28 Mar 2008 13:16:54 -0000
Received: (qmail 17759 invoked by alias); 28 Mar 2008 13:16:43 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12740
Received: (qmail 17741 invoked from network); 28 Mar 2008 13:16:43 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 28 Mar 2008 13:16:43 -0000
Received: from mail.o2.co.uk (yoda.london.02.net [82.132.130.151])
	by bifrost.dotsrc.org (Postfix) with ESMTP id DD7DA82CD274
	for <zsh-users@sunsite.dk>; Fri, 28 Mar 2008 14:16:35 +0100 (CET)
Received: from sc.homeunix.net (78.105.216.138) by mail.o2.co.uk (8.0.013.3) (authenticated as stephane.chazelas)
        id 47E8D1DC00C4B967; Fri, 28 Mar 2008 13:16:33 +0000
Received: from chazelas by sc.homeunix.net with local (Exim 4.69)
	(envelope-from <stephane_chazelas@yahoo.fr>)
	id 1JfERa-0002my-Gp; Fri, 28 Mar 2008 13:16:30 +0000
Date: Fri, 28 Mar 2008 13:16:30 +0000
From: Stephane Chazelas <Stephane_Chazelas@yahoo.fr>
To: Atom Smasher <atom@smasher.org>
Cc: zsh-users@sunsite.dk
Subject: Re: /bin/sh is spawned - wtf?!?!?
Message-ID: <20080328131630.GA5072@sc.homeunix.net>
Mail-Followup-To: Atom Smasher <atom@smasher.org>, zsh-users@sunsite.dk
References: <20080328105958.92845.qmail@smasher.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-15
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <20080328105958.92845.qmail@smasher.org>
User-Agent: Mutt/1.5.16 (2007-09-19)
X-Virus-Scanned: ClamAV 0.91.2/6438/Fri Mar 28 12:40:31 2008 on bifrost
X-Virus-Status: Clean

On Fri, Mar 28, 2008 at 11:59:57PM +1300, Atom Smasher wrote:
> from zshmisc:
> 	"If execution fails because the file is not in executable format, and the 
> file is not a directory, it is assumed to be a shell script. /bin/sh is 
> spawned to execute it."
>
> uummm.... for security reasons, shouldn't there be an option to disable 
> that behavior and just return an error?
[...]

That's POSIX and Unix standard behavior.

The #! is not POSIX, the way you describe is the only POSIX way
shell scripts are run.

Now, in POSIX mode (which I beleive the "emulate sh" is meant to
try and get close to), zsh should invoke a POSIX conformant
shell, on some systems like Solaris, it's not /bin/sh
(/usr/xpg4/bin/sh on Solaris). zsh could also interpret the file
in a child of his.

>From the Single Unix Specification Version 3:

   If the execve() function fails due to an error equivalent
   to the [ENOEXEC] error, the shell shall execute a command
   equivalent to having a shell invoked with the command
   name as its first operand, with any remaining arguments
   passed to the new shell. If the executable file is not a
   text file, the shell may bypass this command execution.
   In this case, it shall write an error message and shall
   return an exit status of 126.

it's the same for the execvp() and execlp() libc functions.

  In the cases where the other members of the exec family of
  functions would fail and set errno to [ENOEXEC], the execlp()
  and execvp() functions shall execute a command interpreter and
  the environment of the executed command shall be as if the
  process invoked the sh utility using execl() as follows:

   execl(<shell path>, arg0, file, arg1, ..., (char *)0);

  where <shell path> is an unspecified pathname for the sh
  utility, file is the process image file, and for execvp(),
  where arg0, arg1, and so on correspond to the values passed to
  execvp() in argv[0], argv[1], and so on.

So it's the same for system(3), for the env utility, for awk's
system(), for vi/ex's :! and so on.

Basically, if the system returns ENOEXE for a file that has
execution permissions and if the file doesn't start with #!,
then it's a shell script. If the file starts with #!, the
behavior is unspecified.

-- 
Stéphane

