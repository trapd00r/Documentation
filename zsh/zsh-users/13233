From zsh-users-return-13233-mason-zsh=primenet.com.au@sunsite.dk Thu Sep 18 02:54:08 2008
Return-Path: <zsh-users-return-13233-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24446 invoked from network); 18 Sep 2008 02:54:06 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,HTML_MESSAGE
	autolearn=ham version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 18 Sep 2008 02:54:06 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 7425 invoked from network); 18 Sep 2008 02:53:44 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 18 Sep 2008 02:53:44 -0000
Received: (qmail 12417 invoked by alias); 18 Sep 2008 02:53:10 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13233
Received: (qmail 12405 invoked from network); 18 Sep 2008 02:53:10 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 18 Sep 2008 02:53:10 -0000
Received: from wa-out-1112.google.com (wa-out-1112.google.com [209.85.146.182])
	by bifrost.dotsrc.org (Postfix) with ESMTP id C8FBC802720D
	for <zsh-users@sunsite.dk>; Thu, 18 Sep 2008 04:53:06 +0200 (CEST)
Received: by wa-out-1112.google.com with SMTP id v27so2249270wah.21
        for <zsh-users@sunsite.dk>; Wed, 17 Sep 2008 19:53:04 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to
         :subject:mime-version:content-type;
        bh=WT4cXYv6g7IyW/YdRcQBxm2C264otbDogHJJUAwHQPU=;
        b=CqKaOK2CzgGfLx1HIYn1o0srFCLA63mNCV2Am4ADEKVD3+EracJvjrtRW7v+9tRcgd
         LIrU4YGTx86y+2FgZePCGnWN6Hw7PrVwLBpqaKcR6RHQkwD+7Ts5yFDbbqu+r9G02ofA
         +QDezGeggNp5gRlWCtEpGJZ/DSlbiF/OEp7cA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:mime-version:content-type;
        b=T5ufsc8G1xE+CWjKvA/eOgp6bUUXo/PqsrD0pwlIg1kWFL3RG9dMJ5x7otSCUaNvbN
         zuv9esc3Gos7PtzYIxoPHhitSOr3nIgz1eTmzVWWs4TKl29RXeKWTZyu6rduqYpZMKjM
         03QDrkbVuR3Bd0/hTOUMCppa1bvG+Jm44YwkQ=
Received: by 10.115.23.19 with SMTP id a19mr3039654waj.133.1221706384821;
        Wed, 17 Sep 2008 19:53:04 -0700 (PDT)
Received: by 10.114.159.2 with HTTP; Wed, 17 Sep 2008 19:53:04 -0700 (PDT)
Message-ID: <6cd6de210809171953pd956d75gd4b3609ac036fe0@mail.gmail.com>
Date: Wed, 17 Sep 2008 22:53:04 -0400
From: "Rocky Bernstein" <rocky.bernstein@gmail.com>
To: "zsh users mailing list" <zsh-users@sunsite.dk>
Subject: reading a file into an array. mapfile? (f)?
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_9905_13316320.1221706384811"
X-Virus-Scanned: ClamAV 0.92.1/8275/Thu Sep 18 03:16:55 2008 on bifrost
X-Virus-Status: Clean

------=_Part_9905_13316320.1221706384811
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

I'd like to a read a file (a zsh script file) into an array fast. It is not
uncommon for a GNU autoconf configure script to be tens of thousands of
lines long.  (The zsh configure script is over 20,000 lines long).

I know about redirecting input in a loop or alternatively using "read" in a
loop. For a large file this will tend to be slow. I also know about mapfile
which reads the file and turns it into a single long zsh string. Question:
if the underlying file changes, what does mapfile do? Update its data? Keep
the original? Show something which is indeterminant?

There is also the zsh parameter expansion operator (f) "a shorthand for
'pws:\n:'". But I don't see how to use that with either  mapfile or input
redirection to save this into an array variable short of putting this in a
loop, in which case it  probably would then be no better (faster or more
efficient) then doing it without the expansion operator.

One last possibility is to write a module to do what I want possibly
building on mapfile. Basically this is what was done in bashdb's readarray
(aka bash 4.0's mapfile).

Thoughts? Comments?

Thanks.

------=_Part_9905_13316320.1221706384811
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

<div dir="ltr">I&#39;d like to a read a file (a zsh script file) into an array fast. It is not uncommon for a GNU autoconf configure script to be tens of thousands of lines long.&nbsp; (The zsh configure script is over 20,000 lines long).<br>
<br>I know about redirecting input in a loop or alternatively using &quot;read&quot; in a loop. For a large file this will tend to be slow. I also know about mapfile which reads the file and turns it into a single long zsh string. Question: if the underlying file changes, what does mapfile do? Update its data? Keep the original? Show something which is indeterminant? <br>
<br>There is also the zsh parameter expansion operator (f) &quot;a shorthand for 'pws:\n:'&quot;. But I don&#39;t see how to use that with either&nbsp; mapfile or input redirection to save this into an array variable short of putting this in a loop, in which case it&nbsp; probably would then be no better (faster or more efficient) then doing it without the expansion operator.<br>
<br>One last possibility is to write a module to do what I want possibly building on mapfile. Basically this is what was done in bashdb&#39;s readarray (aka bash 4.0&#39;s mapfile).<br><br>Thoughts? Comments? <br><br>Thanks.<br>
<br></div>

------=_Part_9905_13316320.1221706384811--

