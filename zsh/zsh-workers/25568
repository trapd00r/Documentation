From zsh-workers-return-25568-mason-zsh=primenet.com.au@sunsite.dk Sun Aug 31 13:24:07 2008
Return-Path: <zsh-workers-return-25568-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 20399 invoked from network); 31 Aug 2008 13:24:04 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 31 Aug 2008 13:24:04 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 61384 invoked from network); 31 Aug 2008 13:23:58 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 31 Aug 2008 13:23:58 -0000
Received: (qmail 16009 invoked by alias); 31 Aug 2008 13:23:53 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 25568
Received: (qmail 15993 invoked from network); 31 Aug 2008 13:23:51 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 31 Aug 2008 13:23:51 -0000
Received: from mtaout02-winn.ispmail.ntl.com (mtaout02-winn.ispmail.ntl.com [81.103.221.48])
	by bifrost.dotsrc.org (Postfix) with ESMTP id BF2C4801E2B4
	for <zsh-workers@sunsite.dk>; Sun, 31 Aug 2008 15:23:48 +0200 (CEST)
Received: from aamtaout03-winn.ispmail.ntl.com ([81.103.221.35])
          by mtaout02-winn.ispmail.ntl.com with ESMTP
          id <20080831132347.LMZN21103.mtaout02-winn.ispmail.ntl.com@aamtaout03-winn.ispmail.ntl.com>
          for <zsh-workers@sunsite.dk>; Sun, 31 Aug 2008 14:23:47 +0100
Received: from pws-pc ([81.107.43.40]) by aamtaout03-winn.ispmail.ntl.com
          with ESMTP
          id <20080831132347.LNLM29597.aamtaout03-winn.ispmail.ntl.com@pws-pc>
          for <zsh-workers@sunsite.dk>; Sun, 31 Aug 2008 14:23:47 +0100
Date: Sun, 31 Aug 2008 14:23:39 +0100
From: Peter Stephenson <p.w.stephenson@ntlworld.com>
To: Zsh Hackers' List <zsh-workers@sunsite.dk>
Subject: Re: "continue -1" confuses zsh
Message-ID: <20080831142339.300a0003@pws-pc>
In-Reply-To: <20080830192535.GR6330@fsst.voodoo.lan>
References: <430425.47097.qm@web36802.mail.mud.yahoo.com>
	<20080830191228.GQ6330@fsst.voodoo.lan>
	<20080830192535.GR6330@fsst.voodoo.lan>
X-Mailer: Claws Mail 3.5.0 (GTK+ 2.12.11; x86_64-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: ClamAV 0.92.1/8122/Sun Aug 31 03:04:56 2008 on bifrost
X-Virus-Status: Clean

On Sat, 30 Aug 2008 21:25:35 +0200
Frank Terbeck <ft@bewatermyfriend.org> wrote:
> > I don't know what the actual reason for this reaction is, but:
> > 
> > As per SUSv3 for break and continue:
> > 
> > EXIT STATUS
> >     0  Successful completion.
> >    >0  The n value was not an unsigned decimal integer greater than or
> >        equal to 1.

(Moved to zsh-workers.)

Thanks, although I think we might take the opportunity to be compatible
and actually raise an error (with a message) on an invalid loop
counter, which will also pick up any ocurrences of "continue 0" that
previously would have been ignored with status 0.

I've added a few basic tests for control commands, too.

Index: Src/builtin.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/builtin.c,v
retrieving revision 1.202
diff -u -r1.202 builtin.c
--- Src/builtin.c	7 Aug 2008 16:25:16 -0000	1.202
+++ Src/builtin.c	31 Aug 2008 13:19:00 -0000
@@ -4443,6 +4443,11 @@
 	nump = 1;
     }
 
+    if (nump > 0 && (func == BIN_CONTINUE || func == BIN_BREAK) && num <= 0) {
+	zerrnam(name, "argument is not positive: %d", num);
+	return 1;
+    }
+
     switch (func) {
     case BIN_CONTINUE:
 	if (!loops) {   /* continue is only permitted in loops */
Index: Test/.distfiles
===================================================================
RCS file: /cvsroot/zsh/zsh/Test/.distfiles,v
retrieving revision 1.22
diff -u -r1.22 .distfiles
--- Test/.distfiles	11 Aug 2008 19:22:54 -0000	1.22
+++ Test/.distfiles	31 Aug 2008 13:19:02 -0000
@@ -7,6 +7,7 @@
 A04redirect.ztst
 A05execution.ztst
 A06assign.ztst
+A07control.ztst
 B01cd.ztst
 B02typeset.ztst
 B03print.ztst
Index: Test/A07control.ztst
===================================================================
RCS file: Test/A07control.ztst
diff -N Test/A07control.ztst
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ Test/A07control.ztst	31 Aug 2008 13:19:02 -0000
@@ -0,0 +1,112 @@
+# Test control commands for loops and functions.
+
+%test
+
+  fn3() { return $1; print Error }
+  fn2() { fn3 $1 }
+  fn() {
+    print start $1
+    fn2 $1
+    return
+    print Error
+  }
+  for val in -1 0 1 255; do
+    fn $val; print $?
+  done
+0:Passing of return values back through functions
+>start -1
+>-1
+>start 0
+>0
+>start 1
+>1
+>start 255
+>255
+
+  fn() {
+    continue
+  }
+  fn
+1:continue outside loop
+?fn:continue:1 not in while, until, select, or repeat loop
+
+  for outer in 0 1 2 3; do
+    print outer $outer
+    for inner in 0 1 2 3; do
+      print inner $inner
+      continue $(( (outer & 1) ? 2 : 1 ))
+      print error
+    done
+    print outer end
+  done
+0:continue with valid argument
+>outer 0
+>inner 0
+>inner 1
+>inner 2
+>inner 3
+>outer end
+>outer 1
+>inner 0
+>outer 2
+>inner 0
+>inner 1
+>inner 2
+>inner 3
+>outer end
+>outer 3
+>inner 0
+
+  for outer in 0 1; do
+    continue 0
+    print -- $outer got here, status $?
+  done
+1:continue error case 0
+?(eval):continue:2: argument is not positive: 0
+
+  for outer in 0 1; do
+    continue -1
+    print -- $outer got here, status $?
+  done
+1:continue error case -1
+?(eval):continue:2: argument is not positive: -1
+
+  fn() {
+    break
+  }
+  for outer in 0 1; do
+    print $outer
+    fn
+  done
+0:break from within function (this is a feature, I disovered)
+>0
+
+  for outer in 0 1 2 3; do
+    print outer $outer
+    for inner in 0 1 2 3; do
+      print inner $inner
+      break $(( (outer & 1) ? 2 : 1 ))
+      print error
+    done
+    print outer end
+  done
+0:break with valid argument
+>outer 0
+>inner 0
+>outer end
+>outer 1
+>inner 0
+
+  for outer in 0 1; do
+    break 0
+    print -- $outer got here, status $?
+  done
+1:break error case 0
+?(eval):break:2: argument is not positive: 0
+
+  for outer in 0 1; do
+    break -1
+    print -- $outer got here, status $?
+  done
+1:break error case -1
+?(eval):break:2: argument is not positive: -1


-- 
Peter Stephenson <p.w.stephenson@ntlworld.com>
Web page now at http://homepage.ntlworld.com/p.w.stephenson/

