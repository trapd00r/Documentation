From zsh-users-return-15002-mason-zsh=primenet.com.au@zsh.org Sun Apr 11 15:47:39 2010
Return-Path: <zsh-users-return-15002-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 20474 invoked by alias); 11 Apr 2010 15:47:38 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15002
Received: (qmail 13201 invoked from network); 11 Apr 2010 15:47:25 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,SPF_HELO_PASS
	autolearn=ham version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at m.gmane.org designates 80.91.229.12 as permitted sender)
X-Injected-Via-Gmane: http://gmane.org/
To: zsh-users@zsh.org
From: Thorsten Kampe <thorsten@thorstenkampe.de>
Subject: Re: How to iterate over lines cross-platform
Date: Sun, 11 Apr 2010 17:47:09 +0200
Lines: 30
Message-ID: <hpsqtu$n84$1@dough.gmane.org>
References: <hpqcvj$avi$1@dough.gmane.org> <100410130524.ZM17378@torch.brasslantern.com>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Complaints-To: usenet@dough.gmane.org
X-Gmane-NNTP-Posting-Host: nat.scz.novell.com
User-Agent: MicroPlanet-Gravity/2.9.14

* Bart Schaefer (Sat, 10 Apr 2010 13:05:24 -0700)
> On Apr 10,  7:36pm, Thorsten Kampe wrote:
> } How can I iterate over lines of output when I don't know in advance 
> } whether the line endings will be DOS or Unix?!
> 
> You might have better luck if you do not change IFS from the default,
> and use this:
> 
> slptool findscopes |
> while read scope; do
>     slptool -s "$scope" findsrvtypes |
>     while read srvtype; do
>         [inner loop]
>     done
> done

Actually modifying IFS is not necessary (shame on me for the confusion).
 
> It should be the case that "read" does the right thing with line ends.
> 
> } The reason is that the slptool on Windows is a native Win32 
> } application that outputs lines with "\r\n" endings (and not "\n").
> 
> I believe this means that "$scope" has a trailing "\r" and therefore
> slptool -s "$scope" doesn't find a matching scope.  If it turns out
> that "read" also mishandles things, use ${scope%$'\r'} to trim.

I didn't try "read" but "%$'\r'" does the "trick".

Thanks, Thorsten

