From zsh-workers-return-15349-mason-zsh=primenet.com.au@sunsite.dk Mon Jul 09 21:34:31 2001
Return-Path: <zsh-workers-return-15349-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 19509 invoked from network); 9 Jul 2001 21:34:29 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 9 Jul 2001 21:34:29 -0000
Received: (qmail 11759 invoked by alias); 9 Jul 2001 21:34:18 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 15349
Received: (qmail 11727 invoked from network); 9 Jul 2001 21:34:18 -0000
To: David Korn <dgk@research.att.com>,
	zsh-workers@sunsite.auc.dk (Zsh hackers list)
Subject: Re: Proposal to standardize the shell 
In-reply-to: "David Korn"'s message of "Mon, 09 Jul 2001 15:42:22 EDT."
             <200107091942.PAA93250@raptor.research.att.com> 
Date: Mon, 09 Jul 2001 23:35:45 +0100
From: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Message-Id: <20010709223550.73E8514283@pwstephenson.fsnet.co.uk>

David Korn wrote:
> I would like to see if it is possible to come up with an enhanced
> shell standard that could be met by at least ksh, bash, and zsh.

We're definitely interested in tracking standards.

A big question in our case is how to start up the shell in a way which
enforces compliance; zsh has been a bit wayward right from the start and
it's too late to change that now.  So I'd be interested in some common
command such as a version of our `emulate' command, e.g. with the argument
`emulate posix' or `emulate enhanced' if we can come up with an enhanced
version of it to ensure whatever shell you're in is likely to be as
receptive as possible.  No doubt this is less important for ksh and bash
which have been designed from the ground up with this sort of thing in
mind, but it would go a long way towards making scripts shareable in a
simple way.

Quite what degree of compatibility is possible between the more advanced
features I really don't know, but it's worth thinking about.  We've been
treating ksh93 as a sort of de facto standard for some of the advanced
features, though there's still quite a lot of that missing and (according
to my reading of Oliver Kiddle's post to zsh-workers just now) some of it
appears to be incompatible.

In interactive features, there might be something we do with simple things
like key binding syntax, for example.  I doubt if it'll go much deeper than
that; it depends too much on the implementation of the line editor, which
I'm sure is very different in each case.

So this could well be a big can of worms, but I'm sure there's plenty to
talk about.

-- 
Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Work: pws@csr.com
Web: http://www.pwstephenson.fsnet.co.uk

