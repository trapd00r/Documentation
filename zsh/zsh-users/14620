From zsh-users-return-14620-mason-zsh=primenet.com.au@zsh.org Tue Dec 01 05:47:18 2009
Return-Path: <zsh-users-return-14620-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 21841 invoked by alias); 1 Dec 2009 05:47:18 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14620
Received: (qmail 5055 invoked from network); 1 Dec 2009 05:47:15 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: pass (ns1.primenet.com.au: SPF record at sergio.spb.ru designates 194.58.105.39 as permitted sender)
Message-ID: <4B14AAA3.3090609@sergio.spb.ru>
Date: Tue, 01 Dec 2009 08:33:23 +0300
From: sergio <mailbox@sergio.spb.ru>
User-Agent: Mozilla-Thunderbird 2.0.0.22 (X11/20090701)
MIME-Version: 1.0
To: Zsh list <zsh-users@zsh.org>
Subject: killall completion
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit

Hello.

At first I wanted to improve killall process listing for sudo and 
privilege mode. But then I've decided to write own killall compdef.

It's my first compdef, so I have some problems.

I don't understand how to make completion for processes list and signals 
  in one _arguments.

This code almost works, but processes are not completed after -SIGNAL.
Also -s or --signal should not be offered if -SIGNAL presents and vice 
versa. May be there are other trouble, but I don't see it.

Also it will be great to do this comdef compatible with non gnu.

I would like to improve this completion so, that it will be possible to 
include it in zsh source, please help me.


#compdef killall

local curcontext="$curcontext" line state ret=1
local all
all=$( (( ${funcstack[(eI)$_comps[sudo]]} || ${(%):-%(!.1.0)} )) && echo 
-n a )

_processes_names()
{
     compadd "$expl[@]" ${${(f)"$(_call_program processes-names ps 
${all}xho comm 2> /dev/null)"}:#ps}
}
_users()
{
     compadd "$expl[@]" ${${(f)"$(_call_program users ps ${all}xho user 
2> /dev/null)"}:#ps}
}
_groups()
{
     compadd "$expl[@]" ${${(f)"$(_call_program groups ps ${all}xho 
group 2> /dev/null)"}:#ps}
}

_arguments -C\
     - set1 \
	'::processes-names:_processes_names' \
         ':signals:_signals -p -s' \
         '(-e --exact)'{-e,--exact}'[require exact match for very long 
names]' \
         '(-I --ignore-case)'{-I,--ignore-case}'[case insensitive 
process name match]' \
         '(-g --process-group)'{-g,--process-group}'[kill process group 
instead of process]:groups:_groups' \
         '(-i --interactive)'{-i,--interactive}'[ask for confirmation 
before killing]' \
         '(-q --quiet)'{-q,--quiet}"[don't print complaints]" \
         '(-r --regexp)'{-r,--regexp}'[interpret process name as an 
extended regexp]' \
         '(-s --signal)'{-s,--signal}'[send this signal instead of 
SIGTERM]:signals:_signals -s' \
         '(-u --user)'{-u,--user}'[kill only process(es) the specified 
user owns]:users:_users' \
         '(-v --verbose)'{-v,--verbose}'[report if the signal was 
successfully sent]' \
         '(-w --wait)'{-w,--wait}'[wait for processes to die]' \
         '(-Z --context)'{-Z,--context}'[(SELinux only) specify security 
context]' \
     - set2 \
         '(-l --list)'{-l,--list}'[list all known signal names]' \
     - set3 \
         '(-V --version)'{-V,--version}'[display version information]' 
&& ret=0

return ret


--
sergio.

