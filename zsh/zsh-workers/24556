From zsh-workers-return-24556-mason-zsh=primenet.com.au@sunsite.dk Fri Feb 15 23:56:27 2008
Return-Path: <zsh-workers-return-24556-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 7427 invoked from network); 15 Feb 2008 23:56:22 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 15 Feb 2008 23:56:22 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 50644 invoked from network); 15 Feb 2008 23:54:24 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 15 Feb 2008 23:54:24 -0000
Received: (qmail 12242 invoked by alias); 15 Feb 2008 23:54:21 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 24556
Received: (qmail 12225 invoked from network); 15 Feb 2008 23:54:20 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 15 Feb 2008 23:54:20 -0000
Received: from mtaout02-winn.ispmail.ntl.com (mtaout02-winn.ispmail.ntl.com [81.103.221.48])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 81DD980482A3
	for <zsh-workers@sunsite.dk>; Sat, 16 Feb 2008 00:54:17 +0100 (CET)
Received: from aamtaout02-winn.ispmail.ntl.com ([81.103.221.35])
          by mtaout02-winn.ispmail.ntl.com with ESMTP
          id <20080215235608.DSBF27871.mtaout02-winn.ispmail.ntl.com@aamtaout02-winn.ispmail.ntl.com>
          for <zsh-workers@sunsite.dk>; Fri, 15 Feb 2008 23:56:08 +0000
Received: from pws-pc ([81.107.42.63]) by aamtaout02-winn.ispmail.ntl.com
          with ESMTP
          id <20080215235534.XYCE17393.aamtaout02-winn.ispmail.ntl.com@pws-pc>
          for <zsh-workers@sunsite.dk>; Fri, 15 Feb 2008 23:55:34 +0000
Date: Fri, 15 Feb 2008 23:52:41 +0000
From: Peter Stephenson <p.w.stephenson@ntlworld.com>
To: Zsh Hackers' List <zsh-workers@sunsite.dk>
Subject: Fw: Phil's prompt is not working when LANG is set to UTF-8
Message-ID: <20080215235241.2f255730@pws-pc>
X-Mailer: Claws Mail 3.2.0 (GTK+ 2.12.5; x86_64-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Cloudmark-Analysis: v=1.0 c=1 a=Rw7lO6RaNG4A:15 a=O2jvIn76sjsA:10 a=3FTp5y5X6ml6ZCsPBftHHg==:17 a=4m3bzpBgAAAA:8 a=NLZqzBF-AAAA:8 a=uK_a7ROyvoQ3jEoBbQEA:9 a=WE8CI_OLRHoEbHxrPpUA:7 a=sz2Oh77DC-2S7fmV12uRkHZvhogA:4 a=_dQi-Dcv4p4A:10 a=LY0hPdMaydYA:10
X-Virus-Scanned: ClamAV 0.91.2/5833/Fri Feb 15 20:30:30 2008 on bifrost
X-Virus-Status: Clean

On Fri, 15 Feb 2008 22:55:58 +0300
Andrey Borzenkov <arvidjaar@newmail.ru> wrote:
> On Friday 15 February 2008, Andrey Borzenkov wrote:  
> > The actual prompt lengths are (see screenshot)
> > 
> > lpromptw = 13
> > rptomptw = 16 (it has one space in it)
> > 
> > this perfectly correspnds to something (zsh?) ignoring invalid characters
> > with high bit set.  
> 
> For sure.
> 
> Src/prompt.c:countprompt()
> 
>             case MB_INVALID:
>                 memset(&mbs, 0, sizeof mbs);
>                 /* FALL THROUGH */
>             case 0:
>                 /* Invalid character or null: assume no output. */
>                 multi = 0;
>                 break;
> 
> Oops.
> 
> I do not actually see how can we fix it except introducing prompt
> expansion syntax for ACS (or may be for any terminfo sequence in general)
> and simply assuming characters in any of them are of width 1.  

Thanks for looking.  I think I've now roughly caught up; tell me if I'm
mistaken.

- Both terminal and shell start correctly in UTF-8 mode.
- However, Phil's prompt (http://aperiodic.net/phil/prompt/) uses
  the Alternative Character Set by appropriate terminfo trickery.
- The ACS is an old-fashioned grungy VT100 thing from the days
  when nobody had heard of multibyte character sets.
- Hence it falls foul of the multibyte tests.  In principle it
  might clash with a UTF-8 character anyway and have the wrong
  width, so assuming a width 1 for an unknown character is not
  necessarily better than assuming width 0.
- Anyway, assumptions are best avoided if possible.
- Nobody is worrying about editing the ACS, only using it in prompts,
  so a prompt-specific fix is fine.  (Editing with ACS would be
  stupid since the glyphs on the screen wouldn't actually reflect what
  the bytes meant to any programme to which they got fed, right?)

How about the following tweak to prompts to support this?  The upshot is
that you include any funny characters in %{...%G%} where the %G for
`glitch' (which may be repeated or take a numeric argument) indicates a
screen cell taken up by the sequence.  I like this because it uses
facilities that have been present in the shell for a long time and hence
was trivial to implement and might work.

I played with this in simple cases, but would anybody like to confirm
this works in the cases that matter (and maybe produce an updated Phil's
Prompt)?  To put it another way:  I am happy to support this fix but
have no interest in doing anything with it myself.

I think this is clean and useful enough that I will commit it anyway.

Index: Doc/Zsh/prompt.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/prompt.yo,v
retrieving revision 1.9
diff -u -r1.9 prompt.yo
--- Doc/Zsh/prompt.yo	29 Jan 2008 17:51:02 -0000	1.9
+++ Doc/Zsh/prompt.yo	15 Feb 2008 23:34:06 -0000
@@ -188,6 +188,18 @@
 The string within the braces should not change the cursor
 position.  Brace pairs can nest.
 )
+item(tt(%G))(
+Within a tt(%{)...tt(%}) sequence, include a `glitch': that is, assume
+that a single character width will be output.  This is useful when
+outputting characters that otherwise cannot be correctly handled by the
+shell, such as the alternate character set on some terminals.
+The characters in question can be included within a tt(%{)...tt(%})
+sequence together with the appropriate number of tt(%G) sequences to
+indicate the correct width.  An integer between the `tt(%)' and `tt(G)'
+indicates a character width other than one.  Hence tt(%{)var(seq)tt(%2G%})
+outputs var(seq) and assumes it takes up the width of two standard
+characters.
+)
 enditem()
 
 sect(Conditional Substrings in Prompts)
Index: Src/prompt.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/prompt.c,v
retrieving revision 1.44
diff -u -r1.44 prompt.c
--- Src/prompt.c	20 Nov 2007 09:55:10 -0000	1.44
+++ Src/prompt.c	15 Feb 2008 23:34:06 -0000
@@ -473,6 +473,16 @@
 		    *bp++ = Inpar;
 		}
 		break;
+	    case 'G':
+		if (arg > 0) {
+		    addbufspc(arg);
+		    while (arg--)
+			*bp++ = Nularg;
+		} else {
+		    addbufspc(1);
+		    *bp++ = Nularg;
+		}
+		break;
 	    case /*{*/ '}':
 		if (trunccount && trunccount >= dontcount)
 		    return *fm;


-- 
Peter Stephenson <p.w.stephenson@ntlworld.com>
Web page now at http://homepage.ntlworld.com/p.w.stephenson/

