From zsh-users-return-13237-mason-zsh=primenet.com.au@sunsite.dk Thu Sep 18 10:05:08 2008
Return-Path: <zsh-users-return-13237-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1764 invoked from network); 18 Sep 2008 10:04:53 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,HTML_MESSAGE
	autolearn=ham version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 18 Sep 2008 10:04:53 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 29706 invoked from network); 18 Sep 2008 10:04:23 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 18 Sep 2008 10:04:23 -0000
Received: (qmail 26601 invoked by alias); 18 Sep 2008 10:03:49 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13237
Received: (qmail 26585 invoked from network); 18 Sep 2008 10:03:48 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 18 Sep 2008 10:03:48 -0000
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.229])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 2DD2780308BB
	for <zsh-users@sunsite.dk>; Thu, 18 Sep 2008 12:03:40 +0200 (CEST)
Received: by rv-out-0506.google.com with SMTP id g37so3269416rvb.21
        for <zsh-users@sunsite.dk>; Thu, 18 Sep 2008 03:03:38 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to
         :subject:cc:in-reply-to:mime-version:content-type:references;
        bh=kjeHrbgmCvkudozClWS9FNrpnZv7Ehjw5mbcFQiNu6w=;
        b=fwmK+Er8sfgFShdKA7BTuqVaa2ZWkKnDfygezUxNSVDDABvuFd4CaB2XGEdl/w37Tw
         /8G6F+ko/OjrzOpUxW0hlPPDxI7HR7cYY8wz3z3618ZhaE8GyOFHyY+OI2aN9562Zcto
         rqeahvVmIcsKtBIqfx935GELcfWYwPx3NuCPU=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:cc:in-reply-to:mime-version
         :content-type:references;
        b=HkP+9lywi3n1bAsPDfvJypBmwy1fPgxath3tK1d1XXLK8Z5GUihYLedi89PO7ys+AH
         SR9VV3GZF/SA7J0NI/ZNjXd1mcTBFMlSlexKTpJIMGgXvA2xZmfdKphWuiDvBc7DJMq8
         Mb+Jj07LMNVtr/dfSvywcVnnNxiT4yZ6iplC0=
Received: by 10.114.205.1 with SMTP id c1mr2498434wag.56.1221732218434;
        Thu, 18 Sep 2008 03:03:38 -0700 (PDT)
Received: by 10.114.159.2 with HTTP; Thu, 18 Sep 2008 03:03:38 -0700 (PDT)
Message-ID: <6cd6de210809180303n24e8aac7x29f8cabba1c7a74c@mail.gmail.com>
Date: Thu, 18 Sep 2008 06:03:38 -0400
From: "Rocky Bernstein" <rocky.bernstein@gmail.com>
To: "Bart Schaefer" <schaefer@brasslantern.com>
Subject: Re: reading a file into an array. mapfile? (f)?
Cc: "zsh users mailing list" <zsh-users@sunsite.dk>
In-Reply-To: <080917214418.ZM27616@torch.brasslantern.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_11906_10726797.1221732218407"
References: <6cd6de210809171953pd956d75gd4b3609ac036fe0@mail.gmail.com>
	 <080917214418.ZM27616@torch.brasslantern.com>
X-Virus-Scanned: ClamAV 0.92.1/8277/Thu Sep 18 10:36:44 2008 on bifrost
X-Virus-Status: Clean

------=_Part_11906_10726797.1221732218407
Content-Type: text/plain; charset=ISO-2022-JP
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Thanks! Works great.

Using mapfile and (f) on zsh's configure script takes 0.189s (which includes
loading zsh and mapfile) while doing this via a read loop takes over a
minute.

Given this, I find this wording in  zshmodules a little misleading:

       Thus  it should not automatically be assumed that use of mapfile
repre‐
       sents a gain in efficiency over use of other mechanisms.

Ok. I won't assume it; I will just make use of its speedup over a read loop.

Before posting I tried googling for this and didn't turn up anything. Since
this is so simple and I think common (perhaps more common that the case
where one a file as a single long string) possibly this might be mentioned
in the mapfile doc?

I sort of agree with this comment in zshmodules:
       It  is  unfortunate that the mechanism for loading modules does not
yet
       allow the user to specify the name of the shell parameter to  be
given
       the special behaviour.

Here's how it is done in Ruby which is extremely simple: if there is an
associative array SCRIPT_LINES__ defined file lines are saved into this
array when it reads a file. So translating to zsh-speak:

  typeset -A SCRIPT_LINES___
turns on saving file lines and
  unset SCRIPT_LINES__
turns it off. (It's off by default.)

At any rate, I guess I no longer have an excuse for implementing file
listing in zshdb, so I guess that's next up.

Any thoughts on how to get checksum information? I can shell out to "sum" or
"md5sum". But given I have the file data as a string if there is a solution
usesi zsh only, that is preferable.


On Thu, Sep 18, 2008 at 12:44 AM, Bart Schaefer
<schaefer@brasslantern.com>wrote:

> On Sep 17, 10:53pm, Rocky Bernstein wrote:
> } Subject: reading a file into an array. mapfile? (f)?
> }
> } I'd like to a read a file (a zsh script file) into an array fast.
>
> Ending up with what, one line per array entry?  I'm guessing so since
> you mention the (f) expansion flag.
>
> } [...] I also know about mapfile which reads the file and turns it
> } into a single long zsh string. Question: if the underlying file
> } changes, what does mapfile do? Update its data? Keep the original?
> } Show something which is indeterminant?
>
> When you reference a hash key in the mapfile hash, zsh calls mmap()
> to access the file contents, but immediately allocates enough memory
> to contain the data and copies into it.  The file is then unmapped.
> This is done because parameter values are stored with zsh's internal
> "metafication" already applied, and it's obviously not possible to
> metafy the file in place.
>
> If the file is modified during the brief period when zsh has it mapped
> and is copying it, you could get indeterminate results.  It probably
> depends on the system's mmap() implementation.  After the file has been
> copied, zsh no longer pays attention to it.
>
> If you assign a value to a field in the mapfile hash, zsh attempts
> to mmap() the the corresponding disk file for writing, and whatever
> you assigned replaces the file contents by way of msync().  You can
> (I think) assign to slices of the file, but nothing magical is done,
> so the entire file is rewritten unless the msync() implementation is
> clever.
>
> } There is also the zsh parameter expansion operator (f) "a shorthand
> } for 'pws:\n:'". But I don't see how to use that with either mapfile or
> } input redirection to save this into an array variable short of putting
> } this in a loop
>
> It's much simpler than you seem to believe:
>
> lines=( ${(f)mapfile[/path/to/file]} )
>
> Splitting up /etc/termcap this way (17890 lines on my system) takes
> a little less than 0.08 seconds on my 3GHz Pentium 4.  Fully parsing
> termcap into "shell words" with (z) takes about 0.13 seconds.  For
> /usr/share/dict/words (479829 lines), (f) takes about 0.8 seconds but
> (z) takes almost 13 seconds.
>
>

------=_Part_11906_10726797.1221732218407
Content-Type: text/html; charset=ISO-2022-JP
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

<div dir="ltr">Thanks! Works great.<br><br>Using mapfile and (f) on zsh&#39;s configure script takes 0.189s (which includes loading zsh and mapfile) while doing this via a read loop takes over a minute.<br><br>Given this, I find this wording in&nbsp; zshmodules a little misleading:<br>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thus&nbsp; it should not automatically be assumed that use of mapfile repre‐<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sents a gain in efficiency over use of other mechanisms.&nbsp; <br><br>Ok. I won&#39;t assume it; I will just make use of its speedup over a read loop.<br>
<br>Before posting I tried googling for this and didn&#39;t turn up anything. Since this is so simple and I think common (perhaps more common that the case where one a file as a single long string) possibly this might be mentioned in the mapfile doc?<br>
<br>I sort of agree with this comment in zshmodules:<br>&nbsp; &nbsp; &nbsp;&nbsp; It&nbsp; is&nbsp; unfortunate that the mechanism for loading modules does not yet<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; allow the user to specify the name of the shell parameter to&nbsp; be&nbsp; given<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the special behaviour.<br>
<br>Here&#39;s how it is done in Ruby which is extremely simple: if there is an associative array SCRIPT_LINES__ defined file lines are saved into this array when it reads a file. So translating to zsh-speak:<br><br>&nbsp; typeset -A SCRIPT_LINES___<br>
turns on saving file lines and <br>&nbsp; unset SCRIPT_LINES__<br>turns it off. (It&#39;s off by default.) <br><br>At any rate, I guess I no longer have an excuse for implementing file listing in zshdb, so I guess that&#39;s next up.<br>
<br>Any thoughts on how to get checksum information? I can shell out to &quot;sum&quot; or &quot;md5sum&quot;. But given I have the file data as a string if there is a solution usesi zsh only, that is preferable.<br><br><br>
<div class="gmail_quote">On Thu, Sep 18, 2008 at 12:44 AM, Bart Schaefer <span dir="ltr">&lt;<a href="mailto:schaefer@brasslantern.com">schaefer@brasslantern.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
On Sep 17, 10:53pm, Rocky Bernstein wrote:<br>
} Subject: reading a file into an array. mapfile? (f)?<br>
<div class="Ih2E3d">}<br>
} I&#39;d like to a read a file (a zsh script file) into an array fast.<br>
<br>
</div>Ending up with what, one line per array entry? &nbsp;I&#39;m guessing so since<br>
you mention the (f) expansion flag.<br>
<br>
} [...] I also know about mapfile which reads the file and turns it<br>
<div class="Ih2E3d">} into a single long zsh string. Question: if the underlying file<br>
} changes, what does mapfile do? Update its data? Keep the original?<br>
} Show something which is indeterminant?<br>
<br>
</div>When you reference a hash key in the mapfile hash, zsh calls mmap()<br>
to access the file contents, but immediately allocates enough memory<br>
to contain the data and copies into it. &nbsp;The file is then unmapped.<br>
This is done because parameter values are stored with zsh&#39;s internal<br>
&quot;metafication&quot; already applied, and it&#39;s obviously not possible to<br>
metafy the file in place.<br>
<br>
If the file is modified during the brief period when zsh has it mapped<br>
and is copying it, you could get indeterminate results. &nbsp;It probably<br>
depends on the system&#39;s mmap() implementation. &nbsp;After the file has been<br>
copied, zsh no longer pays attention to it.<br>
<br>
If you assign a value to a field in the mapfile hash, zsh attempts<br>
to mmap() the the corresponding disk file for writing, and whatever<br>
you assigned replaces the file contents by way of msync(). &nbsp;You can<br>
(I think) assign to slices of the file, but nothing magical is done,<br>
so the entire file is rewritten unless the msync() implementation is<br>
clever.<br>
<div class="Ih2E3d"><br>
} There is also the zsh parameter expansion operator (f) &quot;a shorthand<br>
} for &#39;pws:\n:&#39;&quot;. But I don&#39;t see how to use that with either mapfile or<br>
} input redirection to save this into an array variable short of putting<br>
} this in a loop<br>
<br>
</div>It&#39;s much simpler than you seem to believe:<br>
<br>
lines=( ${(f)mapfile[/path/to/file]} )<br>
<br>
Splitting up /etc/termcap this way (17890 lines on my system) takes<br>
a little less than 0.08 seconds on my 3GHz Pentium 4. &nbsp;Fully parsing<br>
termcap into &quot;shell words&quot; with (z) takes about 0.13 seconds. &nbsp;For<br>
/usr/share/dict/words (479829 lines), (f) takes about 0.8 seconds but<br>
(z) takes almost 13 seconds.<br>
<br>
</blockquote></div><br></div>

------=_Part_11906_10726797.1221732218407--

