From zsh-users-return-13931-mason-zsh=primenet.com.au@sunsite.dk Sun Mar 15 22:05:30 2009
Return-Path: <zsh-users-return-13931-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23294 invoked from network); 15 Mar 2009 22:05:24 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 15 Mar 2009 22:05:24 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 35415 invoked from network); 15 Mar 2009 22:02:16 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 15 Mar 2009 22:02:16 -0000
Received: (qmail 15207 invoked by alias); 15 Mar 2009 22:01:59 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13931
Received: (qmail 15191 invoked from network); 15 Mar 2009 22:01:58 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 15 Mar 2009 22:01:58 -0000
Received: from vms173011pub.verizon.net (vms173011pub.verizon.net [206.46.173.11])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 4294F80307F8
	for <zsh-users@sunsite.dk>; Sun, 15 Mar 2009 23:01:55 +0100 (CET)
Received: from torch.brasslantern.com ([96.249.201.13])
 by vms173011.mailsrvcs.net
 (Sun Java(tm) System Messaging Server 6.3-7.04 (built Sep 26 2008; 32bit))
 with ESMTPA id <0KGK000C8IIQRG4J@vms173011.mailsrvcs.net> for
 zsh-users@sunsite.dk; Sun, 15 Mar 2009 17:01:44 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id n2FM1bQi005455	for
 <zsh-users@sunsite.dk>; Sun, 15 Mar 2009 15:01:38 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id n2FM1b09005454	for zsh-users@sunsite.dk; Sun,
 15 Mar 2009 15:01:37 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <090315150137.ZM5453@torch.brasslantern.com>
Date: Sun, 15 Mar 2009 15:01:37 -0700
In-reply-to: <20090315205630.GA9446@localhost.Speedport_W_500>
Comments: In reply to iamjay <tyberion@googlemail.com>
 "trouble with vimbindings..." (Mar 15,  9:56pm)
References: <20090315205630.GA9446@localhost.Speedport_W_500>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@sunsite.dk
Subject: Re: trouble with vimbindings...
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii
X-Virus-Scanned: ClamAV 0.92.1/9110/Sun Mar 15 06:06:44 2009 on bifrost
X-Virus-Status: Clean

On Mar 15,  9:56pm, iamjay wrote:
}
} When using vimkeybindings with bindkey -v... and you create a laaaarge
} command like:
} 
} echo foo barfoo barfoo barfoo barfoo barfoo barfoo barfoo bar \
}  foo bar bar barba rbar b barb bar
} 
} and you leave vim's insert mode.. theres no way for me to go to the
} upper line..

This is the way the line editor always works.  When you hit enter
at the end of the First line, the editor finishes and passes the
line to the parser, which finds the backslash and starts up a new
editor for the second line.  (This is true in emacs mode as well.)

So leaving insert mode while editing the second line leaves you in
the same instance of the editor which "contains" only that second
line.

There are several ways to "fix" this.  One would be to override the
accept-line widget so that you never leave the first editor:

    backslash-accept-line() {
      # Consider replacing LBUFFER with BUFFER on the next two
      # lines, depending on your preferred semantics
      if [[ $LBUFFER = *\\ ]]
      then LBUFFER+=$'\n'
      else zle .accept-line "$@"
      fi
    }
    zle -N accept-line backslash-accept-line

The above doesn't handle the general case of multi-line constructs.
For that you need something more violent:

    init-cmd-mode() {
      # Needs adjustment if you otherwise define zle-line-init
      zle -D zle-line-init
      zle .vi-cmd-mode
      zle -R
    }
    vi-cmd-mode() {
      if [[ -n "$PREBUFFER" ]]
      then
        # Needs adjustment if you otherwise define zle-line-init
        zle -N zle-line-init init-cmd-mode
	zle push-line-or-edit
      else
        zle .vi-cmd-mode "$@"
      fi
    }
    zle -N vi-cmd-mode

Using push-line-or-edit effectively says "kill this editor and start
a new one with the entire multi-line command I was working on."  The
init-cmd-mode trick is needed to propagate the last command from the
editor that's being killed, into the new editor that's starting up.

Other solutions are also possible, but I'm not going to try to invent
all of them ...

