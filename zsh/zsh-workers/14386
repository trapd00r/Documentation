From zsh-workers-return-14386-mason-zsh=primenet.com.au@sunsite.dk Fri May 18 17:35:13 2001
Return-Path: <zsh-workers-return-14386-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28173 invoked from network); 18 May 2001 17:35:12 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 18 May 2001 17:35:12 -0000
Received: (qmail 6684 invoked by alias); 18 May 2001 17:35:04 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14386
Received: (qmail 6602 invoked from network); 18 May 2001 17:35:01 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1010518173439.ZM14970@candle.brasslantern.com>
Date: Fri, 18 May 2001 17:34:38 +0000
X-Mailer: Z-Mail (5.0.0 30July97)
To: zsh-workers@sunsite.dk
Subject: PATCH: Icky little array slice assignment bug
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

This appears to date back about a year, roughly to Wayne's change to use
zero-based indexing internally on array subscripts (zsh-workers/11677).

zagzig% a=(x y z)
zagzig% echo $a[(i)q]
4
zagzig% echo $a[(I)q]
0
zagzig% a[(I)q]=W    
zagzig% echo $a
x y W x y z

The following patch fixes it, though I'm not sure it's the best way.

There remains this bug of extremely long standing:

zagzig% a[(r)q]=V
zagzig% echo $a
x y W x y z V		<-- this is ok
zagzig% a[(R)q]=U
zagzig% echo $a
U y W x y z V		<-- this is probably unexpected

That is, there's a phantom element at the right end of an array but not at
the left, so you can "push" but not "unshift" elements -- an attempt to
insert at the beginning of the array clobbers the first element.  We could
special-case an assignment to index zero when ksharrays is not in effect,
but it might be a bit messy.

Index: Src/params.c
===================================================================
--- Src/params.c	2001/05/02 16:59:02	1.6
+++ Src/params.c	2001/05/18 17:13:17
@@ -1721,7 +1721,7 @@
 		 v->pm->nam, 0);
 	    return;
 	}
-	if (v->inv && unset(KSHARRAYS))
+	if (v->inv && unset(KSHARRAYS) && v->start > 0)
 	    v->start--, v->end--;
 	q = old = v->pm->gets.afn(v->pm);
 	n = arrlen(old);

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

Zsh: http://www.zsh.org | PHPerl Project: http://phperl.sourceforge.net   

