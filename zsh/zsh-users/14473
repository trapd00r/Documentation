From zsh-users-return-14473-mason-zsh=primenet.com.au@sunsite.dk Sat Oct 10 09:34:27 2009
Return-Path: <zsh-users-return-14473-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 22252 invoked from network); 10 Oct 2009 09:34:24 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 10 Oct 2009 09:34:24 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 96421 invoked from network); 10 Oct 2009 09:34:10 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 10 Oct 2009 09:34:10 -0000
Received: (qmail 20250 invoked by alias); 10 Oct 2009 09:33:59 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 14473
Received: (qmail 20239 invoked from network); 10 Oct 2009 09:33:59 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 10 Oct 2009 09:33:59 -0000
Received: from mail-px0-f184.google.com (mail-px0-f184.google.com [209.85.216.184])
	by bifrost.dotsrc.org (Postfix) with ESMTP id C417580EB234
	for <zsh-users@sunsite.dk>; Sat, 10 Oct 2009 11:33:51 +0200 (CEST)
Received: by pxi14 with SMTP id 14so8370706pxi.3
        for <zsh-users@sunsite.dk>; Sat, 10 Oct 2009 02:33:49 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type
         :content-transfer-encoding;
        bh=HzZTeEXklK/dsmI3VU3FsZaEcB2aP/blK9SqoxGq+IM=;
        b=Ny7rBkyURuyAxgHYKDgX6PkE00m4o7P1wAwkGd7XDrETl8PNXt0jF41Mnp5eAI2+4F
         MWdbgfG2cy71W6QEGijj1bHBlgC1/Jpo5F0gxwgwJLEXt+IyTJ8HJOAennbZ5/GfWtAP
         TLp7EB8PZe6NpicKkPfu3PnlXqsuG2s/sKAA0=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type:content-transfer-encoding;
        b=qWbad2o2No68uPVGzU9crpJmK1LNFbnKL8T4IhT4mkXRR4nkjFwUuF9i2+wlrC+Ge2
         AUWDBy+XsdvgSZXLli0Nswt9ZB+p23vOcjw1bb2u+cXzoxTny05UtNq0kD/9DtSNf4I4
         rePlhJtaZFCTtlF7yM11x/0Eki83/qAUkmzm0=
MIME-Version: 1.0
Received: by 10.142.60.7 with SMTP id i7mr309821wfa.316.1255167229672; Sat, 10 
	Oct 2009 02:33:49 -0700 (PDT)
In-Reply-To: <544dda350910100053s499c0827yd54408b7f82b696d@mail.gmail.com>
References: <544dda350910092001r28997c41x5ef1ffe2e6d71982@mail.gmail.com>
	 <87ab002aev.fsf@old-tantale.fifi.org>
	 <544dda350910100053s499c0827yd54408b7f82b696d@mail.gmail.com>
Date: Sat, 10 Oct 2009 17:33:49 +0800
Message-ID: <544dda350910100233r6954f653wee358fc568e3a1a8@mail.gmail.com>
Subject: Re: noquote for quotes as in noglob for filename generation?
From: Nazri Ramliy <ayiehere@gmail.com>
To: zsh-users@sunsite.dk
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
X-Virus-Scanned: ClamAV 0.94.2/9880/Sat Oct 10 10:12:28 2009 on bifrost
X-Virus-Status: Clean

On Sat, Oct 10, 2009 at 11:30 AM, Philippe Troin <phil@fifi.org> wrote:
> I don't see why you need eval or noglob here...
> What's wrong with replacing:
>
> =A0 =A0 =A0 =A0sql_command=3D`noglob echo "$@"` =A0 =A0 =A0# Note the nog=
lob!
> =A0 =A0 =A0 =A0eval mysql -u $username -p$password $db "\"$sql\""
>
> with simply:
>
> =A0 =A0 =A0 =A0mysql -u $username -p$password $db "$*"
>
> ?

Nothing's wrong with it and it's actually simpler and better. =A0The two li=
nes
are just old artifacts.

> The mechanism you want is:
>
> =A0${(q)variable} =A0 =A0# Escaped
> =A0${(qq)variable} =A0 # Single quoted
> =A0${(qqq)variable} =A0# Double quoted

Thank you Philippe for the tip (I learned something new). But I don't
think that's what I want here (or maybe I'm just too stupid to see how I
can make use of it to do what I want :)

What I want is for the script to receive the quotes that I gave it from
the command line 'unscathed'.

For example, if I ran:

=A0 =A0$ sql select * from Artist where first_name like 'Michael %'

I want the script to run this:

=A0 =A0mysql -u $user -p$password $db -e "select * from Artist where
first_name like 'Michael %'"

but instead what the script run is:

=A0 =A0mysql -u $user -p$password $db -e "select * from Artist where
first_name like Michael %"

which is wrong in SQL parlance because of the missing quote around "Michael=
 %".

Right now I have to escape the single quotes:

=A0 =A0$ sql select * from Artist where first_name link \'Michael %\'

which is quite cumbersome as it is distracting to my train of thought
when building the sql command.

I'm thinking of doing something in preexec() to achieve this but that
seems a bit overkill for
that single shell script.

While we're on this topic I wonder if it would also possible to do
something similar for
parenthesis as well but that might be asking for too much.

Nazri.

