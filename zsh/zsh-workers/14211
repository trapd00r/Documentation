From zsh-workers-return-14211-mason-zsh=primenet.com.au@sunsite.dk Wed May 02 16:30:44 2001
Return-Path: <zsh-workers-return-14211-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23875 invoked from network); 2 May 2001 16:30:43 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 2 May 2001 16:30:43 -0000
Received: (qmail 2339 invoked by alias); 2 May 2001 16:30:37 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14211
Received: (qmail 2313 invoked from network); 2 May 2001 16:30:36 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1010502163010.ZM15909@candle.brasslantern.com>
Date: Wed, 2 May 2001 16:30:10 +0000
In-Reply-To: <Tc0a88d015346c05e98@mailsweeper01.cambridgesiliconradio.com>
Comments: In reply to Peter Stephenson <pws@csr.com>
        "Re: order of processing in brace expansion" (May  2,  4:28pm)
References: <Tc0a88d015346c05e98@mailsweeper01.cambridgesiliconradio.com>
X-Mailer: Z-Mail (5.0.0 30July97)
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: Re: order of processing in brace expansion
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On May 2,  4:28pm, Peter Stephenson wrote:
}
} This is rather hairy.  The obvious fix is to tokenize braces, too.  This
} seems to do the trick, but the change of behaviour is now much more
} obvious.  We probably ought to make it either all or nothing.  Bash doesn't
} expand braces that result from parameters (probably due to the ordering of
} expansions).  Any suggestions?

I'd prefer that the code and the doc agree with on another.  Doc:

${~SPEC}
     Turn on the GLOB_SUBST option for the evaluation of SPEC; if the
     `~' is doubled, turn it off.  When this option is set, the string
     resulting from the expansion will be interpreted as a pattern
     anywhere that is possible, such as in filename expansion and
     filename generation and pattern-matching contexts ...

GLOB_SUBST <C> <K> <S>
     Treat any characters resulting from parameter expansion as being
     eligible for file expansion and filename generation, and any
     characters resulting from command substitution as being eligible
     for filename generation.

There's no mention of brace expansion there anywhere, and braces are not
expanded in "a pattern" for most senses of "pattern" elsewhere in the doc;
on the other hand, for command substitutions, it's not even supposed to
tokenize a leading `~' or `=', which it obviously does anyway:

zsh% echo $(echo '~')
~
zsh% (setopt glob_subst; echo $(echo '~'))
/home/schaefer

[That latter is definitely a SH_FILE_EXPANSION interaction with GLOB_SUBST;
the GLOB_SUBST doc is describing the case where SH_FILE_EXPANSION is set:

zsh% (setopt glob_subst sh_file_expansion; echo $(echo '~')) 
~

So we have some doc to fix even if we don't change comma/brace behavior.]

As of this moment, my leaning in the "all or nothing" category is towards
"nothing", particularly because of the possibility of breaking sh/bash
compatibility (note that GLOB_SUBST is set by default for sh/ksh emulation).

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

Zsh: http://www.zsh.org | PHPerl Project: http://phperl.sourceforge.net   

