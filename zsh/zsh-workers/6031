From zsh-workers-return-6031-mason-zsh=primenet.com.au@sunsite.auc.dk Wed Apr 14 11:25:38 1999
Return-Path: <zsh-workers-return-6031-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 25473 invoked from network); 14 Apr 1999 11:25:34 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 14 Apr 1999 11:25:34 -0000
Received: (qmail 28389 invoked by alias); 14 Apr 1999 11:25:10 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 6031
Received: (qmail 28382 invoked from network); 14 Apr 1999 11:25:10 -0000
Date: Wed, 14 Apr 1999 13:09:03 +0200 (MET DST)
Message-Id: <199904141109.NAA06214@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: Peter Stephenson's message of Wed, 14 Apr 1999 11:27:22 +0200
Subject: Re: PATCH: compsys.yo


Peter Stephenson wrote:

> I've done some work on the zshcompsys manual page.  You may want to quarrel
> with this.

Thanks! (And as long as we don't have users who tried to understand
what's going on I don't expect this to be the final form anyway.)

And then I saw that... Andrej: have I missed something, or did you
forget to document your changes to `_long_options'?

Bye
 Sven

P.S.: I changed a couple of `#defcomp's to `#compdef's, or will that
      patch not make it into pws-15?

--- od/Zsh/compsys.yo	Wed Apr 14 12:36:24 1999
+++ Doc/Zsh/compsys.yo	Wed Apr 14 13:07:28 1999
@@ -19,7 +19,7 @@
 described in more detail below.
 )
 item(tt(Base))(
-Other functions will you will almost certainly want if you are going to use
+Other functions you will almost certainly want if you are going to use
 any of the standard completion functions.  You may want to edit some of
 these files.
 )
@@ -67,7 +67,7 @@
 
 If the number of completion files changes, tt(compinit) will recognise this
 and produce a new dump file.  However, if the name of a function or the
-arguments in the first line of a tt(#defcomp) funcion (as described below)
+arguments in the first line of a tt(#compdef) funcion (as described below)
 change, it is easiest to delete the dump file by hand so that the next time
 tt(compinit) will re-create it.
 
@@ -80,7 +80,7 @@
 
 The convention for autoloaded functions used in completion is that they
 start with an underscore; as already mentioned, the tt(fpath/FPATH)
-parameter must contain the directory in which the are stored.  When
+parameter must contain the directory in which they are stored.  When
 tt(compinit) is sourced, it searches all such files accessible via
 tt(fpath/FPATH) and reads the first line of each of them.  This line should
 contain one of the tags described below. Files whose first line does not
@@ -142,18 +142,18 @@
 item(tt(compdef -k) [ tt(-a) ] var(function style key-sequences...))(
 The first form tells the completion system to call the given
 var(function) when completing for the contexts or commands
-whose var(names) are given:  this is like the tt(#defcomp) tag.  If the
+whose var(names) are given:  this is like the tt(#compdef) tag.  If the
 tt(-n) option is given, any existing completion behaviour for particular
 contexts or commands will not be altered.  These definitions can be deleted
 by giving the tt(-d) option as in the second form.
 
 The third form is similar to the first, but var(function) will be called
 for all commands whose name matches the var(pattern); this is like the
-tt(#defcomp -p) function tag.
+tt(#compdef -p) function tag.
 
 The fourth form defines a widget with the same name as the var(function)
 which will be called for each of the var(key-sequences); this is like the
-tt(#defcomp -k) tag.  The function should generate the completions needed
+tt(#compdef -k) tag.  The function should generate the completions needed
 and will otherwise behave like the builtin widget whose name is given as
 the var(style) argument. The widgets usable for this are:
 tt(complete-word), tt(delete-char-or-list), tt(expand-or-complete),
@@ -410,7 +410,7 @@
 completer. It allows one to give patterns on the command line and
 to complete all strings metching these patterns from the set of possible
 completions for the context the cursor is in, without having to set
-the tt(GLOB_COMPLETE) options.
+the tt(GLOB_COMPLETE) option.
 
 Normally this will be done by taking the pattern from the line,
 inserting a `tt(*)' at the cursor position and comparing the resulting
@@ -418,7 +418,7 @@
 configuration key tt(match_original) has a value of `tt(only)', no
 `tt(*)' will be inserted. If tt(match_original) has any other non-empty
 string as its value, this completer will first try to generate matches
-first without, then with a `tt(*)' inserted at the cursor position.
+without, then with a `tt(*)' inserted at the cursor position.
 )
 item(tt(_expand))(
 This completer function does not really do completion, but instead
@@ -452,7 +452,7 @@
 item(tt(expand_glob))(
 If this is unset or set to an empty string, globbing will be attempted
 on the word resulting from substitution or the original string. The
-values accepted for this key are the same as for expand_substitute.
+values accepted for this key are the same as for tt(expand_substitute).
 )
 item(tt(expand_menu))(
 If this is unset or set to the empty string, the words resulting from
@@ -635,7 +635,7 @@
 )
 item(tt(_set_options) and tt(_unset_options))(
 These functions complete only set or unset options, with the same
-matching specification used in the tt(_options) functions.
+matching specification used in the tt(_options) function.
 
 Note that you need to uncomment a few lines in the tt(_main_complete)
 function for these functions to work properly. The lines in question

--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

