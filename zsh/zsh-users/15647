From zsh-users-return-15647-mason-zsh=primenet.com.au@zsh.org Thu Dec 09 19:13:01 2010
Return-Path: <zsh-users-return-15647-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 26840 invoked by alias); 9 Dec 2010 19:13:01 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15647
Received: (qmail 23114 invoked from network); 9 Dec 2010 19:12:58 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at noid.net does not designate permitted sender hosts)
X-Mini-Diatribe: To fix America:
	1. Cut government in half
	2. Wait thirty years
	3. Repeat as necessary
From: zsh@noid.net
To: zsh-users@zsh.org
Subject: Re: multiline ZLE w/ bash-like single line .zsh_history...?
In-Reply-To: <101207203433.ZM4335@torch.brasslantern.com>
Message-Id: <20101209191256.07B2A1ED69BB@scythe.noid.net>
Date: Thu,  9 Dec 2010 11:12:56 -0800 (PST)




Thanks for showing me the "zsh way" (very cool!)...

You are right about the "here document" issue.  When I enter a
command that has one, like so:

  cat <<EOF
  one
  two
  EOF

... and then inspect my .zsh_history file, I see:

  cat <<EOF\
  one\
  two\
  EOF

This is not consistent with what the perl version currently looks for.
It thinks a single terminating slash should become ';' in the new
single line version of the command it wants to generate.  For the perl
zsh_cook_history implementation to work, there needs to be special
'<<' handling that triggers an exception to the normal handling of the
terminating '\'.  Without that extra logic, it results in this single
line as output (which is wrong):

  cat <<EOF;one;two;EOF

But maybe the zsh version of zsh_cook_history could be made to handle
it properly with a tweak to (z), as you alluded to previously...  At
the moment, it's results are similarly not correct:

  cat << EOF ; one ; two ; EOF

Because I think the zsh way is better than the perl way, and because
this issue does not really affect my intended use of zsh_cook_history,
I will not bother fixing my perl version but rather just use the zsh
version and be happy.  Should (z) get updated in the future, then
that's a bonus!

As for INTERACTIVE_COMMENTS, I do have that option set, but I'm not
sure how to enter a multiline interactive comment, so unless there is
a method I'm unaware of to do that, it's a non-issue (single line
interactive comments seem OK in both zsh_cook_history implementations).

This will not work as the first line in a multiline w/ interactive
comments:

  echo # comment \

For me, the '#' char effectively turns off the '\' char...

- Tor

PS -

I'm very pleased with my new zsh_cook_history function (that you
provided) and I thank you for your help and expertise!


