From zsh-users-return-7921-mason-zsh=primenet.com.au@sunsite.dk Tue Aug 24 18:23:25 2004
Return-Path: <zsh-users-return-7921-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29262 invoked from network); 24 Aug 2004 18:23:13 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 24 Aug 2004 18:23:13 -0000
Received: (qmail 82295 invoked from network); 24 Aug 2004 18:23:03 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 24 Aug 2004 18:23:03 -0000
Received: (qmail 8524 invoked by alias); 24 Aug 2004 18:22:21 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 7921
Received: (qmail 8508 invoked from network); 24 Aug 2004 18:22:20 -0000
Received: from unknown (HELO a.mx.sunsite.dk) (130.225.247.88)
  by 130.225.247.90 with SMTP; 24 Aug 2004 18:22:20 -0000
Received: (qmail 78656 invoked from network); 24 Aug 2004 18:18:47 -0000
Received: from madrid10.amenworld.com (62.193.203.32)
  by a.mx.sunsite.dk with SMTP; 24 Aug 2004 18:18:45 -0000
Received: from DervishD.pleyades.net (212.Red-80-35-44.pooles.rima-tde.net [80.35.44.212])
	by madrid10.amenworld.com (8.10.2/8.10.2) with ESMTP id i7OH4K101997
	for <zsh-users@sunsite.dk>; Tue, 24 Aug 2004 19:04:20 +0200
Received: from disposable1@telefonica.net by DervishD.pleyades.net with local (Exim MTA 2.05)
	  id <1Bzejy-0007Oj-00>; Tue, 24 Aug 2004 19:05:46 +0200
Date: Tue, 24 Aug 2004 19:05:45 +0200
From: DervishD <disposable1@telefonica.net>
To: zsh-users@sunsite.dk
Subject: Re: Using zle outside zsh
Message-ID: <20040824170545.GA28326@DervishD>
Mail-Followup-To: zsh-users@sunsite.dk
References: <20040823155951.GA24279@DervishD> <Pine.LNX.4.61.0408231018430.5997@toltec.zanshin.com> <20040823194613.GA25072@DervishD> <Pine.LNX.4.61.0408231436340.3917@toltec.zanshin.com> <20040824093921.GA25290@DervishD> <Pine.LNX.4.61.0408240747380.5806@toltec.zanshin.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <Pine.LNX.4.61.0408240747380.5806@toltec.zanshin.com>
User-Agent: Mutt/1.4.2.1i
Organization: Pleyades
X-Spam-Checker-Version: SpamAssassin 2.63 on a.mx.sunsite.dk
X-Spam-Level: 
X-Spam-Status: No, hits=0.0 required=6.0 tests=none autolearn=no version=2.63
X-Spam-Hits: 0.0

    Hi Bart :)

 * Bart Schaefer <schaefer@brasslantern.com> dixit:
> > # This worked as before since the line is exactly 'ftp> '.
> > # Same for telnet
> > zpty -r ftp response '(|*\n)ftp> '
> zpty -r ftp response $'(|*\n)ftp> '
> Note the dollar-sign.  Without that the \n is not converted to a newline.

    I see... I assumed the single quote was enough because it was
enough in a 'print' statement. Obviously, I did not remember that $''
does exactly that: interpret the string as if it were passed to the
'print' builtin...
 
> Also, you do NOT want "zpty -b".  It makes the PTY non-blocking in *both*
> directions, which confuses ftp into insanity.  It may even have exited by
> the time you first try to write to it.

    I was testing first with telnet and used '-b' for a test. And I
forgot to remove it O:) Yes, ftp gets confused (and telnet too) if
'-b' is used.

> As for other reads hanging forever ... well, "ftp> " isn't the only prompt
> that might be printed.  It may be asking for a username or a password, for
> example, and "password: " won't match the pattern.  Try something like
> 
> zpty -r ftp response $'(|*\n)(ftp> |*[[:punct:]]: |Password:)'

    Oh, don't worry, I'm just testing the read-write loop. After that
I'll check which other prompts I must take care of. For example, if
you issue 'open' in the ftp main prompt, ftp asks you the address
using '(to)' (at least the client I'm using).
 
> Finally, vared is probably printing a carriage return and thereby erasing 
> the last line of the "print -nr" output, which might fool you into 
> thinking the read is hung.

    Yes, that's exactly what is happening. If I insert a delay
between the first read and the vared call, I can see the output from
the "print -nr" command.

>  So pick the last line out of $response and
> pass that to vared as the prompt, like so:
> pmpt=${response##$'*\n'}

    I must use "${response##*$'\n'}" or it doesn't work because the
'*' is quoted, but otherwise it works perfectly. Is there a way of
making 'vared' not to print a carriage return?

    OTOH, I think that, for a program like 'ftp' that not only prints
its own set of prompts but uses some server responses as prompts, it
would be better to read line by line until no more lines are present,
then use the last line as the prompt, but that involves using a while
loop and using 'zpty -rt', and that leads to a minor race, when we
write in the pty and wait for a response. Obviously the answer
doesn't need to be instantaneous, and that makes the first 'zpty -rt'
to fail :( Using the delay doesn't solve the problem, either: the
last line (that one containing the prompt) is not returned.

    Seems that the only possible solutions is to know in advance all
possible prompts and use 'zpty -r COMMAND NAME PATTERN', or using
zselect, or even using a proxy program that translates and normalizes
all received prompts including a '\n', or something like that...

    Thanks, Bart, for you answer :)

    Raúl Núñez de Arenas Coronado

-- 
Linux Registered User 88736
http://www.pleyades.net & http://raul.pleyades.net/

