From zsh-workers-request@math.gatech.edu Sun Aug 09 11:54:17 1998
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29449 invoked from network); 9 Aug 1998 11:54:16 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 9 Aug 1998 11:54:16 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.9.1/8.9.1) id HAA27939;
	Sun, 9 Aug 1998 07:40:49 -0400 (EDT)
Resent-Date: Sun, 9 Aug 1998 07:40:39 -0400 (EDT)
From: "Bart Schaefer" <schaefer@brasslantern.com>
Message-Id: <980809044123.ZM19065@candle.brasslantern.com>
Date: Sun, 9 Aug 1998 04:41:23 -0700
In-Reply-To: <19980809025636.18149@astaroth.nit.gwu.edu>
Comments: In reply to Sweth Chandramouli <sweth@astaroth.nit.gwu.edu>
        "sorting/uniq-ing an array?" (Aug  9,  2:56am)
References: <19980809025636.18149@astaroth.nit.gwu.edu>
X-Mailer: Z-Mail (4.0b.820 20aug96)
To: Sweth Chandramouli <sweth@astaroth.nit.gwu.edu>,
        ZSH Users <zsh-users@math.gatech.edu>
Subject: Re: sorting/uniq-ing an array?
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Resent-Message-ID: <"njTgq1.0.3q6.sgOpr"@math>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/1710
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

On Aug 9,  2:56am, Sweth Chandramouli wrote:
: Subject: sorting/uniq-ing an array?
:
: i've come up with a way
: to remove redundant entries from an array (the appropriate part of
: my .zshrc is at the end of this message), but it's very slow
:
: 	is there a faster way to do this?

Yes;

typeset -U ports

but the completion code makes its internal list of completions unique,
so it doesn't really help to remove the redundant entries from arrays
in advance when using them only for completion.

: 	(as always, of course, comments on style are also appreciated.
: i'm fairly certain that i still don't understand when ${= is needed
: and when it isn't, so i just tend to use it everywhere that splitting
: might be needed.  did i do it right here?)

You almost never need ${=...} when the "..." refers to an array.  Using
${=...} on an array causes the individual elements of the array to be
split into words, which is not very often what is wanted.  So no, you
didn't do it right here:

: portnames=("${${${(f)$(</etc/services)}:#\#*}%%[        ]*}")
: portnums=("${${${${${(f)$(</etc/services)}:#\#*}%%/*}##*        }##* }")
: ports=(${=portnums} ${=portnames})

However, you're over-processing.  You have both the port numbers and names
at one point during the portnums= computation, but then you throw the names
away.  Keep them:

ports=("${=${${(f)$(</etc/services)}:#\#*}%%/*}")

(Note that there I used ${=...} to re-split the ${(f)...} array of lines,
so sometimes that _is_ what you want.  I did say _almost_ never.)

: for i in $ports ; do
:    unset append;
:    for b in ${=tmpvar} ; do
:       if [[ $i == $b ]] ; then
:          append='false';
:       fi;
:    done;
:    if [[ -z $append ]] ; then
:       tmpvar=($tmpvar $i);
:    fi;
: done;

You probably want to be sure that $tmpvar doesn't already have a value
at the time you start any kind of loop like that.  Also, zsh (and most
other shells) has multi-level loop break/continue, so you can restart
the outer loop without setting/testing $append from the inner loop:

tmpvar=()
for i in $ports ; do
  for b in $tmpvar ; do
    [[ $i == $b ]] && continue 2
  done
  tmpvar=($tmpvar $i)
done

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

