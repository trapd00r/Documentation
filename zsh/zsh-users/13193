From zsh-users-return-13193-mason-zsh=primenet.com.au@sunsite.dk Sat Sep 06 02:35:23 2008
Return-Path: <zsh-users-return-13193-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28952 invoked from network); 6 Sep 2008 02:35:21 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 6 Sep 2008 02:35:21 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 79897 invoked from network); 6 Sep 2008 02:34:24 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 6 Sep 2008 02:34:24 -0000
Received: (qmail 13110 invoked by alias); 6 Sep 2008 02:33:30 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13193
Received: (qmail 13093 invoked from network); 6 Sep 2008 02:33:27 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 6 Sep 2008 02:33:27 -0000
Received: from vms044pub.verizon.net (unknown [206.46.252.44])
	by bifrost.dotsrc.org (Postfix) with ESMTP id C58C680271AE
	for <zsh-users@sunsite.dk>; Sat,  6 Sep 2008 04:33:02 +0200 (CEST)
Received: from torch.brasslantern.com ([96.238.220.178])
 by vms044.mailsrvcs.net
 (Sun Java System Messaging Server 6.2-6.01 (built Apr  3 2006))
 with ESMTPA id <0K6O00I8ZDEGG7G0@vms044.mailsrvcs.net> for
 zsh-users@sunsite.dk; Thu, 04 Sep 2008 09:25:29 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id m84EPQrg012343	for
 <zsh-users@sunsite.dk>; Thu, 04 Sep 2008 07:25:27 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id m84EPQu6012342	for zsh-users@sunsite.dk; Thu,
 04 Sep 2008 07:25:26 -0700
Date: Thu, 04 Sep 2008 07:25:26 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: compsys maps anonymous memory and never frees it
In-reply-to: <682f90440809031604j5e349af2q8d40f24fc429dcc3@mail.gmail.com>
To: zsh-users@sunsite.dk
Message-id: <080904072526.ZM12341@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <48BDF1EC.4050204@gmail.com>
	<080902200652.ZM9887@torch.brasslantern.com>
	<682f90440809031604j5e349af2q8d40f24fc429dcc3@mail.gmail.com>
Comments: In reply to "=?ISO-8859-1?Q?Bj=F6rn_Herzig?="
 <raichoo@googlemail.com>
 "Re: compsys maps anonymous memory and never frees it" (Sep  4,  1:04am)
X-Virus-Scanned: ClamAV 0.92.1/8170/Fri Sep  5 22:36:43 2008 on bifrost
X-Virus-Status: Clean

On Sep 4,  1:04am, =?ISO-8859-1?Q?Bj=F6rn_Herzig?= wrote:
}
} I looked at the problem a little closer. Zsh does not call mmap to
} allocate them and they dont get allocated when completion happens but
} when the next command gets issued.

If this is true, then this is something happening down in the library
or kernel implementation of fork() and is out of zsh's control.

Did you build zsh yourself?  Can you check config.h for USE_MMAP ?
If USE_MMAP is defined then anytime zsh parses a command it will have
called mmap() to allocate zsh-heap space.  You can try reconfiguring
with --enable-zsh-mem and then check the pmap behavior again.

} So in my example the new maps got added to the process' address space
} when i executed pmap, but the same happens with any other programm.
} Builtins however are an exception. So things start to go wrong when it
} comes to forking.

If you run pmap from another shell window rather than executing it
from within the shell whose map you're examining, does the behavior
change at all?

My only guess goes something like this:

Zsh has mapped memory for the heap during parsing etc.  Those pages
have had data written and therefore are marked "dirty".  When fork()
is called, those pages become shared address space with the child
process.  Zsh munmap()s them later but they aren't returned to the
system because the child process is still using them.

I'm not really happy with any of these explanations yet.

