From zsh-workers-return-25246-mason-zsh=primenet.com.au@sunsite.dk Thu Jun 26 13:52:03 2008
Return-Path: <zsh-workers-return-25246-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 19306 invoked from network); 26 Jun 2008 13:52:01 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 26 Jun 2008 13:52:01 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 83976 invoked from network); 26 Jun 2008 13:51:57 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 26 Jun 2008 13:51:56 -0000
Received: (qmail 6859 invoked by alias); 26 Jun 2008 13:51:54 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 25246
Received: (qmail 6845 invoked from network); 26 Jun 2008 13:51:53 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 26 Jun 2008 13:51:53 -0000
Received: from cluster-g.mailcontrol.com (cluster-g.mailcontrol.com [208.87.233.190])
	by bifrost.dotsrc.org (Postfix) with ESMTPS id F13B080524FA
	for <zsh-workers@sunsite.dk>; Thu, 26 Jun 2008 15:51:48 +0200 (CEST)
Received: from cameurexb01.EUROPE.ROOT.PRI ([193.128.72.68])
	by rly25g.srv.mailcontrol.com (MailControl) with ESMTP id m5QDpht5001960
	for <zsh-workers@sunsite.dk>; Thu, 26 Jun 2008 14:51:43 +0100
Received: from news01.csr.com ([10.103.143.38]) by cameurexb01.EUROPE.ROOT.PRI with Microsoft SMTPSVC(6.0.3790.3959);
	 Thu, 26 Jun 2008 14:51:42 +0100
Received: from news01.csr.com (localhost.localdomain [127.0.0.1])
	by news01.csr.com (8.14.2/8.13.4) with ESMTP id m5QDpgt1018446
	for <zsh-workers@sunsite.dk>; Thu, 26 Jun 2008 14:51:42 +0100
Received: from csr.com (pws@localhost)
	by news01.csr.com (8.14.2/8.14.2/Submit) with ESMTP id m5QDpgwh018442
	for <zsh-workers@sunsite.dk>; Thu, 26 Jun 2008 14:51:42 +0100
X-Authentication-Warning: news01.csr.com: pws owned process doing -bs
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: PATCH: anonymous functions (no documentation yet)
X-Mailer: MH-E 8.0.3; nmh 1.3-RC1; GNU Emacs 22.1.1
Date: Thu, 26 Jun 2008 14:51:42 +0100
Message-ID: <18441.1214488302@csr.com>
From: Peter Stephenson <pws@csr.com>
X-OriginalArrivalTime: 26 Jun 2008 13:51:42.0385 (UTC) FILETIME=[C3B82A10:01C8D793]
X-Scanned-By: MailControl A-08-50-03 (www.mailcontrol.com) on 10.71.0.135
X-Virus-Scanned: ClamAV 0.92.1/7569/Thu Jun 26 14:37:48 2008 on bifrost
X-Virus-Status: Clean

I just spotted that it's very easy to add "anonymous" functions, which
are defined using normal function syntax, but executed immediately.
This creates a local variable context:

  (){
    local variable="no great"
    print "In anonymous function with $variable value";
  }

executes immediately but "variable" does not remain set.  The most
obvious use of this would be in initialization files: you get a local
variable scope that guarantees not to pollute the function table.

Currently the code gets copied as if for use in the shell structure,
but I can probably optimise that out.  This would make it slightly less
efficient than a normal "{ ... }", but not much.

This syntax has always been accepted, oddly, but the code used simply to
be ignored.  This is a syntax error in other shells (at least bash, ksh
88, pdksh, Solaris 8 sh), so there's no clash.  (If you want protection
against triggering advanced features you have come to completely the
wrong shell anyway.)

Note this does not affect cases like

  $emptyvariable() { ... }

since the patch requires that there be nothing before the () even before
expansion.  So you're protected against accidental execution.  (Should
this be a syntax error?  I would think it probably should.  This is a
separate issue, however.)

It turns out the same patch works for "function { ... }", too; same
protection against empty expansions; also a syntax error in other
shells.

Is there any interest in pursuing this?  (Note that, although I am open
to suggestions, I am quite definitely not asking "is there any interest
in pursuing a dozen more complicated additions I have no time to
write".)

Index: Src/exec.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/exec.c,v
retrieving revision 1.132
diff -u -r1.132 exec.c
--- Src/exec.c	11 Jun 2008 09:27:55 -0000	1.132
+++ Src/exec.c	26 Jun 2008 13:31:10 -0000
@@ -3853,7 +3853,7 @@
 execfuncdef(Estate state, UNUSED(int do_exec))
 {
     Shfunc shf;
-    char *s;
+    char *s = NULL;
     int signum, nprg, sbeg, nstrs, npats, len, plen, i, htok = 0;
     Wordcode beg = state->pc, end;
     Eprog prog;
@@ -3861,10 +3861,7 @@
     LinkList names;
 
     end = beg + WC_FUNCDEF_SKIP(state->pc[-1]);
-    if (!(names = ecgetlist(state, *state->pc++, EC_DUPTOK, &htok))) {
-	state->pc = end;
-	return 0;
-    }
+    names = ecgetlist(state, *state->pc++, EC_DUPTOK, &htok);
     nprg = end - beg;
     sbeg = *state->pc++;
     nstrs = *state->pc++;
@@ -3874,10 +3871,10 @@
     plen = nprg * sizeof(wordcode);
     len = plen + (npats * sizeof(Patprog)) + nstrs;
 
-    if (htok)
+    if (htok && names)
 	execsubst(names);
 
-    while ((s = (char *) ugetnode(names))) {
+    while (!names || (s = (char *) ugetnode(names))) {
 	prog = (Eprog) zalloc(sizeof(*prog));
 	prog->npats = npats;
 	prog->nref = 1; /* allocated from permanent storage */
@@ -3906,23 +3903,38 @@
 	shf->funcdef = prog;
 	shf->node.flags = 0;
 
-	/* is this shell function a signal trap? */
-	if (!strncmp(s, "TRAP", 4) &&
-	    (signum = getsignum(s + 4)) != -1) {
-	    if (settrap(signum, NULL, ZSIG_FUNC)) {
-		freeeprog(shf->funcdef);
-		zfree(shf, sizeof(*shf));
-		state->pc = end;
-		return 1;
-	    }
-
+	if (!names) {
 	    /*
-	     * Remove the old node explicitly in case it has
-	     * an alternative name
+	     * Anonymous function, execute immediately.
 	     */
-	    removetrapnode(signum);
+	    LinkList args = newlinklist();
+
+	    shf->node.nam = "(anon)";
+	    addlinknode(args, shf->node.nam);
+	    execshfunc(shf, args);
+
+	    freeeprog(shf->funcdef);
+	    zfree(shf, sizeof(struct shfunc));
+	    break;
+	} else {
+	    /* is this shell function a signal trap? */
+	    if (!strncmp(s, "TRAP", 4) &&
+		(signum = getsignum(s + 4)) != -1) {
+		if (settrap(signum, NULL, ZSIG_FUNC)) {
+		    freeeprog(shf->funcdef);
+		    zfree(shf, sizeof(*shf));
+		    state->pc = end;
+		    return 1;
+		}
+
+		/*
+		 * Remove the old node explicitly in case it has
+		 * an alternative name
+		 */
+		removetrapnode(signum);
+	    }
+	    shfunctab->addnode(shfunctab, ztrdup(s), shf);
 	}
-	shfunctab->addnode(shfunctab, ztrdup(s), shf);
     }
     state->pc = end;
     return 0;

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070

