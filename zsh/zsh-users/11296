From zsh-users-return-11296-mason-zsh=primenet.com.au@sunsite.dk Mon Mar 12 04:41:39 2007
Return-Path: <zsh-users-return-11296-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 620 invoked from network); 12 Mar 2007 04:41:34 -0000
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=BAYES_00,FORGED_RCVD_HELO
	autolearn=ham version=3.1.8
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 12 Mar 2007 04:41:34 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 3585 invoked from network); 12 Mar 2007 04:41:28 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 12 Mar 2007 04:41:28 -0000
Received: (qmail 11050 invoked by alias); 12 Mar 2007 04:41:21 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 11296
Received: (qmail 11041 invoked from network); 12 Mar 2007 04:41:21 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 12 Mar 2007 04:41:21 -0000
Received: (qmail 2430 invoked from network); 12 Mar 2007 04:41:21 -0000
Received: from vms044pub.verizon.net (206.46.252.44)
  by a.mx.sunsite.dk with SMTP; 12 Mar 2007 04:41:14 -0000
Received: from torch.brasslantern.com ([71.116.117.231])
 by vms044.mailsrvcs.net
 (Sun Java System Messaging Server 6.2-6.01 (built Apr  3 2006))
 with ESMTPA id <0JER00BA7X0OZ8Y7@vms044.mailsrvcs.net> for
 zsh-users@sunsite.dk; Sun, 11 Mar 2007 23:41:13 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id l2C4fBHq021049	for
 <zsh-users@sunsite.dk>; Sun, 11 Mar 2007 21:41:12 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id l2C4fBVm021048	for zsh-users@sunsite.dk; Sun,
 11 Mar 2007 21:41:11 -0700
Date: Sun, 11 Mar 2007 21:41:11 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: What is the environment? (Re: code completition / cannot delete
 characters)
To: zsh-users@sunsite.dk
Message-id: <070311214111.ZM21047@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii

This might be of general interest.  (Anupam has let me know that he did
not intend to exclude the list from the conversation.)

--- Forwarded mail from "Bart Schaefer" <schaefer@brasslantern.com>

From: Bart Schaefer <schaefer@brasslantern.com>
Date: Sun, 11 Mar 2007 11:32:50 -0700
To: "Anupam Srivastava" <anupam.srivastava@gmail.com>
Subject: Re: code completition / cannot delete characters

On Mar 11,  6:59pm, Anupam Srivastava wrote:
}
} So not-using-export is not specific to PROMPT/RPROMPT but to all
} variables.

No, that would be too broad a statement.  

} I was under the impression that export makes a environment variable
} global.

In the shell language, all variables are global unless marked local.
It's a slightly confusing historical artifact that, inside the body
of a function, "typeset" is equivalent to "local", and outside the
body of a function, "local" is meaningless because you're already in
the global scope.  Also, even local variables have what is called
dynamic scope; that is, they become global to functions called from
the function that first declared the variable local, unless/until
such a called function yet again declares that same name "local".

Environment variables are entirely different beasts.  An environment
variable is a *copy* of a shell variable.  When you say "export ..."
you are telling the shell to maintain that copy automatically, so that
when you change the shell variable you also change the environment.
You can even declare a local variable to be exported, in which case
(in zsh, anyway) changes to that local are copied into the environment
until the local scope ends, at which point the original global is
copied into the environment again (or, if there is no exported non-
local variable of that name, the environment copy is removed).

The environment is global in a different way, in that it is passed
along to new processes started by the shell.  If that new process is
*another* shell, it copies those environment variables into its own
collection of variables and automatically marks those new variables
as "export" so that changes transparently affect its environment for
any further new processes started in turn by *that* shell.

This does not, however, have any effect on the environment of the
first shell that started this chain: environments are always copies.
Passed by value, not by reference, if you're familiar with those
programming concepts.

---End of forwarded mail from "Bart Schaefer" <schaefer@brasslantern.com>

