From zsh-workers-return-14730-mason-zsh=primenet.com.au@sunsite.dk Wed Jun 06 08:18:58 2001
Return-Path: <zsh-workers-return-14730-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 4309 invoked from network); 6 Jun 2001 08:18:39 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 6 Jun 2001 08:18:39 -0000
Received: (qmail 18005 invoked by alias); 6 Jun 2001 08:18:05 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14730
Received: (qmail 17984 invoked from network); 6 Jun 2001 08:18:04 -0000
X-Envelope-Sender-Is: Andrej.Borsenkow@mow.siemens.ru (at relayer goliath.siemens.de)
From: "Andrej Borsenkow" <Andrej.Borsenkow@mow.siemens.ru>
To: "Zsh hackers list" <zsh-workers@sunsite.dk>
Subject: RE: Export problem
Date: Wed, 6 Jun 2001 12:18:11 +0400
Message-ID: <001901c0ee61$3995a240$21c9ca95@mow.siemens.ru>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
X-MimeOLE: Produced By Microsoft MimeOLE V5.50.4522.1200
In-Reply-To: <20010606035125.B8915@dman.com>
Importance: Normal


Oh God! I am awfully sorry for confusion I caused ...

>
> > It's a bit ambiguous, it does say `command substitution' which always
> > implies word-splitting of unquoted words.  But you can take the
> reference
> > to `variable assignment' at the start to imply the result
> remains part of
> > the variable assignment.  And the question for us is really what POSIX
> > says.
>
> It says that the shell is to do field splitting after parameter
> expansion, command substitution, and arithmetic expansion,
> provided double quotes are not involved.  More or less.
>

What do you mean "more or less"? Was 14716 unclear? "Variable assignment" is
strictly defined grammar construct. No more and no less. In

foo=bar bla bla bar=baz

foo=bar is variable assignment and bar=baz is command argument.

> I'm not sure that that clears things up, since I interpret
> the meaning of `word' in ${x:=word}, x=word, and export x=word
> to be the pre-expanded word.
>

I was under impression that we've already cleaned that up. Anyway, I do not
understand what "pre-expanded" word is. POSIX shell never mentions this so
it does not clears up anything. Speaking of the above:

- in ${x:=word} word is *never* splitted irrespectively of where it appears
and if it is quoted
- x=word is not splitted (should I add "never"?)
- in export x=word the whole `x=word' is field splitted unless quoted.

-andrej

