From zsh-workers-return-16916-mason-zsh=primenet.com.au@sunsite.dk Wed Mar 27 18:19:41 2002
Return-Path: <zsh-workers-return-16916-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12066 invoked from network); 27 Mar 2002 18:19:40 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 27 Mar 2002 18:19:40 -0000
Received: (qmail 5666 invoked by alias); 27 Mar 2002 18:19:31 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 16916
Received: (qmail 5652 invoked from network); 27 Mar 2002 18:19:28 -0000
Date: Wed, 27 Mar 2002 10:19:23 -0800 (PST)
From: Bart Schaefer <schaefer@brasslantern.com>
Sender: schaefer@ns1.sodaware.com
To: Oliver Kiddle <okiddle@yahoo.co.uk>
cc: zsh-workers@sunsite.dk
Subject: Re: up-line-or-search question
In-Reply-To: <20020327180029.GA20166@logica.com>
Message-ID: <Pine.LNX.4.44.0203271004020.17952-100000@ns1.sodaware.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

On Wed, 27 Mar 2002, Oliver Kiddle wrote:

> On Wed, Mar 27, 2002 at 04:30:03PM +0000, Bart Schaefer wrote:
> >
> > Not exactly -- __searching will get cleared as soon as a search fails and
> > a simple up/down motion is done -- but you're right, the test should be
> > [[ $__searching = *-line-or-search && $LASTWIDGET = *-line-or-search ]]
> > or something along those lines.
>
> I'm not quite sure what that is trying to achieve.

It's just treating searches in both directions as equivalent for purposes
of whether to re-use the saved cursor position (or string) or to start a
new search with the current $LBUFFER.

> I also can't remember how I got it not to work in the first place
> because it is now.

Search up successfully, and then immediately try to search down again?

> Okay, I'll probably put the push-line-or-edit in when enabled with
> a style too then. Could we maybe agree a common prefix for the
> contexts of the styles in Functions/Zle - ':zle:' maybe?

E.g., change :predict to :zle:predict ?

I wish we'd thought about that sooner ... it's not a bad idea, but it
means changing predict-on, incremental-complete-word, etc. ... maybe
we can use the excuse of differentiating complex stateful widgets from
simple zle functions.

