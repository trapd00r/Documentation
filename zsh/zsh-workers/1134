From mdb@cdc.noaa.gov Thu May 23 06:11:42 1996
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by melb.werple.net.au (8.7.5/8.7.3) with ESMTP id GAA03847 for <mason@werple.mira.net.au>; Thu, 23 May 1996 06:11:40 +1000 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id PAA27877; Wed, 22 May 1996 15:53:46 -0400 (EDT)
Resent-Date: Wed, 22 May 1996 15:53:46 -0400 (EDT)
Date: Wed, 22 May 1996 13:53:13 -0600
Message-Id: <9605221953.AA08239@suomi.cdc.noaa.gov>
From: Mark Borges <mdb@cdc.noaa.gov>
To: ZSH mailing list <zsh-workers@math.gatech.edu>
Cc: Zoltan Hidvegi <hzoli@cs.elte.hu>
Subject: [zsh-2.6-b18] signames.awk and the backslash treatment bug
Organization: CIRES, University of Colorado
X-Attribution: mb
Resent-Message-ID: <"Y-Gxe1.0.Rp6.93ten"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/1134
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu
Content-Length: 2000
Status: OR

I wrote the author of mawk, Michael Brennan, concerning the behavior
of mawk w.r.t. the backslashes introduced into the signames.awk script
in beta18. Appended is his take on the matter.

This is probably more than anyone ever wanted to know, but in case you
are curious...

------- start of forwarded message (RFC 934 encapsulation) -------
Content-Type: text
content-length: 891
From: brennan@amc.com (Michael Brennan)
Subject: Re: [mawk-1.2.2] backslash treatment
Date: Wed, 22 May 1996 12:36:00 -0700 (PDT)
To: mdb@cdc.noaa.gov (Mark Borges)

> 
> Is this a bug in mawk?
> 
> Apparently the use of a `\' preceding a character that need not be
> escaped in a print statement is ambiguous. Some awks remove it, others
> (like mawk) leave it verbatim.
> 

The posix answer is "\z" has undefined meaning which implies that it is
not portable to use it.  The posix standard says it is explicitly
undefined.   Note that the same thing is true for ansi C.  See K&R
(ansi version) page 193.

I discuss this issue in the portability section of the mawk man pages
(near the back).

[man page excerpt]

     With mawk, the following are all equivalent,
          x ~ /a\+b/    x ~ "a\+b"     x ~ "a\\+b"
     The strings get scanned twice, once as string  and  once  as
     regular  expression.   On  the string scan, mawk ignores the
     escape on non-escape characters while the AWK book advocates
     \c be recognized as c which necessitates the double escaping
     of meta-characters in strings. Posix explicitly declines  to
     define  the  behavior  which  passively forces programs that
     must run under a variety of awks to use  the  more  portable
     but less readable, double escape.

[end man page excerpt]
 
In mawk, I wanted 

	 x ~ /c\+/
	 x ~ "c\+"

to work the same.  Note with nawk or gawk, you need to

	 x ~ "c\\+"

to escape + once for the string scan and once for the regexp scan.
With mawk
	 x ~ "c\\+"

works correctly too.

- --
Mike
brennan@amc.com

------- end -------


