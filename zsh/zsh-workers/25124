From zsh-workers-return-25124-mason-zsh=primenet.com.au@sunsite.dk Sun Jun 01 16:36:31 2008
Return-Path: <zsh-workers-return-25124-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 3640 invoked from network); 1 Jun 2008 16:36:28 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 1 Jun 2008 16:36:28 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 88451 invoked from network); 1 Jun 2008 16:36:24 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 1 Jun 2008 16:36:24 -0000
Received: (qmail 15777 invoked by alias); 1 Jun 2008 16:36:21 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 25124
Received: (qmail 15760 invoked from network); 1 Jun 2008 16:36:21 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 1 Jun 2008 16:36:21 -0000
Received: from cork.scru.org (cork.scru.org [209.20.67.2])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 9DF7580589A4
	for <zsh-workers@sunsite.dk>; Sun,  1 Jun 2008 18:36:14 +0200 (CEST)
Received: by cork.scru.org (Postfix, from userid 1000)
	id CF7EE10417F; Sun,  1 Jun 2008 16:36:11 +0000 (UTC)
Date: Sun, 1 Jun 2008 16:36:11 +0000
From: Clint Adams <clint@zsh.org>
To: zsh-workers@sunsite.dk
Subject: Re: PATCH: LFS
Message-ID: <20080601163611.GA5930@scru.org>
Mail-Followup-To: zsh-workers@sunsite.dk
References: <20080531182709.GA14185@scowler.net> <20080601172035.5bb8ad41@pws-pc>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20080601172035.5bb8ad41@pws-pc>
User-Agent: Mutt/1.5.17+20080114 (2008-01-14)
X-Virus-Scanned: ClamAV 0.91.2/7315/Sun Jun  1 17:19:37 2008 on bifrost
X-Virus-Status: Clean

On Sun, Jun 01, 2008 at 05:20:35PM +0100, Peter Stephenson wrote:
> In that case, references to --enable-lfs and $lfs need removing and its
> use for finding a 64-bit type fixing up.

This misrepresents some of the past-tense statements.

Index: INSTALL
===================================================================
RCS file: /cvsroot/zsh/zsh/INSTALL,v
retrieving revision 1.34
diff -u -r1.34 INSTALL
--- INSTALL	29 Jan 2008 17:51:01 -0000	1.34
+++ INSTALL	1 Jun 2008 16:34:07 -0000
@@ -469,21 +469,18 @@
 ------------------------------------
 
 Some 32-bit systems allow special compilation modes to get around the 2GB
-file size barrier.  This is enabled by default; use --disable-lfs to turn
+file size barrier.  This is enabled by default; use --disable-largefile to turn
 it off.  Not all systems recognize the test used by zsh (via the getconf
 command), so flags may need to be set by hand.  On HP-UX 10.20, zsh has
 been successfully compiled with large file support by configuring with
   CC="cc -Ae" CPPFLAGS="-D_LARGEFILE_SOURCE -D_FILE64" configure \
-  --enable-lfs ...
-You can also specify --enable-lfs together with a value, which will be
-interpreted as the name of a 64-bit integer type, for example
---enable-lfs="long long" (although this type is checked for anyway).
+  --enable-largefile ...
 
-Furthermore, use of --enable-lfs will also enable 64-bit arithmetic for
+Furthermore, use of --enable-largefile will also enable 64-bit arithmetic for
 shell parameters, and anywhere they are used such as in mathematical
 formulae.  This depends only on the shell finding a suitable 64-bit integer
 type; it does not require that support for large files is actually
-enabled.  Hence --enable-lfs is useful on many 32-bit systems
+enabled.  Hence --enable-largefile is useful on many 32-bit systems
 with a suitable compiler such as gcc.
 
 Also note that if `configure' finds out that either of the types off_t or
@@ -577,6 +574,6 @@
                      # [DATADIR/zsh/site-functions]
 function-subdirs     # if functions will be installed into subdirectories [no]
 dynamic              # allow dynamically loaded binary modules [yes]
-lfs                  # allow configure check for large files [yes]
+largefile            # allow configure check for large files [yes]
 locale               # allow use of locale library [yes]
 
Index: MACHINES
===================================================================
RCS file: /cvsroot/zsh/zsh/MACHINES,v
retrieving revision 1.6
diff -u -r1.6 MACHINES
--- MACHINES	27 Feb 2008 11:46:26 -0000	1.6
+++ MACHINES	1 Jun 2008 16:34:07 -0000
@@ -225,7 +225,7 @@
 	to /usr/ucblib in your LD_LIBRARY_PATH.  You can easily do this
 	by just unsetting LD_LIBRARY_PATH before building zsh.
 
-	Problems were once reported using --enable-lfs (the default) to
+	Problems were once reported using --enable-largefile (the default) to
 	enable large file system and integer support on Solaris 2 with gcc
 	before 2.95.2.  Recent versions of gcc appear to be unproblematic.
 
Index: configure.ac
===================================================================
RCS file: /cvsroot/zsh/zsh/configure.ac,v
retrieving revision 1.104
diff -u -r1.104 configure.ac
--- configure.ac	31 May 2008 18:30:54 -0000	1.104
+++ configure.ac	1 Jun 2008 16:34:08 -0000
@@ -210,12 +210,6 @@
 AC_SUBST(zlogin)dnl
 AC_SUBST(zlogout)dnl
 
-dnl Do you want large file support, if available?
-ifdef([lfs],[undefine([lfs])])dnl
-AC_ARG_ENABLE(lfs,
-AC_HELP_STRING([--disable-lfs], [turn off support for large files]),
-[lfs="$enableval"], [lfs=yes])
-
 dnl Do you want dynamically loaded binary modules.
 ifdef([dynamic],[undefine([dynamic])])dnl
 AC_ARG_ENABLE(dynamic,
@@ -367,16 +361,14 @@
 AC_PROG_CC
 
 dnl Check for large file support.
-dnl This needs to be done early to get the stuff into the flags.
-if test x$lfs != xno; then
+
 dnl Gross hack for ReliantUNIX - GCC does not understand getconf options
 dnl For now just disable LFS in this case
 dnl Any takers?
-  if test "$host" = mips-sni-sysv4 && test -n "$GCC"; then
-    : 
-  else
-    AC_SYS_LARGEFILE
-  fi
+if test "$host" = mips-sni-sysv4 && test -n "$GCC"; then
+  : 
+else
+  AC_SYS_LARGEFILE
 fi
 
 dnl if the user hasn't specified CFLAGS, then
@@ -913,26 +905,22 @@
     AC_DEFINE(INO_T_IS_64_BIT)
   fi
 
-  if test x$lfs != xno -o x$zsh_cv_off_t_is_64_bit = xyes \
+  if test x$enable_largefile != xno -o x$zsh_cv_off_t_is_64_bit = xyes \
   -o $zsh_cv_ino_t_is_64_bit = yes; then
     AC_CACHE_CHECK(if compiler has a 64 bit type, zsh_cv_64_bit_type,
-    [if test x$lfs != xyes && test x$lfs != xno; then
-      zsh_64_BIT_TYPE(${lfs}, zsh_cv_64_bit_type, force)
-     else
-       zsh_64_BIT_TYPE(long long, zsh_cv_64_bit_type)
-       if test "$zsh_cv_64_bit_type" = no; then
-         zsh_64_BIT_TYPE(quad_t, zsh_cv_64_bit_type)
-       fi
-       if test "$zsh_cv_64_bit_type" = no; then
-         zsh_64_BIT_TYPE(__int64_t, zsh_cv_64_bit_type)
-       fi
-       dnl As a last resort, if we know off_t has 64 bits, use that as
-       dnl the 64-bit integer type.  I don't dare try ino_t since there's
-       dnl probably nothing to stop that being unsigned.
-       if test "$zsh_cv_64_bit_type" = no &&
-          test "$zsh_cv_off_t_is_64_bit" = yes; then
-         zsh_64_BIT_TYPE(off_t, zsh_cv_64_bit_type)
-       fi
+    [zsh_64_BIT_TYPE(long long, zsh_cv_64_bit_type)
+     if test "$zsh_cv_64_bit_type" = no; then
+       zsh_64_BIT_TYPE(quad_t, zsh_cv_64_bit_type)
+     fi
+     if test "$zsh_cv_64_bit_type" = no; then
+       zsh_64_BIT_TYPE(__int64_t, zsh_cv_64_bit_type)
+     fi
+     dnl As a last resort, if we know off_t has 64 bits, use that as
+     dnl the 64-bit integer type.  I don't dare try ino_t since there's
+     dnl probably nothing to stop that being unsigned.
+     if test "$zsh_cv_64_bit_type" = no &&
+        test "$zsh_cv_off_t_is_64_bit" = yes; then
+       zsh_64_BIT_TYPE(off_t, zsh_cv_64_bit_type)
      fi])
     if test "$zsh_cv_64_bit_type" != no; then
       AC_DEFINE_UNQUOTED(ZSH_64_BIT_TYPE, $zsh_cv_64_bit_type)
Index: Src/zsh.h
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/zsh.h,v
retrieving revision 1.134
diff -u -r1.134 zsh.h
--- Src/zsh.h	12 May 2008 13:50:42 -0000	1.134
+++ Src/zsh.h	1 Jun 2008 16:34:10 -0000
@@ -33,7 +33,8 @@
 /*
  * Our longest integer type:  will be a 64 bit either if long already is,
  * or if we found some alternative such as long long.
- * Currently we only define this to be longer than a long if --enable-lfs
+ * Currently we only define this to be longer than a long if
+ * --enable-largefile
  * was given.  That enables internal use of 64-bit types even if
  * no actual large file support is present.
  */

