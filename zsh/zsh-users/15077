From zsh-users-return-15077-mason-zsh=primenet.com.au@zsh.org Sun May 23 03:03:47 2010
Return-Path: <zsh-users-return-15077-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24160 invoked by alias); 23 May 2010 03:03:47 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15077
Received: (qmail 13114 invoked from network); 23 May 2010 03:03:35 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at brasslantern.com does not designate permitted sender hosts)
MIME-Version: 1.0
In-Reply-To: <alpine.LNX.2.01.1005221600590.5029@hp.internal>
References: <AANLkTineDxdmX6rYKFaq8MPMV-JM3skkSsJ69I7aNUfY@mail.gmail.com>
	 <AANLkTilsi-UtdCZJuv9hNNQs3XIQG_8MRilmXYQMfXaR@mail.gmail.com>
	 <alpine.LNX.2.01.1005221600590.5029@hp.internal>
Date: Sat, 22 May 2010 20:03:29 -0700
Message-ID: <AANLkTimo_P0vZ5crqMN6u9uLDbwb2UNl8Qn3Cj-ERAZr@mail.gmail.com>
Subject: Re: Handling Double-quoted backslash
From: Bart Schaefer <schaefer@brasslantern.com>
To: Zsh Users <zsh-users@zsh.org>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

On Sat, May 22, 2010 at 1:28 PM, Benjamin R. Haskell <zsh@benizi.com> wrote=
:
> Interestingly, the shells aren't consistent across the board regardless
> of how they implement 'echo'. =A0I don't think that makes one or the othe=
r
> "correct", per se (If anything, tcsh is in the minority, empirically).

I think what you've (re-)discovered is that csh-based shells don't
intepret backslashes within double quotes at all, whereas Bourne-based
shells interpret backslashes only when they precede certain special
characters that need escaping (which includes backslash).

You can see this more violently if you try using
dquote-bslash-dquote-dquote; tcsh et al. will simply choke with an
unmatched quote error, whereas sh et al. will produce a dquote.

I don't have any experience with psh (is that perl-based?) but it
seems odd that it interpolates "\n" as a newline but doesn't
interpolate "\\" as a single backslash.

