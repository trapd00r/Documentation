From zsh-users-return-13239-mason-zsh=primenet.com.au@sunsite.dk Thu Sep 18 10:51:55 2008
Return-Path: <zsh-users-return-13239-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27873 invoked from network); 18 Sep 2008 10:51:52 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 18 Sep 2008 10:51:52 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 45925 invoked from network); 18 Sep 2008 10:51:29 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 18 Sep 2008 10:51:29 -0000
Received: (qmail 16172 invoked by alias); 18 Sep 2008 10:50:55 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13239
Received: (qmail 16156 invoked from network); 18 Sep 2008 10:50:53 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 18 Sep 2008 10:50:53 -0000
Received: from cluster-g.mailcontrol.com (cluster-g.mailcontrol.com [208.87.233.190])
	by bifrost.dotsrc.org (Postfix) with ESMTPS id 6F5B7802720D
	for <zsh-users@sunsite.dk>; Thu, 18 Sep 2008 12:50:45 +0200 (CEST)
Received: from cameurexb01.EUROPE.ROOT.PRI ([193.128.72.68])
	by rly12g.srv.mailcontrol.com (MailControl) with ESMTP id m8IAo0si027920
	for <zsh-users@sunsite.dk>; Thu, 18 Sep 2008 11:50:31 +0100
Received: from news01 ([10.103.143.38]) by cameurexb01.EUROPE.ROOT.PRI with Microsoft SMTPSVC(6.0.3790.3959);
	 Thu, 18 Sep 2008 11:50:09 +0100
Date: Thu, 18 Sep 2008 11:50:05 +0100
From: Peter Stephenson <pws@csr.com>
To: "zsh users mailing list" <zsh-users@sunsite.dk>
Subject: Re: reading a file into an array. mapfile? (f)?
Message-ID: <20080918115005.2e26550d@news01>
In-Reply-To: <6cd6de210809180303n24e8aac7x29f8cabba1c7a74c@mail.gmail.com>
References: <6cd6de210809171953pd956d75gd4b3609ac036fe0@mail.gmail.com>
	<080917214418.ZM27616@torch.brasslantern.com>
	<6cd6de210809180303n24e8aac7x29f8cabba1c7a74c@mail.gmail.com>
Organization: CSR
X-Mailer: Claws Mail 3.5.0 (GTK+ 2.12.8; i386-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-OriginalArrivalTime: 18 Sep 2008 10:50:09.0783 (UTC) FILETIME=[51EC0070:01C9197C]
X-Scanned-By: MailControl A-08-50-14 (www.mailcontrol.com) on 10.71.0.122
X-Virus-Scanned: ClamAV 0.92.1/8277/Thu Sep 18 10:36:44 2008 on bifrost
X-Virus-Status: Clean

On Thu, 18 Sep 2008 06:03:38 -0400
"Rocky Bernstein" <rocky.bernstein@gmail.com> wrote:
> Given this, I find this wording in  zshmodules a little misleading:
>=20
>        Thus  it should not automatically be assumed that use of mapfile
> repre=E2=80=90
>        sents a gain in efficiency over use of other mechanisms.
>=20
> Ok. I won't assume it; I will just make use of its speedup over a read lo=
op.

Yes, it more or less is guaranteed to be vastly faster than some other
mechanisms.  What I really meant was `don't assume it's faster than
"$(<filename)"', but it doesn't really need to say that.

> Before posting I tried googling for this and didn't turn up anything. Sin=
ce
> this is so simple and I think common (perhaps more common that the case
> where one a file as a single long string) possibly this might be mentioned
> in the mapfile doc?

Yes, I think so.

By the way, I'm happy to get partial patches which have been modified to
say something like "say something about X HERE", which helps me locate
where a change is necessary even if the text isn't complete.

> I sort of agree with this comment in zshmodules:
>        It  is  unfortunate that the mechanism for loading modules does not
> yet
>        allow the user to specify the name of the shell parameter to  be
> given
>        the special behaviour.

We've got a better interface to modules now, so we can pass down extra
information with "zmodload -F".  However, it needs to be done carefully:
it's possible different functions would want to map the behaviour onto
different variables.  That's not impossible but would need thought.

It should probably have been called zsh_mapfile to extend the name space in
a more natural way.  I can easily (as with the builtin zstat in zsh/stat)
make the module provide the variable under two different names, so by
default you get mapfile and zsh_mapfile but you could arrange to get only
zsh_mapfile.

> Any thoughts on how to get checksum information? I can shell out to "sum"=
 or
> "md5sum". But given I have the file data as a string if there is a soluti=
on
> usesi zsh only, that is preferable.

It sounds like this would need to be a new module in order to do it
internally, with some configuration probing for appropriate libraries using
Clint's new system where the libraries only become dependencies for the
module itself.  It looks like openssl provides this.  You can do things
like "md5sum <<<$file_contents", but there's no real gain over using the
file.  On the other hand, cryptographic functions may typically be
intensive enough that running them inside the shell isn't much of a gain.

Index: Doc/Zsh/mod_mapfile.yo
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/mod_mapfile.yo,v
retrieving revision 1.2
diff -u -r1.2 mod_mapfile.yo
--- Doc/Zsh/mod_mapfile.yo	3 Jul 2007 17:06:04 -0000	1.2
+++ Doc/Zsh/mod_mapfile.yo	18 Sep 2008 10:29:54 -0000
@@ -25,15 +25,18 @@
=20
 The parameter tt(mapfile) may be made read-only; in that case, files
 referenced may not be written or deleted.
+
+A file may conveniently be read into an array as one line per element
+with the form `var(array)tt(=3DLPAR()${(f)mapfile[)var(filename)tt(]RPAR()=
)'.
 )
 enditem()
=20
 subsect(Limitations)
=20
 Although reading and writing of the file in question is efficiently
-handled, zsh's internal memory management may be arbitrarily baroque.  Thus
-it should not automatically be assumed that use of tt(mapfile) represents a
-gain in efficiency over use of other mechanisms.  Note in particular that
+handled, zsh's internal memory management may be arbitrarily baroque;
+however, tt(mapfile) is usually very much more efficient than
+anything involving a loop.  Note in particular that
 the whole contents of the file will always reside physically in memory when
 accessed (possibly multiple times, due to standard parameter substitution
 operations).  In particular, this means handling of sufficiently long files


--=20
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070

