From zsh-users-return-8281-mason-zsh=primenet.com.au@sunsite.dk Thu Dec 09 18:24:48 2004
Return-Path: <zsh-users-return-8281-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 11631 invoked from network); 9 Dec 2004 18:24:47 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 9 Dec 2004 18:24:47 -0000
Received: (qmail 6758 invoked from network); 9 Dec 2004 18:24:41 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 9 Dec 2004 18:24:41 -0000
Received: (qmail 22683 invoked by alias); 9 Dec 2004 18:23:47 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 8281
Received: (qmail 22669 invoked from network); 9 Dec 2004 18:23:46 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 9 Dec 2004 18:23:46 -0000
Received: (qmail 5301 invoked from network); 9 Dec 2004 18:23:46 -0000
Received: from mxfep01.bredband.com (195.54.107.70)
  by a.mx.sunsite.dk with SMTP; 9 Dec 2004 18:23:45 -0000
Received: from puritan.pcp.ath.cx ([213.112.43.197] [213.112.43.197])
          by mxfep01.bredband.com with ESMTP
          id <20041209182345.JUTP18879.mxfep01.bredband.com@puritan.pcp.ath.cx>
          for <zsh-users@sunsite.dk>; Thu, 9 Dec 2004 19:23:45 +0100
Received: by puritan.pcp.ath.cx (Postfix, from userid 1000)
	id 0571FAE045; Thu,  9 Dec 2004 19:23:48 +0100 (CET)
Date: Thu, 9 Dec 2004 19:23:48 +0100
From: Nikolai Weibull <mailing-lists.zsh-users@rawuncut.elitemail.org>
To: zsh-users@sunsite.dk
Subject: Re: Vim syntax file for zsh
Message-ID: <20041209182347.GG9424@puritan.pcp.ath.cx>
Mail-Followup-To: zsh-users@sunsite.dk
References: <20041201120202.GB9543@puritan.pcp.ath.cx> <dc507f4a04120300022e3894cb@mail.gmail.com> <20041204164217.GA20437@puritan.pcp.ath.cx> <dc507f4a04120800132b01f623@mail.gmail.com> <20041208134714.GB10098@puritan.pcp.ath.cx> <20041208181429.GC10098@puritan.pcp.ath.cx> <902B4263-49EA-11D9-A14D-000A95D2C79E@kalama.no-ip.org> <20041209144520.GC9424@puritan.pcp.ath.cx> <dc507f4a04120908364a032da6@mail.gmail.com> <20041209181813.GF9424@puritan.pcp.ath.cx>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="FCuugMFkClbJLl1L"
Content-Disposition: inline
In-Reply-To: <20041209181813.GF9424@puritan.pcp.ath.cx>
User-Agent: Mutt/1.5.6i
X-Spam-Checker-Version: SpamAssassin 2.63 on a.mx.sunsite.dk
X-Spam-Level: ****
X-Spam-Status: No, hits=4.1 required=6.0 tests=OPT_IN_CAPS,RCVD_IN_SORBS 
	autolearn=no version=2.63
X-Spam-Hits: 4.1


--FCuugMFkClbJLl1L
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

* Nikolai Weibull [Dec 09, 2004 19:20]:
Forgot attachment...
	nikolai

-- 
::: name: Nikolai Weibull    :: aliases: pcp / lone-star / aka :::
::: born: Chicago, IL USA    :: loc atm: Gothenburg, Sweden    :::
::: page: www.pcppopper.org  :: fun atm: gf,lps,ruby,lisp,war3 :::
main(){printf(&linux["\021%six\012\0"],(linux)["have"]+"fun"-97);}

--FCuugMFkClbJLl1L
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename="zsh.vim"

" Vim syntax file
" Language:	    Zsh shell script
" Maintainer:	    Nikolai Weibull <source@pcppopper.org>
" URL:		    http://www.pcppopper.org/vim/syntax/pcp/zsh/
" Latest Revision:  2004-12-09
" arch-tag:	    2e2c7097-99cb-4b87-a771-3a819b69995e

if version < 600
  syntax clear
elseif exists("b:current_syntax")
  finish
endif

" Set iskeyword since we need `-' (and potentially others) in keywords.
" For version 5.x: Set it globally
" For version 6.x: Set it locally
if version >= 600
  command -nargs=1 SetIsk setlocal iskeyword=<args>
else
  command -nargs=1 SetIsk set iskeyword=<args>
endif
SetIsk @,48-57,_,-
delcommand SetIsk

" Todo
syn keyword zshTodo         contained TODO FIXME XXX NOTE

" Comments
syn region  zshComment      matchgroup=zshComment start='\(^\|\s\)#' end='$' contains=zshTodo

" PreProc
syn match   zshPreProc	    '^\%1l#\(!\|compdef\|autoload\).*$'

" Strings
syn match   zshQuoted       '\\.'
syn region  zshString       matchgroup=zshString start=+"+ end=+"+ contains=zshQuoted,@zshDerefs,zshSubst
syn region  zshString       matchgroup=zshString start=+'+ end=+'+
" XXX: This should probably be more precise, but Zsh seems a bit confused about it itself
syn region  zshPOSIXString  matchgroup=zshString start=+\$'+ end=+'+ contains=zshQuoted
syn match   zshJobSpec      '%\(\d\+\|?\=\w\+\|[%+-]\)'

" Precommand Modifiers
syn keyword zshPrecommand   noglob nocorrect exec command builtin - time

" Delimiters
syn keyword zshDelimiter    do done

" Conditionals
syn keyword zshConditional  if then elif else fi case in esac select

" Loops
syn keyword zshRepeat       for while until repeat foreach

" Exceptions
syn keyword zshException    always

" Keywords
syn keyword zshKeyword      function nextgroup=zshKSHFunction skipwhite

" Functions
syn match   zshKSHFunction  contained '\k\+'
syn match   zshFunction     '\k\+\s*\ze()'

" Redirections
syn match   zshRedir        '\d\=\(<\|<>\|<<<\|<&\s*[0-9p-]\=\)'
syn match   zshRedir        '\d\=\(>\|>>\|>&\s*[0-9p-]\=\|&>\|>>&\|&>>\)[|!]\='
syn match   zshRedir        '|&\='

" Here Documents
if version < 600
  " Do nothing for now TODO: do something
else
  syn region  zshHereDoc  matchgroup=zshRedir start='<<\s*\z(\S*\)' end='^\z1$'
  syn region  zshHereDoc  matchgroup=zshRedir start='<<-\s*\z(\S*\)' end='^\s*\z1$'
  syn region  zshHereDoc  matchgroup=zshRedir start='<<\s*\z(["'\\]\S*\)'  end='^\z1$'
  syn region  zshHereDoc  matchgroup=zshRedir start='<<-\s*\z(["'\\]\S*\)' end='^\s*\z1$'
endif

" Variable Assignments
syn match   zshVariable	    '\<\h\w*\ze+\=='
" XXX: how safe is this?
syn region  zshVariable	    matchgroup=zshVariable start='\$\@<!\<\h\w*\[' end='\]\ze+\==' contains=@zshSubst

" Variable Dereferencing
syn cluster zshDerefs contains=zshShortDeref,zshLongDeref,zshDeref

if !exists("g:zsh_syntax_variables")
  let s:zsh_syntax_variables = 'all'
else
  let s:zsh_syntax_variables = g:zsh_syntax_variables
endif

if s:zsh_syntax_variables =~ 'short\|all'
  syn match zshShortDeref   '\$[!#$*@?_-]\w\@!'
  syn match zshShortDeref   '\$[=^~]*[#+]*\d\+\>'
endif

if s:zsh_syntax_variables =~ 'long\|all'
  syn match zshLongDeref    '\$\(ARGC\|argv\|status\|pipestatus\|CPUTYPE\|EGID\|EUID\|ERRNO\|GID\|HOST\|LINENO\|LOGNAME\)'
  syn match zshLongDeref    '\$\(MACHTYPE\|OLDPWD OPTARG\|OPTIND\|OSTYPE\|PPID\|PWD\|RANDOM\|SECONDS\|SHLVL\|signals\)'
  syn match zshLongDeref    '\$\(TRY_BLOCK_ERROR\|TTY\|TTYIDLE\|UID\|USERNAME\|VENDOR\|ZSH_NAME\|ZSH_VERSION\|REPLY\|reply\|TERM\)'
endif

if s:zsh_syntax_variables =~ 'all'
  syn match zshDeref     '\$[=^~]*[#+]*\h\w*\>'
endif

" Commands
syn match   zshCommands     '\s[.:]\s'
syn keyword zshCommands     alias autoload bg bindkey break bye cap cd chdir
syn keyword zshCommands     clone comparguments compcall compctl compdescribe
syn keyword zshCommands     compfiles compgroups compquote comptags comptry
syn keyword zshCommands     compvalues continue declare dirs disable disown
syn keyword zshCommands     echo echotc echoti emulate enable eval exec exit
syn keyword zshCommands     export false fc fg functions getcap getln
syn keyword zshCommands     getopts hash history jobs kill let limit
syn keyword zshCommands     log logout popd print printf pushd pushln
syn keyword zshCommands     pwd r read readonly rehash return sched set
syn keyword zshCommands     setcap setopt shift source stat suspend test times
syn keyword zshCommands     trap true ttyctl type ulimit umask unalias
syn keyword zshCommands     unfunction unhash unlimit unset unsetopt vared
syn keyword zshCommands     wait whence where which zcompile zformat zftp zle
syn keyword zshCommands     zmodload zparseopts zprof zpty zregexparse zsocket
syn keyword zshCommands     zstyle ztcp

" Types
syn keyword zshTypes        float integer local typeset

" Switches
" XXX: this may be too much
syn match   zshSwitches     '\s\zs--\=[a-zA-Z0-9-]\+'

" Numbers
syn match   zshNumber       '\<-\=\(\d\+#\|0x\=\)\=\d\+\>'
syn match   zshNumber       '\<-\=\d\+.\d\+\>'

" Substitution
" XXX: is this right?  something may be wrong here
syn cluster zshSubst	    contains=zshSubst,zshBrackets
syn region  zshBrackets	    transparent start='(' skip='\\)' end=')' contains=TOP
syn region  zshBrackets	    transparent start='{' skip='\\}' end='}' contains=TOP
syn region  zshSubst        matchgroup=zshDeref transparent start='\$(' skip='\\)' end=')' contains=TOP
syn region  zshSubst        matchgroup=zshDeref transparent start='\$((' end='))' contains=TOP
syn region  zshSubst	    matchgroup=zshSubst start='\${' skip='\\}' end='}' contains=@zshSubst
syn region  zshOldSubst	    matchgroup=zshOldSubst start=+`+ skip=+\\`+ end=+`+ contains=TOP,zshOldSubst

" Define the default highlighting.
" For version 5.7 and earlier: only when not done already
" For version 5.8 and later: only when an item doesn't have highlighting yet
if version >= 508 || !exists("did_zsh_syn_inits")
  if version < 508
    let did_zsh_syn_inits = 1
    command -nargs=+ HiLink hi link <args>
  else
    command -nargs=+ HiLink hi def link <args>
  endif

  HiLink zshTodo          Todo
  HiLink zshComment       Comment
  HiLink zshPreProc	  PreProc
  HiLink zshQuoted        SpecialChar
  HiLink zshString        String
  HiLink zshPOSIXString	  zshString
  HiLink zshJobSpec       Special
  HiLink zshPrecommand    Special
  HiLink zshDelimiter     Keyword
  HiLink zshConditional   Conditional
  HiLink zshException	  Exception
  HiLink zshRepeat        Repeat
  HiLink zshKeyword       Keyword
  HiLink zshFunction      Function
  HiLink zshKSHFunction	  zshFunction
  HiLink zshHereDoc	  String
  HiLink zshRedir         Operator
  HiLink zshVariable	  Identifier
  HiLink zshShortDeref	  zshDeref
  HiLink zshLongDeref	  zshDeref
  HiLink zshDeref	  PreProc
  HiLink zshCommands      Keyword
  HiLink zshTypes         Type
  HiLink zshSwitches      Special
  HiLink zshNumber        Number
  HiLink zshSubst	  zshDeref
  HiLink zshOldSubst	  zshSubst

  delcommand HiLink
endif

let b:current_syntax = "zsh"

" vim: set sts=2 sw=2:

--FCuugMFkClbJLl1L--

