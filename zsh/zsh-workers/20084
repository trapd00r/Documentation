From zsh-workers-return-20084-mason-zsh=primenet.com.au@sunsite.dk Mon Jun 21 10:41:51 2004
Return-Path: <zsh-workers-return-20084-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 17888 invoked from network); 21 Jun 2004 10:41:50 -0000
Received: from thor.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.86)
  by ns1.primenet.com.au with SMTP; 21 Jun 2004 10:41:50 -0000
Received: (qmail 14260 invoked from network); 21 Jun 2004 10:41:38 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 21 Jun 2004 10:41:38 -0000
Received: (qmail 4230 invoked by alias); 21 Jun 2004 10:41:32 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 20084
Received: (qmail 4220 invoked from network); 21 Jun 2004 10:41:32 -0000
Received: from thor.dotsrc.org (HELO a.mx.sunsite.dk) (qmailr@130.225.247.86)
  by sunsite.dk with SMTP; 21 Jun 2004 10:41:29 -0000
Received: (qmail 14073 invoked from network); 21 Jun 2004 10:41:28 -0000
Received: from lhuumrelay3.lnd.ops.eu.uu.net (62.189.58.19)
  by a.mx.sunsite.dk with SMTP; 21 Jun 2004 10:41:27 -0000
Received: from MAILSWEEPER01.csr.com (mailhost1.csr.com [62.189.183.235])
	by lhuumrelay3.lnd.ops.eu.uu.net (8.11.0/8.11.0) with ESMTP id i5LAf0v24622
	for <zsh-workers@sunsite.dk>; Mon, 21 Jun 2004 10:41:00 GMT
Received: from EXCHANGE02.csr.com (unverified [192.168.137.45]) by MAILSWEEPER01.csr.com
 (Content Technologies SMTPRS 4.3.12) with ESMTP id <T6a536a80edc0a88d015c0@MAILSWEEPER01.csr.com> for <zsh-workers@sunsite.dk>;
 Mon, 21 Jun 2004 11:40:22 +0100
Received: from news01.csr.com ([192.168.143.38]) by EXCHANGE02.csr.com with Microsoft SMTPSVC(5.0.2195.6713);
	 Mon, 21 Jun 2004 11:44:24 +0100
Received: from news01.csr.com (localhost.localdomain [127.0.0.1])
	by news01.csr.com (8.12.11/8.12.11) with ESMTP id i5LAew7E013548
	for <zsh-workers@sunsite.dk>; Mon, 21 Jun 2004 11:40:59 +0100
Received: from csr.com (pws@localhost)
	by news01.csr.com (8.12.11/8.12.11/Submit) with ESMTP id i5LAevFj013545
	for <zsh-workers@sunsite.dk>; Mon, 21 Jun 2004 11:40:58 +0100
Message-Id: <200406211040.i5LAevFj013545@news01.csr.com>
X-Authentication-Warning: news01.csr.com: pws owned process doing -bs
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: PATCH: tests for `always' syntax
Date: Mon, 21 Jun 2004 11:40:54 +0100
From: Peter Stephenson <pws@csr.com>
X-OriginalArrivalTime: 21 Jun 2004 10:44:24.0369 (UTC) FILETIME=[B7C18210:01C4577C]
X-Spam-Checker-Version: SpamAssassin 2.63 on a.mx.sunsite.dk
X-Spam-Level: **
X-Spam-Status: No, hits=2.3 required=6.0 tests=BAYES_70 autolearn=no 
	version=2.63
X-Spam-Hits: 2.3

Here are tests for the `always' syntax in the second form.  Is that
now relatively uncontroversial?

I tweaked the description of status handling in grammar.yo which was
split between two places and wedge up against the block with error
handling, from which I should have distinguished it more clearly.  It
now reads:

  Regardless of tt(TRY_BLOCK_ERROR), after the end of tt(always-list) the
  normal shell status tt($?) is the value returned from tt(always-list).
  This will be non-zero if there was an error, even if tt(TRY_BLOCK_ERROR)
  was set to zero.

Index: Test/A01grammar.ztst
===================================================================
RCS file: /cvsroot/zsh/zsh/Test/A01grammar.ztst,v
retrieving revision 1.8
diff -u -r1.8 A01grammar.ztst
--- Test/A01grammar.ztst	1 Apr 2003 14:04:10 -0000	1.8
+++ Test/A01grammar.ztst	21 Jun 2004 10:35:07 -0000
@@ -263,6 +263,85 @@
 0:basic [[ ... ]] test
 
 #
+# Current shell execution with try/always form.
+# We put those with errors in subshells so that any unhandled error doesn't
+# propagate.
+#
+
+  {
+     print The try block.
+  } always {
+     print The always block.
+  }
+  print After the always block.
+0:Basic `always' syntax
+>The try block.
+>The always block.
+>After the always block.
+
+  ({
+    print Position one.
+    print ${*this is an error*}
+    print Position two.
+  } always {
+    if (( TRY_BLOCK_ERROR )); then
+      print An error occurred.
+    else
+      print No error occurred.
+    fi
+  }
+  print Position three)
+1:Always block with error not reset
+>Position one.
+>An error occurred.
+?(eval):3: bad substitution
+
+  ({
+    print Stelle eins.
+    print ${*voici une erreur}
+    print Posizione due.
+  } always {
+    if (( TRY_BLOCK_ERROR )); then
+      print Erratum factum est. Retro ponetur.
+      (( TRY_BLOCK_ERROR = 0 ))
+    else
+      print unray touay foay anguageslay
+    fi
+  }
+  print Status after always block is $?.)
+0:Always block with error reset
+>Stelle eins.
+>Erratum factum est. Retro ponetur.
+>Status after always block is 1.
+?(eval):3: bad substitution
+
+# Outputting of structures from the wordcode is distinctly non-trivial,
+# we probably ought to have more like the following...
+  fn1() { { echo foo; } }
+  fn2() { { echo foo; } always { echo bar; } }
+  fn3() { ( echo foo; ) }
+  functions fn1 fn2 fn3
+0:Output of syntactic structures with and without always blocks
+>fn1 () {
+>	{
+>		echo foo
+>	}
+>}
+>fn2 () {
+>	{
+>		echo foo
+>	} always {
+>		echo bar
+>	}
+>}
+>fn3 () {
+>	(
+>		echo foo
+>	)
+>}
+
+
+#
 # Tests for `Alternate Forms For Complex Commands'
 #
 
-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR Ltd., Science Park, Milton Road,
Cambridge, CB4 0WH, UK                          Tel: +44 (0)1223 692070


**********************************************************************
This email and any files transmitted with it are confidential and
intended solely for the use of the individual or entity to whom they
are addressed. If you have received this email in error please notify
the system manager.

This footnote also confirms that this email message has been swept by
MIMEsweeper for the presence of computer viruses.

www.mimesweeper.com
**********************************************************************

