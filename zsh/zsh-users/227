From venus!juno!harman@hclhprnd.hclt.com Tue Jun  4 19:50:36 1996
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by melb.werple.net.au (8.7.5/8.7.3/2) with ESMTP id TAA16923 for <mason@werple.mira.net.au>; Tue, 4 Jun 1996 19:50:32 +1000 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id FAA00891; Tue, 4 Jun 1996 05:37:49 -0400 (EDT)
Resent-Date: Tue, 4 Jun 1996 05:37:17 -0400 (EDT)
Date: Tue, 4 Jun 96 13:42:52 IST
Message-Id: <9606040242.AA02989@juno.venus.hclt.com>
From: Harmanjit Singh <venus!juno!harman@hclhprnd.hclt.com>
To: zsh-users@math.gatech.edu
Subject: A peep into the future.
Resent-Message-ID: <"qO5Fs3.0.WD.CF0jn"@euclid>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/227
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu
Content-Length: 2761
Status: OR


Hello everybody,

Here's the dream:

Features in zsh 3.0:

1. Fully programmable aliasing (matching regexps, replacing selections).

2. Regular Expression filename generation.

3. Programmable key bindings (a key could be bound to a sequence of
   actions, so now you can do things like: dynamic paren matching,
   real-time indentation, etc.)  Some primitive functions have been
   provided  (a small (but complete) subset of the EDITING functions 
   of elisp).

4. Safer redirections: e.g.
	if you say "foo > Important_file", zsh checks to see if there
	is anything on the stdout of foo, if not (say foo is
	non-existent), zsh leaves the Imp_file as it is.
	
	Otherwise, zsh "redirects" the stdout to the file.

	(This can be done, I think, by using a socket.  zsh gets
	the initial few bytes, then starts an "internal" process to
	redirect from the socket to the file.)
	
5. setopt POSIX_COMPLIANT now makes zsh what?

6. Hierarchical option settings.  E.g. unsetopt zle automatically
   unsetopts's the options dependant on its being set.  It itself also
   is an option.  It's there to make understanding the plethora of
   options easier for new users.


zsh 4.0:

1.  wzsh (windowing zsh) is now available.  Also, zsh now has colour
    and menu capabilities on text only terminals.  

2.  mount/umount is a shell builtin which simulates working with
    virtual filesystems e.g. ftpfs, tarfs, libfs, memfs.

    Scripts have to be provided to interface the fs with zsh.  
    (zsh translates the request to: get file, perform op, 
    send file if changed.  The first and last are handled
    by the script.  Also, the fs interface specifies which attributes
    can be changed.  (e.g. in ftp you can't change the username). So,
    the "send file *if* changed" should really be handled by the script.)

3.  zsh can now byte-code its scripts.

4.  zsh now supports dynamic files.  If a file has a specific magic no,
    it can be handled like a normal file of the *output* of that file.

    The file is handled as a read-only file.

    This feature slows down filename generation considerably (zsh
    checks to see if the file is a dynamic file, if it is,
    runs it and places its output filename in place of the original 
    filename).

    So, you say elm -f mbox, and your mail is gathered from diverse
    hosts, just because the mbox is a dynamic file, which collects all
    of them mail messages by ftp'ing etc. 

	( the feature really belongs in the OS, but zsh already is
          half the OS anyway.)

zsh 10.0:

OS_TYPE is a shell variables which can be changed.  zsh simulates the
given OS.  Everything is a shell builtin.

zsh now works on MS-DOG.  Changing OS_TYPE still works perfectly.

-- 
With Warm Regards,
Harmanjit Singh.


