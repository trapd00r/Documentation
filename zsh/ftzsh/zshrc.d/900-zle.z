### vim:ft=zsh:foldmethod=marker

if ! zis_31 "atleast"; then
    zprintf 2 'No zle support; Using emacs bindings.\n'
    bindkey -e
    return
fi

# If we're using vi-mode, use either `ins' or `cmd' as the default mode.
zle_default_mode='ins'

# This makes sure the first prompt is drawn correctly.
if [[ ${zle_default_mode} == 'cmd' ]]; then
    psvar[1]='n'
else
    psvar[1]='i'
fi

# We're not in overwrite mode, when zsh starts.
ft_zle_state[overwrite]=no

# When this is hooked into `zle-keymap-select', keymap changes are correctly
# tracked in `psvar[1]', which may be used in PS1 as `%1v'.
function ft-psv1() {
    #RPS1="${ft_zle_state[overwrite]}, ${ft_zle_state[minibuffer]}, keymap: '$KEYMAP', widget: '$WIDGET'"
    if [[ ${CONTEXT} == 'vared' ]]; then
        psvar[1]='v'
    elif [[ ${ft_zle_state[minibuffer]} == yes ]]; then
        [[ ${psvar[1]} != *m ]] && psvar[1]="${psvar[1]}m"
    else
        case ${KEYMAP} in
            vicmd) psvar[1]='n';;
            *)
                if [[ ${ft_zle_state[overwrite]} == yes ]]; then
                    psvar[1]='r'
                else
                    psvar[1]='i'
                fi
                ;;
        esac
    fi
    zle 'reset-prompt'
}

# This needs to be hooked into `zle-line-finish' to make sure the next
# newly drawn prompt has the correct mode display.
function ft-psv1-force() {
    if [[ ${zle_default_mode} == 'cmd' ]]; then
        psvar[1]='n'
    else
        psvar[1]='i'
    fi
}

# I created _functions[] arrays for `zle-line-init', `zle-line-finish' and
# `zle-keymap-select', too. Analogous to precmd_functions[] etc. The actual
# functions only cycle through these arrays and execute all existing
# functions in order. See below.
zle_keymap_functions=( ${zle_keymap_functions} ft-psv1 )
zle_finish_functions=( ${zle_finish_functions} ft-psv1-force )
if [[ ${zle_default_mode} == 'cmd' ]]; then
    zle_init_functions=( ${zle_init_functions} ft-vi-cmd )
fi
# Need to handle SIGINT, too (which is sent by ^C).
function TRAPINT() {
    ft_zle_state[minibuffer]=no
    ft-psv1-force
    zle reset-prompt 2>/dev/null
    return 127
}

function zle-line-init() {
    local w
    for w in "${zle_init_functions[@]}"; do
        (( ${+functions[$w]} )) && "$w"
    done
}

function zle-line-finish() {
    local w
    for w in "${zle_finish_functions[@]}"; do
        (( ${+functions[$w]} )) && "$w"
    done
}

function zle-keymap-select() {
    local w
    for w in "${zle_keymap_functions[@]}"; do
        (( ${+functions[$w]} )) && "$w"
    done
}
zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select

# In versions before 4.3.1, the `zle-keymap-select' hook is not available.
# Hence, I cannot show the current keyboard mode in my prompt, which makes
# it quite uncomfortable for me to use. So, I'm only using vi-mode in
# zshs, which are new enough.
if zis_431 "atleast"; then
    bindkey -v

    # My prompt will use psvar1 as the current keyboard-mode, if
    # this style is set to `true'. The default is `false'.
    zstyle ':prompt:ft:*' use-psvar1 true
else
    bindkey -e
fi
