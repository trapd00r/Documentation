From zsh-workers-return-14644-mason-zsh=primenet.com.au@sunsite.dk Fri Jun 01 13:34:06 2001
Return-Path: <zsh-workers-return-14644-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5804 invoked from network); 1 Jun 2001 13:34:05 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 1 Jun 2001 13:34:05 -0000
Received: (qmail 27378 invoked by alias); 1 Jun 2001 13:33:54 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14644
Received: (qmail 27352 invoked from network); 1 Jun 2001 13:33:53 -0000
Message-ID: <Tc0a88d0153e0d72e88@mailsweeper01.cambridgesiliconradio.com>
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: Re: zsh and autoconf-2.50 
In-reply-to: ""Andrej Borsenkow""'s message of "Fri, 01 Jun 2001 16:54:25 +0400."
             <001501c0ea99$fc90ae50$21c9ca95@mow.siemens.ru> 
Date: Fri, 01 Jun 2001 14:33:29 +0100
From: Peter Stephenson <pws@csr.com>

"Andrej Borsenkow" wrote:
> > > reads `there is an error declared by undefine: zsh-debug is
> > > undefined'.
> >
> 
> There are a dozen more. Moreover, half of parameters do use this undefine
> half do not. I believe, it is totally redundant - should I just remove them?

Gag.  OK, here's a full paranoid replacement just for now, instead of the
previous two attempts.  It produces an identical configure, which is all
I'm really worried about.  As soon as 4.0.1 is out of the way, configure.in
can be tidied up.  I'm quite happy for these to go then.

I'm just putting in the finishing touches (I hope), so it would help if
non-urgent patches could be kept out until everything's tagged.

Index: configure.in
===================================================================
RCS file: /cvsroot/zsh/zsh/configure.in,v
retrieving revision 1.58
diff -u -r1.58 configure.in
--- configure.in	2001/05/20 10:59:27	1.58
+++ configure.in	2001/06/01 13:29:48
@@ -52,7 +52,7 @@
 zsh_COMPILE_FLAGS($CPPFLAGS, $CFLAGS, $LDFLAGS, $LIBS)
 
 dnl Do you want to debug zsh?
-undefine([zsh-debug])dnl
+ifdef([zsh-debug],undefine([zsh-debug]))dnl
 AC_ARG_ENABLE(zsh-debug,
 [  --enable-zsh-debug         compile with debug code and debugger symbols],
 [if test x$enableval = xyes; then
@@ -60,7 +60,7 @@
 fi])
 
 dnl Do you want zsh memory allocation routines.
-undefine([zsh-mem])dnl
+ifdef([zsh-mem],undefine([zsh-mem]))dnl
 AC_ARG_ENABLE(zsh-mem,
 [  --enable-zsh-mem           compile with zsh memory allocation routines],
 [if test x$enableval = xyes; then
@@ -68,7 +68,7 @@
 fi])
 
 dnl Do you want to debug zsh memory allocation routines.
-undefine([zsh-mem-debug])dnl
+ifdef([zsh-mem-debug],undefine([zsh-mem-debug]))dnl
 AC_ARG_ENABLE(zsh-mem-debug,
 [  --enable-zsh-mem-debug     debug zsh memory allocation routines],
 [if test x$enableval = xyes; then
@@ -76,7 +76,7 @@
 fi])
 
 dnl Do you want to print warnings when errors in memory allocation.
-undefine([zsh-mem-warning])dnl
+ifdef([zsh-mem-warning],undefine([zsh-mem-warning]))dnl
 AC_ARG_ENABLE(zsh-mem-warning,
 [  --enable-zsh-mem-warning   print warnings for errors in memory allocation],
 [if test x$enableval = xyes; then
@@ -84,7 +84,7 @@
 fi])
 
 dnl Do you want to turn on error checking for free().
-undefine([zsh-secure-free])dnl
+ifdef([zsh-secure-free],undefine([zsh-secure-free]))dnl
 AC_ARG_ENABLE(zsh-secure-free,
 [  --enable-zsh-secure-free   turn on error checking for free()],
 [if test x$enableval = xyes; then
@@ -93,7 +93,7 @@
 
 dnl Do you want debugging information on internal hash tables.
 dnl This turns on the `hashinfo' builtin command.
-undefine([zsh-hash-debug])dnl
+ifdef([zsh-hash-debug],undefine([zsh-hash-debug]))dnl
 AC_ARG_ENABLE(zsh-hash-debug,
 [  --enable-zsh-hash-debug    turn on debugging of internal hash tables],
 [if test x$enableval = xyes; then
@@ -101,12 +101,12 @@
 fi])
 
 dnl Pathnames for global zsh scripts
-undefine([etcdir])dnl
+ifdef([etcdir],undefine([etcdir]))dnl
 AC_ARG_ENABLE(etcdir,
 [  --enable-etcdir=DIR        the default directory for global zsh scripts],
 [etcdir="$enableval"], [etcdir=/etc])
 
-undefine([zshenv])dnl
+ifdef([zshenv],undefine([zshenv]))dnl
 AC_ARG_ENABLE(zshenv,
 [  --enable-zshenv=FILE       the full pathname of the global zshenv script],
 [zshenv="$enableval"],
@@ -119,7 +119,7 @@
   AC_DEFINE_UNQUOTED(GLOBAL_ZSHENV, "$zshenv")
 fi
 
-undefine([zshrc])dnl
+ifdef([zshrc],undefine([zshrc]))dnl
 AC_ARG_ENABLE(zshrc,
 [  --enable-zshrc=FILE        the full pathname of the global zshrc script],
 [zshrc="$enableval"],
@@ -132,7 +132,7 @@
   AC_DEFINE_UNQUOTED(GLOBAL_ZSHRC, "$zshrc")
 fi
 
-undefine([zprofile])dnl
+ifdef([zprofile],undefine([zprofile]))dnl
 AC_ARG_ENABLE(zprofile,
 [  --enable-zprofile=FILE     the full pathname of the global zprofile script],
 [zprofile="$enableval"],
@@ -145,7 +145,7 @@
   AC_DEFINE_UNQUOTED(GLOBAL_ZPROFILE, "$zprofile")
 fi
 
-undefine([zlogin])dnl
+ifdef([zlogin],undefine([zlogin]))dnl
 AC_ARG_ENABLE(zlogin,
 [  --enable-zlogin=FILE       the full pathname of the global zlogin script],
 [zlogin="$enableval"],
@@ -158,7 +158,7 @@
   AC_DEFINE_UNQUOTED(GLOBAL_ZLOGIN, "$zlogin")
 fi
 
-undefine([zlogout])dnl
+ifdef([zlogout],undefine([zlogout]))dnl
 AC_ARG_ENABLE(zlogout,
 [  --enable-zlogout=FILE      the full pathname of the global zlogout script],
 [zlogout="$enableval"],
@@ -178,19 +178,19 @@
 AC_SUBST(zlogout)dnl
 
 dnl Do you want large file support, if available?
-undefine([lfs])dnl
+ifdef([lfs],undefine([lfs]))dnl
 AC_ARG_ENABLE(lfs,
 [  --disable-lfs              turn off support for large files],
 [lfs="$enableval"], [lfs=yes])
 
 dnl Do you want dynamically loaded binary modules.
-undefine([dynamic])dnl
+ifdef([dynamic],undefine([dynamic]))dnl
 AC_ARG_ENABLE(dynamic,
 [  --disable-dynamic          turn off dynamically loaded binary modules],
 [dynamic="$enableval"], [dynamic=yes])
 
 dnl Do you want to disable restricted on r* commands
-undefine([restricted-r])dnl
+ifdef([restricted-r],undefine([restricted-r]))dnl
 AC_ARG_ENABLE(restricted-r,
 [  --disable-restricted-r     turn off r* invocation for restricted shell],
 [if test x$enableval = xyes; then
@@ -213,7 +213,7 @@
 [  --enable-ansi2knr          translate source to K&R C before compiling],
 [ansi2knr="$enableval"], [ansi2knr=default])
 
-undefine([fndir])dnl
+ifdef([fndir],undefine([fndir]))dnl
 AC_ARG_ENABLE(fndir,
 [  --enable-fndir=DIR         the directory in which to install functions],
 dnl ${VERSION} to be determined at compile time.
@@ -223,7 +223,7 @@
   fndir="$enableval"
 fi], [fndir=${datadir}/${tzsh_name}/'${VERSION}'/functions])
 
-undefine([sitefndir])dnl
+ifdef([sitefndir],undefine([sitefndir]))dnl
 AC_ARG_ENABLE(sitefndir,
 [  --enable-site-fndir=DIR    same for site functions (not version specific)],
 [if test $enableval = yes; then
@@ -232,7 +232,7 @@
   sitefndir="$enableval"
 fi], [sitefndir=${datadir}/${tzsh_name}/site-functions])
 
-undefine([function_subdirs])
+ifdef([function_subdirs],undefine([function_subdirs]))
 AC_ARG_ENABLE(function-subdirs,
 [  --enable-function-subdirs  install functions in subdirectories])
 
@@ -248,7 +248,7 @@
 AC_SUBST(FUNCTIONS_SUBDIRS)dnl
 
 dnl Do you want maildir support?
-undefine([maildir_support])dnl
+ifdef([maildir_support],undefine([maildir_support]))dnl
 AC_ARG_ENABLE(maildir-support,
 [  --enable-maildir-support   enable maildir support in MAIL and MAILPATH],
 [if test x$enableval = xyes; then
@@ -256,7 +256,7 @@
 fi])
 
 dnl Do you want to set a maximum function depth?
-undefine([max_function_depth])dnl
+ifdef([max_function_depth],undefine([max_function_depth]))dnl
 AC_ARG_ENABLE(max-function-depth,
 [  --enable-max-function-depth=MAX   limit function depth to MAX],
 [if test x$enableval = xyes; then
@@ -419,7 +419,7 @@
 
 AC_MSG_CHECKING(what to set MAXJOB to)
 dnl Do you want to alter the maximum job table size?
-undefine([max_jobtable_size])dnl
+ifdef([max_jobtable_size],undefine([max_jobtable_size]))dnl
 AC_ARG_ENABLE(max-jobtable-size,
 [  --enable-max-jobtable-size=MAX    limit job table size to MAX],
 
-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR Ltd., Unit 300, Science Park, Milton Road,
Cambridge, CB4 0XL, UK                          Tel: +44 (0)1223 392070


**********************************************************************
The information transmitted is intended only for the person or
entity to which it is addressed and may contain confidential 
and/or privileged material. 
Any review, retransmission, dissemination or other use of, or
taking of any action in reliance upon, this information by 
persons or entities other than the intended recipient is 
prohibited.  
If you received this in error, please contact the sender and 
delete the material from any computer.
**********************************************************************

