From zsh-workers-return-8550-mason-zsh=primenet.com.au@sunsite.auc.dk Thu Nov 04 19:54:19 1999
Return-Path: <zsh-workers-return-8550-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 9673 invoked from network); 4 Nov 1999 19:54:19 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 4 Nov 1999 19:54:19 -0000
Received: (qmail 16729 invoked by alias); 4 Nov 1999 19:54:07 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 8550
Received: (qmail 16722 invoked from network); 4 Nov 1999 19:54:06 -0000
Message-ID: <3821E459.173BA64F@u.genie.co.uk>
Date: Thu, 04 Nov 1999 19:54:01 +0000
From: Oliver Kiddle <opk@u.genie.co.uk>
X-Mailer: Mozilla 4.7 [en] (Win95; I)
X-Accept-Language: en
MIME-Version: 1.0
To: Zsh workers <zsh-workers@sunsite.auc.dk>
Subject: Bug with parameter expansion
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

I get the following with tab bound to expand-or-complete:

zsh -f
export PATH=$PATH<tab>

expands to:
export PATH\=/usr/bin:/etc:....

In other words, the equals is quoted which it shouldn't be. Also, if I
expand $PWD or some variable containing a directory name, I get a space
suffix when a slash would be more useful. What would be nice is if there
was a check to see if the variable contained a directory name and a
slash used for the suffix if so.

There is another case where I'd like a slash suffix to be used:

I have a function named switch which outputs a directory name which it
generates from the current directory so I regularly use it as $(switch).

If I type:
cd $(switch)<tab> it expands and uses a space suffix which is fine.
cd $(switch)/<tab> it expands and uses a slash suffix which is very
useful.
cd $(switch)/Rel<tab> it expands, leaves '/Rel' on the end and uses a
space suffix.

The second case seems to be some sort of special case. What I would like
is for the third case to be no different, i.e. a / after the $(...) is
significant in deciding the suffix and any following characters are
irrelevant (unless there is another $(...) later on the line). Another
way of thinking of it is that I want it to try to do completion after
the expansion - basically, in the third case, I want to complete to the
'Releases' directory.

In the longer term, it would be nice to have a mechanism where variables
can be generated each time they are read by a shell function. Ksh 93
apparently has such a feature using two 'discipline functions' -
varname.get and varname.set which are each called when the variable is
read and assigned to respectively. This would be useful to me with my
switch (and other related functions) because variables are more
convenient on the command line and it could be read twice so left intact
on the command-line while allowing completion after it. I can think of
many other uses though, especially with associative arrays.

Oliver Kiddle

