From zsh-workers-return-17430-mason-zsh=primenet.com.au@sunsite.dk Fri Jul 05 08:16:21 2002
Return-Path: <zsh-workers-return-17430-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12726 invoked from network); 5 Jul 2002 08:16:20 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 5 Jul 2002 08:16:20 -0000
Received: (qmail 25280 invoked by alias); 5 Jul 2002 08:16:12 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 17430
Received: (qmail 25266 invoked from network); 5 Jul 2002 08:16:11 -0000
From: Tomi Vainio - Sun Finland - <Tomi.Vainio@Sun.COM>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <15653.21931.663774.722653@gargle.gargle.HOWL>
Date: Fri, 5 Jul 2002 11:15:39 +0300
To: Greg Price <Greg.Price@Sun.COM>
Cc: Tomi Vainio - Sun Finland - <Tomi.Vainio@Sun.COM>, zsh-workers@sunsite.dk
Subject: Re: 64bit Zsh for Solaris?
In-Reply-To: <20020705171103.R4809@Aus.Sun.COM>
References: <20020705112635.A19854@Aus.Sun.COM>
	<15653.16318.328406.362448@gargle.gargle.HOWL>
	<20020705171103.R4809@Aus.Sun.COM>
X-Mailer: VM 7.05 under 21.4 (patch 8) "Honest Recruiter" XEmacs Lucid
Reply-To: Tomi.Vainio@Sun.COM

Greg Price writes:
 > 
 > Yep, tried that - did "make check" pass all the tests? Mine fails tests:
 > A04, D01, D02, D03, E02.
 > 
Yes, you are right.

cd Test ; make check
if test -n "cc"; then \
  cd .. && DESTDIR= \
  make MODDIR=`pwd`/Test/Modules install.modules > /dev/null; \
fi
mkdir /v/t/src/zsh-4.0.4/Test/Modules
mkdir /v/t/src/zsh-4.0.4/Test/Modules/zsh
for f in ./*.ztst; do \
  ../Src/zsh +Z -f ./ztst.zsh $f; \
done
./A01grammar.ztst: starting.
This test hangs the shell when it fails...
./A01grammar.ztst: all tests successful.
./A02alias.ztst: starting.
./A02alias.ztst: all tests successful.
./A03quoting.ztst: starting.
./A03quoting.ztst: all tests successful.
./A04redirect.ztst: starting.
Test ./A04redirect.ztst failed: bad status 1, expected 0 from:
  foo=bar
  cat <<'  HERE'
  $foo
  HERE
  eval "$(print 'cat <<HERE\n$foo\nHERE')"
Error output:
ZTST_execchunk:2: bad address
ZTST_execchunk:2: bad address
Was testing: Here-documents
./A04redirect.ztst: test failed.
./A05execution.ztst: starting.
./A05execution.ztst: all tests successful.
./B01cd.ztst: starting.
./B01cd.ztst: all tests successful.
./B02typeset.ztst: starting.
./B02typeset.ztst: all tests successful.
./C01arith.ztst: starting.
./C01arith.ztst: all tests successful.
./C02cond.ztst: starting.
./C02cond.ztst: all tests successful.
./C03traps.ztst: starting.
This test takes at least three seconds...
This test, too, takes at least three seconds...
./C03traps.ztst: all tests successful.
./C04funcdef.ztst: starting.
./C04funcdef.ztst: all tests successful.
./D01prompt.ztst: starting.
Segmentation Fault
./D02glob.ztst: starting.
*** /tmp/zsh.ztst.out.24006	Fri Jul  5 11:14:40 2002
--- /tmp/zsh.ztst.tout.24006	Fri Jul  5 11:14:40 2002
***************
*** 1,154 ****
- 0:  [[ foo~ = foo~ ]]
- 0:  [[ foo~ = (foo~) ]]
- 0:  [[ foo~ = (foo~|) ]]
- 0:  [[ foo.c = *.c~boo* ]]
- 1:  [[ foo.c = *.c~boo*~foo* ]]
- 0:  [[ fofo = (fo#)# ]]
- 0:  [[ ffo = (fo#)# ]]
- 0:  [[ foooofo = (fo#)# ]]
- 0:  [[ foooofof = (fo#)# ]]
- 0:  [[ fooofoofofooo = (fo#)# ]]
- 1:  [[ foooofof = (fo##)# ]]
- 1:  [[ xfoooofof = (fo#)# ]]
- 1:  [[ foooofofx = (fo#)# ]]
- 0:  [[ ofxoofxo = ((ofo#x)#o)# ]]
- 1:  [[ ofooofoofofooo = (fo#)# ]]
- 0:  [[ foooxfooxfoxfooox = (fo#x)# ]]
- 1:  [[ foooxfooxofoxfooox = (fo#x)# ]]
- 0:  [[ foooxfooxfxfooox = (fo#x)# ]]
- 0:  [[ ofxoofxo = ((ofo#x)#o)# ]]
- 0:  [[ ofoooxoofxo = ((ofo#x)#o)# ]]
- 0:  [[ ofoooxoofxoofoooxoofxo = ((ofo#x)#o)# ]]
- 0:  [[ ofoooxoofxoofoooxoofxoo = ((ofo#x)#o)# ]]
- 1:  [[ ofoooxoofxoofoooxoofxofo = ((ofo#x)#o)# ]]
- 0:  [[ ofoooxoofxoofoooxoofxooofxofxo = ((ofo#x)#o)# ]]
- 0:  [[ aac = ((a))#a(c) ]]
- 0:  [[ ac = ((a))#a(c) ]]
- 1:  [[ c = ((a))#a(c) ]]
- 0:  [[ aaac = ((a))#a(c) ]]
- 1:  [[ baaac = ((a))#a(c) ]]
- 0:  [[ abcd = ?(a|b)c#d ]]
- 0:  [[ abcd = (ab|ab#)c#d ]]
- 0:  [[ acd = (ab|ab#)c#d ]]
- 0:  [[ abbcd = (ab|ab#)c#d ]]
- 0:  [[ effgz = (bc##d|ef#g?|(h|)i(j|k)) ]]
- 0:  [[ efgz = (bc##d|ef#g?|(h|)i(j|k)) ]]
- 0:  [[ egz = (bc##d|ef#g?|(h|)i(j|k)) ]]
- 0:  [[ egzefffgzbcdij = (bc##d|ef#g?|(h|)i(j|k))# ]]
- 1:  [[ egz = (bc##d|ef##g?|(h|)i(j|k)) ]]
- 0:  [[ ofoofo = (ofo##)# ]]
- 0:  [[ oxfoxoxfox = (oxf(ox)##)# ]]
- 1:  [[ oxfoxfox = (oxf(ox)##)# ]]
- 0:  [[ ofoofo = (ofo##|f)# ]]
- 0:  [[ foofoofo = (foo|f|fo)(f|ofo##)# ]]
- 0:  [[ oofooofo = (of|oofo##)# ]]
- 0:  [[ fffooofoooooffoofffooofff = (f#o#)# ]]
- 1:  [[ fffooofoooooffoofffooofffx = (f#o#)# ]]
- 0:  [[ fofoofoofofoo = (fo|foo)# ]]
- 0:  [[ foo = ((^x)) ]]
- 0:  [[ foo = ((^x)*) ]]
- 1:  [[ foo = ((^foo)) ]]
- 0:  [[ foo = ((^foo)*) ]]
- 0:  [[ foobar = ((^foo)) ]]
- 0:  [[ foobar = ((^foo)*) ]]
- 1:  [[ foot = z*~*x ]]
- 0:  [[ zoot = z*~*x ]]
- 1:  [[ foox = z*~*x ]]
- 1:  [[ zoox = z*~*x ]]
- 0:  [[ moo.cow = (*~*.*).(*~*.*) ]]
- 1:  [[ mad.moo.cow = (*~*.*).(*~*.*) ]]
- 0:  [[ moo.cow = (^*.*).(^*.*) ]]
- 1:  [[ sane.moo.cow = (^*.*).(^*.*) ]]
- 1:  [[ mucca.pazza = mu(^c#)?.pa(^z#)? ]]
- 1:  [[ _foo~ = _(|*[^~]) ]]
- 0:  [[ fff = ((^f)) ]]
- 0:  [[ fff = ((^f)#) ]]
- 0:  [[ fff = ((^f)##) ]]
- 0:  [[ ooo = ((^f)) ]]
- 0:  [[ ooo = ((^f)#) ]]
- 0:  [[ ooo = ((^f)##) ]]
- 0:  [[ foo = ((^f)) ]]
- 0:  [[ foo = ((^f)#) ]]
- 0:  [[ foo = ((^f)##) ]]
- 1:  [[ f = ((^f)) ]]
- 1:  [[ f = ((^f)#) ]]
- 1:  [[ f = ((^f)##) ]]
- 0:  [[ foot = (^z*|*x) ]]
- 1:  [[ zoot = (^z*|*x) ]]
- 0:  [[ foox = (^z*|*x) ]]
- 0:  [[ zoox = (^z*|*x) ]]
- 0:  [[ foo = (^foo)# ]]
- 1:  [[ foob = (^foo)b* ]]
- 0:  [[ foobb = (^foo)b* ]]
- 1:  [[ foob = (*~foo)b* ]]
- 0:  [[ foobb = (*~foo)b* ]]
- 1:  [[ zsh = ^z* ]]
- 0:  [[ a%1X = [[:alpha:][:punct:]]#[[:digit:]][^[:lower:]] ]]
- 1:  [[ a%1 = [[:alpha:][:punct:]]#[[:digit:]][^[:lower:]] ]]
- 0:  [[ [: = [[:]# ]]
- 0:  [[ :] = []:]# ]]
- 0:  [[ :] = [:]]# ]]
- 0:  [[ [ = [[] ]]
- 0:  [[ ] = []] ]]
- 0:  [[ [] = [^]]] ]]
- 0:  [[ fooxx = (#i)FOOXX ]]
- 1:  [[ fooxx = (#l)FOOXX ]]
- 0:  [[ FOOXX = (#l)fooxx ]]
- 1:  [[ fooxx = (#i)FOO(#I)X(#i)X ]]
- 0:  [[ fooXx = (#i)FOO(#I)X(#i)X ]]
- 0:  [[ fooxx = ((#i)FOOX)x ]]
- 1:  [[ fooxx = ((#i)FOOX)X ]]
- 1:  [[ BAR = (bar|(#i)foo) ]]
- 0:  [[ FOO = (bar|(#i)foo) ]]
- 0:  [[ Modules = (#i)*m* ]]
- 0:  [[ fooGRUD = (#i)(bar|(#I)foo|(#i)rod)grud ]]
- 1:  [[ FOOGRUD = (#i)(bar|(#I)foo|(#i)rod)grud ]]
- 0:  [[ readme = (#i)readme~README|readme ]]
- 0:  [[ readme = (#i)readme~README|readme~README ]]
- 0:  [[ 633 = <1-1000>33 ]]
- 0:  [[ 633 = <-1000>33 ]]
- 0:  [[ 633 = <1->33 ]]
- 0:  [[ 633 = <->33 ]]
- 0:  [[ READ.ME = (#ia1)readme ]]
- 1:  [[ READ..ME = (#ia1)readme ]]
- 0:  [[ README = (#ia1)readm ]]
- 0:  [[ READM = (#ia1)readme ]]
- 0:  [[ README = (#ia1)eadme ]]
- 0:  [[ EADME = (#ia1)readme ]]
- 0:  [[ READEM = (#ia1)readme ]]
- 1:  [[ ADME = (#ia1)readme ]]
- 1:  [[ README = (#ia1)read ]]
- 0:  [[ bob = (#a1)[b][b] ]]
- 1:  [[ bob = (#a1)[b][b]a ]]
- 0:  [[ bob = (#a1)[b]o[b]a ]]
- 1:  [[ bob = (#a1)[c]o[b] ]]
- 0:  [[ abcd = (#a2)XbcX ]]
- 0:  [[ abcd = (#a2)ad ]]
- 0:  [[ ad = (#a2)abcd ]]
- 0:  [[ abcd = (#a2)bd ]]
- 0:  [[ bd = (#a2)abcd ]]
- 0:  [[ badc = (#a2)abcd ]]
- 0:  [[ adbc = (#a2)abcd ]]
- 1:  [[ dcba = (#a2)abcd ]]
- 0:  [[ dcba = (#a3)abcd ]]
- 0:  [[ aabaXaaabY = (#a1)(a#b)#Y ]]
- 0:  [[ aabaXaaabY = (#a1)(a#b)(a#b)Y ]]
- 0:  [[ aaXaaaaabY = (#a1)(a#b)(a#b)Y ]]
- 0:  [[ aaaXaaabY = (#a1)(a##b)##Y ]]
- 0:  [[ aaaXbaabY = (#a1)(a##b)##Y ]]
- 1:  [[ read.me = (#ia1)README~READ.ME ]]
- 0:  [[ read.me = (#ia1)README~READ_ME ]]
- 1:  [[ read.me = (#ia1)README~(#a1)READ_ME ]]
- 0:  [[ test = *((#s)|/)test((#e)|/)* ]]
- 0:  [[ test/path = *((#s)|/)test((#e)|/)* ]]
- 0:  [[ path/test = *((#s)|/)test((#e)|/)* ]]
- 0:  [[ path/test/ohyes = *((#s)|/)test((#e)|/)* ]]
- 1:  [[ atest = *((#s)|/)test((#e)|/)* ]]
- 1:  [[ testy = *((#s)|/)test((#e)|/)* ]]
- 1:  [[ testy/path = *((#s)|/)test((#e)|/)* ]]
- 1:  [[ path/atest = *((#s)|/)test((#e)|/)* ]]
- 1:  [[ atest/path = *((#s)|/)test((#e)|/)* ]]
- 1:  [[ path/testy = *((#s)|/)test((#e)|/)* ]]
- 1:  [[ path/testy/ohyes = *((#s)|/)test((#e)|/)* ]]
- 1:  [[ path/atest/ohyes = *((#s)|/)test((#e)|/)* ]]
  0 tests failed.
--- 1 ----
Test ./D02glob.ztst failed: output differs from expected as shown above for:
  globtest globtests
Error output:
/v/t/src/zsh-4.0.4/Test/./../Misc/globtests:7: bad address
Was testing: zsh globbing
./D02glob.ztst: test failed.
./D03procsubst.ztst: starting.
Segmentation Fault
./D04parameter.ztst: starting.
./D04parameter.ztst: all tests successful.
./D05array.ztst: starting.
./D05array.ztst: all tests successful.
./D06subscript.ztst: starting.
./D06subscript.ztst: all tests successful.
./E01options.ztst: starting.
./E01options.ztst: all tests successful.
./E02xtrace.ztst: starting.
*** /tmp/zsh.ztst.out.24811	Fri Jul  5 11:14:56 2002
--- /tmp/zsh.ztst.tout.24811	Fri Jul  5 11:14:56 2002
***************
*** 1,26 ****
  Tracing: builtin
  Tracing: builtin 2>file
- Tracing: external
- Tracing: external 2>file
  Tracing: ( builtin )
  Tracing: ( builtin ) 2>file
- Tracing: ( external )
- Tracing: ( external ) 2>file
  Tracing: { builtin }
  Tracing: { builtin } 2>file
- Tracing: { external }
- Tracing: { external } 2>file
  Tracing: do builtin done
  Tracing: do builtin done 2>file
- Tracing: do external done
- Tracing: do external done 2>file
  Tracing: function
  Tracing: function 2>file
  Tracing: source
  Tracing: source 2>file
  +ZTST_execchunk:2> print Tracing: ( builtin ) 2>file
! +ZTST_execchunk:2> cat
  +ZTST_execchunk:2> print Tracing: { builtin } 2>file
! +ZTST_execchunk:2> cat
  +ZTST_execchunk:2> print Tracing: do builtin done 2>file
! +ZTST_execchunk:2> cat
--- 1,18 ----
  Tracing: builtin
  Tracing: builtin 2>file
  Tracing: ( builtin )
  Tracing: ( builtin ) 2>file
  Tracing: { builtin }
  Tracing: { builtin } 2>file
  Tracing: do builtin done
  Tracing: do builtin done 2>file
  Tracing: function
  Tracing: function 2>file
  Tracing: source
  Tracing: source 2>file
  +ZTST_execchunk:2> print Tracing: ( builtin ) 2>file
! ZTST_execchunk:2: bad address
  +ZTST_execchunk:2> print Tracing: { builtin } 2>file
! ZTST_execchunk:2: bad address
  +ZTST_execchunk:2> print Tracing: do builtin done 2>file
! ZTST_execchunk:2: bad address
Test ./E02xtrace.ztst failed: output differs from expected as shown above for:
  set -x
  print 'Tracing: builtin'
  print 'Tracing: builtin 2>file' 2>xtrace.err
  cat <<<'Tracing: external'
  cat <<<'Tracing: external 2>file' 2>>xtrace.err
  ( print 'Tracing: ( builtin )' )
  ( print 'Tracing: ( builtin ) 2>file' ) 2>>xtrace.err
  ( cat <<<'Tracing: ( external )' )
  ( cat <<<'Tracing: ( external ) 2>file' ) 2>>xtrace.err
  { print 'Tracing: { builtin }' }
  { print 'Tracing: { builtin } 2>file' } 2>>xtrace.err
  { cat <<<'Tracing: { external }' }
  { cat <<<'Tracing: { external } 2>file' } 2>>xtrace.err
  repeat 1 do print 'Tracing: do builtin done'; done
  repeat 1 do print 'Tracing: do builtin done 2>file'; done 2>>xtrace.err
  repeat 1 do cat <<<'Tracing: do external done'; done
  repeat 1 do cat <<<'Tracing: do external done 2>file'; done 2>>xtrace.err
  xtf 'Tracing: function'
  xtf 'Tracing: function 2>file' 2>>xtrace.err
  . ./xt.in 'Tracing: source'
  . ./xt.in 'Tracing: source 2>file' 2>>xtrace.err
  set +x
  cat xtrace.err
Error output:
+ZTST_execchunk:2> print Tracing: builtin
+ZTST_execchunk:2> print Tracing: builtin 2>file
ZTST_execchunk:2: bad address
ZTST_execchunk:2: bad address
+ZTST_execchunk:2> print Tracing: ( builtin )
ZTST_execchunk:2: bad address
+ZTST_execchunk:2> print Tracing: { builtin }
ZTST_execchunk:2: bad address
+ZTST_execchunk:2> print Tracing: do builtin done
ZTST_execchunk:2: bad address
+ZTST_execchunk:2> xtf Tracing: function
+xtf:0> local regression_test_dummy_variable
+xtf:0> print Tracing: function
+ZTST_execchunk:2> xtf Tracing: function 2>file
+xtf:0> local regression_test_dummy_variable
+xtf:0> print Tracing: function 2>file
+ZTST_execchunk:2> . ./xt.in Tracing: source
+./xt.in:1> print Tracing: source
+ZTST_execchunk:2> . ./xt.in Tracing: source 2>file
+./xt.in:1> print Tracing: source 2>file
+ZTST_execchunk:2> set +x
Was testing: xtrace with and without redirection
./E02xtrace.ztst: test failed.
./V01zmodload.ztst: starting.
./V01zmodload.ztst: all tests successful.
./V02zregexparse.ztst: starting.
./V02zregexparse.ztst: all tests successful.
./Y01completion.ztst: starting.
./Y01completion.ztst: all tests successful.
./Y02compmatch.ztst: starting.
./Y02compmatch.ztst: all tests successful.
./Y03arguments.ztst: starting.
./Y03arguments.ztst: all tests successful.
rm -rf Modules .zcompdump

