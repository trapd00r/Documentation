From zsh-workers-request@math.gatech.edu Mon Oct 27 12:52:48 1997
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 1787 invoked from network); 27 Oct 1997 12:52:47 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 27 Oct 1997 12:52:47 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.8.5/8.8.5) id HAA14439;
	Mon, 27 Oct 1997 07:39:56 -0500 (EST)
Resent-Date: Mon, 27 Oct 1997 07:36:01 -0500 (EST)
Message-ID: <19971027133634.59572@ens-lyon.fr>
Date: Mon, 27 Oct 1997 13:36:34 +0100
From: Vincent Lefevre <Vincent.Lefevre@ens-lyon.fr>
To: john.cooper@digitivity.com
Cc: zsh-users@math.gatech.edu
Subject: Re: backslash problems?
References: <19971027113104140.AAA348@TENDLE>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.87.3
In-Reply-To: <19971027113104140.AAA348@TENDLE>; from John Cooper on Mon, Oct 27, 1997 at 11:31:05AM +0000
X-Mailer-Info: http://www.ens-lyon.fr/~vlefevre/mutt_eng.html
Resent-Message-ID: <"7P2a73.0.PW3.mg8Lq"@math>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/1104
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

On Mon, Oct 27, 1997 at 11:31:05AM +0000, John Cooper wrote:
> $ echo "foo\bar\baz"
> foaaz

Inside double quotes, "b" is already quoted, so "\b" evaluates to \b,
and "foo\bar\baz" evaluates to foo\bar\baz. Then, through zsh's echo,
\b evaluates to backspace (man zshbuiltins) by default. This explains
what is displayed.

> $ echo "foo\\bar\\baz"
> foaaz

Even inside double quotes, "\\" evaluates to a single backslash (this
allows to use \" and \$ inside double quotes). So, "foo\\bar\\baz"
evaluates to foo\bar\baz like in the first case. Therefore you get
the same result as above.

> $ echo 'foo\bar\baz'
> foaaz

Same as in the first case.

> $ echo 'foo\\bar\\baz'
> foo\bar\baz

Inside single quotes, '\\' evaluates to \\. And then, \\ evaluates
to a single backslash.

> Under bash, it seems more consistent:
> 
> $ bash
> bash$ echo "foo\bar\baz"
> foo\bar\baz
> bash$ echo 'foo\bar\baz'
> foo\bar\baz
> bash$

You'll get the same behavior if you use the switch -E with zsh's echo.

man zshbuiltins, command echo gives:

          The -E falg or the BSD_ECHO option can be used to  dis-
          able  these escape sequences. In the later case -e flag
          can be used to enable them.

**** Zsh writers: there's a typo ("falg" instead of "flag").

-- 
Vincent Lefevre <vlefevre@ens-lyon.fr> | Acorn Risc PC, StrongARM @ 202MHz
WWW: http://www.ens-lyon.fr/~vlefevre/ | 20+1MB RAM, Eagle M2, TV + Teletext
PhD st. in Computer Science, 2nd year  | Apple CD-300, SyQuest 270MB (SCSI)
-----------------------------------------------------------------------------

