From zsh-workers-return-13610-mason-zsh=primenet.com.au@sunsite.dk Mon Mar 12 17:23:49 2001
Return-Path: <zsh-workers-return-13610-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 16885 invoked from network); 12 Mar 2001 17:23:44 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 12 Mar 2001 17:23:44 -0000
Received: (qmail 27617 invoked by alias); 12 Mar 2001 17:23:27 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 13610
Received: (qmail 27606 invoked from network); 12 Mar 2001 17:23:26 -0000
Date: Mon, 12 Mar 2001 17:23:25 +0000
From: Oliver Kiddle <opk@u.genie.co.uk>
To: zsh-workers@sunsite.dk
Subject: PATCH: spelling in docs
Message-ID: <20010312172325.A18814@rambo.logica.co.uk>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="9amGYk9869ThD9tj"
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
Sender: Oliver Kiddle <kiddleo@logica.com>


--9amGYk9869ThD9tj
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

This patch is mostly fixing spelling mistakes with a few improvements
to wording.

Oliver

--9amGYk9869ThD9tj
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename="speling.txt"

Index: INSTALL
===================================================================
RCS file: /cvsroot/zsh/zsh/INSTALL,v
retrieving revision 1.5
diff -u -r1.5 INSTALL
--- INSTALL	2000/12/04 12:02:29	1.5
+++ INSTALL	2001/03/12 17:17:58
@@ -261,7 +261,7 @@
 
 Any startup/shutdown script can be disabled by giving the
 --disable-scriptname option to "configure".  The --disable-etcdir option
-disables all startup/shutdown files which are not explicitely enabled.
+disables all startup/shutdown files which are not explicitly enabled.
 
 Shell functions
 ---------------
Index: README
===================================================================
RCS file: /cvsroot/zsh/zsh/README,v
retrieving revision 1.4
diff -u -r1.4 README
--- README	2001/02/01 15:48:58	1.4
+++ README	2001/03/12 17:17:58
@@ -23,7 +23,7 @@
 file Etc/FEATURES, and for the latest changes see Etc/NEWS.  For more
 details, see the documentation.
 
-Possibile incompatibilities
+Possible incompatibilities
 ---------------------------
 
 If you have been using recent versions of zsh 3.1, the following changes in
@@ -95,7 +95,7 @@
 by example function run-help located in the subdirectory Functions/Misc to
 show information about zsh builtins and run `man' on external commands.
 For this the shell variable HELPDIR should point to a directory containing
-the fileles generated by the helpfiles script.  run-help should be
+the files generated by the helpfiles script.  run-help should be
 unaliased before loading the run-help function.  After that this function
 will be executed by the run-help ZLE function which is by default bound
 to ESC-h in emacs mode.
Index: Completion/Core/compinit
===================================================================
RCS file: /cvsroot/zsh/zsh/Completion/Core/compinit,v
retrieving revision 1.17
diff -u -r1.17 compinit
--- Completion/Core/compinit	2001/02/28 09:12:57	1.17
+++ Completion/Core/compinit	2001/03/12 17:17:58
@@ -109,7 +109,7 @@
 typeset -gA _comps _services _patcomps _postpatcomps _compautos
 
 # The associative array use to report information about the last
-# cmpletion to the outside.
+# completion to the outside.
 
 typeset -gA _lastcomp
 
@@ -165,7 +165,7 @@
 # trying to find a function defined for the command on the line if no
 # such function could be found.
 # With the `-k' option a function for a special completion keys is 
-# defined and immediatly bound to those keys. Here, the extra arguments
+# defined and immediately bound to those keys. Here, the extra arguments
 # are the name of one of the builtin completion widgets and any number
 # of key specifications as accepted by the `bindkey' builtin.
 # In any case the `-a' option may be given which makes the function
Index: Completion/Core/compinstall
===================================================================
RCS file: /cvsroot/zsh/zsh/Completion/Core/compinstall,v
retrieving revision 1.19
diff -u -r1.19 compinstall
--- Completion/Core/compinstall	2001/03/06 07:47:27	1.19
+++ Completion/Core/compinstall	2001/03/12 17:17:58
@@ -717,7 +717,7 @@
 	   case $key in
 	     g) vared -eh -c -p 'globbing condition> ' glob
 		;;
-	     s) vared -eh -c -p 'substituion condition> ' subst
+	     s) vared -eh -c -p 'substitution condition> ' subst
 		;;
 	     c) vared -eh -c -p 'completion condition> ' compl
 		;;
@@ -768,7 +768,7 @@
          _correct
 'Correction:  correct existing word, no completion.'
          _expand
-'Expansion: use globbing and parameter substituion, if possible.'
+'Expansion: use globbing and parameter substitution, if possible.'
 
 	 _ignored
 'Use patterns that were previously ignored if no matches so far.'
@@ -923,7 +923,7 @@
 special way.  Numbers in parentheses show matchers to be tried and the order.
 The same number can be assigned to different matchers, meaning apply at the
 same time.  Omit a sequence number to try normal matching at that point.
-A \`+' in the first line indicates the element is added to preceeding matchers
+A \`+' in the first line indicates the element is added to preceding matchers
 instead of replacing them; toggle this with \`t'.  You don't need to set
 all four, or indeed any matchers --- then the style will not be set.
 
@@ -1702,7 +1702,7 @@
   print "\
                *** compinstall: main menu ***
 Note that hitting \`q' in menus does not abort the set of changes from
-lower level menus.  However, qutting at top level will ensure that nothing
+lower level menus.  However, quitting at top level will ensure that nothing
 at all is actually written out.
 
 1.  Completers:  choose completion behaviour for tasks such as
Index: Doc/Zsh/builtins.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/builtins.yo,v
retrieving revision 1.22
diff -u -r1.22 builtins.yo
--- Doc/Zsh/builtins.yo	2000/12/03 23:32:12	1.22
+++ Doc/Zsh/builtins.yo	2001/03/12 17:17:58
@@ -834,7 +834,7 @@
 default mode is canonical input, in which an entire line is read at a time,
 so usually `tt(read -t)' will not read anything until an entire line has
 been typed.  However, when reading from the terminal with tt(-k)
-this is automatically handled; note that only availablity of the first
+this is automatically handled; note that only availability of the first
 character is tested, so that e.g. `tt(read -t -k 2)' can still block on the
 second character.
 )
@@ -1610,7 +1610,7 @@
 automatically resolved and the tt(-A) flag is not used.
 )
 item(tt(zmodload) tt(-A) [ tt(-L) ] [ var(modalias)[tt(=)var(module)] ... ])(
-For each argument, if both var(modlias) and var(module) are given,
+For each argument, if both var(modalias) and var(module) are given,
 define var(modalias) to be an alias for the module var(module).
 If the module var(modalias) is ever subsequently requested, either via a
 call to tt(zmodload) or implicitly, the shell will attempt to load
Index: Doc/Zsh/compsys.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/compsys.yo,v
retrieving revision 1.107
diff -u -r1.107 compsys.yo
--- Doc/Zsh/compsys.yo	2001/03/06 07:47:27	1.107
+++ Doc/Zsh/compsys.yo	2001/03/12 17:17:58
@@ -204,7 +204,7 @@
 )
 item(tt(#compdef -K) var(widget-name) var(style) var(key-sequences) ...)(
 This is similar to tt(-k), with the same var(style) and var(key-sequences)
-arguments, preceeded by a string giving the name of a widget.
+arguments, preceded by a string giving the name of a widget.
 In this case only one var(key-sequences) argument may be given, but the
 entire set of three arguments may be repeated with a different set of
 arguments.  In particular, the var(widget-name) must be distinct in each
@@ -334,7 +334,7 @@
 When completion is attempted somewhere on a command line the
 completion system first tries to find out the context where completion 
 was tried.  The context depends on such things as the name of the
-command when completing an argument, and possibily also
+command when completing an argument, and possibly also
 the name of an option when completing an argument to that option.
 
 The `context' of a completion is a string consisting of multiple fields. This
@@ -1601,7 +1601,7 @@
 This is used by the tt(_approximate) and tt(_correct) completer functions
 to determine the maximum number of errors to allow.  The completer will try
 to generate completions by first allowing one error, then two errors, and
-so on, until either a match or matches wer found or the maximum number of
+so on, until either a match or matches were found or the maximum number of
 errors given by this style has been reached.
 
 If the value for this style contains the string `tt(numeric)', the 
@@ -1748,8 +1748,8 @@
 kindex(regular, completion style)
 item(tt(regular))(
 This style is used by the tt(_expand_alias) completer and bindable 
-command.  If is set to `true' (the default) regular alias will be
-expanded only in command position.  If it is set to `false', regular
+command.  If set to `true' (the default), regular aliases will be
+expanded but only in command position.  If it is set to `false', regular
 aliases will never be expanded and if it is set to the string
 `tt(always)', regular aliases will be expanded even if not in command
 position.
@@ -2426,7 +2426,7 @@
 findex(_expand_alias)
 item(tt(_expand_alias))(
 If the word the cursor is on is an alias, it is expanded and no other
-completers are called.  Which types of aliases are to be expanded can
+completers are called.  The types of aliases which are to be expanded can
 be controlled with the tt(regular), tt(global) and tt(disabled)
 styles.
 
@@ -2578,7 +2578,7 @@
 completion bindings in bash.  The last character of the binding determines
 what is completed: `tt(!)', command names; `tt($)', environment variables;
 `tt(@)', host names; `tt(/)', file names; `tt(~)' user names.  In bash, the
-binding preceeded by `tt(\e)' gives completion, and preceeded by `tt(^X)'
+binding preceded by `tt(\e)' gives completion, and preceded by `tt(^X)'
 lists options.  As some of these bindings clash with standard zsh
 bindings, only `tt(\e~)' and `tt(^X~)' are bound by default.  To add the
 rest, the following should be added to tt(.zshrc) after tt(compinit) has
@@ -2609,14 +2609,14 @@
 findex(_expand_alias (^Xa))
 item(tt(_expand_alias (^Xa)))(
 This function can be used as a completer and as a bindable command.
-It expands the word the cursor on if it is an alias.  The types of
-aliases used can be controlled with the tt(regular), tt(global) and
+It expands the word the cursor is on if it is an alias.  The types of
+aliases expanded can be controlled with the tt(regular), tt(global) and
 tt(disabled) styles.
 
 When used as a bindable command there is one additional feature that
 can be selected by setting the tt(complete) style to `true'.  In this
 case, if the word isn't the name of an alias, tt(_expand_alias) tries
-to complete the word to an full alias name without expanding it (but
+to complete the word to a full alias name without expanding it (but
 leaving the cursor directly after the completed word so that invoking
 tt(_expand_alias) once more will expand the now-complete alias name).
 )
@@ -2631,8 +2631,8 @@
 This function is not defined as a widget and not bound by
 default. However, it can be used to define a widget and will then
 store the name of the widget in the var(function) field of the context 
-and call the completion system. This allows to easily define custom
-completion widgets with their own sets of style settings. For example, 
+and call the completion system. This allows custom completion widgets
+with their own set of style settings to be easily defined. For example, 
 to define a widget that does normal completion and starts
 menu selection, one could do:
 
@@ -2748,7 +2748,7 @@
 directly after the var(command), but if one of the var(args) is a single
 hyphen, they are inserted directly before that. If the hyphen is the last
 argument, that will be removed from the argument list before the
-var(command) is called. This allows to use tt(_all_labels) in almost all
+var(command) is called. This allows tt(_all_labels) to be used in almost all
 cases where the matches can be generated by a single call to the
 tt(compadd) builtin command or by a call to one of the utility functions.
 
@@ -3125,7 +3125,7 @@
 argument will otherwise be ignored. With tt(-A), no options will be
 completed after the first non-option argument on the line.  The tt(-A) 
 has to be followed by a pattern matching all strings which are not to
-be taken as arguemnts. For example, to make tt(_arguments) stop
+be taken as arguments. For example, to make tt(_arguments) stop
 completing options after the first normal argument, but ignoring all
 strings starting with a hyphen even if they are not described by one
 of the var(optspec)s, one would use: `tt(-A "-*")'.
@@ -3134,8 +3134,8 @@
 because the completion code has to parse the command line once for
 every set. So more than one set should only be used if the command
 syntax is too complicated. Note also that an option specification with
-rest-arguments (as in `tt(-foo:*:...)') often allows to avoid the use
-of multiple sets.
+rest-arguments (as in `tt(-foo:*:...)') often allows the use of
+multiple sets to be avoided.
 
 Another option supported is `tt(-O) var(name)'. The var(name) will be
 taken as the name of an array and its elements will be given to
@@ -3202,7 +3202,7 @@
 If the var(pattern) ends in `tt((-))', this will removed from the
 pattern and the var(action) will be used only directly after the
 `tt(=)', not in the next word. I.e., this is like a normal
-specification as descrobed above using `tt(=-)'.
+specification as described above using `tt(=-)'.
 
 The option `tt(-i) var(patterns)' (which must be given after the
 `tt(-)tt(-)') can be used to give patterns for options which should not be
@@ -3573,10 +3573,10 @@
 first argument specifies the name of the generated function while the
 remaining arguments specify a completion as a set of regular
 expressions with actions.  The generated function has the structure of a
-finite-state machine whose states corresponds to the state (i.e. the
+finite-state machine whose states correspond to the state (i.e. the
 context) of the completion. This state machine uses a command line,
-which comes from concatenating the tt(words) array up to the current
-cursor position using null characters as separators with no extra
+which comes from the concatenation of the tt(words) array up to the
+current cursor position using null characters as separators with no extra
 quotation.  This is analysed and at the end the appropriate action is
 executed.
 
@@ -3589,9 +3589,9 @@
 This is a primitive element, corresponding to one
 state of the compiled state machine.  The state is entered if
 `tt((#b)LPAR()(#B))var(pattern)tt(RPAR()(#B))var(lookahead)tt(*)' matches
-the command line string.  If it is matched, `var(guard)' is evaluated and
+the command line string.  If it matches, `var(guard)' is evaluated and
 its return status is examined; if this is successful, the state is entered,
-else the test fails and other candidates are tried.  The var(pattern)
+otherwise the test fails and other candidates are tried.  The var(pattern)
 string `tt([])' is guaranteed never to match.
 
 If the test succeeds and the state is entered, the left part of the
@@ -3605,12 +3605,12 @@
 In this case, nothing is actually removed from the command line string
 so that any previous or neighbouring state may also have var(actions)s.
 var(actions)s evaluation are ordered by the tt(tag-order) style and specified
-var(tag) by tt(_alternative).  So, various format supported by tt(_alternative)
-can be used in var(action).  var(descr) is used for set up the array parameter
-tt(expl).
+var(tag) by tt(_alternative).  So, the various formats supported by
+tt(_alternative) can be used in var(action).  var(descr) is used for
+setting up the array parameter tt(expl).
 )
 item(tt(/)var(pattern)tt(/+) [tt(%)var(lookahead)tt(%)] [tt(-)var(guard)] [tt(:)var(tag)tt(:)var(descr)tt(:)var(action)])(
-This is similar to `tt(/)var(pattern)tt(/) ...' but the left part of
+This is similar to `tt(/)var(pattern)tt(/) ...' but the left part of the
 command line string is also considered as part of the completion target.
 )
 item(tt(/)var(pattern)tt(/-) [tt(%)var(lookahead)tt(%)] [tt(-)var(guard)] [tt(:)var(tag)tt(:)var(descr)tt(:)var(action)])(
Index: Doc/Zsh/compwid.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/compwid.yo,v
retrieving revision 1.28
diff -u -r1.28 compwid.yo
--- Doc/Zsh/compwid.yo	2001/01/11 10:06:49	1.28
+++ Doc/Zsh/compwid.yo	2001/03/12 17:17:58
@@ -14,7 +14,7 @@
 writing their own --- see dictionary entry for `hubris') should skip this
 section.  The older system based on the tt(compctl) builtin command is
 described in
-ifzman(zmanref(zshcompctly))\
+ifzman(zmanref(zshcompctl))\
 ifnzman(the chapter noderef(Completion Using compctl)).
 
 Completion widgets are defined by the tt(-C) option to the tt(zle)
@@ -410,7 +410,7 @@
 This contains all positions where characters in the unambiguous string
 are missing or where the character inserted differs from at least one
 of the matches.  The positions are given as indexes into the string
-given by the value of the tt(uanmbiguous) key.
+given by the value of the tt(unambiguous) key.
 )
 vindex(vared, compstate)
 item(tt(vared))(
@@ -656,7 +656,7 @@
 for which the corresponding var(word) is matched are retained.
 )
 item(tt(-C))(
-This option adds a special match which expands to all other metches
+This option adds a special match which expands to all other matches
 when inserted into the line, even those that are added after this
 option is used.  Together with the tt(-d) option it is possible to
 specify a string that should be displayed in the list for this special 
@@ -851,7 +851,7 @@
 These letters are for patterns that are anchored by another pattern on
 the left side. Matching for var(lpat) and var(tpat) is as for tt(m) and
 tt(M), but the pattern var(lpat) matched on the command line must be
-preceeded by the pattern var(lanchor).  The var(lanchor) can be blank to
+preceded by the pattern var(lanchor).  The var(lanchor) can be blank to
 anchor the match to the start of the command line string; otherwise the
 anchor can occur anywhere, but must match in both the command line and
 trial completion strings.
Index: Doc/Zsh/contrib.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/contrib.yo,v
retrieving revision 1.8
diff -u -r1.8 contrib.yo
--- Doc/Zsh/contrib.yo	2001/01/11 10:06:50	1.8
+++ Doc/Zsh/contrib.yo	2001/03/12 17:17:58
@@ -111,7 +111,7 @@
 needed re-compilation could be compiled and non-zero if compilation for at
 least one of the files failed.
 
-If the tt(-p) option is given, the var(args) are interepted as one
+If the tt(-p) option is given, the var(args) are interpreted as one
 or more sets of arguments for tt(zcompile), separated by `tt(-)tt(-)'.
 For example:
 
@@ -326,7 +326,7 @@
 where one can disambiguate between as many matches as possible with as 
 little typing as possible.
 
-This widget allows to easily move the cursor to the other interesting
+This widget allows the cursor to be easily moved to the other interesting
 spots.  It can be invoked repeatedly to cycle between all positions
 reported by the completion system.
 )
@@ -367,7 +367,7 @@
 left of an integer causes that integer to be incremented by one.  With a
 numeric prefix argument, the number is incremented by the amount of the
 argument (decremented if the prefix argument is negative).  The shell
-paramter tt(incarg) may be set to change the default increment something
+parameter tt(incarg) may be set to change the default increment something
 other than one.
 
 example(bindkey '^X+' incarg)
Index: Doc/Zsh/expn.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/expn.yo,v
retrieving revision 1.25
diff -u -r1.25 expn.yo
--- Doc/Zsh/expn.yo	2001/02/19 10:26:54	1.25
+++ Doc/Zsh/expn.yo	2001/03/12 17:17:59
@@ -1248,7 +1248,7 @@
 `tt(~)', `tt(|)' (lowest); the
 remaining operators are simply treated from left to right as part of a
 string, with `tt(#)' and `tt(##)' applying to the shortest possible
-preceeding unit (i.e. a character, `tt(?)', `tt([)...tt(])',
+preceding unit (i.e. a character, `tt(?)', `tt([)...tt(])',
 `tt(<)...tt(>)', or a parenthesised expression).  As mentioned
 above, a `tt(/)' used as a directory separator may not appear inside
 parentheses, while a `tt(|)' must do so; in patterns used in other contexts
Index: Doc/Zsh/options.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/options.yo,v
retrieving revision 1.14
diff -u -r1.14 options.yo
--- Doc/Zsh/options.yo	2001/02/28 09:12:57	1.14
+++ Doc/Zsh/options.yo	2001/03/12 17:17:59
@@ -254,7 +254,7 @@
 item(tt(CHASE_LINKS) (tt(-w)))(
 Resolve symbolic links to their true values when changing directory.
 This also has the effect of tt(CHASE_DOTS), i.e. a `tt(..)' path segment
-will be treated as referring to the physical parent, even if the preceeding
+will be treated as referring to the physical parent, even if the preceding
 path segment is a symbolic link.
 )
 pindex(CHECK_JOBS)
Index: Doc/Zsh/zftpsys.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/zftpsys.yo,v
retrieving revision 1.6
diff -u -r1.6 zftpsys.yo
--- Doc/Zsh/zftpsys.yo	2000/09/04 21:13:09	1.6
+++ Doc/Zsh/zftpsys.yo	2001/03/12 17:17:59
@@ -493,7 +493,7 @@
 the background, you should turn off progress reports by hand using
 `tt(zstyle ':zftp:*' progress none)'.  Note also that if you alter it, any
 output em(must) be to standard error, as standard output may be a file
-being received.  The form of the progess meter, or whether it is used at
+being received.  The form of the progress meter, or whether it is used at
 all, can be configured without altering the function, as described in the
 next section.
 )
Index: Etc/CONTRIBUTORS
===================================================================
RCS file: /cvsroot/zsh/zsh/Etc/CONTRIBUTORS,v
retrieving revision 1.8
diff -u -r1.8 CONTRIBUTORS
--- Etc/CONTRIBUTORS	2001/03/06 07:53:12	1.8
+++ Etc/CONTRIBUTORS	2001/03/12 17:17:59
@@ -26,7 +26,7 @@
 
 Chmouel Boudjnah <chmouel@mandrakesoft.com>: configuration support.
 
-Wayne Davison <wayned@users.sourceforege.net>: History code.
+Wayne Davison <wayned@users.sourceforge.net>: History code.
 
 Alexandre Duret-Lutz: completion functions and substitution code.
 
@@ -50,11 +50,11 @@
 Geoff Wing <gcw@zsh.org>: FTP and mailing list archive
 
 Sven Wischnowsky <wischnow@zsh.org>: Most of the completion code, zpty,
-signal queuing, parameters, builtins, builtouts, built-here-and-theres;
+signal queueing, parameters, builtins, builtouts, built-here-and-theres;
 mend garden shed, rewire electricity, reinstall shutters, fix TV aerial in
 howling gale...
 
-Other patches from E. Jay Birkenbilt,, Jan Fedak, Ulrik Haugen, Paul
+Other patches from E. Jay Birkenbilt, Jan Fedak, Ulrik Haugen, Paul
 Johnson, Fr. Br. George (George V Kouryachy).
 
 Versions 3.1.7 to 3.1.9
@@ -84,7 +84,7 @@
   for completion system, documentation, various other fixes
 
 * Bart Schaefer <schaefer@zsh.org>: documentation and many other bits,
-  archive maintainance
+  archive maintenance
 
 * Adam Spiers <adam@spiers.net>: various completion functions, source code
   archive maintenance, documentation fixes, prompt themes

--9amGYk9869ThD9tj--

