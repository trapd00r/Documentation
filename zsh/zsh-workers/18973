From zsh-workers-return-18973-mason-zsh=primenet.com.au@sunsite.dk Thu Aug 28 19:50:37 2003
Return-Path: <zsh-workers-return-18973-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 21545 invoked from network); 28 Aug 2003 19:50:36 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 28 Aug 2003 19:50:36 -0000
Received: (qmail 21185 invoked by alias); 28 Aug 2003 19:50:31 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 18973
Received: (qmail 21170 invoked from network); 28 Aug 2003 19:50:31 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 28 Aug 2003 19:50:31 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [193.11.248.2] by sunsite.dk (MessageWall 1.0.8) with SMTP; 28 Aug 2003 19:50:30 -0000
Received: by glutus.hemmet.chalmers.se (Postfix, from userid 8)
	id 0EE88D7B2D; Thu, 28 Aug 2003 21:50:25 +0200 (CEST)
Received: from [192.168.0.2] (chmod007.hemmet.chalmers.se [193.11.248.243])
	by glutus.hemmet.chalmers.se (Postfix) with ESMTP
	id 2D738D79FC; Thu, 28 Aug 2003 21:50:14 +0200 (CEST)
In-Reply-To: <20424.1061889099@gmcs3.local>
References: <CF1EFB86-D75A-11D7-982B-0003930A2D56@ittpoi.com> <20424.1061889099@gmcs3.local>
Mime-Version: 1.0 (Apple Message framework v588)
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
Message-Id: <D0124136-D990-11D7-AC81-0003930A2D56@ittpoi.com>
Content-Transfer-Encoding: 7bit
Cc: zsh-workers@sunsite.dk
From: David Remahl <david@ittpoi.com>
Subject: Re: Complicated Completions 
Date: Thu, 28 Aug 2003 21:50:02 +0200
To: Oliver Kiddle <okiddle@yahoo.co.uk>
X-Mailer: Apple Mail (2.588)
X-Spam-Status: No, hits=-3.9 required=5.0
	tests=BAYES_20,EMAIL_ATTRIBUTION,IN_REP_TO,QUOTED_EMAIL_TEXT,
	      REFERENCES,REPLY_WITH_QUOTES,USER_AGENT_APPLEMAIL
	autolearn=ham version=2.55
X-Spam-Level: 
X-Spam-Checker-Version: SpamAssassin 2.55 (1.174.2.19-2003-05-19-exp)
X-Scanned-By: CLAM (openantivirus DB) antivirus scanner at mail.csbnet.se

Thanks for your help!

I've now gotten started on something that I hope will work out...But  
why doesn't this work? I have only written a small part of the  
completion, for just the attach subcommand (verb). Try this:

type: hdiutil attach abc.dmg <tab>

Why doesn't it show the three switches -quiet, -debug and -verbose?

/ rgds, David Remahl

#compdef hdiutil

local opts args hdiverbs

_hdiutil_verbs ()
{
   local -a commands
   verbs=(
     {attach,mount}':attach (mount) an image'
     {detach,eject}':detach (eject) an image'
     'create:create a new image'
     'verify:verify image integrity'
     'convert:convert an image from one format to another'
     'burn:burn an image to optical media'
     'help:get help help on usage'
     'info:get information about an driver or mounted image'
     'load:manually load the image driver'
     'checksum:calculate image checksum'
     'flatten:flatten dual-fork image to single-fork'
     'unflatten:unflatten single-fork image to dual fork'
     'imageinfo:print information about an image file'
     'mountvol:mount a /dev node using disk arbitration'
     'unmount:unmount a mounted volume'
     'plugins:print information about plugins'
     'internet-enable:enable postprocessing for an image'
     'resize:attempt to resize HFS+ filesystem on UDIF image'
     'segment:segment NDIF or UDIF image'
     'partition:unknown verb'
     'makehybrid:create a hybrid version of an image'
     'pmap:display partition map from image or device'
     'compact:compact is undocumented'
     'fsid:fsid is undocumented'
     'chpass:chpass is undocumented'
   )
   _describe -t commands 'hdiutil verb' verbs
}

if (( CURRENT == 2 )); then
     _hdiutil_verbs
else
     local -a commonargs
     alwaysargs=(
       '(-quiet -debug)-verbose'
       '(-verbose -debug)-quiet'
       '(-quiet -verbose)-debug'
     )
     cmd="$words[2]"
     curcontext="${curcontext%:*:*}:xauth-${cmd}:"
     case "$cmd" in
         # sub-commands with no args
         help)
             _message 'no more arguments'
             ;;
	# sub-commands with image argument
	attach)
             if (( CURRENT == 3 )); then
                 _arguments \
                     '2:disk image file:_files -g  
"*.(dmg|img|smi|dmgz)"' && ret=0
             else
                 case "$cmd" in
                     attach)
                          _arguments \
                              '(-quiet -debug)-verbose'
                              '(-verbose -debug)-quiet'
                              '(-quiet -verbose)-debug' && ret=0
                          ;;
                 esac
             fi
	    ;;
     esac
fi


On den 26 augusti 2003, at 11:11:39AM, Oliver Kiddle wrote:

> David Remahl wrote:
>
>> I have spent some time trying to get to know the completion system. My
>> aim is to create completion functions for some of the useful and
>> surprisingly well-documented command line tools specific to Mac OS X
>> (hdiutil, diskutil, defaults, SystemStarter, ditto to mention a few).
>
> Sounds good.
>
>> The thing is, some of them use rather peculiar and complex command  
>> line
>> syntaxes, so creating useful completions is quite a challenge.
>
> There's a few other commands that follow a similar scheme. _sccs might
> be a better example than _ifconfig. Also worth looking at are _xauth
> and _cdcd which are simpler and _cvs which is more complicated.
>
>> I will begin by describing the command line syntax of hdiutil, using
>> snippets from the man page.
>>
>> SYNOPSIS
>>       hdiutil verb [options]
>
> Can any options appear between hdiutil and the verb? If so, begin with
> an _arguments for those options finishing with a '*:: :->verbs' rule to
> complete the sub commands in a state.
>
>> Verb is one of the following:
>> 	attach, detach, verify, create, convert, burn, help, info, load,
>> checksum, eject (synonym for detach), flatten, unflatten, imageinfo,
>> mount (synonym for attach), mountvol, unmount, plugins,
>> internet-enable, resize, segment, partition, makehybrid, pmap
>
> Just completing those should be straight-forward. If you can use
> _describe to give descriptions for them, that is better. For the
> synonyms, give them the same description, e.g:
>   {eject,detach}':description'
> in zsh 4.1, they will then be grouped together.
>
> What does the help verb output? You might be able to parse this to get
> descriptions. If you get a recent _cvs from CVS, it does this.
>
> Then follow the pattern of one of the examples:
>   service="$words[1]"
>   curcontext="${curcontext%:*}-$service:"
>
> This puts the verb into $service and into the zstyle context (so you
> will have, e.g. hdiutil-attach in the command part of the zstyle
> context). Then, just have a case statement for each possible verb:
>   case $service in
>     attach)
>       ...
>
>> The set of allowed options depends on the sub command (verb). All  
>> verbs
>> accept the following optional options (duh), all mutually exclusive:
>> 	-verbose
>> 	-quiet
>> 	-debug
>
> Stick the _arguments specifcations for them in an array at the
> beginning and include the array in all later calls to _arguments. e.g:
>
>   args=(
>     '(-quiet -debug)-verbose'
>     '(-verbose -debug)-quiet'
>     '(-quiet -verbose)-debug'
>   )
>
> then later, _arguments "$args[@]" \
> The lists in parenthesis at the start of the specifications specifies
> that they are mutually exclusive.
>
>> Many verbs accept these options:
>> 	-plist
>> 	-srcimagekey <key>=<value>
>> 	-tgtimagekey <key>=<value>
>> 	-encryption [crypto method]
>> 	-stdinpass
>> 	-passphrase password
>> 	-shadow [shadow file]
>
> Again, put the specifications for those options in an array and use the
> array with those sub-commands that need them.
>
>> Many verbs take additional options that are specific to that verb. For
>> example, convert takes the following additional arguments / options:
>> Required:
>
> Specify these options in each branch of the case statement.
>
>> Several commands
>> (attach|verify|compact|convert|burn|checksum|chpass|*flatten|fsid|imag 
>> e-
>> info|internet-enable|resize|segment|partition|pmap) take exactly one
>> filename argument - of a .dmg file. That corresponds to imagefile in
>> teh above convert example.
>
> So they need an _arguments specification that looks like:
>   '1:file:_files -g "*.dmg"'
>
> Hope that helps
>
> Oliver
>

