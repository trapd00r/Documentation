From zsh-users-return-15569-mason-zsh=primenet.com.au@zsh.org Tue Nov 23 08:12:42 2010
Return-Path: <zsh-users-return-15569-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 25457 invoked by alias); 23 Nov 2010 08:12:42 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15569
Received: (qmail 19544 invoked from network); 23 Nov 2010 08:12:41 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <101123001225.ZM14178@torch.brasslantern.com>
Date: Tue, 23 Nov 2010 00:12:25 -0800
In-reply-to: <20101122163447.GA2658@WALL-E>
Comments: In reply to darwin <darwinskernel@gmail.com>
 "*don't* fail when bck-i-search is over" (Nov 22, 11:34am)
References: <20101122163447.GA2658@WALL-E>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@zsh.org
Subject: Re: *don't* fail when bck-i-search is over
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Nov 22, 11:34am, darwin wrote:
}
} i've this in .zshrc
} 
} zle-line-init(){
} 	zle history-incremental-search-backward }
} 	#zle -K vicmd;}
} zle -N zle-line-init
} bindkey -M isearch "^I" vi-repeat-search
} # bindkey -M isearch "^I" history-incremental-search-forward
} 
} 1. it _almost_ does what i want it to do which is to start off on
} bck-i-search.

If I understand correctly what you're going for here, then I'd suggest
that you try the predictive typing widgets (Functions/Zle/predict-on);
except that you seem to be a vi-mode user, and I'm not confident that
insert-and-predict will work well in that context.

} well, it's all great util user wants to issue a never-issued-before
} command. one way to do this is to get out of bck-i-search and do it
} there (viins, vicmd, what have you). but a more elegent solution,
} i think, is to have shell start digging the $PATH for possible
} completions once it's done with the .histfile.

Once you are in isearch mode, there isn't any way out except to accept
the line or hit an undefined key; a failed search won't do it.  If you
want TAB to go straight out of isearch mode and into completion, then
you must not bind TAB to something else in the isearch map; you can't
have it both ways.

The effect you want is similar to what the insert-and-predict function
does, but it handles it by staying away from isearch mode, instead
calling history-beginning-search-backward as each character is typed;
so if the search doesn't find anything the wrapper widget is still in
control and can try something else.

} 2. the commented lines are what i had before. with all my _elegant_
} solutions there are still situations when i would still want to edit
} a command and that's when i would prefer to go back to vicmd (it's
} a matter of muscle mm really). but with my current setting:
} 	bindkey -M isearch '^[' send-break
} hitting esc gets me out of bck-i-search and dumps me into emacs!

That can only mean you don't have "bindkey -v" in effect globally.
*With* bindkey -v, send-break should take you from isearch to viins,
as you note here:

} i even tried with bindkey -v but that's
} half-baked because i esc bck-i-search into viins and not vicmd.

If you want to end up in vicmd mode when you hit ESC, you shouldn't
need to bind it at all.  An unbound key takes you out of isearch and
then performs the normal function of that key.  So *if* you have
"bindkey -v" and you don't bind ESC in the isearch map, ESC will
take you out of isearch, to viins, and then have it's normal effect
in viins, which is to take you to vicmd where you wanted.

