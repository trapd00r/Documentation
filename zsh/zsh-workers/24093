From zsh-workers-return-24093-mason-zsh=primenet.com.au@sunsite.dk Mon Nov 12 16:42:23 2007
Return-Path: <zsh-workers-return-24093-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12678 invoked from network); 12 Nov 2007 16:42:15 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.3 (2007-08-08) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.3
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 12 Nov 2007 16:42:15 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 11427 invoked from network); 12 Nov 2007 16:42:05 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 12 Nov 2007 16:42:05 -0000
Received: (qmail 23080 invoked by alias); 12 Nov 2007 16:42:01 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 24093
Received: (qmail 23050 invoked from network); 12 Nov 2007 16:42:00 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 12 Nov 2007 16:42:00 -0000
Received: (qmail 11127 invoked from network); 12 Nov 2007 16:42:00 -0000
Received: from cluster-g.mailcontrol.com (85.115.41.190)
  by a.mx.sunsite.dk with SMTP; 12 Nov 2007 16:41:54 -0000
Received: from cameurexb01.EUROPE.ROOT.PRI ([62.189.241.200])
	by rly10g.srv.mailcontrol.com (MailControl) with ESMTP id lACGfiVD025496
	for <zsh-workers@sunsite.dk>; Mon, 12 Nov 2007 16:41:47 GMT
Received: from news01.csr.com ([10.103.143.38]) by cameurexb01.EUROPE.ROOT.PRI with Microsoft SMTPSVC(6.0.3790.1830);
	 Mon, 12 Nov 2007 16:41:43 +0000
Received: from news01.csr.com (localhost.localdomain [127.0.0.1])
	by news01.csr.com (8.14.1/8.13.4) with ESMTP id lACGfhHV009052
	for <zsh-workers@sunsite.dk>; Mon, 12 Nov 2007 16:41:43 GMT
Received: from csr.com (pws@localhost)
	by news01.csr.com (8.14.1/8.14.1/Submit) with ESMTP id lACGfgWT009049
	for <zsh-workers@sunsite.dk>; Mon, 12 Nov 2007 16:41:43 GMT
Message-Id: <200711121641.lACGfgWT009049@news01.csr.com>
X-Authentication-Warning: news01.csr.com: pws owned process doing -bs
To: zsh-workers@sunsite.dk
Subject: Re: Floating-point arithmetic evaluation on Linux/x86 (traditional FPU)
In-reply-to: <20071112145400.GM29405@prunille.vinc17.org>
References: <20071112145400.GM29405@prunille.vinc17.org>
Comments: In-reply-to Vincent Lefevre <vincent@vinc17.org>
   message dated "Mon, 12 Nov 2007 15:54:00 +0100."
Date: Mon, 12 Nov 2007 16:41:42 +0000
From: Peter Stephenson <pws@csr.com>
X-OriginalArrivalTime: 12 Nov 2007 16:41:43.0257 (UTC) FILETIME=[E8247490:01C8254A]
X-Scanned-By: MailControl A-08-00-00 (www.mailcontrol.com) on 10.71.0.120

Vincent Lefevre wrote:
> But it is not true that zsh always uses double precision. It seems to
> use the C double type, but this doesn't correspond to double precision
> by default under Linux/x86 (when the traditional FPU is used, i.e. no
> SSE2).
> 
> Either zsh should switch to double precision (assuming that modules
> and so on won't change the precision back to the extended precision),
> or the zsh documentation should be changed.

There's no hope of me taking on another architectural investigation, so
unless someone can look at this, then as long as it's simply a question
of restating what the shell does it's easy.

Index: Doc/Zsh/arith.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/arith.yo,v
retrieving revision 1.11
diff -u -r1.11 arith.yo
--- Doc/Zsh/arith.yo	15 Jun 2007 10:02:24 -0000	1.11
+++ Doc/Zsh/arith.yo	12 Nov 2007 16:40:38 -0000
@@ -12,7 +12,8 @@
 is available, otherwise precision is 4 bytes.  This can be tested, for
 example, by giving the command `tt(print - $(( 12345678901 )))'; if the
 number appears unchanged, the precision is at least 8 bytes.  Floating
-point arithmetic is always double precision.
+point arithmetic always uses the `double' type with whatever corresponding
+precision is provided by the compiler and the library.
 
 The tt(let) builtin command takes arithmetic expressions as arguments; each
 is evaluated separately.  Since many of the arithmetic operators, as well

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070

