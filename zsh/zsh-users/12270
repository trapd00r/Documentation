From zsh-users-return-12270-mason-zsh=primenet.com.au@sunsite.dk Sun Dec 02 02:18:25 2007
Return-Path: <zsh-users-return-12270-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24608 invoked from network); 2 Dec 2007 02:18:15 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.3 (2007-08-08) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.3
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 2 Dec 2007 02:18:15 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 27728 invoked from network); 2 Dec 2007 02:17:48 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 2 Dec 2007 02:17:48 -0000
Received: (qmail 28058 invoked by alias); 2 Dec 2007 02:17:04 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12270
Received: (qmail 28035 invoked from network); 2 Dec 2007 02:17:03 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 2 Dec 2007 02:17:03 -0000
Received: (qmail 26215 invoked from network); 2 Dec 2007 02:17:03 -0000
Received: from vinc17.pck.nerim.net (HELO prunille.vinc17.org) (213.41.242.187)
  by a.mx.sunsite.dk with SMTP; 2 Dec 2007 02:16:58 -0000
Received: by prunille.vinc17.org (Postfix, from userid 501)
	id 62BCC1C10A9C; Sun,  2 Dec 2007 03:16:54 +0100 (CET)
Date: Sun, 2 Dec 2007 03:16:53 +0100
From: Vincent Lefevre <vincent@vinc17.org>
To: zsh-users@sunsite.dk
Subject: Re: command substitution: zsh waits until command exits
Message-ID: <20071202021652.GO5855@prunille.vinc17.org>
Mail-Followup-To: zsh-users@sunsite.dk
References: <20071130133943.GG5855@prunille.vinc17.org> <071130073719.ZM18090@torch.brasslantern.com> <20071130163155.GL5855@prunille.vinc17.org> <071130185827.ZM18402@torch.brasslantern.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <071130185827.ZM18402@torch.brasslantern.com>
X-Mailer-Info: http://www.vinc17.org/mutt/
User-Agent: Mutt/1.5.17-vl-r19795 (2007-11-30)

On 2007-11-30 18:58:27 -0800, Bart Schaefer wrote:
> On Nov 30,  5:31pm, Vincent Lefevre wrote:
> } By "when zsh does the substitution", this includes the question
> } whether zsh does the substitution before or after the command exits.
> } For instance, zsh could start commands in the left-to-right fashion
> } (I assumed asynchronously), but could replace the $(...) in some
> } arbitrary order, once it knows the result, i.e. once the standard
> } output is closed.
> 
> No, that would be non-deterministic with respect to left-to-right order.
> Consider:
> 
>   echo $(echo first; exec >&- ; echo last > /tmp/first) $(</tmp/first)
> 
> If the commands were only started left-to-right and not also finished
> left-to-right, $(</tmp/first) could fail with "no such file".

But there can be the same kind of problem with process substitution.
So, why allowing non-deterministic behavior for process substitution
but not for command substitution?

> The default is to do everything synchronously.  That's why cases that
> are asynchronous are explicitly called out, like process substitution.

How can the user know that? The zsh man pages don't seem to say that
the default is to do everything synchronously.

> } >   echo $(coproc xterm -e 'tty >&3; sleep 999999' 3>&1 ; read -E <&p)
> } 
> } OK, thanks. But is there any reason why Ctrl-C doesn't work in the
> } xterm?
> 
> Could be any of a variety of reasons, the most likely of which is that no
> interactive shell is being run.

But Ctrl-C works with things like: xterm -e 'sleep 9999'
and there isn't an interactive shell either. It also works with:

  xterm -e 'tty >&3; sleep 999999' 3>&1

but no longer with the full coproc line. Note that with the coproc line,
Ctrl-\ works (only Ctrl-C is affected).

> Explicitly set the tty up the way you want it by using X resources:
> 
>   XTerm*ttyModes: erase ^? intr ^C
> 
> Or
> 
>   xterm -xrm "*ttyModes: erase ^? intr ^C" -e 'tty >&3; sleep 999999' 3>&1

I've tried the second solution:

  echo $(coproc xterm -xrm "*ttyModes: erase ^? intr ^C" -e 'tty >&3; sleep 999999' 3>&1 ; read -E <&p)

and this doesn't change anything.

-- 
Vincent Lefèvre <vincent@vinc17.org> - Web: <http://www.vinc17.org/>
100% accessible validated (X)HTML - Blog: <http://www.vinc17.org/blog/>
Work: CR INRIA - computer arithmetic / Arenaire project (LIP, ENS-Lyon)

