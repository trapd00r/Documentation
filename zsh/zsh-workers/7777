From zsh-workers-return-7777-mason-zsh=primenet.com.au@sunsite.auc.dk Sat Sep 11 01:41:34 1999
Return-Path: <zsh-workers-return-7777-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 4767 invoked from network); 11 Sep 1999 01:41:31 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 11 Sep 1999 01:41:31 -0000
Received: (qmail 5917 invoked by alias); 11 Sep 1999 01:41:19 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 7777
Received: (qmail 5910 invoked from network); 11 Sep 1999 01:41:17 -0000
To: zsh-workers@sunsite.auc.dk
Subject: PATCH: condensed version of _apt[-_]*.
MIME-Version: 1.0 (generated by AKEMI 1.13.2 - =?ISO-2022-JP?B?Ig==?=
 =?ISO-2022-JP?B?GyRCQTA0Y0s8GyhCIg==?=)
Content-Type: text/plain; charset=US-ASCII
From: Tanaka Akira <akr@jaist.ac.jp>
Date: 11 Sep 1999 10:41:14 +0900
Message-ID: <rsqn1uui5s5.fsf@crane.jaist.ac.jp>
Lines: 647
User-Agent: Chao-gnus/6.12.5 AKEMI/1.13.2 (=?ISO-2022-JP?B?GyRCQTAbKEI=?=
 =?ISO-2022-JP?B?GyRCNGNLPBsoQg==?=) FLAM-DOODLE/1.12.6
 (=?ISO-2022-JP?B?GyRCM3cbKEI=?= 10R4.0/5.0) Emacs/20.4
 (sparc-sun-solaris2.6) MULE/4.0 (HANANOEN)

I wrote _apt-cdrom and _apt-config and condense _apt[-_]* to _apt. So,
after you apply the patch follows, you should remove _apt-cache,
_apt-get and _apt_arguments.

Also I modified _regex_arguments to show an error message when a parse
error is occured.

# If you have an trouble to apply this patch, try the patch for patch:
# http://www.ldl.jaist.ac.jp/~akr/junk/patch-2.5.4-akr-19990910.patch

Index: Completion/Base/_regex_arguments
===================================================================
RCS file: /projects/zsh/zsh/Completion/Base/_regex_arguments,v
retrieving revision 1.1.1.1
diff -u -F^( -r1.1.1.1 _regex_arguments
--- _regex_arguments	1999/09/08 13:11:06	1.1.1.1
+++ _regex_arguments	1999/09/11 01:35:12
@@ -1,5 +1,9 @@
 #autoload
 
+## todo
+
+# imprement `guard' to more generic branch selection.
+
 ## usage: _regex_arguments funcname regex
 
 # _regex_arguments compiles `regex' and emit the result of the state
@@ -39,11 +43,6 @@
 
 ## auxiliary functions definition:
 
-# fst : a * b -> a
-# snd : a * b -> b
-# fst( (x, y) ) = x
-# snd( (x, y) ) = y
-
 # nullable : regex -> bool
 # first : regex -> list of element
 # match : string * list of element -> element + {bottom}
@@ -133,6 +132,12 @@
 
 ## Recursive decent regex parser
 
+# return status of parser functions:
+
+# 0 : success
+# 1 : parse error
+# 2 : fatal parse error
+
 _ra_parse_elt () {
   : index=$index "[$regex[$index]]"
   local state
@@ -168,8 +173,8 @@
 	  fi
 	  ;;
       \() (( index++ ))
-          _ra_parse_alt || return 1
-	  [[ $index -le $#regex && "$regex[$index]" = \) ]] || return 1
+          _ra_parse_alt || return $?
+	  [[ $index -le $#regex && "$regex[$index]" = \) ]] || return 2
 	  (( index++ ))
 	  ;;
       *)  return 1
@@ -182,7 +187,7 @@
 
 _ra_parse_clo () {
   : index=$index "[$regex[$index]]"
-  _ra_parse_elt || return 1
+  _ra_parse_elt || return $?
 
   if (( index <= $#regex )) && [[ "$regex[$index]" = \# ]]; then
     (( index++ ))
@@ -202,17 +207,27 @@
   nullable_seq=yes
 
   _ra_parse_clo || {
-    first=()
-    last=()
-    nullable=yes
-    return 0
+    if (( $? == 2 )); then
+      return 2
+    else
+      first=()
+      last=()
+      nullable=yes
+      return 0
+    fi
   }
   first_seq=($first)
   last_seq=($last)
   [[ -n "$nullable" ]] || nullable_seq=
 
   while :; do
-    _ra_parse_clo || break
+    _ra_parse_clo || {
+      if (( $? == 2 )); then
+        return 2
+      else
+        break
+      fi
+    }
     for i in $last_seq; do tbl[$i]="${tbl[$i]} $first"; done
     [[ -n "$nullable_seq" ]] && first_seq=($first_seq $first)
     [[ -n "$nullable" ]] || { nullable_seq= last_seq=() }
@@ -232,7 +247,7 @@
   first_alt=()
   nullable_alt=
 
-  _ra_parse_seq || return 1
+  _ra_parse_seq || return $?
   first_alt=($first_alt $first)
   last_alt=($last_alt $last)
   [[ -n "$nullable" ]] && nullable_alt=yes
@@ -242,7 +257,13 @@
     [[ "$regex[$index]" = \| ]] || break
     (( index++ ))
 
-    _ra_parse_seq || break
+    _ra_parse_seq || {
+      if (( $? == 2 )); then
+        return 2
+      else
+        break
+      fi
+    }
     first_alt=($first_alt $first)
     last_alt=($last_alt $last)
     [[ -n "$nullable" ]] && nullable_alt=yes
@@ -386,6 +407,15 @@
   parse_action=()
   complete_action=()
   _ra_parse_alt
+
+  if (( $? == 2 || index != $#regex + 1 )); then
+    if (( index != $#regex + 1 )); then
+      print "regex parse error at $index: $regex[index]" >&2
+    else
+      print "regex parse error at $index (end)" >&2
+    fi
+    return 1
+  fi
 
   funcdef="$(_ra_gen_func)"
 
--- /dev/null	Sat Sep 11 10:30:29 1999
+++ Completion/Debian/_apt	Sat Sep 11 10:28:38 1999
@@ -0,0 +1,497 @@
+#compdef apt-get apt-cache apt-cdrom apt-config
+
+_apt () {
+  case "$words[1]" in
+    apt-get) _apt-get "$@";;
+    apt-cache) _apt-cache "$@";;
+    apt-cdrom) _apt-cdrom "$@";;
+    apt-config) _apt-config "$@";;
+    *) _message "unknown command $words[1]";;
+  esac
+}
+
+# usage: _apt_arguments funcname option-spec... -- rest-regex
+_apt_arguments () {
+
+  local funcname
+  funcname="$1"
+  shift
+
+  typeset -A canonicalize options
+  local short_hasarg short_bool short_intlevel short_configfile short_arbitem
+  local long_hasarg long_bool long_intlevel long_configfile long_arbitem
+  local comp_hasarg=''
+  local opt opts type
+
+  while [[ 0 -lt $# && $1 != -- ]]; do
+    opts="${1%%:*}"
+    type="${1#*:}"
+
+    case $type in
+      bool) options[$opts]=1;;
+      intlevel) options[$opts]=-1;;
+      configfile) options[$opts]=1;;
+      arbitem) options[$opts]=-1;;
+      *) options[$opts]=1
+	 comp_hasarg="${comp_hasarg}$opts) $type;;"$'\n'
+	 type=hasarg;;
+    esac
+
+    for opt in ${(s:,:)=opts}; do
+      canonicalize[$opt]="$opts"
+      case $opt in
+	--*) eval "long_$type=(\$long_$type ${opt#--})";;
+	-?) eval "short_$type=(\$short_$type ${opt#-})";;
+      esac
+    done
+    shift
+  done
+
+  # skip --
+  [[ 0 -lt $# ]] && shift
+
+  comp_hasarg="\
+  case \$current_option in
+  ${comp_hasarg}esac"
+
+  local short_seq false true bool __bool_ intlevel word word1 nul
+  local comp_bool comp_intlevel comp_configfile comp_arbitem comp_long comp_opt
+  local regex_short regex_long regex_all
+
+  regex_all=( \( "$@" \) )
+
+  short_seq="(${(j:|:)short_bool}|${(j:|:)short_intlevel})#"
+
+  false=(no false without off disable)
+  true=(yes true with on enable)
+  bool=($false $true)
+
+  __bool_=(--${^bool}-)
+
+  intlevel='[0-9]##'
+
+  word=$'[^\0]#\0'
+  word1=$'[^\0]##\0'
+  nul=$'\0'
+
+  comp_bool='compadd "$expl_bool[@]" '"$bool"
+  comp_intlevel= #"_message 'intlevel'"
+  comp_configfile='_files "$expl_configfile[@]"'
+  comp_arbitem= #"_message 'Foo::Bar=bar'"
+
+  comp_short=\
+'if [[ $PREFIX = -'"$short_seq"' ]]; then
+  _apt_consume_short ${PREFIX[2,-1]}
+  tmp1=(${${(M)${(s:,:)${(kj:,:)options[(R)*~0]}}:#-?}#-})
+  if [[ $PREFIX = - ]]; then
+    compadd "$expl_opt[@]" - -${^tmp1}
+  else
+    tmp2=(-${^tmp1})
+    compadd "$expl_opt[@]" -y "($tmp2)" - ${PREFIX}${^tmp1}
+  fi
+elif [[ -z "$PREFIX" ]]; then
+  compadd "$expl_opt[@]" - ${(M)${(s:,:)${(kj:,:)options[(R)*~0]}}:#-?}
+fi'
+
+  comp_long=\
+'tmp1="${(j:|:)${(@)${(@M)${(@s:,:)${(@kj:,:)options[(R)*~0]}}:#--*}#--}}"
+tmp2=(--${(M)^long_bool:#$~tmp1} --${(M)^long_intlevel:#$~tmp1})
+compadd "$expl_opt[@]" - $tmp2
+tmp2=(--${(M)^long_hasarg:#$~tmp1} --${(M)^long_configfile:#$~tmp1} --${(M)^long_arbitem:#$~tmp1})
+compadd "$expl_opt[@]" -S= - $tmp2
+compadd "$expl_opt[@]" -S "" - '"$__bool_"
+
+  comp_long_prefix=\
+'tmp1="${(j:|:)${(@)${(@M)${(@s:,:)${(@kj:,:)options[(R)*~0]}}:#--*}#--}}"
+tmp2=($_ra_left${(M)^long_bool:#$~tmp1} $_ra_left${(M)^long_intlevel:#$~tmp1})
+compadd "$expl_opt[@]" - $tmp2
+tmp2=($_ra_left${(M)^long_hasarg:#$~tmp1} $_ra_left${(M)^long_configfile:#$~tmp1} $_ra_left${(M)^long_arbitem:#$~tmp1})
+compadd "$expl_opt[@]" -S= - $tmp2
+tmp1="${(j:|:)${(@)${(@M)${(@s:,:)${(@kj:,:)options[(R)*~0]}}:#-?}#-}}"
+tmp2=($_ra_left${(M)^short_bool:#$~tmp1} $_ra_left${(M)^short_intlevel:#$~tmp1})
+compadd "$expl_opt[@]" - $tmp2
+tmp2=($_ra_left${(M)^short_hasarg:#$~tmp1} $_ra_left${(M)^short_configfile:#$~tmp1} $_ra_left${(M)^short_arbitem:#$~tmp1})
+compadd "$expl_opt[@]" -S= - $tmp2'
+
+  comp_opt='[[ -prefix - || -z "$compconfig[option_prefix]" ]]'" && { $comp_short; $comp_long }"
+
+  regex_short=()
+  regex_long=()
+  regex_long_prefix=()
+
+  if (( $#short_hasarg )); then
+    regex_short=("$regex_short[@]"
+      /"$short_seq(${(j:|:)short_hasarg})(=|)"
+	-'_apt_consume_short ${_ra_match%=}; current_option=${canonicalize[-${${_ra_match%=}[-1]}]}'
+	\( /"$word1" !"$comp_hasarg" \| /"$nul" /"$word" !"$comp_hasarg" \) \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)short_hasarg})$nul"
+	-'_apt_consume_short ${_ra_match[-2]}; current_option=${canonicalize[-${${_ra_match%$nul}[-1]}]}'
+	/"$word" !"$comp_hasarg" \|
+      /"(${(j:|:)short_hasarg})="
+	-'_apt_consume_short ${_ra_match[-2]}; current_option=${canonicalize[-${${_ra_match%=}[-1]}]}'
+	\( /"$word1" !"$comp_hasarg" \| /"$nul" /"$word" !"$comp_hasarg" \) \|
+    )
+  fi
+
+  if (( $#short_bool )); then
+    regex_short=("$regex_short[@]"
+      /"$short_seq(${(j:|:)short_bool})($nul(${(j:|:)bool})|(${(j:|:)bool})|)$nul"
+	-"_apt_consume_short \${_ra_match%%($nul(${(j:|:)bool})|(${(j:|:)bool})|)$nul}" \|
+      /"$short_seq(${(j:|:)short_bool})="
+	-"_apt_consume_short \${_ra_match%=}"
+	\( /"$word1" !"$comp_bool" \| /"$nul" /"$word" !"$comp_bool" \) \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)short_bool})="
+	-"_apt_consume_short \${_ra_match[-2]}"
+	\( /"$word1" !"$comp_bool" \| /"$nul" /"$word" !"$comp_bool" \) \|
+      /"(${(j:|:)short_bool})$nul"
+	-"_apt_consume_short \${_ra_match[-2]}"
+	/"((${(j:|:)bool})$nul|)" !"$comp_bool" \|
+    )
+  fi
+
+  if (( $#short_intlevel )); then
+    regex_short=("$regex_short[@]"
+      /"$short_seq(${(j:|:)short_intlevel})($nul$intlevel|$intlevel|)$nul"
+	-"_apt_consume_short \${_ra_match%%($nul$intlevel|$intlevel|)$nul}" \|
+      /"$short_seq(${(j:|:)short_intlevel})="
+	-"_apt_consume_short \${_ra_match%=}"
+	\( /"$word1" !"$comp_intlevel" \| /"$nul" /"$word" !"$comp_intlevel" \) \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)short_intlevel})="
+	-"_apt_consume_short \${_ra_match[-2]}"
+	\( /"$word1" !"$comp_intlevel" \| /"$nul" /"$word" !"$comp_intlevel" \) \|
+      /"(${(j:|:)short_intlevel})$nul"
+	-"_apt_consume_short \${_ra_match[-2]}"
+	/"($intlevel$nul|)" !"$comp_intlevel" \|
+    )
+  fi
+
+  if (( $#short_configfile )); then
+    regex_short=("$regex_short[@]"
+      /"$short_seq(${(j:|:)short_configfile})(=|)"
+	-"_apt_consume_short \${_ra_match%=}"
+	\( /"$word1" !"$comp_configfile" \| /"$nul" /"$word" !"$comp_configfile" \) \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)short_configfile})$nul"
+	-"_apt_consume_short \${_ra_match[-2]}"
+	/"$word" !"$comp_configfile" \|
+      /"(${(j:|:)short_configfile})="
+	-"_apt_consume_short \${_ra_match[-2]}"
+	\( /"$word1" !"$comp_configfile" \| /"$nul" /"$word" !"$comp_configfile" \) \|
+    )
+  fi
+
+  if (( $#short_arbitem )); then
+    regex_short=("$regex_short[@]"
+      /"$short_seq(${(j:|:)short_arbitem})(=|)"
+	-"_apt_consume_short \${_ra_match%=}"
+	\( /"$word1" !"$comp_arbitem" \| /"$nul" /"$word" !"$comp_arbitem" \) \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)short_arbitem})$nul"
+	-"_apt_consume_short \${_ra_match[-2]}"
+	/"$word" !"$comp_arbitem" \|
+      /"(${(j:|:)short_arbitem})="
+	-"_apt_consume_short \${_ra_match[-2]}"
+	\( /"$word1" !"$comp_arbitem" \| /"$nul" /"$word" !"$comp_arbitem" \) \|
+    )
+  fi
+
+  if (( $#long_hasarg )); then
+    regex_long=("$regex_long[@]"
+      /"(${(j:|:)long_hasarg})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}; current_option=\${canonicalize[--\${_ra_match%$nul}]}"
+	/"$word" !"$comp_hasarg" \|
+      /"(${(j:|:)long_hasarg})="
+	-"_apt_consume_long \${_ra_match%=}; current_option=\${canonicalize[--\${_ra_match%=}]}"
+	\( /"$word1" !"$comp_hasarg" \| /"$nul" /"$word" !"$comp_hasarg" \) \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)long_hasarg})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}; current_option=\${canonicalize[--\${_ra_match%$nul}]}"
+	/"$word" !"$comp_hasarg" \|
+      /"(${(j:|:)long_hasarg})="
+	-"_apt_consume_long \${_ra_match%=}; current_option=\${canonicalize[--\${_ra_match%=}]}"
+	\( /"$word1" !"$comp_hasarg" \| /"$nul" /"$word" !"$comp_hasarg" \) \|
+    )
+  fi
+
+  if (( $#long_bool )); then
+    regex_long=("$regex_long[@]"
+      /"(${(j:|:)long_bool})="
+	-"_apt_consume_long \${_ra_match%=}"
+	\( /"$word1" !"$comp_bool" \| /"$nul" /"$word" !"$comp_bool" \) \|
+      /"(${(j:|:)long_bool})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}"
+	/"((${(j:|:)bool})$nul|)" !"$comp_bool" \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)long_bool})="
+	-"_apt_consume_long \${_ra_match%=}"
+	\( /"$word1" !"$comp_bool" \| /"$nul" /"$word" !"$comp_bool" \) \|
+      /"(${(j:|:)long_bool})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}"
+	/"((${(j:|:)bool})$nul|)" !"$comp_bool" \|
+    )
+  fi
+
+  if (( $#long_intlevel )); then
+    regex_long=("$regex_long[@]"
+      /"(${(j:|:)long_intlevel})="
+	-"_apt_consume_long \${_ra_match%=}"
+	\( /"$word1" !"$comp_intlevel" \| /"$nul" /"$word" !"$comp_intlevel" \) \|
+      /"(${(j:|:)long_intlevel})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}"
+	/"($intlevel$nul|)" !"$comp_intlevel" \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)long_intlevel})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}"
+	/"$intlevel" !"$comp_intlevel" /"$nul" \|
+      /"(${(j:|:)long_intlevel})="
+	-"_apt_consume_long \${_ra_match%=}"
+	\( /"$word1" !"$comp_intlevel" \| /"$nul" /"$word" !"$comp_intlevel" \) \|
+      /"(${(j:|:)long_intlevel})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}"
+	/"($intlevel$nul|)" !"$comp_intlevel" \|
+    )
+  fi
+
+  if (( $#long_configfile )); then
+    regex_long=("$regex_long[@]"
+      /"(${(j:|:)long_configfile})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}"
+	/"$word" !"$comp_configfile" \|
+      /"(${(j:|:)long_configfile})="
+	-"_apt_consume_long \${_ra_match%=}"
+	\( /"$word1" !"$comp_configfile" \| /"$nul" /"$word" !"$comp_configfile" \) \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)long_configfile})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}"
+	/"$word" !"$comp_configfile" \|
+      /"(${(j:|:)long_configfile})="
+	-"_apt_consume_long \${_ra_match%=}"
+	\( /"$word1" !"$comp_configfile" \| /"$nul" /"$word" !"$comp_configfile" \) \|
+    )
+  fi
+
+  if (( $#long_arbitem )); then
+    regex_long=("$regex_long[@]"
+      /"(${(j:|:)long_arbitem})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}"
+	/"$word" !"$comp_arbitem" \|
+      /"(${(j:|:)long_arbitem})="
+	-"_apt_consume_long \${_ra_match%=}"
+	\( /"$word1" !"$comp_arbitem" \| /"$nul" /"$word" !"$comp_arbitem" \) \|
+    )
+    regex_long_prefix=("$regex_long_prefix[@]"
+      /"(${(j:|:)long_arbitem})$nul"
+	-"_apt_consume_long \${_ra_match%$nul}"
+	/"$word" !"$comp_arbitem" \|
+      /"(${(j:|:)long_arbitem})="
+	-"_apt_consume_long \${_ra_match%=}"
+	\( /"$word1" !"$comp_arbitem" \| /"$nul" /"$word" !"$comp_arbitem" \) \|
+    )
+  fi
+
+  regex_all=(
+    /"$word"
+    \( %-- \( "$regex_long[@]"
+	      %"(${(j:|:)bool})-"
+	      \( "$regex_long_prefix[@]" /"[]" !"$comp_long_prefix" \) \|
+	      /"[]" !"$comp_long" \) \|
+       %- \( "$regex_short[@]" /"[]" !"$comp_short; $comp_long" \) \|
+       /"[]" !"$comp_opt" \) \#
+    "$regex_all[@]"
+  )
+
+  _regex_arguments "${funcname}_sm" "$regex_all[@]"
+
+  eval "$funcname () {
+    typeset -A canonicalize options
+    canonicalize=(${(kv)canonicalize})
+    options=(${(kv)options})
+
+    local short_hasarg short_bool short_intlevel short_configfile short_arbitem
+    local long_hasarg long_bool long_intlevel long_configfile long_arbitem
+    short_hasarg=($short_hasarg)
+    short_bool=($short_bool)
+    short_intlevel=($short_intlevel)
+    short_configfile=($short_configfile)
+    short_arbitem=($short_arbitem)
+    long_hasarg=($long_hasarg)
+    long_bool=($long_bool)
+    long_intlevel=($long_intlevel)
+    long_configfile=($long_configfile)
+    long_arbitem=($long_arbitem)
+
+    local expl_opt expl_bool expl_configfile
+    _description expl_opt option
+    _description expl_bool 'bool value'
+    _description expl_configfile 'config file'
+
+    local current_option tmp1 tmp2
+
+    ${funcname}_sm
+  }"
+}
+
+_apt_consume_short () {
+  local short opt
+  for short in ${(s::)1}; do
+    opt="$canonicalize[-$short]"
+    (( 0 < options[$opt] && options[$opt]-- ))
+  done
+}
+
+_apt_consume_long () {
+  local long opt
+  opt="$canonicalize[--$1]"
+  (( 0 < options[$opt] && options[$opt]-- ))
+}
+
+_apt-get () {
+  _apt_arguments _apt-get_sm \
+    -h,--help:bool \
+    -v,--version:bool \
+    -q,--quiet,--silent:intlevel \
+    -d,--download-only:bool \
+    -b,--compile,--build:bool \
+    -s,--simulate,--just-print,--recon,--no-act:bool \
+    -y,--yes,--assume-yes:bool \
+    -f,--fix-broken:bool \
+    -u,--show-upgraded:bool \
+    -m,--ignore-missing,--fix-missing:bool \
+    --no-download:bool \
+    --ignore-hold:bool \
+    --no-upgrade:bool \
+    --force-yes:bool \
+    --print-uris:bool \
+    -c,--config-file:configfile \
+    -o,--option:arbitem \
+    -- \
+    /$'update\0' \| \
+    /$'upgrade\0' \| \
+    /$'install\0' /$'[^\0]#\0' !'_deb_packages uninstalled "$expl_packages[@]" || _deb_packages installed "$expl_packages[@]" ' \# \| \
+    /$'remove\0' /$'[^\0]#\0' !'_deb_packages installed "$expl_packages[@]"' \# \| \
+    /$'dist-upgrade\0' \| \
+    /$'dselect-upgrade\0' \| \
+    /$'clean\0' \| \
+    /$'autoclean\0' \| \
+    /$'check\0' \| \
+    /$'source\0' /$'[^\0]#\0' !'_deb_packages avail "$expl_packages[@]"' \# \| \
+    /$'help\0' \| \
+    /"[]"	!'compadd "$expl_action[@]" update upgrade install remove dist-upgrade dselect-upgrade clean autoclean check source help'
+
+  _apt-get () {
+    local expl_action expl_packages
+    _description expl_action 'action'
+    _description expl_packages 'package'
+
+    _apt-get_sm
+  }
+
+  _apt-get "$@"
+}
+
+_apt-cache () {
+  _apt_arguments _apt-cache_sm \
+    -h,--help:bool \
+    -v,--version:bool \
+    -p,--pkg-cache:'_files "$expl_pkg_cache[@]"' \
+    -s,--src-cache:'_files "$expl_src_cache[@]"' \
+    -q,--quiet:intlevel \
+    -i,--important:bool \
+    -f,--full:bool \
+    --name-only:bool \
+    -c,--config-file:configfile \
+    -o,--option:arbitem \
+    -- \
+    /$'help\0' \| \
+    /$'add\0' /$'[^\0]#\0' !'_files' \# \| \
+    /$'gencaches\0' \| \
+    /$'showpkg\0' /$'[^\0]#\0' !'_deb_packages avail "$expl_packages[@]"' \# \| \
+    /$'stats\0' \| \
+    /$'dump\0' \| \
+    /$'dumpavail\0' \| \
+    /$'unmet\0' \| \
+    /$'check\0' \| \
+    /$'search\0' \| \
+    /$'show\0' \| \
+    /"[]"	!'compadd "$expl_action[@]" help add gencaches showpkg stats dump dumpavail unmet check search show'
+
+  _apt-cache () {
+    local expl_action expl_packages expl_pkg_cache expl_src_cache
+    _description expl_action 'action'
+    _description expl_packages 'package'
+    _description expl_pkg_cache 'package cache'
+    _description expl_src_cache 'source cache'
+
+    _apt-cache_sm
+  }
+
+  _apt-cache "$@"
+}
+
+_apt-cdrom () {
+  _apt_arguments _apt-cdrom_sm \
+    -h,--help:bool \
+    -v,--version:bool \
+    -d,--cdrom:'_files "$expl_mount_point[@]" -/' \
+    -r,--rename:bool \
+    -m,--no-mount:bool \
+    -f,--fast:bool \
+    -n,--just-print,--recon,--no-act:bool \
+    -a,--thorough:bool \
+    -c,--config-file:configfile \
+    -o,--option:arbitem \
+    -- \
+    /$'add\0' \| \
+    /"[]"	!'compadd "$expl_action[@]" add'
+
+  _apt-cdrom () {
+    local expl_action expl_mount_point
+    _description expl_action 'action'
+    _description expl_mount_point 'mount point'
+
+    _apt-cdrom_sm
+  }
+
+  _apt-cdrom "$@"
+}
+
+_apt-config () {
+  _apt_arguments _apt-config_sm \
+    -h,--help:bool \
+    -v,--version:bool \
+    -c,--config-file:configfile \
+    -o,--option:arbitem \
+    -- \
+    /$'shell\0' \
+      \( \
+	/$'[^\0]#\0' !'compgen "$expl_shell_var[@]" -v' \
+	/$'[^\0]#\0' !'compadd "$expl_config_key[@]" - ${${(f)"$(apt-config dump 2>&1)"}% *}' \
+      \) \# \| \
+    /$'dump\0' \| \
+    /"[]"	!'compadd "$expl_action[@]" shell dump'
+
+  _apt-config () {
+    local expl_action expl_shell_var expl_config_key
+    _description expl_action 'action'
+    _description expl_shell_var 'shell variable to assign'
+    _description expl_config_key 'configuration key'
+
+    _apt-config_sm
+  }
+
+  _apt-config "$@"
+}
+
+_apt "$@"
-- 
Tanaka Akira

