From zsh-users-return-14618-mason-zsh=primenet.com.au@zsh.org Mon Nov 30 18:49:47 2009
Return-Path: <zsh-users-return-14618-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 9086 invoked by alias); 30 Nov 2009 18:49:46 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14618
Received: (qmail 13242 invoked from network); 30 Nov 2009 18:49:35 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <091130094855.ZM2913@torch.brasslantern.com>
Date: Mon, 30 Nov 2009 09:48:54 -0800
In-reply-to: <m3skbwhvms.fsf@klanderman.net>
Comments: In reply to Greg Klanderman <gak@klanderman.net>
 "Re: unable to wait on completed job" (Nov 30, 10:36am)
References: <19213.26295.345572.732238@gargle.gargle.HOWL>
	<200911251748.nAPHmrCX010198@news01.csr.com>
	<m3638sr72x.fsf_-_@klanderman.net>
	<091129211436.ZM1769@torch.brasslantern.com>	<m3skbwhvms.fsf@klanderman.net>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@zsh.org
Subject: Re: unable to wait on completed job
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Nov 30, 10:36am, Greg Klanderman wrote:
}
} > "Fixing" this may be a fairly convoluted change to the already somewhat
} > baroque job table management code.
} 
} So is this something you think needs to get fixed, would be nice to
} fix, or not worth it?

Some input from PWS would help, as he's more familiar with the job
table code.  I'd classify it as "would be nice" because we've gotten
along for almost 20 years without anyone even noticing.

Note that AFAICT, even with the operation as supported by bash, you are
only guaranteed access to the exit status of the most recently started
asynchronous job; so it's not much help in handling multiple parallel
tasks.  If you don't care about the exit status, you can do

    ! kill -0 $pid || wait $pid

to get the necessary effect.

