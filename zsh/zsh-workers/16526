From zsh-workers-return-16526-mason-zsh=primenet.com.au@sunsite.dk Thu Jan 31 10:42:37 2002
Return-Path: <zsh-workers-return-16526-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 26832 invoked from network); 31 Jan 2002 10:42:36 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 31 Jan 2002 10:42:36 -0000
Received: (qmail 13609 invoked by alias); 31 Jan 2002 10:42:26 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 16526
Received: (qmail 13595 invoked from network); 31 Jan 2002 10:42:25 -0000
Date: Thu, 31 Jan 2002 10:42:24 +0000
To: Derek Peschel <dpeschel@eskimo.com>
Cc: zsh-workers@sunsite.dk
Subject: Re: BUG? - 4.0.2, current 4.1 - blank left prompt & blank line erases right prompt
Message-ID: <20020131104224.GA13581@fysh.org>
References: <20020131004406.A5021@eskimo.eskimo.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20020131004406.A5021@eskimo.eskimo.com>
User-Agent: Mutt/1.3.25i
From: Zefram <zefram@fysh.org>

Derek Peschel wrote:
>If the left prompt is empty and you enter a blank line (by simply hitting
>return) then the right prompt will be erased.

Also happens if the line being edited ever becomes blank (type "x<DEL>").
The problem is that the refresh logic ignores the prompts a little too
much -- ignoring the rprompt, it thinks the line is meant to be completely
blank, and so it outputs a delete-line sequence.

Historically, the handling of prompts in the refresh code is a little odd.
The refresh code isn't capable of generating the prompt display, because
it doesn't do display attributes -- prompts can switch attributes
arbitrarily, but the main editor buffer all appears with the same
attributes.  Consequently the refresh code only knows where the prompts
are, and has to work around them.  We might want to consider changing
the refresh code to handle attributes, so that we can use attributes
in the main buffer (bold to indicate control characters would be nice,
for example).

I think this patch fixes the problem.  The logic in the conditional in
question does appear to be incorrect, but I'm not certain that there
are no other places where a CLEAREOL can be induced.

Index: zle_refresh.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Zle/zle_refresh.c,v
retrieving revision 1.4
diff -c -r1.4 zle_refresh.c
*** zle_refresh.c	2001/10/24 07:00:49	1.4
--- zle_refresh.c	2002/01/31 10:40:26
***************
*** 698,704 ****
        which need to be written. do this now to allow some pre-processing */
  
      if (cleareol 		/* request to clear to end of line */
! 	|| !nllen 		/* no line buffer given */
  	|| (ln == 0 && (put_rpmpt != oput_rpmpt))) {	/* prompt changed */
  	p1 = zhalloc(winw + 2);
  	if (nllen)
--- 698,704 ----
        which need to be written. do this now to allow some pre-processing */
  
      if (cleareol 		/* request to clear to end of line */
! 	|| (!nllen && !put_rpmpt)		/* no line buffer given */
  	|| (ln == 0 && (put_rpmpt != oput_rpmpt))) {	/* prompt changed */
  	p1 = zhalloc(winw + 2);
  	if (nllen)

-zefram

