From zsh-users-return-5759-mason-zsh=primenet.com.au@sunsite.dk Sun Jan 19 22:50:46 2003
Return-Path: <zsh-users-return-5759-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 26872 invoked from network); 19 Jan 2003 22:50:45 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 19 Jan 2003 22:50:45 -0000
Received: (qmail 10740 invoked by alias); 19 Jan 2003 22:50:22 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 5759
Received: (qmail 10733 invoked from network); 19 Jan 2003 22:50:21 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Date: Sun, 19 Jan 2003 22:50:23 +0000
To: Le Wang <lewang@yahoo.com>
Cc: Zsh users list <zsh-users@sunsite.dk>
Subject: Re: passing arrays
Message-ID: <20030119225023.GA30393@fysh.org>
References: <20030119223453.39099.qmail@web12308.mail.yahoo.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20030119223453.39099.qmail@web12308.mail.yahoo.com>
User-Agent: Mutt/1.3.28i
From: Zefram <zefram@fysh.org>

Le Wang wrote:
>Is it possible to pass an array into a function and
>have the function return an array?

The arguments to a function are an array, accessible through the
$1/$@/$argv parameters.

A function directly returns only a numeric status.  To return any
other information, it must either assign to a parameter or generate
output (which can be captured using $(...)).  The parameter assignment
technique is usually to be preferred, because it doesn't need to make any
system calls and it's easier for handling arrays.  We already have some
mechanisms where the shell calls a user-defined function and receives
a string or array return code in the parameters $REPLY or $reply;
I suggest that where you need string or array returns you use these
parameter names to do it.

-zefram

