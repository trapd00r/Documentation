From zsh-users-return-4771-mason-zsh=primenet.com.au@sunsite.dk Sun Mar 24 19:27:36 2002
Return-Path: <zsh-users-return-4771-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12409 invoked from network); 24 Mar 2002 19:27:35 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 24 Mar 2002 19:27:34 -0000
Received: (qmail 7101 invoked by alias); 24 Mar 2002 19:27:08 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 4771
Received: (qmail 7086 invoked from network); 24 Mar 2002 19:27:07 -0000
To: zsh-users@sunsite.auc.dk
Subject: Z-Shell (zsh) FAQ changes this month
Date: Sun, 24 Mar 2002 19:31:15 +0000
From: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Message-Id: <20020324193120.5F8C51C08C@pwstephenson.fsnet.co.uk>

This file contains general information on how to find out about zsh,
(the first part of the FAQ up to item 1.1), then any other items which
have changed since last month's posting, then the differences in the
yodl version of the FAQ.  If you would like a complete individual
copy, email me and I will add you to the list.




Archive-Name: unix-faq/shell/zsh
Last-Modified: 2002/03/24
Submitted-By: pws@pwstephenson.fsnet.co.uk (Peter Stephenson)
Posting-Frequency: Monthly
Copyright: (C) P.W. Stephenson, 1995--2001 (see end of document)

Changes since last issue posted:

  2.3   More description about alias pitfalls.

This document contains a list of frequently-asked (or otherwise
significant) questions concerning the Z-shell, a command interpreter
for many UNIX systems which is freely available to anyone with FTP
access.  Zsh is among the most powerful freely available Bourne-like
shell for interactive use.

If you have never heard of `sh', `csh' or `ksh', then you are
probably better off to start by reading a general introduction to UNIX
rather than this document.

If you just want to know how to get your hands on the latest version,
skip to question 1.6; if you want to know what to do with
insoluble problems, go to 5.2.

Notation: Quotes `like this' are ordinary textual quotation
marks.  Other uses of quotation marks are input to the shell.

Contents:
Chapter 1:  Introducing zsh and how to install it
1.1. Sources of information
1.2. What is it?
1.3. What is it good at?
1.4. On what machines will it run?  (Plus important compilation notes)
1.5. What's the latest version?
1.6. Where do I get it?
1.7. I don't have root access: how do I make zsh my login shell?

Chapter 2:  How does zsh differ from...?
2.1. sh and ksh?
2.2. csh?
2.3. Why do my csh aliases not work?  (Plus other alias pitfalls.)
2.4. tcsh?
2.5. bash?
2.6. Shouldn't zsh be more/less like ksh/(t)csh?

Chapter 3:  How to get various things to work
3.1. Why does `$var' where `var="foo bar"' not do what I expect?
3.2. In which startup file do I put...?
3.3. What is the difference between `export' and the ALL_EXPORT option?
3.4. How do I turn off spelling correction/globbing for a single command?
3.5. How do I get the meta key to work on my xterm?
3.6. How do I automatically display the directory in my xterm title bar?
3.7. How do I make the completion list use eight bit characters?
3.8. Why do the cursor (arrow) keys not work?
3.9. Why does my terminal act funny in some way?
3.10. Why does zsh not work in an Emacs shell mode any more?
3.11. Why do my autoloaded functions not autoload [the first time]?
3.12. How does base arithmetic work?
3.13. How do I get a newline in my prompt?
3.14. Why does `bindkey ^a command-name' or 'stty intr ^-' do something funny?
3.15. Why can't I bind \C-s and \C-q any more?
3.16. How do I execute command `foo' within function `foo'?
3.17. Why do history substitutions with single bangs do something funny?
3.18. Why does zsh kill off all my background jobs when I logout?
3.19. How do I list all my history entries?
3.20. How does the alternative loop syntax, e.g. `while {...} {...}' work?
3.21. Why is my history not being saved?
3.22. How do I get a variable's value to be evaluated as another variable?
3.23. How do I prevent the prompt overwriting output when there is no newline?
3.24. What's wrong with cut and paste on my xterm?
3.25. How do I get coloured prompts on my colour xterm?
3.26. Why is my output duplicated with `foo 2>&1 >foo.out | bar'?
3.27. Why am I prompted to correct commands which are in my path?

Chapter 4:  The mysteries of completion
4.1. What is completion?
4.2. What sorts of things can be completed?
4.3. How does zsh deal with ambiguous completions?
4.4. How do I complete in the middle of words / just what's before the cursor?
4.5. How do I get started with programmable completion?
4.6. And if programmable completion isn't good enough?

Chapter 5:  The future of zsh
5.1. What bugs are currently known and unfixed? (Plus recent important changes)
5.2. Where do I report bugs, get more info / who's working on zsh?
5.3. What's on the wish-list?
5.4. Did zsh have problems in the year 2000?

Acknowledgments

Copyright
--- End of Contents ---

Chapter 1: Introducing zsh and how to install it

1.1: Sources of information

  Information on zsh is available via the World Wide Web.  The URL
  is http://zsh.sunsite.dk/ .
  The server provides this FAQ and much else and is
  now maintained by Karsten Thygesen and others (mail zsh@sunsite.dk
  with any related messages).  The FAQ is at http://zsh.sunsite.dk/FAQ/ .
  The site also contains some contributed zsh scripts and functions;
  we are delighted to add more, or simply links to your own collection.

  This document was originally written in YODL, allowing it to be converted
  easily into various other formats.  The master source file lives at
  http://zsh.sunsite.dk/FAQ/zshfaq.yo and the plain text version
  can be found at http://zsh.sunsite.dk/FAQ/zshfaq.txt .

  Another useful source of information is the collection of FAQ articles
  posted frequently to the Usenet news groups comp.unix.questions,
  comp.unix.shells and comp.answers with answers to general questions
  about UNIX.  The fifth of the seven articles deals with shells,
  including zsh, with a brief description of differences.  There is
  also a separate FAQ on shell differences and how to change your
  shell.  Usenet FAQs are available via FTP from rtfm.mit.edu and
  mirrors and also on the World Wide Web; see

    USA         http://www.cis.ohio-state.edu/hypertext/faq/usenet/top.html
    UK          http://www.lib.ox.ac.uk/internet/news/faq/comp.unix.shell.html
    Netherlands http://www.cs.uu.nl/wais/html/na-dir/unix-faq/shell/.html

  You can also get it via email by emailing mail-server@rtfm.mit.edu
  with, in the body of the message, `send faqs/unix-faq/shell/zsh'.

  The latest version of this FAQ is also available directly from any
  of the zsh archive sites listed in question 1.6.

  I have been putting together a user guide to complement the manual by
  explaining the most useful features of zsh in a more easy to read way.
  This is now more than half complete and includes a discussion of
  the new form for command line completion, not described in the FAQ.
  You can find it in various formats at:
    http://zsh.sunsite.dk/Guide/

  (As a method of reading the following in Emacs, you can type \M-2
  \C-x $ to make all the indented text vanish, then \M-0 \C-x $
  when you are on the title you want.)

  For any more eclectic information, you should contact the mailing
  list:  see question 5.2.

--- End of general information, changed items follow in full ---

Minor changes of phrasing, spelling, etc. are not included.

2.3: Why do my csh aliases not work?  (Plus other alias pitfalls.)

  First of all, check you are using the syntax

    alias newcmd='list of commands'

  and not

    alias newcmd 'list of commands'

  which won't work. (It tells you if `newcmd' and `list of commands' are
  already defined as aliases.)

  Otherwise, your aliases probably contain references to the command
  line of the form `\!*', etc.  Zsh does not handle this behaviour as it
  has shell functions which provide a way of solving this problem more
  consistent with other forms of argument handling.  For example, the
  csh alias

    alias cd 'cd \!*; echo $cwd'

  can be replaced by the zsh function,

    cd() { builtin cd "$@"; echo $PWD; }

  (the `builtin' tells zsh to use its own `cd', avoiding an infinite loop)
  or, perhaps better,

    cd() { builtin cd "$@"; print -D $PWD; }

  (which converts your home directory to a ~).  In fact, this problem is
  better solved by defining the special function chpwd() (see the manual).
  Note also that the `;' at the end of the function is optional in zsh,
  but not in ksh or sh (for sh's where it exists).

  Here is Bart Schaefer's guide to converting csh aliases for zsh.

  1) If the csh alias references "parameters" (\!:1, \!* etc.),
     then in zsh you need a function (referencing $1, $* etc.).
     Otherwise, you can use a zsh alias.

  2) If you use a zsh function, you need to refer _at_least_ to
     $* in the body (inside the { }).  Parameters don't magically
     appear inside the { } the way they get appended to an alias.

  3) If the csh alias references its own name (alias rm "rm -i"),
     then in a zsh function you need the "command" keyword
     (function rm() { command rm -i "$@" }), but in a zsh alias
     you don't (alias rm="rm -i").

  4) If you have aliases that refer to each other (alias ls "ls -C";
     alias lf "ls -F" ==> lf == ls -C -F) then you must either:

        o  convert all of them to zsh functions; or
        o  after converting, be sure your .zshrc defines all of your
           aliases before it defines any of your functions.

     Those first four are all you really need, but here are four more for
     heavy csh alias junkies:

  5) Mapping from csh alias "parameter referencing" into zsh function
     (assuming SH_WORD_SPLIT and KSH_ARRAYS are NOT set in zsh):

      csh             zsh
     =====         ==========
     \!*           $*              (or $argv)
     \!^           $1              (or $argv[1])
     \!:1          $1
     \!:2          $2              (or $argv[2], etc.)
     \!$           $*[$#]          (or $argv[$#], or $*[-1])
     \!:1-4        $*[1,4]
     \!:1-         $*[1,$#-1]      (or $*[1,-2])
     \!^-          $*[1,$#-1]
     \!*:q         "$@"
     \!*:x         $=*             ($*:x doesn't work (yet))

  6) Remember that it is NOT a syntax error in a zsh function to
     refer to a position ($1, $2, etc.) greater than the number of
     parameters. (E.g., in a csh alias, a reference to \!:5 will
     cause an error if 4 or fewer arguments are given; in a zsh
     function, $5 is the empty string if there are 4 or fewer
     parameters.)

  7) To begin a zsh alias with a - (dash, hyphen) character, use
     `alias --':

             csh                            zsh
        ===============             ==================
        alias - "fg %-"             alias -- -="fg %-"

  8) Stay away from `alias -g' in zsh until you REALLY know what
     you're doing.

  There is one other serious problem with aliases: consider

    alias l='/bin/ls -F'
    l() { /bin/ls -la "$@" | more }

  `l' in the function definition is in command position and is expanded
  as an alias, defining `/bin/ls' and `-F' as functions which call
  `/bin/ls', which gets a bit recursive.  This can be avoided if you use
  `function' to define a function, which doesn't expand aliases.  It is
  possible to argue for extra warnings somewhere in this mess.

  Earlier versions of the FAQ claimed `it is not possible to define
  `function' as an alias'.  This turns out to be false; you can even
  confuse yourself this way.  The point to remember is that aliases are
  quite deliberately a way of subverting the shell's syntax for special
  effects.  If you wish to be completely safe, you should stick with
  functions.

  Bart Schaefer's rule is:  Define first those aliases you expect to
  use in the body of a function, but define the function first if the
  alias has the same name as the function.

--- End of changed items, diff from previous version follows ---
Index: zshfaq.yo
===================================================================
RCS file: /pack/anoncvs/zsh/www/FAQ/zshfaq.yo,v
retrieving revision 1.77
retrieving revision 1.78
diff -u -r1.77 -r1.78
--- zshfaq.yo	2002/02/24 13:47:52	1.77
+++ zshfaq.yo	2002/03/24 19:23:57	1.78
@@ -43,11 +43,11 @@
 whenman(report(ARG1)(ARG2)(ARG3))\
 whenms(report(ARG1)(ARG2)(ARG3))\
 whensgml(report(ARG1)(ARG2)(ARG3)))
-myreport(Z-Shell Frequently-Asked Questions)(Peter Stephenson)(2002/02/24)
+myreport(Z-Shell Frequently-Asked Questions)(Peter Stephenson)(2002/03/24)
 COMMENT(-- the following are for Usenet and must appear first)\
 description(\
 mydit(Archive-Name:) unix-faq/shell/zsh
-mydit(Last-Modified:) 2002/02/24
+mydit(Last-Modified:) 2002/03/24
 mydit(Submitted-By:) email(pws@pwstephenson.fsnet.co.uk (Peter Stephenson))
 mydit(Posting-Frequency:) Monthly
 mydit(Copyright:) (C) P.W. Stephenson, 1995--2001 (see end of document)
@@ -55,7 +55,7 @@
 
 bf(Changes since last issue posted:)
 description(
-  mydit(1.6)   Modified list of FTP mirrors (from Geoff Wing).
+  mydit(2.3)   More description about alias pitfalls.
 )
 
 This document contains a list of frequently-asked (or otherwise
@@ -840,8 +840,14 @@
   as an alias, defining mytt(/bin/ls) and mytt(-F) as functions which call
   mytt(/bin/ls), which gets a bit recursive.  This can be avoided if you use
   mytt(function) to define a function, which doesn't expand aliases.  It is
-  possible to argue for extra warnings somewhere in this mess.  Luckily,
-  it is not possible to define mytt(function) as an alias.
+  possible to argue for extra warnings somewhere in this mess.
+
+  Earlier versions of the FAQ claimed `it is not possible to define
+  mytt(function) as an alias'.  This turns out to be false; you can even
+  confuse yourself this way.  The point to remember is that aliases are
+  quite deliberately a way of subverting the shell's syntax for special
+  effects.  If you wish to be completely safe, you should stick with
+  functions.
 
   Bart Schaefer's rule is:  Define first those aliases you expect to
   use in the body of a function, but define the function first if the

