From zsh-workers-return-6056-mason-zsh=primenet.com.au@sunsite.auc.dk Mon Apr 19 08:16:35 1999
Return-Path: <zsh-workers-return-6056-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 17024 invoked from network); 19 Apr 1999 08:16:33 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 19 Apr 1999 08:16:33 -0000
Received: (qmail 14633 invoked by alias); 19 Apr 1999 08:16:24 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 6056
Received: (qmail 14626 invoked from network); 19 Apr 1999 08:16:23 -0000
Date: Mon, 19 Apr 1999 10:16:16 +0200 (MET DST)
Message-Id: <199904190816.KAA19125@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: Peter Stephenson's message of Sun, 18 Apr 1999 17:03:48 +0200
Subject: Re: PATCH: compwid.yo


Peter Stephenson wrote:

> Here's my attempt at compwid.yo.

Thanks again.

I don't want to correct your English... the patch mostly fixes things
that were wrong in the stuff I wrote (but in some places, hm).

Bye
 Sven

diff -u od/Zsh/compwid.yo Doc/Zsh/compwid.yo
--- od/Zsh/compwid.yo	Mon Apr 19 08:57:15 1999
+++ Doc/Zsh/compwid.yo	Mon Apr 19 10:12:29 1999
@@ -43,7 +43,7 @@
 Inside completion widgets, and any functions called from those, some
 parameters have special meaning; outside these function they are not
 special to the shell in any way.  These parameters are used to pass
-information between the completion code to the completion widget. Some of
+information between the completion code and the completion widget. Some of
 the builtin commands and the condition codes use or change the current
 values of these parameters.  Any existing values will be hidden during
 execution of completion widgets; except for tt(compstate), the parameters
@@ -171,7 +171,7 @@
 )
 
 this gives the number of the specification string currently in use.
-In this case, matching is perform with each specification in turn.
+In this case, matching is performed with each specification in turn.
 )
 item(tt(matcher_string))(
 The global match specification string var(specN) currently used.
@@ -182,9 +182,9 @@
 item(tt(restore))(
 This is set to tt(auto) before a function is entered, which forces the
 special parameters mentioned above (tt(words), tt(CURRENT), tt(PREFIX),
-tt(IPREFIX), and tt(SUFFIX)) to be restored to their previous values when
-the function exits.   If a function unsets it or sets it to any other
-string, they will not be restored.
+tt(IPREFIX), tt(SUFFIX), and tt(ISUFFIX)) to be restored to their
+previous values when the function exits.   If a function unsets it or
+sets it to any other string, they will not be restored.
 )
 item(tt(list))(
 This controls whether or how the list of matches will be displayed.  If it
@@ -280,8 +280,8 @@
 The completion widget may set it to either of these two values, or to any
 other non-empty string.  If it is non-empty, unquoted metacharacters on the
 command line will be treated as patterns; if it is `tt(*)', then
-additionally a wildcard `tt(*)' is assumed at the cursor position; if is
-empty or unset, metacharacters will be treated literally.
+additionally a wildcard `tt(*)' is assumed at the cursor position; if
+it is empty or unset, metacharacters will be treated literally.
 )
 item(tt(pattern_insert))(
 Normally this is set to tt(menu), which specifies that menu-completion will
@@ -347,7 +347,7 @@
 match. The return value is zero if at least one match was added and
 non-zero if no matches were added.
 
-The completion code breaks the string to complete into six fields in
+The completion code breaks the string to complete into seven fields in
 the order: 
 
 indent(
@@ -441,7 +441,7 @@
 )
 item(tt(-f))(
 If this flag is given, all of the matches built from var(words) are
-marked as being the names of files.   They are not required to be actual
+marked as being the names of files.  They are not required to be actual
 filenames, but if they are, and the option tt(LIST_TYPES) is set, the
 characters describing the types of the files in the completion lists will
 be shown. This also forces a slash to be added when the name of a
@@ -488,11 +488,10 @@
 )
 item(tt(-M) var(match-spec))(
 As for tt(compctl) and tt(compgen), this gives local match specifications.
-Note that they will only be used if the tt(-m) is
-also given.
+Note that they will only be used if the tt(-U) option is not given.
 )
 item(tt(-n))(
-Specifies that words added with tt(compadd) are to be used as possible
+Specifies that the words added are to be used as possible
 matches, but are not to appear in the completion listing.
 )
 item(tt(-U))(
@@ -664,13 +663,13 @@
 tt(bindkey '^X\t' complete)))
 
 After that the shell function tt(complete-history) will be invoked
-after typing control-X and TAB. The function should then generte the
+after typing control-X and TAB. The function should then generate the
 matches, e.g.:
 
 indent(nofill(
 tt(complete-history LPAR()RPAR() { compgen -H 0 '' })))
 
-In this the function will complete words from the history matching the 
+This function will complete words from the history matching the 
 current word.
 
 For a description of the widget-based completion system provided with the

--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

