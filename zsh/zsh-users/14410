From zsh-users-return-14410-mason-zsh=primenet.com.au@sunsite.dk Fri Sep 18 09:46:37 2009
Return-Path: <zsh-users-return-14410-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12968 invoked from network); 18 Sep 2009 09:46:32 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 18 Sep 2009 09:46:32 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 94949 invoked from network); 18 Sep 2009 09:46:19 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 18 Sep 2009 09:46:19 -0000
Received: (qmail 18848 invoked by alias); 18 Sep 2009 09:46:08 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 14410
Received: (qmail 18823 invoked from network); 18 Sep 2009 09:46:08 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 18 Sep 2009 09:46:08 -0000
Received: from mail-fx0-f212.google.com (mail-fx0-f212.google.com [209.85.220.212])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 077048026E39
	for <zsh-users@sunsite.dk>; Fri, 18 Sep 2009 11:46:01 +0200 (CEST)
Received: by fxm8 with SMTP id 8so584178fxm.45
        for <zsh-users@sunsite.dk>; Fri, 18 Sep 2009 02:46:01 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:cc:content-type;
        bh=h1GP7mYNM9y1LMuVTwN6eeY/24LTbnEK2xad4QZI+M4=;
        b=k5B+KAvjISGMXEYxsyU1yFp9q3rXu7GACu+GnNjh9ssD4UD6xSMhNRqsXMrfcPMzWW
         /CuRIL4W3GyaNmAXrq4nmBRHZfUMOc+srttaNKJjXN+1phs9w4Fhmq3gU8/Q7TNPWFBQ
         lVuLQJhWbHuhOpyzEzPgrtJqKOJkyODWrvAdM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type;
        b=FX9uXmDwHZ0zobtJc8oQQqXkN1ZCTgVuxnBsFa52e27iGg0TOLgAZ3PVjULu59bQgd
         bqe1YgZr7DlwwSzF9Gei0+3mi0wD11JW7EndIbrZZC9XRR9v+7TWdmNzH3sZgSgAF+6U
         2snxhJCftXJewV+vp6pREyZIua6wawgCeFI0U=
MIME-Version: 1.0
Received: by 10.204.155.67 with SMTP id r3mr1326052bkw.94.1253267161103; Fri, 
	18 Sep 2009 02:46:01 -0700 (PDT)
In-Reply-To: <40A4D186-DB1B-4FBC-BFE7-AB39963DA351@biskalar.de>
References: <m2ocp9ma6k.fsf@asfast.com>
	 <237967ef0909171647k21d15c6bwe934c4fe16029c68@mail.gmail.com>
	 <40A4D186-DB1B-4FBC-BFE7-AB39963DA351@biskalar.de>
Date: Fri, 18 Sep 2009 11:46:01 +0200
Message-ID: <237967ef0909180246i6f513823je2c2ec693aa8fccf@mail.gmail.com>
Subject: Re: Testing if there is data on stdin?
From: Mikael Magnusson <mikachu@gmail.com>
To: Sebastian Stark <seb-zsh@biskalar.de>
Cc: Lloyd Zusman <ljz@asfast.com>, zsh-users@sunsite.dk
Content-Type: text/plain; charset=UTF-8
X-Virus-Scanned: ClamAV 0.94.2/9814/Thu Sep 17 19:17:50 2009 on bifrost
X-Virus-Status: Clean

2009/9/18 Sebastian Stark <seb-zsh@biskalar.de>:
>
> On 18.09.2009, at 01:47, Mikael Magnusson wrote:
>
>> 2009/9/18 Lloyd Zusman <ljz@asfast.com>:
>>>
>>> Is there a way in zsh to test whether there is at least one byte of data
>>> waiting to be read from stdin without actually reading that data?
>>
>> You can either use
>> zmodload zsh/zselect
>> zselect -t0 0
>> or
>> read -t0
>
> I tried both and noticed a difference:
>
> % print foo | { cat }
> foo
> % print foo | { read -t0; cat }
> % print foo | { zmodload zsh/zselect; zselect -t0 0; cat }
> foo
>
> Can anyone explain the difference?

Yes, in the middle case, read actually does perform the read, so your
foo is in $REPLY there. When I tried it yesterday I also noticed both
zselect and read returned failure if I did something naive like echo
foo | read -t0, presumably the read is launched first in that case.
This also happens for me when I try your variants with {}, it is only
"fixed" by using () instead. But `read` swallowing your foo is the
only explanation I have, so maybe some scheduling is different for
you, since I seem to consistently get the foo output and the read
failing (for "print foo | { read -t0; cat }"). If I do this instead I
get the same result: print foo | { /bin/true; read ;t0; cat }.
% print foo | { /bin/true; read -t0; cat; echo bar $REPLY }
bar foo
% print foo | { read -t0; cat; echo bar $REPLY }
foo
bar

-- 
Mikael Magnusson

