From zsh-workers-return-15917-mason-zsh=primenet.com.au@sunsite.dk Mon Oct 01 12:02:34 2001
Return-Path: <zsh-workers-return-15917-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23983 invoked from network); 1 Oct 2001 12:02:33 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 1 Oct 2001 12:02:33 -0000
Received: (qmail 24822 invoked by alias); 1 Oct 2001 12:02:22 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 15917
Received: (qmail 24808 invoked from network); 1 Oct 2001 12:02:21 -0000
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: PATCH: test for trap EXIT fix.
Date: Mon, 01 Oct 2001 13:01:37 +0100
Message-ID: <16272.1001937697@csr.com>
From: Peter Stephenson <pws@csr.com>

Here's a test that nested EXIT traps work when exiting from within a
function.

The comment notes the following behaviour:

fn() { 
  ( trap 'print This is in the top-level function scope.' EXIT
    exit
  )
}

The subshell exits without ever leaving the scope of fn(), so the EXIT trap
isn't called in this case.

I'm not convinced this is wrong, or at least that it's inconsistent.
Exiting subshells is a bit of a special case.

Index: Test/C03traps.ztst
===================================================================
RCS file: /cvsroot/zsh/zsh/Test/C03traps.ztst,v
retrieving revision 1.1
diff -u -r1.1 C03traps.ztst
--- Test/C03traps.ztst	2001/04/02 12:32:43	1.1
+++ Test/C03traps.ztst	2001/10/01 11:56:41
@@ -45,6 +45,18 @@
 0:Nested `trap - EXIT' on `TRAPEXIT'
 >EXIT1
 
+# We can't test an EXIT trap for the shell as a whole, because
+# we're inside a function scope which we don't leave when the
+# subshell exits.  Not sure if that's the correct behaviour, but
+# it's sort of consistent.
+  ( fn1() { trap 'print Function 1 going' EXIT; exit; print Not reached; }
+    fn2() { trap 'print Function 2 going' EXIT; fn1; print Not reached; }
+    fn2
+  )
+0:EXIT traps on functions when exiting from function
+>Function 1 going
+>Function 2 going
+
   fn1() {
     trap
     trap 'print INT1' INT

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR Ltd., Science Park, Milton Road,
Cambridge, CB4 0WH, UK                          Tel: +44 (0)1223 392070


**********************************************************************
The information transmitted is intended only for the person or
entity to which it is addressed and may contain confidential 
and/or privileged material. 
Any review, retransmission, dissemination or other use of, or
taking of any action in reliance upon, this information by 
persons or entities other than the intended recipient is 
prohibited.  
If you received this in error, please contact the sender and 
delete the material from any computer.
**********************************************************************

