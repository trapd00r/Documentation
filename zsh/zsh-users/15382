From zsh-users-return-15382-mason-zsh=primenet.com.au@zsh.org Fri Sep 10 06:28:55 2010
Return-Path: <zsh-users-return-15382-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 6680 invoked by alias); 10 Sep 2010 06:28:55 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15382
Received: (qmail 13704 invoked from network); 10 Sep 2010 06:28:53 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-4.3 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,RCVD_IN_DNSWL_MED autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at spodhuis.org does not designate permitted sender hosts)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=spodhuis.org; s=d200912;
	h=Content-Type:MIME-Version:Message-ID:Subject:To:From:Date; bh=XiH2Q+OCj1E8q99PpFD5IYrkCqnvDPhkAoZ2bONI6wo=;
	b=jdltMHh6bSrzF/EoDqIvk3hDpsg+LmWgLri6lwi1MWnqlWQr2NdEqZOV5pmPmVgHeiEuqz/N7mQxkqhAfieFTt3432zXd+P5a8VQdvJ4XK7rY+scRGc0wY2Y9w31gAnoFSzksB+uxVwUyCKUo1+hoBmruUz4+UC8ewXAiS4WFMc=;
Date: Fri, 10 Sep 2010 02:13:20 -0400
From: Phil Pennock <zsh-workers+phil.pennock@spodhuis.org>
To: zsh-users@zsh.org
Subject: Refering to overlaid variable from within a function
Message-ID: <20100910061319.GA73504@redoubt.spodhuis.org>
Mail-Followup-To: zsh-users@zsh.org
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

Context: I have some functions for manipulating sets.  A couple of
examples are at the bottom of this mail.  Using those, I can do:
% newset aa foo bar
% newset bb bar baz
% set_subtract_in aa bb
% echo $aa
foo

For manipulating large lists of machines, retrieved from various
sources, this is invaluable.  As you can see from the context, I need to
pass around the names of the arrays, rather than the array contents.

The problem I have is that I just noticed that I can't use sets named
"a", "b", "c", "name" because those are variables local in the suite of
set manipulation functions.

Is there a way to refer to variables as they exist in the context of the
caller of a function, so that you can use a name but not have to worry
about the caller's names?

Otherwise, my options are to not name the sets inside the functions,
which gets even harder to read, or to use __setmanip_<varname>s and just
rely on that not conflicting, but I'm wondering if there's a cleaner way
of doing this?

Thanks,
-Phil


function newset {
        setopt local_options no_ksh_arrays
        local name="$1"; shift
        typeset -gUa $name
        set -A $name "$@"
}

function set_subtract_in {
        setopt local_options no_ksh_arrays
        local name="$1" b="$2"
        set -A $name "${(P@)name:#${(P~j,|,)b}}"
}

