From zsh-workers-request@euclid.skiles.gatech.edu Wed Mar 12 15:44:30 1997
Return-Path: <zsh-workers-request@euclid.skiles.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 25128 invoked from network); 12 Mar 1997 15:44:29 -0000
Received: from euclid.skiles.gatech.edu (list@130.207.146.50)
  by coral.primenet.com.au with SMTP; 12 Mar 1997 15:44:29 -0000
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id KAA07869; Wed, 12 Mar 1997 10:36:58 -0500 (EST)
Resent-Date: Wed, 12 Mar 1997 10:36:58 -0500 (EST)
From: Zefram <zefram@dcs.warwick.ac.uk>
Message-Id: <13525.199703121539@stone.dcs.warwick.ac.uk>
Subject: Re: idea of zsh feature
To: pws@ifh.de (Peter Stephenson)
Date: Wed, 12 Mar 1997 15:39:15 +0000 (GMT)
Cc: zsh-workers@math.gatech.edu
In-Reply-To: <199703121310.OAA26595@sgi.ifh.de> from "Peter Stephenson" at Mar 12, 97 02:10:46 pm
X-Loop: zefram@dcs.warwick.ac.uk
X-Stardate: [-31]9013.26
X-Phase: The Moon is Waxing Crescent (18% of Full)
X-US-Congress: Moronic fuckers
X-Personality: INTJ
Content-Type: text
Resent-Message-ID: <"CPuoB3.0.uw1.Psi9p"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/2986
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

Peter Stephenson wrote:
>I was thinking about this and got as far as writing an xtermclone script.
>The big problem seems to be xterm needs to fork its own process while
>the zsh process needs to be forked from the old one.  This means you need
>another sentinel process for the xterm which is a bit ugly.

Right.  We really need a program that will close all its file descriptors
and block until the cloned zsh terminates.  The only real problem I
see is letting the process know the new zsh's PID -- although it can't
wait(2), it can poll in a pretty lightweight manner.  This applies to
any terminal, of course, not just xterm.

>                                                             Also, with
>zsh as it stands it's hard to get that sentinel process to pause cleanly;
>if that's going to be a common problem it would be worth adding a (trivial)
>pause builtin to the module.

I've been considering that myself.  A pause builtin would be generally
useful anyway, and I think it would more naturally fit into a module
offering sleep(1) as a builtin.  (We could, of course, enhance the sleep
builtin to use usleep(2), nanosleep(2) or select(2) for high-resolution
pauses.)

-zefram

