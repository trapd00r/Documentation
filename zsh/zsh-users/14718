From zsh-users-return-14718-mason-zsh=primenet.com.au@zsh.org Tue Jan 19 21:42:50 2010
Return-Path: <zsh-users-return-14718-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 10614 invoked by alias); 19 Jan 2010 21:42:50 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14718
Received: (qmail 27106 invoked from network); 19 Jan 2010 21:42:39 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at benizi.com does not designate permitted sender hosts)
Date: Tue, 19 Jan 2010 16:33:36 -0500 (EST)
From: "Benjamin R. Haskell" <zsh@benizi.com>
To: Zsh Users <zsh-users@zsh.org>
Subject: Re: Globbing autocorrects misencoded filenames?
In-Reply-To: <20100119204916.GC29936@waba>
Message-ID: <alpine.LNX.2.01.1001191614500.4229@hp.internal>
References: <20100119204916.GC29936@waba>
User-Agent: Alpine 2.01 (LNX 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: MULTIPART/MIXED; BOUNDARY="-1463810530-1028672970-1263936299=:4229"
Content-ID: <alpine.LNX.2.01.1001191625030.4229@hp.internal>

---1463810530-1028672970-1263936299=:4229
Content-Type: TEXT/PLAIN; charset=UTF-8
Content-Transfer-Encoding: 8BIT
Content-ID: <alpine.LNX.2.01.1001191625031.4229@hp.internal>

On Tue, 19 Jan 2010, waba@waba.be wrote:

> Hello,
> 
> While writing a script that deals with files named using an incorrect 
> encoding (eg. latin1 on a utf8 system), I came across a strange zsh 
> feature:
> 
>   [waba@waba]~ % zsh -f
>   waba% locale
>   LANG=POSIX
>   LC_CTYPE=fr_BE.utf8
>   LC_NUMERIC=POSIX
>   LC_TIME=POSIX
>   LC_COLLATE=fr_BE.utf8
>   LC_MESSAGES=POSIX
>   LC_ALL=
>   waba% touch $( echo /tmp/àbc |iconv -tlatin1 )
>   waba% echo /tmp/àb?
>   /tmp/???bc
> 
> IOW, I create a file named "àbc" (a-grave b c) using latin1 encoding 
> on my utf8 system, but it still matches as utf8 during globbing.
> 
> Expected behavior: the first character of that filename is not valid 
> utf8 and should not match anything except itself. I expected the shell 
> to return "zsh: no matches found: /tmp/àb?".
> 
> So,
> 1) Is there a list of the encodings tried by ZSH ? latin1/iso-8859-1 is
>    not mentioned anywhere in my configuration...
> 2) Can this feature be disabled at all ? I'm sure that it can be useful
>    at the prompt, but it's a nuisance inside my script.
> 

Huh, interesting.  Just as another data point, A test with some 
ISO-2022-JP- and UTF-8-encoded kanji-containing filenames shows that it 
does glob the latin-1-ish chars, but not the Chinese chars.

Personally, I wouldn't do this in Zsh (I'm more a perler at heart 
anyway, and Perl's Encode module handles all of this reeeeeally well).  
But, obviously there are larger implications than your script.

I just found the 'u' and 'U' globbing flags in zshall.  Perhaps '(#u)' 
or '(#U)' is all you need (see last examples below), but it still seems 
odd that it's showing the 'é' in the filename for me, whether or not 
it's encoded properly.

Best,
Ben

# run in empty dir -- creates some test files (all one line)
$ perl -Mbytes -C0 -lwe 'open my $f, ">", $_ for map $_."=[".join("",map sprintf("%02x", ord $_), split//)."]", map {; "a${_}a", "b${_}b" } "\xe9","\xc3\xa9", "\xe6\x97\xa5\x0a", "\x1b\x24\x42\x46\x7c\x1b\x28\x42\x0a"'

# show that the files indeed have poorly-encoded names
$ rsync -r --list-only ./ | cut -c44-
.
a\#033$BF|\#033(B\#012a=[611b2442467c1b28420a61]
aéa=[61c3a961]
a日\#012a=[61e697a50a61]
a\#351a=[61e961]
b\#033$BF|\#033(B\#012b=[621b2442467c1b28420a62]
béb=[62c3a962]
b日\#012b=[62e697a50a62]
b\#351b=[62e962]

# zsh globs 'em all:
$ for l in a* ; print -lr "got:$l" 
got:aBF|
a=[611b2442467c1b28420a61]
got:aéa=[61c3a961]
got:a日
a=[61e697a50a61]
got:aéa=[61e961]

# zsh globs 'em regardless of Latin-1 correctness
$ for l in aé* ; print -lr "got:$l"
got:aéa=[61c3a961]
got:aéa=[61e961]

# zsh globs only the UTF-8 encoded Japanese filename (w/ Chinese char)
$ for l in a日* ; print -lr "got:$l"
got:a日
a=[61e697a50a61]

# zsh has extended glob options to control this (somewhat?)
$ for l in (#u)aé* ; print -lr "got:$l"
got:aéa=[61c3a961]
got:aéa=[61e961]
$ for l in (#U)aé* ; print -lr "got:$l" 
got:aéa=[61c3a961]
---1463810530-1028672970-1263936299=:4229--

