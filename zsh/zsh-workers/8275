From zsh-workers-return-8275-mason-zsh=primenet.com.au@sunsite.auc.dk Fri Oct 15 10:30:02 1999
Return-Path: <zsh-workers-return-8275-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23112 invoked from network); 15 Oct 1999 10:30:01 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 15 Oct 1999 10:30:01 -0000
Received: (qmail 8397 invoked by alias); 15 Oct 1999 10:29:48 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 8275
Received: (qmail 8387 invoked from network); 15 Oct 1999 10:29:45 -0000
Date: Fri, 15 Oct 1999 12:29:43 +0200 (MET DST)
Message-Id: <199910151029.MAA18013@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: Tanaka Akira's message of 15 Oct 1999 19:14:07 +0900
Subject: Re: _bison -vV<TAB> dumps core.


Tanaka Akira wrote:

> > Thank you for helping me debugging `computil'. Is it fast enough for
> > you? And is the speed difference to the shell code noticeable?
> 
> It's good.  I can feel the difference on Sun Ultra5.
> Unfortunately, it is not general enough to be used by _apt.
> 
> I think the idea of general command line parsing builtin mentioned in
> 7956 is very good.  _regex_arguments (used by _apt) is too slow.

The problem which I hadn't thought about before is caching. To allow
(aggressive) caching and avoid having to give the definitions more
than once and avoid using some sort of tag passing back and forth
(between C- and shell-code) argument and command line parsing have to
be done together (of course, this also simplifies the C-code but that
shouldn't matter too much). Anyway, the parsing stuff is nicely
separated in C, so it wouldn't be too hard to re-use some of the
functions for other helper builtin (in fact, `compvalues' already uses 
code originally written for `comparguments'). But `regex_arguments'
(which I was thinking about, too) is different enough to justify its
own builtin, I think.

Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

