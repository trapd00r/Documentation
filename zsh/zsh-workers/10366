From zsh-workers-return-10366-mason-zsh=primenet.com.au@sunsite.auc.dk Fri Mar 31 16:56:43 2000
Return-Path: <zsh-workers-return-10366-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24474 invoked from network); 31 Mar 2000 16:56:43 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 31 Mar 2000 16:56:43 -0000
Received: (qmail 12032 invoked by alias); 31 Mar 2000 16:56:33 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 10366
Received: (qmail 12008 invoked from network); 31 Mar 2000 16:56:31 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1000331165618.ZM11928@candle.brasslantern.com>
Date: Fri, 31 Mar 2000 16:56:18 +0000
In-Reply-To: <200003311300.PAA01232@beta.informatik.hu-berlin.de>
Comments: In reply to Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
        "Re: PATCH: was: Re: endianness of wordcode" (Mar 31,  3:00pm)
References: <200003311300.PAA01232@beta.informatik.hu-berlin.de>
X-Mailer: Z-Mail (5.0.0 30July97)
To: zsh-workers@sunsite.auc.dk
Subject: Re: PATCH: was: Re: endianness of wordcode
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Mar 31,  3:00pm, Sven Wischnowsky wrote:
} Subject: Re: PATCH: was: Re: endianness of wordcode
}
} > } And then we can add a description of the _cvs problem in the manual,
} > } so that people know why using this might be a problem.
} > 
} > That would be good, too.
} 
} I hope I made that clear enough in the patch...

I reworded it just a little.  The diff looks bigger because I hit alt-Q in
emacs to refill the paragraphs ...

Index: builtins.yo
===================================================================
RCS file: /extra/cvsroot/zsh/zsh-3.1/Doc/Zsh/builtins.yo,v
retrieving revision 1.64
diff -c -r1.64 builtins.yo
--- builtins.yo	2000/03/31 16:35:40	1.64
+++ builtins.yo	2000/03/31 16:53:50
@@ -1334,27 +1334,25 @@
 and are intended to be used as elements of the tt(FPATH)/tt(fpath)
 special array.
 
-The second form, with the tt(-c) or tt(-a) option, writes the
-definitions for all the named functions into var(file).  For tt(-c),
-the names must be functions currently defined in the shell, not only
-marked for autoloading.  Functions that are only marked for
-autoloading can be written by using the tt(-a) option. If both tt(-c)
-and tt(-a) are given, a mixture of defined functions and functions
-marked for autoloading may be given. In the case of functions marked
-for autoloading, the contents of the definition files for those
-functions will be written to the var(file).  In any case, the
-functions in files written with the tt(-c) or tt(-a) option will be
-autoloaded as if the tt(KSH_AUTOLOAD) option were unset.
+The second form, with the tt(-c) or tt(-a) options, writes the compiled
+definitions for all the named functions into var(file).  For tt(-c), the
+names must be functions currently defined in the shell, not those marked
+for autoloading.  Undefined functions that are marked for autoloading
+may be written by using the tt(-a) option, in which case the tt(fpath)
+is searched and the contents of the definition files for those
+functions, if found, are compiled into var(file).  If both tt(-c) and
+tt(-a) are given, names of both defined functions and functions marked
+for autoloading may be given.  In either case, the functions in files
+written with the tt(-c) or tt(-a) option will be autoloaded as if the
+tt(KSH_AUTOLOAD) option were unset.
 
-The reason for making loaded and not-yet loaded functions be handled
-by different options is that some definition files for autoloaded
-define multiple functions including the function currently loaded
-itself and, at the end, call this function. In such cases the
-resulting zwc file will be different in the two cases (function is
-already loaded or not). In particular, if it is already loaded, the
-other functions defined in the file are not automatically written into 
-the zwc file and, of course, any other initialization code in the file 
-will be lost.
+The reason for handling loaded and not-yet-loaded functions with
+different options is that some definition files for autoloading define
+multiple functions, including the function with the same name as the
+file, and, at the end, call that function.  In such cases the output of
+`tt(zcompile -c)' does not include the additional functions defined in
+the file, and any other initialization code in the file is lost.  Using
+`tt(zcompile -a)' captures all this extra information.
 
 If the tt(-m) option is combined with tt(-c) or tt(-a),
 the var(name)s are used as patterns and all functions whose names

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

