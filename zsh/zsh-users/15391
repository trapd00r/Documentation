From zsh-users-return-15391-mason-zsh=primenet.com.au@zsh.org Sun Sep 12 06:24:36 2010
Return-Path: <zsh-users-return-15391-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5746 invoked by alias); 12 Sep 2010 06:24:36 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15391
Received: (qmail 6795 invoked from network); 12 Sep 2010 06:24:32 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-4.3 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,RCVD_IN_DNSWL_MED autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at spodhuis.org does not designate permitted sender hosts)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=spodhuis.org; s=d200912;
	h=In-Reply-To:Content-Type:MIME-Version:References:Message-ID:Subject:Cc:To:From:Date; bh=a0qyQKl+96EOzN8MCdIMhTO3Ls0rH+ubEiB17iCXsVw=;
	b=eEXLv/Jcu6fBB3/RMI7cy83sD+dPDyd1v8/x/D29O9me0QOm9zjxQNSNzlxapfdadKh3grDYftMr31Tl6XVZJWogEYzANFyKzWd3PcznOrCcmV+sAgw9Yl9k5KhF6FWdeQSHu3m2FTa7mHqrpOhJgW7Hrlbjri4DLbKlfxuRGo0=;
Date: Sun, 12 Sep 2010 02:24:19 -0400
From: Phil Pennock <zsh-workers+phil.pennock@spodhuis.org>
To: Bart Schaefer <schaefer@brasslantern.com>
Cc: zsh-users@zsh.org
Subject: Re: Refering to overlaid variable from within a function
Message-ID: <20100912062419.GA5170@redoubt.spodhuis.org>
Mail-Followup-To: Bart Schaefer <schaefer@brasslantern.com>,
	zsh-users@zsh.org
References: <20100910061319.GA73504@redoubt.spodhuis.org>
 <20100910094157.3f128d4d@pwslap01u.europe.root.pri>
 <100910073557.ZM21299@torch.brasslantern.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <100910073557.ZM21299@torch.brasslantern.com>

On 2010-09-10 at 07:35 -0700, Bart Schaefer wrote:
> On Sep 10,  2:13am, Phil Pennock wrote:
> }
> } Is there a way to refer to variables as they exist in the context of the
> } caller of a function, so that you can use a name but not have to worry
> } about the caller's names?
> 
> Yes, but it's sneaky.
> 
>     bar () {
>         local a="this is bar's $1"
>         print $a
>         trap "$1+=\" and \"${(q-)a}" EXIT
>     }
>     foo () {
>         local a="this is foo's a"
>         print $a
>         bar a
>         print $a
>     }
> 
> Now run "foo".

% foo
this is foo's a
this is bar's a
bar:3: error in flags

Tried with 4.3.10 and 4.3.9.

Dropping the '-' from the parameter expansion flags does the trick.
I'll think on it some more, to deal with the unique-ified arrays needed
for the sets.  I might just end up switching back to working on the
positional parameters.

Thanks,
-Phil

