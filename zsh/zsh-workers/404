From zsh-workers-request@math.gatech.edu  Tue Sep 26 02:36:40 1995
Received: from gatech.edu (gatech.edu [130.207.244.244]) by werple.mira.net.au (8.6.12/8.6.12) with SMTP id CAA14602 for <mason@werple.mira.net.au>; Tue, 26 Sep 1995 02:36:35 +1000
Received: from math (math.skiles.gatech.edu) by gatech.edu with SMTP id AA28152
  (5.65c/Gatech-10.0-IDA for <mason@werple.mira.net.au>); Mon, 25 Sep 1995 12:31:30 -0400
Received: by math (5.x/SMI-SVR4)
	id AA16883; Mon, 25 Sep 1995 12:23:55 -0400
Resent-Date: Mon, 25 Sep 95 17:26:04 +0100
Old-Return-Path: <guillaum@clipper.ens.fr>
Date: Mon, 25 Sep 95 17:26:04 +0100
From: guillaum@clipper.ens.fr (Florent Guillaume)
Message-Id: <9509251626.AA08199@clipper.ens.fr>
To: zsh-workers@math.gatech.edu
Subject: Re: Why does this not work in zsh?
Resent-Message-Id: <"4Pzj_2.0.f74.QUjPm"@math>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/404
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

> >Below follows a nice script, which works with ksh, bash, csh and tcsh,
> >but not with zsh :-((((
> [...]
> Erm, in zsh, you're aliasing both endif and fi to :.  I'm not surprised
> that it doesn't work.  Don't alias fi if you're using zsh.

The real probleme isn't here, it's how zsh treats the "if () then" line.

I also wanted to have a script that worked with all shells, but could
differenciate c shells from bourne shells.  I did this :

if (: != :) then
 ... bourne shell commands
else
 ... c shell commands
 alias fi "unalias fi"
endif
fi

(You'll note the cute little trick on the first line.)

This script work with sh, ksh, bash, csh, tcsh, but NOT with zsh, zsh
doesn't grok the "if () then" syntax (without a semicolon before "then")
which, event if it is nowhere documented, is accepted by sh, ksh and
bash.

For the sake of compatibility, I think this should be fixed.

As an aside, if someone has an idea on how to do what I want to do using
different means, please tell me (the bourne shell command I'm using is
just defining a function setenv, so that the rest of the script can be
processed by all shells ; this means that I can't use a subshell and
redirect its error messages to /dev/null).

-- Florent

