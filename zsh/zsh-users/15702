From zsh-users-return-15702-mason-zsh=primenet.com.au@zsh.org Sat Jan 08 19:55:42 2011
Return-Path: <zsh-users-return-15702-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29597 invoked by alias); 8 Jan 2011 19:55:42 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15702
Received: (qmail 22660 invoked from network); 8 Jan 2011 19:55:30 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <110108115519.ZM1895@torch.brasslantern.com>
Date: Sat, 08 Jan 2011 11:55:19 -0800
In-reply-to: <1101090127100.1967@smasher>
Comments: In reply to Atom Smasher <atom@smasher.org>
 "creating user defined special parameters?" (Jan  9,  1:38am)
References: <1101090127100.1967@smasher>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@zsh.org
Subject: Re: creating user defined special parameters?
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Jan 9,  1:38am, Atom Smasher wrote:
}
} is there a way, from within the shell, to create a special parameter?

No; zsh has not yet implemented ksh "discipline functions," nor the
compound-type semantics of ksh's "typeset -T".

In part this is because of what should be a simple parsing issue; the
syntax Korn invented for compound variables is to embed a "." in the
name, e.g. ${foo.fud} is the "fud" field of base variable "foo".  But
zsh's parser for parameter names inside ${ } is the same as that used
for "bare" $foo.fud, which historically must be parsed ${foo}.fud --
and this same parser is used all over the internals as a test for valid
"identifier" token syntax, so simply adding "." to the list of allowed
characters in an identifier induces massive breakage.

It would be possible to implement an equivalent of discipline functions
as a module, but whenever it has come up it's been backburnered until
the naming syntax problem can be addressed -- no point in deliberately
inventing a differently-shaped version of this wheel.

