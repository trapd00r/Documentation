From zsh-users-return-14833-mason-zsh=primenet.com.au@zsh.org Sun Feb 14 20:05:25 2010
Return-Path: <zsh-users-return-14833-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29779 invoked by alias); 14 Feb 2010 20:05:25 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14833
Received: (qmail 14674 invoked from network); 14 Feb 2010 20:05:23 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: pass (ns1.primenet.com.au: SPF record at benizi.com designates 64.130.10.15 as permitted sender)
Date: Sun, 14 Feb 2010 15:05:17 -0500 (EST)
From: "Benjamin R. Haskell" <zsh@benizi.com>
To: Zsh Users <zsh-users@zsh.org>
Subject: Standard 'filtering' mechanism?
Message-ID: <alpine.LNX.2.01.1002141420590.2729@hp.internal>
User-Agent: Alpine 2.01 (LNX 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

I'm still getting acquainted with the intricacies of Zsh completion and 
pattern matching.  One thing I've wanted to do for a while is prevent 
'vim' completion from matching the various 'junk' files that are 
associated with various phases of TeX compilation.

For example, given the input file 'document.tex', I get the following 
files:

document.tex    document.tmp    document.tuo
document.tuc    document.pdf    document.log
document-mpgraph.mp

But, if I have other files in the directory , I don't want to exclude 
them.  So, my goal is to filter the list of matches via something like 
this function (that does what I want):

function filter-tex {
    local f tex include
    tex=( ${${(M)^argv:#*.tex}:r} )
    reply=()
    if (( $#tex )) ; then
        for f in $argv ; do
            include=true
            for t in $tex ; do
                if (( $f[(I)$t*] )) ; then
                    [[ $f:e == tex ]] || include=false
                fi
            done
            $include && reply+=( $f )
        done
    else
        reply=( $argv )
    fi
    print -l $reply
}

But, I don't understand how to integrate this with completion.  Is there 
some standard mechanism to roughly 'filter the list of matches with this 
function'?  The various 'file-patterns'-like options all seem to want 
just a straight pattern.

I don't necessarily want to just override normal argument completion 
(though it'd work fine for this case, since I don't need _vim's 
+line-number completion, and I generally don't use many other arguments 
to start 'vim').

I also suspect the function might be 'compressible' into a complicated 
pattern, but that's definitely out of my league right now.

-- 
Best,
Ben

