From zsh-workers-request@euclid.skiles.gatech.edu  Mon Jul 29 08:05:23 1996
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by coral.primenet.com.au (8.7.5/8.7.3) with ESMTP id IAA01548 for <mason@primenet.com.au>; Mon, 29 Jul 1996 08:05:20 +1000 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id RAA04790; Sun, 28 Jul 1996 17:47:35 -0400 (EDT)
Resent-Date: Sun, 28 Jul 1996 17:47:35 -0400 (EDT)
From: Zoltan Hidvegi <hzoli@cs.elte.hu>
Message-Id: <199607282036.WAA02509@hzoli.ppp.cs.elte.hu>
Subject: New zed and refresh bug
To: zsh-workers@math.gatech.edu (Zsh hacking and development)
Date: Sun, 28 Jul 1996 22:36:27 +0200 (MET DST)
X-Mailer: ELM [version 2.4ME+ PL17 (25)]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Resent-Message-ID: <"LjuLF3.0.jA1.s_z-n"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/1803
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

The zed distributed with pre4 does not exit properli on ^C interrupt.
Below is a replacement for that.

It demonstrates a zle bug.  Just load this zed function, unset the BAUD
parameter (to get half-screen scrolls in zed), invoke zed -f zed, and use
the up-arrow to move to the top of the function.  On a 80x25 Linux console
with ncurses a bogous `if [[ -f $dir/$1 ]' appears on the 5th screen line
after the second half-screen scroll.

Zoltan


# zed():  Peter Stephenson <pws@s-a.amtp.liv.ac.uk>
# No other shell could do this.
# Edit small files with the command line editor.
# Use ^X^W to save, ^C to abort.
# Option -f: edit shell functions.  (Also if called as fned.)
#
# Completion: use
# compctl -f -x 'w[1,-f]' -F -- zed

local var fun ctrl_W_bind="$(bindkey '^W')"
integer tmout=TMOUT

[[ $1 = -f || $0 = fned ]] && fun=1
[[ $1 = -(|-|f) ]] && shift

[[ -z "$1" ]] && echo 'Usage: "zed filename" or "zed -f function"' && return 1

# catch interrupts
cleanup () {
  bindkey "^M" accept-line
  bindkey "^X^W" undefined-key
  bindkey "^W" "$ctrl_W_bind"
  trap - INT
  TMOUT=tmout
}

trap 'cleanup ; return 130' INT

# We do not want timeout while we are editing a file
TMOUT=0

# don't mangle !'s
setopt localoptions nobanghist

bindkey "^M" self-insert-unmeta
# Depending on your stty's, you may be able to use ^J as accept-line, else:
bindkey "^X^W" accept-line
bindkey "^W" kill-region

if ((fun)) then
  var="$(functions $1)"
  # If function is undefined but autoloadable, load it
  if [[ $var = undefined* ]] then
    local dir
    for dir in $fpath; do
      if [[ -f $dir/$1 ]] then
	var="$1() {
$(<$dir/$1)
}"
	break
      fi
    done
  elif [[ -z $var ]] then
    var="$1() {
}"
  fi
  vared var
  fun=$?
  cleanup
  (( fun == 0 )) && eval function "$var"
else
  [[ -f $1 ]] && var="$(<$1)"
  vared var
  fun=$?
  cleanup
  (( fun == 0 )) && print -r -- "$var" >| $1
fi

return 0

# End of zed

