From zsh-workers-return-11315-mason-zsh=primenet.com.au@sunsite.auc.dk Wed May 10 23:52:40 2000
Return-Path: <zsh-workers-return-11315-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1279 invoked from network); 10 May 2000 23:52:38 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 10 May 2000 23:52:38 -0000
Received: (qmail 12848 invoked by alias); 10 May 2000 23:52:27 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 11315
Received: (qmail 12836 invoked from network); 10 May 2000 23:52:26 -0000
Sender: opk
Message-ID: <3919E7AD.47CBA760@u.genie.co.uk>
Date: Wed, 10 May 2000 23:50:21 +0100
From: Oliver Kiddle <opk@u.genie.co.uk>
X-Mailer: Mozilla 4.61 [en] (X11; I; Linux 2.2.13 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: "zsh-workers@sunsite.auc.dk" <zsh-workers@sunsite.auc.dk>
Subject: PATCH: spelling corrections in docs
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This fixes everything which ispell picked up in the docs.

Oliver

--- Doc/Zsh/builtins.yo~	Wed May 10 20:34:10 2000
+++ Doc/Zsh/builtins.yo	Wed May 10 22:39:58 2000
@@ -104,7 +104,7 @@
 respectively. If neither is given, the current setting of the
 tt(KSH_AUTOLOAD) options determines how the function is loaded. With
 ksh-style autoloading, the contents of the file will not be executed
-immediatly. Instead, the function created will contain the contents of 
+immediately. Instead, the function created will contain the contents of 
 the file plus a call to the function itself appended to it, thus given 
 normal ksh autoloading behaviour on the first call to the function.
 
--- Doc/Zsh/compsys.yo~	Wed May 10 20:34:12 2000
+++ Doc/Zsh/compsys.yo	Wed May 10 22:45:40 2000
@@ -713,7 +713,7 @@
 )
 kindex(types, completion tag)
 item(tt(types))(
-for types of whatever (e.g. adress types for the tt(xhost) command)
+for types of whatever (e.g. address types for the tt(xhost) command)
 )
 kindex(urls, completion tag)
 item(tt(urls))(
@@ -2596,13 +2596,13 @@
 labels are to be used, a non-zero status is returned.
 
 The tt(-12JV) options and the first three arguments are given to the
-tt(_desciption) function using the tag label instead of the first
+tt(_description) function using the tag label instead of the first
 argument as appropriate. The var(options) given after the var(descr)
 should be other options to be used for tt(compadd) or whatever
 function is to be called to add the matches. tt(_next_label) will store these 
 var(options) in the parameter whose var(name) is given as the second
 argument. This is done in such a way that the description given by the 
-user to the tt(tag-order) style is prefered over the one given to
+user to the tt(tag-order) style is preferred over the one given to
 tt(_next_label).
 
 Note that this function must not be called without a previous call to
@@ -2675,7 +2675,7 @@
 tt(_description) function with these arguments, including the options.
 
 If the var(command) is given, the tt(_all_labels) function will be called
-immediatly with the same arguments.
+immediately with the same arguments.
 
 This is often useful to do both the testing of the tag,
 getting the description for the matches and adding the matches at
@@ -3292,7 +3292,7 @@
 `tt((two))' at the beginning says that if the value `tt(one)' is on
 the line, the value `tt(two)' will not be  considered to be a possible
 completion anymore. Finally, the last value (`tt(two)') is described
-as `tt(another number)' and gets an optional argument decribed as
+as `tt(another number)' and gets an optional argument described as
 `tt(second count)' which will be completed from the strings `tt(1)',
 `tt(2)', and `tt(3)'. The tt(_values) function will complete lists of
 these values separated by commas.
@@ -3332,7 +3332,7 @@
 expressions with actions.  The generated function has the structure of a
 finite-state machine whose states corresponds to the state (i.e. the
 context) of the completion. This state machine uses a command line,
-which comes from concatentating the tt(words) array up to the current
+which comes from concatenating the tt(words) array up to the current
 cursor position using null characters as separators with no extra
 quotation.  This is analysed and at the end the appropriate action is
 executed.
--- Doc/Zsh/compwid.yo~	Wed May 10 22:51:53 2000
+++ Doc/Zsh/compwid.yo	Wed May 10 22:51:55 2000
@@ -282,7 +282,7 @@
 will be started for the matches currently generated (in the
 latter case this will happen because the tt(AUTO_MENU) is set). The
 value may also contain the string `tt(tab)' when the completion code
-woul normally not really do completion, but only insert the TAB
+would normally not really do completion, but only insert the TAB
 character.
 
 On exit it may be set to any of the values above (where setting it to
--- Doc/Zsh/expn.yo~	Wed May 10 22:59:34 2000
+++ Doc/Zsh/expn.yo	Wed May 10 23:00:18 2000
@@ -102,7 +102,7 @@
 line, or to the previous command if there is no preceding reference.
 
 The character sequence `tt(^)var(foo)tt(^)var(bar)' (where `tt(^)' is
-actually the second charcter of the tt(histchars) parameter)
+actually the second character of the tt(histchars) parameter)
 repeats the last command, replacing the string var(foo) with var(bar).
 More precisely, the sequence `tt(^)var(foo)tt(^)var(bar)tt(^)' is
 synonymous with `tt(!!:s)tt(^)var(foo)tt(^)var(bar)tt(^)', hence other
--- Doc/Zsh/grammar.yo~	Wed May 10 23:02:01 2000
+++ Doc/Zsh/grammar.yo	Wed May 10 23:02:11 2000
@@ -71,7 +71,7 @@
 
 example(dmesg | grep panic && print yes)
 
-is a sublist consisting of two piplines, the second just a simple command
+is a sublist consisting of two pipelines, the second just a simple command
 which will be executed if and only if the tt(grep) command returns a zero
 value.  If it does not, the value of the sublist is that return value, else
 it is the value returned by the tt(print) (almost certainly zero).
--- Doc/Zsh/mod_complist.yo~	Wed May 10 23:06:46 2000
+++ Doc/Zsh/mod_complist.yo	Wed May 10 23:07:23 2000
@@ -212,7 +212,7 @@
 
 If there are more matches than fit on the screen and the parameter
 tt(MENUPROMPT) is set, its value will be shown below the matches. It
-supports the sames escape sequences as tt(LISTPROMPT), but the number
+supports the same escape sequences as tt(LISTPROMPT), but the number
 of the match or line shown will be that of the one where the mark is
 placed. If its value is the empty string, a default prompt will be
 used.
@@ -316,7 +316,7 @@
 item(tt(expand-or-complete-prefix), tt(menu-expand-or-complete))(
 moves the mark to the next match
 )
-item(tt(reverse-menu-omplete))(
+item(tt(reverse-menu-complete))(
 moves the mark to the previous match
 )
 enditem()
--- Doc/Zsh/mod_computil.yo~	Mon Dec 20 11:24:39 1999
+++ Doc/Zsh/mod_computil.yo	Wed May 10 23:08:39 2000
@@ -19,7 +19,7 @@
 themselves. Instead of interpreting the first character of the
 tt(all_quotes) key of the tt(compstate) special association and using
 the tt(q) flag for parameter expansions, one can use this builtin
-command. The arguements are the names of scalar or array parameters
+command. The arguments are the names of scalar or array parameters
 and the values of these parameters are quoted as needed for the
 innermost quoting level.
 
@@ -30,7 +30,7 @@
 the matches and to get the strings to add as matches with their
 options. The first call has to give the tt(-i) or tt(-I) option as the 
 first argument. In the first case, display strings without the
-descriptions will be generated, inthe second case, the string used to
+descriptions will be generated, in the second case, the string used to
 separate the matches from their descriptions has to be given as the
 second argument and the descriptions (if any) will be shown. All other 
 arguments are like the definition arguments to tt(_describe) itself.
--- Doc/Zsh/mod_deltochar.yo~	Mon Dec 20 11:24:39 1999
+++ Doc/Zsh/mod_deltochar.yo	Wed May 10 23:09:04 2000
@@ -13,7 +13,7 @@
 )
 tindex(zap-to-char)
 item(tt(zap-to-char))(
-This behaves like tt(delete-to-char), except that the final occurence of
+This behaves like tt(delete-to-char), except that the final occurrence of
 the character itself is not deleted.
 )
 enditem()
--- Doc/Zsh/mod_mathfunc.yo~	Wed May 10 23:11:03 2000
+++ Doc/Zsh/mod_mathfunc.yo	Wed May 10 23:11:17 2000
@@ -34,7 +34,7 @@
 is the C variable of the same name, as described in manref(gamma)(3).  Note
 that it is therefore only useful immediately after a call to tt(gamma) or
 tt(lgamma).  Note also that `tt(signgam())' and `tt(signgam)' are distinct
-expresssions.
+expressions.
 
 The following functions take two floating point arguments: tt(copysign),
 tt(fmod), tt(hypot), tt(nextafter).
--- Doc/Zsh/mod_parameter.yo~	Wed May 10 23:11:57 2000
+++ Doc/Zsh/mod_parameter.yo	Wed May 10 23:12:35 2000
@@ -127,7 +127,7 @@
 strings of the form
 `var(job-state):var(pid)tt(=)var(state)tt(...)'. The var(job-state)
 gives the state the whole job is currently in, one of `tt(running)',
-`tt(suspended)', or `tt(done)'. This is follwed by one
+`tt(suspended)', or `tt(done)'. This is followed by one
 `var(pid)tt(=)var(state)' for every process in the job. The var(pid)s
 are, of course, the process IDs and the var(state) describes the state 
 of that process.
--- Doc/Zsh/mod_zle.yo~	Wed Apr 12 16:05:34 2000
+++ Doc/Zsh/mod_zle.yo	Wed May 10 23:15:56 2000
@@ -170,7 +170,7 @@
 the following string gives the prompt to display at the right.  If the
 tt(-h) flag is specified, the history can be accessed from ZLE. If the 
 tt(-e) flag is given, typing tt(^D) (Control-D) on an empty line
-causes tt(vared) to exit immediatly with a non-zero return value.
+causes tt(vared) to exit immediately with a non-zero return value.
 )
 findex(zle)
 cindex(widgets, rebinding)
@@ -254,8 +254,8 @@
 cleared.
 
 Note that this option is only useful for widgets that do not exit
-immediatly after using it because the strings displayed will be erased 
-immediatly after return from the widget.
+immediately after using it because the strings displayed will be erased 
+immediately after return from the widget.
 )
 item(tt(-M) var(string))(
 As with the tt(-R) option, the var(string) will be displayed below the 
--- Doc/Zsh/mod_zutil.yo~	Sat Apr  1 21:43:44 2000
+++ Doc/Zsh/mod_zutil.yo	Wed May 10 23:17:18 2000
@@ -88,7 +88,7 @@
 string will be modified by replacing sequences starting with a percent 
 sign in it with strings from the var(specs). Each var(spec) has to be
 of the form `var(char)tt(:)var(string)' and this will make every
-appearence of the sequence `tt(%)var(char)' in var(format) be replaced 
+appearance of the sequence `tt(%)var(char)' in var(format) be replaced 
 with the var(string). The `tt(%)' sequence may also contain optional
 minimum and maximum field width specifications between the `tt(%)' and 
 the `var(char)' in the form `tt(%)var(min)tt(.)var(max)tt(c)',
--- Doc/Zsh/options.yo~	Wed May 10 20:34:12 2000
+++ Doc/Zsh/options.yo	Wed May 10 23:19:32 2000
@@ -218,7 +218,7 @@
 cindex(cd, with .. in argument)
 item(tt(CHASE_DOTS))(
 When changing to a directory containing a path segment `tt(..)' which would
-otherwise be treated as cancelling the previous segment in the path (in
+otherwise be treated as canceling the previous segment in the path (in
 other words, `tt(foo/..)' would be removed from the path, or if `tt(..)' is
 the first part of the path, the last part of tt($PWD) would be deleted),
 instead resolve the path to the physical directory.  This option is
--- Doc/Zsh/params.yo~	Thu Apr 13 15:22:47 2000
+++ Doc/Zsh/params.yo	Wed May 10 23:21:17 2000
@@ -146,7 +146,7 @@
 whose key matches the var(exp).
 )
 item(tt(K))(
-On an associtation this is like `tt(k)' but returns all values whose
+On an association this is like `tt(k)' but returns all values whose
 keys match the var(exp). On other types of parameters this has the
 same effect as `tt(R)'.
 )
@@ -216,7 +216,7 @@
 Special parameters may also be made local; they retain their special
 attributes unless either the existing or the newly-created parameter
 has the tt(-h) (hide) attribute.  This may have unexpected effects:
-there is no default value, so if there is no assigment at the
+there is no default value, so if there is no assignment at the
 point the variable is made local, it will be set to an empty value (or zero
 in the case of integers).  
 The following:
@@ -342,7 +342,7 @@
 file, or shell function being executed, whichever was started most
 recently.  Note that in the case of shell functions the line
 number refers to the function as it appeared in the original definition,
-not necesarily as displayed by the tt(functions) builtin.
+not necessarily as displayed by the tt(functions) builtin.
 )
 vindex(LOGNAME)
 item(tt(LOGNAME))(
--- Doc/Zsh/zftpsys.yo~	Wed May 10 23:24:27 2000
+++ Doc/Zsh/zftpsys.yo	Wed May 10 23:24:39 2000
@@ -358,7 +358,7 @@
 Transfer files between two sessions; no local copy is made.  The file
 is read from the session var(sess1) as var(file1) and written to session
 var(sess1) as file var(file2); var(file1) and var(file2) may be relative to
-the current directories of the sesssion.  Either var(sess1) or var(sess2)
+the current directories of the session.  Either var(sess1) or var(sess2)
 may be omitted (though the colon should be retained if there is a
 possibility of a colon appearing in the file name) and defaults to the
 current session; var(file2) may be omitted or may end with a slash, in

