From zsh-users-return-15159-mason-zsh=primenet.com.au@zsh.org Sat Jul 10 15:55:27 2010
Return-Path: <zsh-users-return-15159-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 25189 invoked by alias); 10 Jul 2010 15:55:27 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15159
Received: (qmail 17914 invoked from network); 10 Jul 2010 15:55:26 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at benizi.com designates 64.130.10.15 as permitted sender)
Date: Sat, 10 Jul 2010 11:54:59 -0400 (EDT)
From: "Benjamin R. Haskell" <zsh@benizi.com>
To: Frank Terbeck <ft@bewatermyfriend.org>
cc: Zsh Users <zsh-users@zsh.org>
Subject: Re: Assign to parameter in parameter -- opposite of ${(P)name}?
In-Reply-To: <874og7tk7x.fsf@ft.bewatermyfriend.org>
Message-ID: <alpine.LNX.2.01.1007101153270.4808@hp.internal>
References: <alpine.LNX.2.01.1007091908420.4808@hp.internal> <87fwzst9ys.fsf@ft.bewatermyfriend.org> <alpine.LNX.2.01.1007101133060.4808@hp.internal> <874og7tk7x.fsf@ft.bewatermyfriend.org>
User-Agent: Alpine 2.01 (LNX 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

On Sat, 10 Jul 2010, Frank Terbeck wrote:

> Benjamin R. Haskell wrote:
> > On Sat, 10 Jul 2010, Frank Terbeck wrote:
> >> Benjamin R. Haskell wrote:
> >> > It's the end of the week, and I'm tired, so I'm sure I'm 
> >> > completely overlooking something obvious, but how do you *assign* 
> >> > to a parameter whose name is in a parameter?
> >> [...]
> >> > Do I need to resort to 'eval'?
> >> 
> >> % typeset foobar=baz
> >> % print ${foobar}
> >> baz
> >> 
> >
> > I was tired... but not thaaat tired... :-)
> >
> > Using different variable names, I was looking for:
> >
> > name=xyzzy
> > value=asdf
> >
> > # <-- something that doesn't involve the string xyzzy
> >
> > echo $xyzzy # echoes 'asdf'
> 
> Yes. But the "foobar=baz" part is just a parameter to a builtin
> command. Hence you can do this:
> 
> % name=foobar
> % typeset ${name}=baz
> % print $foobar
> baz
> 
> I thought that was what you were after. If not, I must have
> misunderstood the problem entirely. :)

Ah, gotcha.  I hadn't seen Julius's reply yet, and didn't take the 
logical step on my own.

-- 
Thanks,
Ben

