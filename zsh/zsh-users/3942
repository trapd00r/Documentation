From zsh-users-return-3942-mason-zsh=primenet.com.au@sunsite.dk Mon Jun 25 20:13:30 2001
Return-Path: <zsh-users-return-3942-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27562 invoked from network); 25 Jun 2001 20:13:29 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 25 Jun 2001 20:13:29 -0000
Received: (qmail 8857 invoked by alias); 25 Jun 2001 20:12:34 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 3942
Received: (qmail 8837 invoked from network); 25 Jun 2001 20:12:33 -0000
To: zsh-users@sunsite.auc.dk
Subject: Z-Shell (zsh) FAQ changes this month
Date: Mon, 25 Jun 2001 22:14:38 +0100
From: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Message-Id: <20010625211443.DD15614287@pwstephenson.fsnet.co.uk>

[This has been doctored for 4.0.2, which should appear in the next couple
of days.  I am too lazy to back port it to 4.0.1 --- pws]

This file contains general information on how to find out about zsh,
(the first part of the FAQ up to item 1.1), then any other items which
have changed since last month's posting, then the differences in the
yodl version of the FAQ.  If you would like a complete individual
copy, email me and I will add you to the list.


Archive-Name: unix-faq/shell/zsh
Last-Modified: 2001/06/25
Submitted-By: pws@pwstephenson.fsnet.co.uk (Peter Stephenson)
Posting-Frequency: Monthly
Copyright: (C) P.W. Stephenson, 1995--2001 (see end of document)

Changes since last issue posted:

  1.6  4.0.2 nearly released.
  3.1  typeset splitting incompatibility and KSH_TYPESET option

This document contains a list of frequently-asked (or otherwise
significant) questions concerning the Z-shell, a command interpreter
for many UNIX systems which is freely available to anyone with FTP
access.  Zsh is among the most powerful freely available Bourne-like
shell for interactive use.

If you have never heard of `sh', `csh' or `ksh', then you are
probably better off to start by reading a general introduction to UNIX
rather than this document.

If you just want to know how to get your hands on the latest version,
skip to question 1.6; if you want to know what to do with
insoluble problems, go to 5.2.

Notation: Quotes `like this' are ordinary textual quotation
marks.  Other uses of quotation marks are input to the shell.

Contents:
Chapter 1:  Introducing zsh and how to install it
1.1. Sources of information
1.2. What is it?
1.3. What is it good at?
1.4. On what machines will it run?  (Plus important compilation notes)
1.5. What's the latest version?
1.6. Where do I get it?
1.7. I don't have root access: how do I make zsh my login shell?

Chapter 2:  How does zsh differ from...?
2.1. sh and ksh?
2.2. csh?
2.3. Why do my csh aliases not work?  (Plus other alias pitfalls.)
2.4. tcsh?
2.5. bash?
2.6. Shouldn't zsh be more/less like ksh/(t)csh?

Chapter 3:  How to get various things to work
3.1. Why does `$var' where `var="foo bar"' not do what I expect?
3.2. In which startup file do I put...?
3.3. What is the difference between `export' and the ALL_EXPORT option?
3.4. How do I turn off spelling correction/globbing for a single command?
3.5. How do I get the meta key to work on my xterm?
3.6. How do I automatically display the directory in my xterm title bar?
3.7. How do I make the completion list use eight bit characters?
3.8. Why do the cursor (arrow) keys not work?
3.9. Why does my terminal act funny in some way?
3.10. Why does zsh not work in an Emacs shell mode any more?
3.11. Why do my autoloaded functions not autoload [the first time]?
3.12. How does base arithmetic work?
3.13. How do I get a newline in my prompt?
3.14. Why does `bindkey ^a command-name' or 'stty intr ^-' do something funny?
3.15. Why can't I bind \C-s and \C-q any more?
3.16. How do I execute command `foo' within function `foo'?
3.17. Why do history substitutions with single bangs do something funny?
3.18. Why does zsh kill off all my background jobs when I logout?
3.19. How do I list all my history entries?
3.20. How does the alternative loop syntax, e.g. `while {...} {...}' work?
3.21. Why is my history not being saved?
3.22. How do I get a variable's value to be evaluated as another variable?
3.23. How do I prevent the prompt overwriting output when there is no newline?
3.24. What's wrong with cut and paste on my xterm?
3.25. How do I get coloured prompts on my colour xterm?
3.26. Why is my output duplicated with `foo 2>&1 >foo.out | bar'?

Chapter 4:  The mysteries of completion
4.1. What is completion?
4.2. What sorts of things can be completed?
4.3. How does zsh deal with ambiguous completions?
4.4. How do I complete in the middle of words / just what's before the cursor?
4.5. How do I get started with programmable completion?
4.6. And if programmable completion isn't good enough?

Chapter 5:  The future of zsh
5.1. What bugs are currently known and unfixed? (Plus recent important changes)
5.2. Where do I report bugs, get more info / who's working on zsh?
5.3. What's on the wish-list?
5.4. Did zsh have problems in the year 2000?

Acknowledgments

Copyright
--- End of Contents ---

Chapter 1: Introducing zsh and how to install it

1.1: Sources of information

  Information on zsh is available via the World Wide Web.  The URL
  is http://sunsite.dk/zsh/ .
  The server provides this FAQ and much else and is
  now maintained by Karsten Thygesen and others (mail zsh@sunsite.dk
  with any related messages).  The FAQ is at http://sunsite.dk/zsh/FAQ/ .
  The site also contains some contributed zsh scripts and functions;
  we are delighted to add more, or simply links to your own collection.

  This document was originally written in YODL, allowing it to be converted
  easily into various other formats.  The master source file lives at
  http://sunsite.dk/zsh/FAQ/zshfaq.yo and the plain text version
  can be found at http://sunsite.dk/zsh/FAQ/zshfaq.txt .

  Another useful source of information is the collection of FAQ articles
  posted frequently to the Usenet news groups comp.unix.questions,
  comp.unix.shells and comp.answers with answers to general questions
  about UNIX.  The fifth of the seven articles deals with shells,
  including zsh, with a brief description of differences.  There is
  also a separate FAQ on shell differences and how to change your
  shell.  Usenet FAQs are available via FTP from rtfm.mit.edu and
  mirrors and also on the World Wide Web; see

    USA         http://www.cis.ohio-state.edu/hypertext/faq/usenet/top.html
    UK          http://www.lib.ox.ac.uk/internet/news/faq/comp.unix.shell.html
    Netherlands http://www.cs.uu.nl/wais/html/na-dir/unix-faq/shell/.html

  You can also get it via email by emailing mail-server@rtfm.mit.edu
  with, in the body of the message, `send faqs/unix-faq/shell/zsh'.

  The latest version of this FAQ is also available directly from any
  of the zsh archive sites listed in question 1.6.

  I have been putting together a user guide to complement the manual by
  explaining the most useful features of zsh in a more easy to read way.
  This will be a long project, but a partial version describing how to
  write startup files and how to use the new, more powerful, form for
  completion which first appeared in 3.1.6 (and is not described in this
  FAQ) can be seen by looking at
    http://www.pwstephenson.fsnet.co.uk/computing/
  where it exists in various formats.

  (As a method of reading the following in Emacs, you can type \M-2
  \C-x $ to make all the indented text vanish, then \M-0 \C-x $
  when you are on the title you want.)

  For any more eclectic information, you should contact the mailing
  list:  see question 5.2.

--- End of general information, changed items follow in full ---

Minor changes of phrasing, spelling, etc. are not included.


3.1: Why does `$var' where `var="foo bar"' not do what I expect?

  In most Bourne-shell derivatives, multiple-word variables such as

    var="foo bar"

  are split into words when passed to a command or used in a `for foo in
  $var' loop.  By default, zsh does not have that behaviour: the
  variable remains intact.  (This is not a bug!  See below.)  The option
  SH_WORD_SPLIT exists to provide compatibility.

  For example, defining the function args to show the number of its
  arguments:

    args() { echo $#; }

  and with our definition of `var',

    args $var

  produces the output `1'.  After

    setopt shwordsplit

  the same function produces the output `2', as with sh and ksh.

  Unless you need strict sh/ksh compatibility, you should ask yourself
  whether you really want this behaviour, as it can produce unexpected
  effects for variables with entirely innocuous embedded spaces.  This
  can cause horrendous quoting problems when invoking scripts from
  other shells.  The natural way to produce word-splitting behaviour
  in zsh is via arrays.  For example,

    set -A array one two three twenty

  (or

    array=(one two three twenty)

  if you prefer), followed by

    args $array

  produces the output `4', regardless of the setting of SH_WORD_SPLIT.
  Arrays are also much more versatile than single strings.  Probably
  if this mechanism had always been available there would never have
  been automatic word splitting in scalars, which is a sort of
  uncontrollable poor man's array.

  Note that this happens regardless of the value of the internal field
  separator, $IFS; in other words, with `IFS=:; foo=a:b; args $foo'
  you get the answer 1.

  Other ways of causing word splitting include a judicious use of
  `eval':

    sentence="Longtemps, je me suis couch\\'e de bonne heure."
    eval "words=($sentence)"

  after which $words is an array with the words of $sentence (note
  characters special to the shell, such as the `'' in this example,
  must already be quoted), or, less standard but more reliable,
  turning on SH_WORD_SPLIT for one variable only:

    args ${=sentence}

  always returns 8 with the above definition of `args'.  (In older
  versions of zsh, ${=foo} toggled SH_WORD_SPLIT; now it forces it on.)

  Note also the "$@" method of word splitting is always available in zsh
  functions and scripts (though strictly this does array splitting, not
  word splitting).  This is more portable than the $*, since it
  will work regardless of the SH_WORD_SPLIT setting; the other
  difference is that $* removes empty arguments from the array.
  You can fix the first half of that objection by using ${==*},
  which turns off SH_WORD_SPLIT for the duration of the expansion.

  SH_WORD_SPLIT is set when zsh is invoked with the names `ksh' or `sh',
  or (entirely equivalent) when `emulate ksh' or `emulate sh' is in
  effect.

  There is one other effect of word splitting which differs between ksh
  and zsh.  In ksh, the builtin commands that declare parameters such
  as typeset and export force word-splitting not to take place
  after on an assignment argument:

    typeset param=`echo foo bar`

  in ksh will create a parameter with value `foo bar', but in zsh will
  create a parameter param with value foo and a parameter bar
  whose value is empty.  Contrast this with a normal assignment (no
  typeset or other command in front), which never causes a word split
  unless you have GLOB_ASSIGN set.  From zsh version 4.0.2 the option
  KSH_TYPESET, set automatically in compatibility mode, fixes this
  problem.  Note that in bash this behaviour occurs with all arguments that
  look like assignments, whatever the command name; to get this behaviour
  in zsh you have to set the option MAGIC_EQUAL_SUBST.

--- End of changed items, diff from previous version follows ---
Index: zshfaq.yo
===================================================================
RCS file: /pack/anoncvs/zsh/www/FAQ/zshfaq.yo,v
retrieving revision 1.64
retrieving revision 1.65
diff -u -r1.64 -r1.65
--- zshfaq.yo	2001/05/24 21:11:12	1.64
+++ zshfaq.yo	2001/06/25 20:08:41	1.65
@@ -43,11 +43,11 @@
 whenman(report(ARG1)(ARG2)(ARG3))\
 whenms(report(ARG1)(ARG2)(ARG3))\
 whensgml(report(ARG1)(ARG2)(ARG3)))
-myreport(Z-Shell Frequently-Asked Questions)(Peter Stephenson)(2001/05/25)
+myreport(Z-Shell Frequently-Asked Questions)(Peter Stephenson)(2001/06/25)
 COMMENT(-- the following are for Usenet and must appear first)\
 description(\
 mydit(Archive-Name:) unix-faq/shell/zsh
-mydit(Last-Modified:) 2001/05/24
+mydit(Last-Modified:) 2001/06/25
 mydit(Submitted-By:) email(pws@pwstephenson.fsnet.co.uk (Peter Stephenson))
 mydit(Posting-Frequency:) Monthly
 mydit(Copyright:) (C) P.W. Stephenson, 1995--2001 (see end of document)
@@ -55,8 +55,8 @@
 
 bf(Changes since last issue posted:)
 description(
-  mydit()     Nothing substantive, but many minor tweaks in preparation for
-       the release of 4.0.1.
+  mydit(1.6)  4.0.2 nearly released.
+  mydit(3.1)  typeset splitting incompatibility and tt(KSH_TYPESET) option
 )
 
 This document contains a list of frequently-asked (or otherwise
@@ -299,7 +299,7 @@
 
 sect(What's the latest version?)
 
-  Zsh 4.0.1 is the latest production version.
+  Zsh 4.0.2 is the latest production version.
 
   Zsh 3.0.8 was the previous production version.  The major number 3.0
   largely reflected considerable internal changes in zsh to make it more
@@ -586,7 +586,7 @@
         subscripts start at 1, not 0; tt(array[0]) refers to tt(array[1]);
         mytt($array) refers to the whole array, not tt($array[0]);
         braces are unnecessary: tt($a[1] == ${a[1]}), etc.
-        The tt(KSH_ARRAYS) option is now available.
+        Set the tt(KSH_ARRAYS) option for compatibility.
     it()  Coprocesses are established by mytt(coproc); mytt(|&) behaves like
         csh.  Handling of coprocess file descriptors is also different.
     it()  In mytt(cmd1 && cmd2 &), only mytt(cmd2) instead of the whole
@@ -1036,6 +1036,22 @@
   or (entirely equivalent) when mytt(emulate ksh) or mytt(emulate sh) is in
   effect.
 
+  There is one other effect of word splitting which differs between ksh
+  and zsh.  In ksh, the builtin commands that declare parameters such
+  as tt(typeset) and tt(export) force word-splitting not to take place
+  after on an assignment argument:
+  verb(
+    typeset param=`echo foo bar`
+  )
+  in ksh will create a parameter with value mytt(foo bar), but in zsh will
+  create a parameter tt(param) with value tt(foo) and a parameter tt(bar)
+  whose value is empty.  Contrast this with a normal assignment (no
+  tt(typeset) or other command in front), which never causes a word split
+  unless you have tt(GLOB_ASSIGN) set.  From zsh version 4.0.2 the option
+  tt(KSH_TYPESET), set automatically in compatibility mode, fixes this
+  problem.  Note that in bash this behaviour occurs with all arguments that
+  look like assignments, whatever the command name; to get this behaviour
+  in zsh you have to set the option tt(MAGIC_EQUAL_SUBST).
 
 sect(In which startup file do I put...?)
 

