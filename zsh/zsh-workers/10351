From zsh-workers-return-10351-mason-zsh=primenet.com.au@sunsite.auc.dk Fri Mar 31 07:06:24 2000
Return-Path: <zsh-workers-return-10351-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 17595 invoked from network); 31 Mar 2000 07:06:19 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 31 Mar 2000 07:06:19 -0000
Received: (qmail 9484 invoked by alias); 31 Mar 2000 07:06:10 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 10351
Received: (qmail 9464 invoked from network); 31 Mar 2000 07:06:08 -0000
Date: Fri, 31 Mar 2000 09:06:04 +0200 (MET DST)
Message-Id: <200003310706.JAA07712@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: "Bart Schaefer"'s message of Thu, 30 Mar 2000 15:57:42 +0000
Subject: Re: PATCH: was: Re: endianness of wordcode


Bart Schaefer wrote:

> On Mar 30, 12:56pm, Sven Wischnowsky wrote:
> } Subject: Re: PATCH: was: Re: endianness of wordcode
> }
> } 
> } Bart Schaefer wrote:
> } 
> } > On Mar 29, 11:14am, Sven Wischnowsky wrote:
> } > } Subject: Re: PATCH: was: Re: endianness of wordcode
> } > }
> } > } So, this adds the -a option to zcompile which is needed to make
> } > } functions that are currently only marked for autoloading to be written 
> } > 
> } > This is still a bit odd, because it means you have to check yourself
> } > whether a function is defined or undefined before you know what result
> } > "zcompile -a -c ..." is going to produce.  I'd rather that you simply
> } > CAN'T compile both defined and undefined functions in the same pass.
> } 
> } Hm. Consider someone who has all his functions autoloaded (i.e. none
> } defined in .zshrc or other init files) and doesn't use kshautoload.
> } With the current state he can do `zcompile -ca all-funcs' to write them
> } all into one file. If we disallow compiling both already-loaded and
> } not-yet-loaded functions `in the same pass', it is impossible to do
> } that if at least one of the functions happens to be loaded already.
> 
> But that user will still get the wrong result if e.g. _cvs is one of the
> functions that happens to be loaded already.  Isn't it better to have to
> expend slightly more effort to get consistent and correct results than to
> easily be able produce an inconsistent and sometimes incorrect results?
> 
> Even something as simple as searching $fpath and printing a warning when
> a file with the same name as an already-loaded function is found, would
> be preferable to silently doing the wrong thing.  (That warning would be
> printed only when -a is given, of course.)

I'm starting to give in...

So, make `-a' the opposite of not-`-a', i.e. barf when there are
names of function not still makred for autoloading. Yes?

Or maybe make `-a' the opposite of `-c'? I.e. `-c' says that currently 
defined (not marked for autoloading) functions are to be written and
`-a' says functions marked for autoloading are to be written. We could 
then say `...to be written without signalling an error', so that `-ca' 
allows to mix both (I think I really want a way to do that, but it's
ok for me to make it as far from the default as possible). And then we 
can add a description of the _cvs problem in the manual, so that
people know why using this might be a problem.

Would that be acceptable for everyone?

Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

