From zsh-workers-return-5454-mason-zsh=primenet.com.au@sunsite.auc.dk Sun Feb 21 13:10:39 1999
Return-Path: <zsh-workers-return-5454-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 2474 invoked from network); 21 Feb 1999 13:10:36 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 21 Feb 1999 13:10:36 -0000
Received: (qmail 3272 invoked by alias); 21 Feb 1999 13:10:22 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 5454
Received: (qmail 3265 invoked from network); 21 Feb 1999 13:10:18 -0000
From: "Bart Schaefer" <schaefer@brasslantern.com>
Message-Id: <990221051007.ZM10208@candle.brasslantern.com>
Date: Sun, 21 Feb 1999 05:10:06 -0800
X-Mailer: Z-Mail (4.0b.820 20aug96)
To: zsh-workers@sunsite.auc.dk
Subject: Magic associative arrays
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

There are a whole lot of fun things we could do with special associative
array paramters.  Examples:

An AA named "functions" that looks up values in the shell function hash
table.  `functions foo` would be the same as `print $functions[foo]`.  The
"functions" AA could be read-only, but perhaps it would be fun to be able
to edit the function with `noglob vared functions[foo]`?

How about an special AA named "files"?  "$files[foo]" would be equivalent
to "$(<foo)".  One step further: `noglob vared files[foo]` replaces `zed`
almost entirely (except for the ZLE rebinding bits).  OK, maybe that one
is getting a little carried away ... but if the OS supports mmap() ...

Hmm; if only there were a way to cause a module to autoload upon reference
to a parameter that it defines ...

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

