From zsh-workers-request@math.gatech.edu  Mon Oct 16 18:27:44 1995
Received: from gatech.edu (gatech.edu [130.207.244.244]) by werple.net.au (8.7/8.7) with SMTP id SAA11895 for <mason@werple.mira.net.au>; Mon, 16 Oct 1995 18:27:16 +1000 (EST)
Received: from euclid (euclid.skiles.gatech.edu) by gatech.edu with SMTP id AA14930
  (5.65c/Gatech-10.0-IDA for <mason@werple.mira.net.au>); Mon, 16 Oct 1995 04:17:08 -0400
Received: by euclid (5.x/SMI-SVR4)
	id AA01664; Mon, 16 Oct 1995 04:15:16 -0400
Resent-Date: Mon, 16 Oct 1995 21:15:52 +1300
Old-Return-Path: <dave@Comp.VUW.AC.NZ>
From: Dave Sainty <David.Sainty@Comp.VUW.AC.NZ>
Message-Id: <199510160815.VAA04044@lido.comp.vuw.ac.nz>
To: zsh-workers@math.gatech.edu
Subject: A bug
Cc: dave@Comp.VUW.AC.NZ
X-Face: /B9VTI#fcP.}X/h<hkT@_Cck=Z!N+_9Hd?76Mdht"Ed~SDzX5[6aU&>^;-~C,RyvcjB8gD'
 s!52iF{}"OR9bmoP<zcZE)p<ywANjTYo2)m[aVsS\z:sHfNy/FVh=0CZp15]]UJwc=+=(Ht!gecYQ.
 cylM}.EUWSWIE8LL<Xk~:GyFzN^Q^$)o#Y:W3vD)z?sybSE.`UNk%!r{PonNeAe{NxEj+qEN8spzrD
 @OT/YETE{!~`n}oHb"%{mE4NHReDp0*#Hu8VKG9H49*tjHg6eU73c
X-Attribution: Dave
X-Uri: http://www.comp.vuw.ac.nz/~dave
Date: Mon, 16 Oct 1995 21:15:52 +1300
Resent-Message-Id: <"YFLE63.0.tP.JIXWm"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/458
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

I just spent some time trying to sort out an obscure bug. Repeatedly
for no reason, the shell would hang. Gdb revealed it was hanging in
the run-time report code, any program taking longer than 10 seconds
(REPORTTIME) were hanging....

The reason? Had me beat. :-)

Everything seemed to be behaving, and if I gdb'd it under emacs, the
problem didn't even turn up! However, this problem "just started
happening", and one of the things I have been doing recently is
modifying terminal description files. Termcap entries are by
definition restricted to 1024 bytes, and my terminal termcap entry had
crept over the limit. The old buffer overrun joke.

So whos fault was it? (apart from mine. :-)

Well, libtermcap really, but then libtermcap was probably just trying
to be helpful and give away all the information it had.

So why am I telling you this? Mainly as a warning that this is a
source of obscure bug behaviour. I'm not sure it deserves to go in
the FAQ, I doubt it turns up very often. And it isn't easy to fix,
except to move to curses/terminfo :-). A temporary large buffer copied
to a "correct" sized buffer would be more robust, but only until you
get a REALLY oversized termcap entry.

ps: There's a potential problem if the last character of TIMEFMT is a
'%', being that the null terminator gets printed, and the characters
_after_ the terminator get parsed. Of course, the next character is
nearly always a null anyway.

I know, I know.... I just happened to be looking at the code though. :-)

diff against beta10. Changes TIMEFMT semantics in a very uninteresting
way. '%%x' now prints '%' and parses '%x' instead of printing '%%' and
parsing 'x'. Probably '%%' should really print a single '%', which is
different again!

*** jobs.c.orig	Mon Oct 16 21:01:57 1995
--- jobs.c	Mon Oct 16 21:06:26 1995
***************
*** 732,738 ****
  		fprintf(stderr, "%s", desc);
  		break;
  	    default:
! 		fprintf(stderr, "%%%c", *s);
  		break;
  	} else
  	    putc(*s, stderr);
--- 732,739 ----
  		fprintf(stderr, "%s", desc);
  		break;
  	    default:
! 		putc('%', stderr);
! 		s--;
  		break;
  	} else
  	    putc(*s, stderr);

