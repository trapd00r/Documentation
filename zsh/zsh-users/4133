From zsh-users-return-4133-mason-zsh=primenet.com.au@sunsite.dk Fri Aug 17 16:56:21 2001
Return-Path: <zsh-users-return-4133-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1781 invoked from network); 17 Aug 2001 16:56:19 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 17 Aug 2001 16:56:19 -0000
Received: (qmail 17318 invoked by alias); 17 Aug 2001 16:56:05 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 4133
Received: (qmail 17306 invoked from network); 17 Aug 2001 16:56:03 -0000
From: Bart Schaefer <schaefer@brasslantern.com>
Message-Id: <1010817165550.ZM14226@candle.brasslantern.com>
Date: Fri, 17 Aug 2001 16:55:50 +0000
In-Reply-To: <20010815230024.3E7F614284@pwstephenson.fsnet.co.uk>
Comments: In reply to Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
        "Zsh Guide chapter 5 (substitutions)" (Aug 16, 12:00am)
References: <20010815230024.3E7F614284@pwstephenson.fsnet.co.uk>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>, zsh-users@sunsite.dk
Subject: Re: Zsh Guide chapter 5 (substitutions)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Aug 16, 12:00am, Peter Stephenson wrote:
}
} The main addition is chapter 5, which talks about all forms of shell
} substitutions and expansions.

Asoorted comments:

 The only thing you can't quote with single quotes is another single
 quote. However, there's an option RC_QUOTES, in which RC presumably
 stands for recursive,

Nope, RC stands for RC.  The Plan 9 shell (I think it is) is named "rc",
and nearly everything in zsh that has "rc" at the beginning of the name
(as opposed to at the end) means that the feature was copied from the
Plan 9 shell.  (At the end, as in ".zshrc", "runtime configuration" is
the meaning usually reported in Unix lore.)

   % args "${(f)$(<file)}"
   2

 I don't remember what the `f' stands for, but we were already using up
 flag codes quite fast when it came along.

I think it's for "fold", although it was added at a time when I was
paying less attention to zsh development.  At least that's a plausible
mnemonic.

 All the assignment types are affected by the globbing flags `A' and
 `AA' which tell the shell to perform array and associative array
 assignment ...

Should not say "globbing flags".

 Note you need the colon, else you are asking the shell to test whether
 a parameter is set, and it becomes rather unset when it realises there
 isn't one to test.                        ^^^^^

I should think.

 4. Now we have `${array[(r)???????]}'. It may not be obvious
    (congratulations if the rest is), but the question marks are still
    active as a pattern: the fill-in operation that put them there
    didn't turn them into strings, because that only happens at the
    point where a parameter is substituted, whereas these were added
    later. The subscript flag `(r)' means `reverse match',  ...

You're both right and wrong there.  It actually doesn't matter whether
the question marks are still active as a pattern or not.  Just go round
mumbling `extra layer of pattern expansion' and everyone will think you
know what you're talking about.

I have to stop now and go do this annoying "work" thing.  Back to part
5.6 later.

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

Zsh: http://www.zsh.org | PHPerl Project: http://phperl.sourceforge.net   

