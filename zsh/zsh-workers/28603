From zsh-workers-return-28603-mason-zsh=primenet.com.au@zsh.org Sun Jan 09 00:48:22 2011
Return-Path: <zsh-workers-return-28603-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28783 invoked by alias); 9 Jan 2011 00:48:22 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 28603
Received: (qmail 11167 invoked from network); 9 Jan 2011 00:48:20 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <110108164814.ZM2240@torch.brasslantern.com>
Date: Sat, 08 Jan 2011 16:48:14 -0800
In-reply-to: <20110108232140.2661ba00@pws-pc.ntlworld.com>
Comments: In reply to Peter Stephenson <p.w.stephenson@ntlworld.com>
 "Re: filename completion with umlauts (again)" (Jan  8, 11:21pm)
References: <20110106232712.GA11387@spiegl.de>
	<AANLkTik9unZtuPR-4CM2oKLRT9Soct-XFWmiEajQzbK9@mail.gmail.com>
	<20110107094419.141d8d67@pwslap01u.europe.root.pri>
	<20110107233459.GA29168@spiegl.de>	<110107231048.ZM919@torch.brasslantern.com>
	<20110108202122.5decaa0b@pws-pc.ntlworld.com>
	<110108142301.ZM2102@torch.brasslantern.com>
	<20110108232140.2661ba00@pws-pc.ntlworld.com>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-workers@zsh.org
Subject: Re: filename completion with umlauts (again)
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Jan 8, 11:21pm, Peter Stephenson wrote:
}
} > What is it that I continue to fail to see?
} 
} See any number of while loops over character arrays in compmatch.c; as
} one example, the loop at line 529 in match_str().  The various arrays
} are simply char *'s and they're not even metafied

Ah, so working my way up from the bottom I still haven't climbed far
enough out of the pit.  The stuff that performs comparisons is mostly
MB-ified, but the code that chooses what needs to be compared is not.

} If you *can* prove it's trivial, of course...

Never intended a pretense of *that* claim ... just trying to get on
record what it is that needs looking at.

If we climb even further out of the hole we've dug, then it appears
that for example match_str() is called on [a copy of] the comppprefix
global variable, which, along with the compsuffix et al., is happily
marched around with pointer arithmetic all over the completion code,
not just in compmatch.c.

Furthermore there are a bunch of globals declared in compmatch.c that
keep track of various edits (for lack of a better description) that
need to be applied to the command line to cause it to reflect various
possible outcomes of completion.  This includes stuff like "oh by the
way I changed all your ~ into x to hide them from tilde expansion, you
need to put them back again."

Would it even be sufficient to metafy around the match_str() entry
point, or is the real problem that the *entire* completion system
needs to stop treating the input line as a (char *)?

In which case we almost may as well start over from scratch.

