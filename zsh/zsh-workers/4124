From zsh-workers-request@math.gatech.edu Mon Jun 15 16:44:25 1998
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15228 invoked from network); 15 Jun 1998 16:44:24 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 15 Jun 1998 16:44:24 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.8.5/8.8.5) id MAA15149;
	Mon, 15 Jun 1998 12:39:36 -0400 (EDT)
Resent-Date: Mon, 15 Jun 1998 12:39:36 -0400 (EDT)
Message-Id: <9806151635.AA39550@ibmth.df.unipi.it>
To: zsh-workers@math.gatech.edu
Subject: Re: 'remove slash' bug 
In-Reply-To: ""Bart Schaefer""'s message of "Sun, 14 Jun 1998 14:16:38 DFT."
             <980614141639.ZM315@candle.brasslantern.com> 
Date: Mon, 15 Jun 1998 18:35:41 +0200
From: Peter Stephenson <pws@ibmth.df.unipi.it>
Resent-Message-ID: <"hjIuP.0.bi3.7vKXr"@math>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/4124
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

"Bart Schaefer" wrote:
> zsh% /usr/
> 
> Move the cursor to the 's'.  Press TAB.
> 
> 3.0.5	-->	/usr/
> 3.1.4	-->	/usr//

This seems to be trivial to fix, as appended (expect a couple of lines
of offset).  When it is, however, you get the other behaviour noted...

> I can't come up with any case that deletes anything other than slashes or
> spaces.  Here's how to get it to delete a space:
> 
> zsh% touch /tmp/foo
> zsh% ls /tm/foo
> 
> Move the cursor to the 'm' and press TAB.  In both 3.0.5 and 3.1.4, this
> produces "ls /tmp/foo " (note the trailing space).  In 3.1.4, typing any
> further key other than self-insert deletes the trailing space.  3.0.5
> leaves the space alone.

This seems to be standard behaviour in 3.1.4.  Just type `ls
/tmp/foo', hit tab, and you'll see the space is autoremovable anyway.
There is a quite deliberate test for this in the code at the moment,
so somebody (Zefram?) thought it was a good idea.  What should happen?

1 Present (3.1.4) behaviour
2 Space added, but left alone (not autoremovable)
  (i) if the cursor had to be moved to the end of the word
  (ii) even if the cursor was at the end of the word already
3 No space added if the cursor was previously not at the end of
the line, i.e. you would get /tmp/foo with the cursor immediately
after the foo.  In that case, another tab would add a space, although
with the /usr/ example you would get completion inside the directory
at that point (which you could with an autoremovable space, but less
intuitively).  In this case any space added could still be
  (i) autoremovable
  (ii) not

(Not adding any space ever is probably not sensible.)

All of these can readily be produced.  I presume 2(ii) was the
previous behaviour.

***************
*** 3441,3447 ****
  			fsuf, psuf);
  	    }
  	    /* And do the stat. */
! 	    if (!ztat(p, &buf, 0) && S_ISDIR(buf.st_mode)) {
  		/* It is a directory, so add the slash. */
  		havesuff = 1;
  		inststrlen("/", 1, 1);
--- 3442,3449 ----
  			fsuf, psuf);
  	    }
  	    /* And do the stat. */
! 	    if (p[strlen(p)-1] != '/' && !ztat(p, &buf, 0) &&
! 		S_ISDIR(buf.st_mode)) {
  		/* It is a directory, so add the slash. */
  		havesuff = 1;
  		inststrlen("/", 1, 1);

-- 
Peter Stephenson <pws@ibmth.df.unipi.it>       Tel: +39 50 844536
WWW:  http://www.ifh.de/~pws/
Gruppo Teorico, Dipartimento di Fisica
Piazza Torricelli 2, 56100 Pisa, Italy

