From zsh-workers-return-26745-mason-zsh=primenet.com.au@sunsite.dk Tue Mar 17 02:47:35 2009
Return-Path: <zsh-workers-return-26745-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 3858 invoked from network); 17 Mar 2009 02:47:19 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 17 Mar 2009 02:47:19 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 28599 invoked from network); 17 Mar 2009 02:45:05 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 17 Mar 2009 02:45:05 -0000
Received: (qmail 5276 invoked by alias); 17 Mar 2009 02:44:58 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 26745
Received: (qmail 5258 invoked from network); 17 Mar 2009 02:44:57 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 17 Mar 2009 02:44:57 -0000
Received: from vms173001pub.verizon.net (vms173001pub.verizon.net [206.46.173.1])
	by bifrost.dotsrc.org (Postfix) with ESMTP id D979980307F8
	for <zsh-workers@sunsite.dk>; Tue, 17 Mar 2009 03:44:51 +0100 (CET)
Received: from torch.brasslantern.com ([96.249.201.13])
 by vms173001.mailsrvcs.net
 (Sun Java(tm) System Messaging Server 6.3-7.04 (built Sep 26 2008; 32bit))
 with ESMTPA id <0KGM00AFXQABCR5F@vms173001.mailsrvcs.net> for
 zsh-workers@sunsite.dk; Mon, 16 Mar 2009 21:44:40 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id n2H2iYvw016489	for
 <zsh-workers@sunsite.dk>; Mon, 16 Mar 2009 19:44:35 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id n2H2iYrA016488	for zsh-workers@sunsite.dk; Mon,
 16 Mar 2009 19:44:34 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <090316194434.ZM16487@torch.brasslantern.com>
Date: Mon, 16 Mar 2009 19:44:34 -0700
In-reply-to: <20090316181852.27e9420d@news01>
Comments: In reply to Peter Stephenson <pws@csr.com>
 "Re: Bug#519535: history expansion: modifier completion missing" (Mar 16,
 6:18pm)
References: <20090313105555.GA19025@piper.oerlikon.madduck.net>
	<20090315062253.GB14010@scru.org>	<20090316181852.27e9420d@news01>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-workers@sunsite.dk
Subject: Re: Bug#519535: history expansion: modifier completion missing
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii
X-Virus-Scanned: ClamAV 0.92.1/9116/Mon Mar 16 20:50:33 2009 on bifrost
X-Virus-Status: Clean

[-bugs.debian.org]

On Mar 16,  6:18pm, Peter Stephenson wrote:
} 
} I thought this was going to be harder than it turned out to be; as you can
} see it's really quite simple, particularly since I already wrote modifer
} completion and it would appear had the foresight to make it handle the
} history case.

Nit-pick:  This doesn't handle the new :a/:A modifiers.

Other nit-pick about :a itself -- get a load of this:

torch% echo foo
torch% !!:a
/usr/local/src/zsh/zsh-build/echo foo
zsh: no such file or directory: /usr/local/src/zsh/zsh-build/echo

That's almost certainly not the intended behavior ... is it?  Replace :a
with :h or :t there and you get "modifier failed" (which seems odd as
well, but ...).

} It's in _normal which is where we handle normal command arguments.
} I think this is both the first and last place where get to massage
} command line arguments generically---we don't just want this in
} default completion since history expansion, if active, trumps
} everything else.

I started out agreeing with this, but now I'm not sure it makes any
difference.  History expansion trumps everything when it works, and
leaves the command line unchanged when it fails.  Notice:

schaefer<511> bindkey | grep expand
"^X*" expand-word
"^XG" list-expand
"^Xa" _expand_alias
"^Xe" _expand_word
"^Xg" list-expand
"^[ " expand-history
"^[!" expand-history
schaefer<512> !!<ESC!>
schaefer<512> bindkey | grep expand<C-u>
schaefer<512> !!:<ESC!>
schaefer<512> !!:

Same happens with <C-x*> or <C-xe> or even <C-xg> and <C-xG>.  If
history can expand, it does, if it can't, it doesn't.  If I try it
with <C-x?> (_complete_debug), I get an expansion with no backtrace
for !!, but a completion with backtrace for !!:.

So I think you can put this pretty much anywhere, as long as it's
somewhere that gets reached before the completion system gives up.
In fact in the unlikely event that one has a file named '!2:u2' one
might even want to be offered both history modifiers and \!2:u2 as
completions after "!2:".  However, this might be complicated by the
quoting business with $PREFIX ...

} It probably needs to go in _value for assignments; is right at the top
} the appropriate place?

Lost me here, sorry.

} The rum thing is the way $PREFIX acquires quoted !'s. I thought
} $PREFIX was fairly raw, so you could handle special characters?
} Obviously I'm misremembering, because I traced the quoting to some
} completely general code for all special characters.

_approximate certainly treats $PREFIX as though things like tildes
and glob qualifiers aren't quoted and don't need it, but ...

} Anyway, that has two effects: first you have to check $words, because
} that does have the raw form, and secondly you have to update $PREFIX
} so that you get the raw !'s inserted into the command line. (But
} you don't usually have to do that even if you're inserting special
} characters, do you? You just need to make sure compadd has the
} argument -Q, which it does here, except that's not good enough.
} Baaaaaaa.)

I don't know how the generic quoting code plays in, but I suspect this
is done this way *because* history expansion takes place so early.  If
it looks like a history expansion and it got this far, then it must be
a *failed* history expansion and needs to be quoted if it matches any
other completion -- otherwise the history expansion will fail *again*
after accept-line, and spoil the whole command.
 
} I think -z $compstate[quote] ensures we're not already doing something
} clever inside nested quotes, which would mean the expression couldn't be a
} history expansion.  I think.

History expansion occurs inside double quotes, though, so if the quote
state is double-quote then ... er, um ... perhaps it's necessary to
run compstate -q and examine $compstate[all_quotes] ...

