From zsh-workers-return-25412-mason-zsh=primenet.com.au@sunsite.dk Thu Aug 07 01:01:26 2008
Return-Path: <zsh-workers-return-25412-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28520 invoked from network); 7 Aug 2008 01:01:22 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 7 Aug 2008 01:01:22 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 33377 invoked from network); 7 Aug 2008 01:00:49 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 7 Aug 2008 01:00:49 -0000
Received: (qmail 7708 invoked by alias); 7 Aug 2008 01:00:33 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 25412
Received: (qmail 7686 invoked from network); 7 Aug 2008 01:00:29 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 7 Aug 2008 01:00:29 -0000
Received: from vms046pub.verizon.net (vms046pub.verizon.net [206.46.252.46])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 74FB58056E06
	for <zsh-workers@sunsite.dk>; Thu,  7 Aug 2008 03:00:24 +0200 (CEST)
Received: from torch.brasslantern.com ([96.238.214.225])
 by vms046.mailsrvcs.net
 (Sun Java System Messaging Server 6.2-6.01 (built Apr  3 2006))
 with ESMTPA id <0K57008OXHGC8DW1@vms046.mailsrvcs.net> for
 zsh-workers@sunsite.dk; Wed, 06 Aug 2008 20:00:13 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id m7710Bpr015416	for
 <zsh-workers@sunsite.dk>; Wed, 06 Aug 2008 18:00:12 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id m7710A0m015415	for zsh-workers@sunsite.dk; Wed,
 06 Aug 2008 18:00:10 -0700
Date: Wed, 06 Aug 2008 18:00:10 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: PATCH: skip command from debug trap
In-reply-to: <6cd6de210808060730q3ebdc5cdt71b381f861ff0fa1@mail.gmail.com>
In-reply-to: <20080806145917.GE5197@sc.homeunix.net>
In-reply-to: <20080806163410.0ce3cacd@news01>
In-reply-to: <200808061754.m76HsOQv002657@news01.csr.com>
In-reply-to: <6cd6de210808061209g30b82612r148e576dbe1941bd@mail.gmail.com>
In-reply-to: <200808061949.m76Jn10k020995@pws-pc.ntlworld.com>
To: Zsh hackers list <zsh-workers@sunsite.dk>
Message-id: <080806180010.ZM15414@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <27237.1217946438@csr.com>
	<6cd6de210808051647k17f14902nce840ca3edd6ddb@mail.gmail.com>
	<20080806104716.44647a75@news01>	<080806072236.ZM14655@torch.brasslantern.com>
	<6cd6de210808060730q3ebdc5cdt71b381f861ff0fa1@mail.gmail.com>
	<20080806145917.GE5197@sc.homeunix.net>	<20080806163410.0ce3cacd@news01>
	<6cd6de210808061000l5c6e0a8fheb06db75560a1598@mail.gmail.com>
	<200808061754.m76HsOQv002657@news01.csr.com>
	<6cd6de210808061209g30b82612r148e576dbe1941bd@mail.gmail.com>
	<200808061949.m76Jn10k020995@pws-pc.ntlworld.com>
Comments: In reply to "Rocky Bernstein" <rocky.bernstein@gmail.com>
 "Re: PATCH: skip command from debug trap" (Aug  6, 10:30am)
Comments: In reply to Stephane Chazelas <Stephane_Chazelas@yahoo.fr>
 "Re: PATCH: skip command from debug trap" (Aug  6,  3:59pm)
Comments: In reply to Peter Stephenson <pws@csr.com>
 "Re: PATCH: skip command from debug trap" (Aug  6,  4:34pm)
Comments: In reply to Peter Stephenson <pws@csr.com>
 "Re: PATCH: skip command from debug trap" (Aug  6,  6:54pm)
Comments: In reply to "Rocky Bernstein" <rocky.bernstein@gmail.com>
 "Re: PATCH: skip command from debug trap" (Aug  6,  3:09pm)
Comments: In reply to Peter Stephenson <p.w.stephenson@ntlworld.com>
 "Re: PATCH: skip command from debug trap" (Aug  6,  8:49pm)
X-Virus-Scanned: ClamAV 0.92.1/7963/Thu Aug  7 02:16:40 2008 on bifrost
X-Virus-Status: Clean

Wow, longest thread in quite a while.

I'll preface this with a "gotcha" that I just noticed.  If you execute
these commands:

	TRAPDEBUG() { return 1 }
	setopt DEBUG_BEFORE_CMD IGNORE_EOF

You've just rendered your shell useless.  You can't even exit from it
(except by way of the ten-EOFs failsafe we put in some while ago).

On Aug 6, 10:30am, Rocky Bernstein wrote:
}
} >        x=3
} >        return --x
} >
} > returns "2".  How are you going to make any kind of option parsing for
} > return behave compatibly with that?
} 
} How about "return $((x))", or "return $((-x))"?

On Aug 6,  3:59pm, Stephane Chazelas wrote:
}
} See for instance kill(1). To kill a process group, you have to
} do:
} 
} kill -- -<pid>
} 
} So you'd have to do
} 
} return -- -3

You're both answering the inverse of the question I asked.  I *didn't*
ask "How do you make returning a math expression compatible with return
taking an option?"  The issue, as PWS understands, is that "return" is
already accepting math expressions, so introducing option parsing would
break that (unless done with some caveats).

} -- is not a valid math expression, so changing return -- so that
} it is the same as "return" instead of giving an error message
} shouldn't be a problem.

True, but not helpful all by itself.

On Aug 6,  4:34pm, Peter Stephenson wrote:
}
} Grrrr. All the control commands do that, and all for the sake of
} making the command line less clear by omitting the $((...)).

That's not really why, of course ... if you go back far enough, IIRC
you'll come to a version of the shell that has "return --x" but that
does not have $((...)).  Be that as it may ...

} However, return has never taken more than one argument up to now,
} so there's nothing to stop us only evaluating the final argument
} mathematically and require "return -s 0" to skip a statement and
} behave as if it returned 0.

I can live with that, if Rocky can live with the fact that to get the
debug trap to return the current value of $? and also skip the next
statement, one must do "return -s $?" or "return -s --".   Counting
arguments prevents any equivalence of "return" with no arguments and
"return" with only the skip option.

However, I have an alternate proposal (more on that below).

} We have a choice of rule: (i) with more than one argument, option and
} argument parsing becomes like other commands (so you need a -- if
} there's possibly a negative expression at the end but otherwise if it
} doesn't look like an option you still get math processing) (ii) with
} more than one argument, the last argument is always a value. I think
} (i) is probably slightly clearer.

Currently more than one argument is an error, so there shouldn't be any
way for an existing zsh script to run afoul of choice (i).

On Aug 6,  6:54pm, Peter Stephenson wrote:
}
} "Rocky Bernstein" wrote:
} > A couple other approaches are setting a variable or calling a routine.
} >  For example  "trap_return --skip"  or TRAP_RETURN="skip"
} 
} I don't like adding a new builtin just for this.
} 
} The variable version is doable, we've done similar things before.  You'd
} have to note that it didn't force return from the current environment,
} either the inline trap or TRAPDEBUG.  You'd also have to be prepared for
} the shell to manipulate the variable behind your back, else you'd run
} into problems with having it set on future traps.  It's not disastrous,
} but I'm not convinced this is simpler.  In fact, at the moment it seems
} to me manifestly much more complicated.

Here's another possibility.  Presently it's fairly useless to combine
"setopt ERR_EXIT" (set -x) with TRAPDEBUG, because any nonzero return
from the trap will cause the entire shell to exit, rather than just the
surrounding function.

I propose that ERR_EXIT be unset on entry to TRAPDEBUG, always.  Then at
return from the function, if ERR_EXIT has become set, treat that as an
indication to skip the command (and restore ERR_EXIT to whatever its
pre-function state was).  If you setopt ERR_EXIT and return non-zero
you still get what you always would (anyway, if you really wanted the
shell to exit, you can just call "exit" from the trap).  I can imagine
someone having done something arcane where they expect a failure of a
command inside a debug trap to kill their shell only when ERR_EXIT has
already been set globally, but it seems unlikely.

On Aug 6,  3:09pm, Rocky Bernstein wrote:
}
} But given the choice of adding
}    1) an option in the return statement everywhere that is specific to
} just "trap DEBUG" or
}    2) specifying what specific numbers do when on a return from "trap DEBUG",
} 
} isn't 2) simpler and more consistent with programming in shell
} languages work?

In other contexts return values above 128 are treated as indicative of
a caught signal.  If there were an imaginary signal that trips the DEBUG
trap, we could make return of $((128+SIGDEBUG)) mean something special.
But an out-of-band mechanism seems better.

I don't really have anything to say to PWS's most recent message on this.

