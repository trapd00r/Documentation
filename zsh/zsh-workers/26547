From zsh-workers-return-26547-mason-zsh=primenet.com.au@sunsite.dk Tue Feb 10 23:47:53 2009
Return-Path: <zsh-workers-return-26547-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1727 invoked from network); 10 Feb 2009 23:47:48 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 10 Feb 2009 23:47:48 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 48768 invoked from network); 10 Feb 2009 23:47:42 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 10 Feb 2009 23:47:42 -0000
Received: (qmail 14603 invoked by alias); 10 Feb 2009 23:47:37 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 26547
Received: (qmail 14585 invoked from network); 10 Feb 2009 23:47:36 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 10 Feb 2009 23:47:36 -0000
Received: from mail-fx0-f31.google.com (mail-fx0-f31.google.com [209.85.220.31])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 55D6380271F0
	for <zsh-workers@sunsite.dk>; Wed, 11 Feb 2009 00:47:17 +0100 (CET)
Received: by fxm12 with SMTP id 12so49817fxm.21
        for <zsh-workers@sunsite.dk>; Tue, 10 Feb 2009 15:47:16 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type;
        bh=9Fmenzdn6hP3e0JUapvT+ppeZRRN5WKiGc9Kf8rELrU=;
        b=WAA4ZqItkr2iOOArrlbp3HkMf3ruCzRZ56hlV78jlna3DbHg3jPR3CTU1p9c+RaoO/
         AzPRdlttbadjU5i2MBQ/p7qscZYanAwzyh241oyJ0P77f6aPo5kkS1bFyixL1eO6gJY5
         9r5vCDHIbbXolhoezGh1jnOq8a8ADRnuOmI4w=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        b=xQQAeIGjILQIRXk73D0TC1fDicszuuqEbZK0OYlkJD+Vkm/dI1psAGBF3ZkY9yCpXP
         jHFG7wI11lvYy2QW4K36vW3pDXS3C6VS/WZ6dJeH4jSOys1P2SDkDC2GTHQOVBmzZGAH
         Qg1dKuWEIXwks5BXG5PVAyEqYQ3yGwvsGnntA=
MIME-Version: 1.0
Received: by 10.86.3.4 with SMTP id 4mr195796fgc.41.1234309636832; Tue, 10 Feb 
	2009 15:47:16 -0800 (PST)
In-Reply-To: <2d460de70902080945h45ea9046p2988186d34c54979@mail.gmail.com>
References: <20090207214557.GA9174@linux.vnet>
	 <2d460de70902080734h3b8c6982sb4a070b5a42c3de9@mail.gmail.com>
	 <2d460de70902080945h45ea9046p2988186d34c54979@mail.gmail.com>
Date: Wed, 11 Feb 2009 00:47:16 +0100
Message-ID: <2d460de70902101547o3953c0d7y189e3630d6cc097@mail.gmail.com>
Subject: Re: [PATCH] Add a pindex for each of the shell options without 
	underscores.
From: Richard Hartmann <richih.mailinglist@gmail.com>
To: zsh-workers@sunsite.dk
Content-Type: multipart/mixed; boundary=000e0cd24804723f510462991b64
X-Virus-Scanned: ClamAV 0.92.1/8977/Tue Feb 10 20:33:54 2009 on bifrost
X-Virus-Status: Clean

--000e0cd24804723f510462991b64
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

On Sun, Feb 8, 2009 at 18:45, Richard Hartmann
<richih.mailinglist@gmail.com> wrote:

> While I am in there..

The Perl is weak in this one..

Please note the

-pindex(NO_INTERACTIVE, use of)

I think it's correct to remove this one again (I introduced it by accident).


Richard

>From af9c8e205176cae09a88afb724db70bf0d4d47d8 Mon Sep 17 00:00:00 2001
From: Richard Hartmann <richih@net.in.tum.de>
Date: Wed, 11 Feb 2009 00:39:57 +0100
Subject: [PATCH] Add some missing option index entries

My Perl script failed to check the condition correctly. Thus, all
options without underscore had NO_OPTION, but not NOOPTION.
---
 Doc/Zsh/options.yo |   30 +++++++++++++++++++++++++++++-
 1 files changed, 29 insertions(+), 1 deletions(-)

diff --git a/Doc/Zsh/options.yo b/Doc/Zsh/options.yo
index 3698826..2cd02bf 100644
--- a/Doc/Zsh/options.yo
+++ b/Doc/Zsh/options.yo
@@ -444,6 +444,7 @@ Overrides tt(NOMATCH).
 )
 pindex(EQUALS)
 pindex(NO_EQUALS)
+pindex(NOEQUALS)
 cindex(filename expansion, =)
 item(tt(EQUALS) <Z>)(
 Perform tt(=) filename expansion.
@@ -461,6 +462,7 @@ always produces named directory expansion.)
 )
 pindex(GLOB)
 pindex(NO_GLOB)
+pindex(NOGLOB)
 cindex(globbing, enabling)
 cindex(enabling globbing)
 item(tt(GLOB) (tt(PLUS()F), ksh: tt(PLUS()f)) <D>)(
@@ -563,6 +565,7 @@ names resulting from filename generation (globbing).
 )
 pindex(MULTIBYTE)
 pindex(NO_MULTIBYTE)
+pindex(NOMULTIBYTE)
 cindex(characters, multibyte, in expansion and globbing)
 cindex(multibyte characters, in expansion and globbing)
 item(tt(MULTIBYTE) <C> <K> <Z>)(
@@ -592,6 +595,7 @@ shell settings.
 )
 pindex(NOMATCH)
 pindex(NO_NOMATCH)
+pindex(NONOMATCH)
 cindex(globbing, no matches)
 item(tt(NOMATCH) (tt(PLUS()3)) <C> <Z>)(
 If a pattern for filename generation has no matches,
@@ -660,6 +664,7 @@ invoked as tt(sh) or tt(ksh).
 )
 pindex(UNSET)
 pindex(NO_UNSET)
+pindex(NOUNSET)
 cindex(parameters, substituting unset)
 cindex(unset parameters, substituting)
 item(tt(UNSET) (tt(PLUS()u), ksh: tt(PLUS()u)) <K> <S> <Z>)(
@@ -958,6 +963,7 @@ files (tt(.zshrc), etc.).
 )
 pindex(RCS)
 pindex(NO_RCS)
+pindex(NORCS)
 cindex(startup files, sourcing)
 item(tt(RCS) (tt(PLUS()f)) <D>)(
 After tt(zshenv()) is sourced on startup, source the
@@ -975,12 +981,14 @@ subsect(Input/Output)
 startitem()
 pindex(ALIASES)
 pindex(NO_ALIASES)
+pindex(NOALIASES)
 cindex(aliases, expansion)
 item(tt(ALIASES) <D>)(
 Expand aliases.
 )
 pindex(CLOBBER)
 pindex(NO_CLOBBER)
+pindex(NOCLOBBER)
 cindex(clobbering, of files)
 cindex(file clobbering, allowing)
 item(tt(CLOBBER) (tt(PLUS()C), ksh: tt(PLUS()C)) <D>)(
@@ -991,6 +999,7 @@ and `tt(>>!)' or `tt(>>|)' to create a file.
 )
 pindex(CORRECT)
 pindex(NO_CORRECT)
+pindex(NOCORRECT)
 cindex(correction, spelling)
 cindex(spelling correction)
 item(tt(CORRECT) (tt(-0)))(
@@ -1008,6 +1017,7 @@ Try to correct the spelling of all arguments in a line.
 )
 pindex(DVORAK)
 pindex(NO_DVORAK)
+pindex(NODVORAK)
 item(tt(DVORAK))(
 Use the Dvorak keyboard instead of the standard qwerty keyboard as a basis
 for examining spelling mistakes for the tt(CORRECT) and tt(CORRECT_ALL)
@@ -1231,6 +1241,7 @@ is not counted for this purpose.
 )
 pindex(HUP)
 pindex(NO_HUP)
+pindex(NOHUP)
 cindex(jobs, HUP)
 item(tt(HUP) <Z>)(
 Send the tt(HUP) signal to running jobs when the
@@ -1246,12 +1257,14 @@ List jobs in the long format by default.
 )
 pindex(MONITOR)
 pindex(NO_MONITOR)
+pindex(NOMONITOR)
 cindex(job control, allowing)
 item(tt(MONITOR) (tt(-m), ksh: tt(-m)))(
 Allow job control.  Set by default in interactive shells.
 )
 pindex(NOTIFY)
 pindex(NO_NOTIFY)
+pindex(NONOTIFY)
 cindex(background jobs, notification)
 cindex(notification of background jobs)
 item(tt(NOTIFY) (tt(-5), ksh: tt(-b)) <Z>)(
@@ -1423,6 +1436,7 @@ function is retained during the evaluation.
 )
 pindex(EXEC)
 pindex(NO_EXEC)
+pindex(NOEXEC)
 cindex(command execution, enabling)
 item(tt(EXEC) (tt(PLUS()n), ksh: tt(PLUS()n)) <D>)(
 Do execute commands.  Without this option, commands are
@@ -1487,6 +1501,7 @@ used and can cause obscure errors.
 )
 pindex(MULTIOS)
 pindex(NO_MULTIOS)
+pindex(NOMULTIOS)
 item(tt(MULTIOS) <Z>)(
 Perform implicit bf(tee)s or bf(cat)s when multiple
 redirections are attempted (see noderef(Redirection)).
@@ -1520,6 +1535,7 @@ the option is set.
 )
 pindex(VERBOSE)
 pindex(NO_VERBOSE)
+pindex(NOVERBOSE)
 cindex(tracing, of input lines)
 cindex(input, tracing)
 item(tt(VERBOSE) (tt(-v), ksh: tt(-v)))(
@@ -1527,6 +1543,7 @@ Print shell input lines as they are read.
 )
 pindex(XTRACE)
 pindex(NO_XTRACE)
+pindex(NOXTRACE)
 cindex(tracing, of commands)
 cindex(commands, tracing)
 item(tt(XTRACE) (tt(-x), ksh: tt(-x)))(
@@ -1813,6 +1830,7 @@ subsect(Shell State)
 startitem()
 pindex(INTERACTIVE)
 pindex(NO_INTERACTIVE)
+pindex(NOINTERACTIVE)
 item(tt(INTERACTIVE) (tt(-i), ksh: tt(-i)))(
 This is an interactive shell.  This option is set upon initialisation if
 the standard input is a tty and commands are being read from standard input.
@@ -1823,6 +1841,7 @@ The value of this option cannot be changed
anywhere other than the command line.
 )
 pindex(LOGIN)
 pindex(NO_LOGIN)
+pindex(NOLOGIN)
 item(tt(LOGIN) (tt(-l), ksh: tt(-l)))(
 This is a login shell.
 If this option is not explicitly set, the shell is a login shell if
@@ -1830,6 +1849,7 @@ the first character of the tt(argv[0]) passed to
the shell is a `tt(-)'.
 )
 pindex(PRIVILEGED)
 pindex(NO_PRIVILEGED)
+pindex(NOPRIVILEGED)
 cindex(privileged mode)
 cindex(mode, privileged)
 item(tt(PRIVILEGED) (tt(-p), ksh: tt(-p)))(
@@ -1847,6 +1867,7 @@ option.
 )
 pindex(RESTRICTED)
 pindex(NO_RESTRICTED)
+pindex(NORESTRICTED)
 cindex(restricted shell)
 item(tt(RESTRICTED) (tt(-r)))(
 Enables restricted mode.  This option cannot be changed using
@@ -1879,7 +1900,6 @@ pindex(SINGLECOMMAND)
 pindex(NOSINGLECOMMAND)
 cindex(single command)
 pindex(INTERACTIVE, use of)
-pindex(NO_INTERACTIVE, use of)
 item(tt(SINGLE_COMMAND) (tt(-t), ksh: tt(-t)))(
 If the shell is reading from standard input, it exits after a single command
 has been executed.  This also makes the shell non-interactive, unless the
@@ -1892,6 +1912,7 @@ subsect(Zle)
 startitem()
 pindex(BEEP)
 pindex(NO_BEEP)
+pindex(NOBEEP)
 cindex(beep, enabling)
 cindex(enabling the beep)
 item(tt(BEEP) (tt(PLUS()B)) <D>)(
@@ -1920,6 +1941,7 @@ Otherwise the base shell does not handle
combining characters specially.
 )
 pindex(EMACS)
 pindex(NO_EMACS)
+pindex(NOEMACS)
 item(tt(EMACS))(
 If ZLE is loaded, turning on this option has the equivalent effect
 of `tt(bindkey -e)'.  In addition, the VI option is unset.
@@ -1929,6 +1951,7 @@ provided for compatibility; tt(bindkey) is the
recommended interface.
 )
 pindex(OVERSTRIKE)
 pindex(NO_OVERSTRIKE)
+pindex(NOOVERSTRIKE)
 cindex(editor, overstrike mode)
 cindex(overstrike mode, of editor)
 item(tt(OVERSTRIKE))(
@@ -1950,6 +1973,7 @@ when using ksh emulation interactively.
 )
 pindex(VI)
 pindex(NO_VI)
+pindex(NOVI)
 item(tt(VI))(
 If ZLE is loaded, turning on this option has the equivalent effect
 of `tt(bindkey -v)'.  In addition, the EMACS option is unset.
@@ -1959,6 +1983,7 @@ provided for compatibility; tt(bindkey) is the
recommended interface.
 )
 pindex(ZLE)
 pindex(NO_ZLE)
+pindex(NOZLE)
 cindex(editor, enabling)
 cindex(enabling the editor)
 item(tt(ZLE) (tt(-Z)))(
@@ -2017,6 +2042,7 @@ tt(BANG_HIST)
 )
 pindex(LOG)
 pindex(NO_LOG)
+pindex(NOLOG)
 item(tt(LOG))(
 em(NO_)tt(HIST_NO_FUNCTIONS)
 (ksh compatibility)
@@ -2039,6 +2065,7 @@ tt(SINGLE_COMMAND)
 )
 pindex(PHYSICAL)
 pindex(NO_PHYSICAL)
+pindex(NOPHYSICAL)
 item(tt(PHYSICAL))(
 tt(CHASE_LINKS)
 (ksh and bash compatibility)
@@ -2053,6 +2080,7 @@ tt(PROMPT_SUBST)
 )
 pindex(STDIN)
 pindex(NO_STDIN)
+pindex(NOSTDIN)
 item(tt(STDIN))(
 tt(SHIN_STDIN)
 (ksh compatibility)
-- 
1.5.6.5

--000e0cd24804723f510462991b64
Content-Type: text/x-diff; charset=US-ASCII; 
	name="0001-Add-some-missing-option-index-entries.patch"
Content-Disposition: attachment; 
	filename="0001-Add-some-missing-option-index-entries.patch"
Content-Transfer-Encoding: base64
X-Attachment-Id: f_fr1815yr1

RnJvbSBhZjljOGUyMDUxNzZjYWUwOWE4OGFmYjcyNGRiNzBiZjBkNGQ0N2Q4IE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBSaWNoYXJkIEhhcnRtYW5uIDxyaWNoaWhAbmV0LmluLnR1bS5k
ZT4KRGF0ZTogV2VkLCAxMSBGZWIgMjAwOSAwMDozOTo1NyArMDEwMApTdWJqZWN0OiBbUEFUQ0hd
IEFkZCBzb21lIG1pc3Npbmcgb3B0aW9uIGluZGV4IGVudHJpZXMKCk15IFBlcmwgc2NyaXB0IGZh
aWxlZCB0byBjaGVjayB0aGUgY29uZGl0aW9uIGNvcnJlY3RseS4gVGh1cywgYWxsCm9wdGlvbnMg
d2l0aG91dCB1bmRlcnNjb3JlIGhhZCBOT19PUFRJT04sIGJ1dCBub3QgTk9PUFRJT04uCi0tLQog
RG9jL1pzaC9vcHRpb25zLnlvIHwgICAzMCArKysrKysrKysrKysrKysrKysrKysrKysrKysrKy0K
IDEgZmlsZXMgY2hhbmdlZCwgMjkgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbnMoLSkKCmRpZmYg
LS1naXQgYS9Eb2MvWnNoL29wdGlvbnMueW8gYi9Eb2MvWnNoL29wdGlvbnMueW8KaW5kZXggMzY5
ODgyNi4uMmNkMDJiZiAxMDA2NDQKLS0tIGEvRG9jL1pzaC9vcHRpb25zLnlvCisrKyBiL0RvYy9a
c2gvb3B0aW9ucy55bwpAQCAtNDQ0LDYgKzQ0NCw3IEBAIE92ZXJyaWRlcyB0dChOT01BVENIKS4K
ICkKIHBpbmRleChFUVVBTFMpCiBwaW5kZXgoTk9fRVFVQUxTKQorcGluZGV4KE5PRVFVQUxTKQog
Y2luZGV4KGZpbGVuYW1lIGV4cGFuc2lvbiwgPSkKIGl0ZW0odHQoRVFVQUxTKSA8Wj4pKAogUGVy
Zm9ybSB0dCg9KSBmaWxlbmFtZSBleHBhbnNpb24uCkBAIC00NjEsNiArNDYyLDcgQEAgYWx3YXlz
IHByb2R1Y2VzIG5hbWVkIGRpcmVjdG9yeSBleHBhbnNpb24uKQogKQogcGluZGV4KEdMT0IpCiBw
aW5kZXgoTk9fR0xPQikKK3BpbmRleChOT0dMT0IpCiBjaW5kZXgoZ2xvYmJpbmcsIGVuYWJsaW5n
KQogY2luZGV4KGVuYWJsaW5nIGdsb2JiaW5nKQogaXRlbSh0dChHTE9CKSAodHQoUExVUygpRiks
IGtzaDogdHQoUExVUygpZikpIDxEPikoCkBAIC01NjMsNiArNTY1LDcgQEAgbmFtZXMgcmVzdWx0
aW5nIGZyb20gZmlsZW5hbWUgZ2VuZXJhdGlvbiAoZ2xvYmJpbmcpLgogKQogcGluZGV4KE1VTFRJ
QllURSkKIHBpbmRleChOT19NVUxUSUJZVEUpCitwaW5kZXgoTk9NVUxUSUJZVEUpCiBjaW5kZXgo
Y2hhcmFjdGVycywgbXVsdGlieXRlLCBpbiBleHBhbnNpb24gYW5kIGdsb2JiaW5nKQogY2luZGV4
KG11bHRpYnl0ZSBjaGFyYWN0ZXJzLCBpbiBleHBhbnNpb24gYW5kIGdsb2JiaW5nKQogaXRlbSh0
dChNVUxUSUJZVEUpIDxDPiA8Sz4gPFo+KSgKQEAgLTU5Miw2ICs1OTUsNyBAQCBzaGVsbCBzZXR0
aW5ncy4KICkKIHBpbmRleChOT01BVENIKQogcGluZGV4KE5PX05PTUFUQ0gpCitwaW5kZXgoTk9O
T01BVENIKQogY2luZGV4KGdsb2JiaW5nLCBubyBtYXRjaGVzKQogaXRlbSh0dChOT01BVENIKSAo
dHQoUExVUygpMykpIDxDPiA8Wj4pKAogSWYgYSBwYXR0ZXJuIGZvciBmaWxlbmFtZSBnZW5lcmF0
aW9uIGhhcyBubyBtYXRjaGVzLApAQCAtNjYwLDYgKzY2NCw3IEBAIGludm9rZWQgYXMgdHQoc2gp
IG9yIHR0KGtzaCkuCiApCiBwaW5kZXgoVU5TRVQpCiBwaW5kZXgoTk9fVU5TRVQpCitwaW5kZXgo
Tk9VTlNFVCkKIGNpbmRleChwYXJhbWV0ZXJzLCBzdWJzdGl0dXRpbmcgdW5zZXQpCiBjaW5kZXgo
dW5zZXQgcGFyYW1ldGVycywgc3Vic3RpdHV0aW5nKQogaXRlbSh0dChVTlNFVCkgKHR0KFBMVVMo
KXUpLCBrc2g6IHR0KFBMVVMoKXUpKSA8Sz4gPFM+IDxaPikoCkBAIC05NTgsNiArOTYzLDcgQEAg
ZmlsZXMgKHR0KC56c2hyYyksIGV0Yy4pLgogKQogcGluZGV4KFJDUykKIHBpbmRleChOT19SQ1Mp
CitwaW5kZXgoTk9SQ1MpCiBjaW5kZXgoc3RhcnR1cCBmaWxlcywgc291cmNpbmcpCiBpdGVtKHR0
KFJDUykgKHR0KFBMVVMoKWYpKSA8RD4pKAogQWZ0ZXIgdHQoenNoZW52KCkpIGlzIHNvdXJjZWQg
b24gc3RhcnR1cCwgc291cmNlIHRoZQpAQCAtOTc1LDEyICs5ODEsMTQgQEAgc3Vic2VjdChJbnB1
dC9PdXRwdXQpCiBzdGFydGl0ZW0oKQogcGluZGV4KEFMSUFTRVMpCiBwaW5kZXgoTk9fQUxJQVNF
UykKK3BpbmRleChOT0FMSUFTRVMpCiBjaW5kZXgoYWxpYXNlcywgZXhwYW5zaW9uKQogaXRlbSh0
dChBTElBU0VTKSA8RD4pKAogRXhwYW5kIGFsaWFzZXMuCiApCiBwaW5kZXgoQ0xPQkJFUikKIHBp
bmRleChOT19DTE9CQkVSKQorcGluZGV4KE5PQ0xPQkJFUikKIGNpbmRleChjbG9iYmVyaW5nLCBv
ZiBmaWxlcykKIGNpbmRleChmaWxlIGNsb2JiZXJpbmcsIGFsbG93aW5nKQogaXRlbSh0dChDTE9C
QkVSKSAodHQoUExVUygpQyksIGtzaDogdHQoUExVUygpQykpIDxEPikoCkBAIC05OTEsNiArOTk5
LDcgQEAgYW5kIGB0dCg+PiEpJyBvciBgdHQoPj58KScgdG8gY3JlYXRlIGEgZmlsZS4KICkKIHBp
bmRleChDT1JSRUNUKQogcGluZGV4KE5PX0NPUlJFQ1QpCitwaW5kZXgoTk9DT1JSRUNUKQogY2lu
ZGV4KGNvcnJlY3Rpb24sIHNwZWxsaW5nKQogY2luZGV4KHNwZWxsaW5nIGNvcnJlY3Rpb24pCiBp
dGVtKHR0KENPUlJFQ1QpICh0dCgtMCkpKSgKQEAgLTEwMDgsNiArMTAxNyw3IEBAIFRyeSB0byBj
b3JyZWN0IHRoZSBzcGVsbGluZyBvZiBhbGwgYXJndW1lbnRzIGluIGEgbGluZS4KICkKIHBpbmRl
eChEVk9SQUspCiBwaW5kZXgoTk9fRFZPUkFLKQorcGluZGV4KE5PRFZPUkFLKQogaXRlbSh0dChE
Vk9SQUspKSgKIFVzZSB0aGUgRHZvcmFrIGtleWJvYXJkIGluc3RlYWQgb2YgdGhlIHN0YW5kYXJk
IHF3ZXJ0eSBrZXlib2FyZCBhcyBhIGJhc2lzCiBmb3IgZXhhbWluaW5nIHNwZWxsaW5nIG1pc3Rh
a2VzIGZvciB0aGUgdHQoQ09SUkVDVCkgYW5kIHR0KENPUlJFQ1RfQUxMKQpAQCAtMTIzMSw2ICsx
MjQxLDcgQEAgaXMgbm90IGNvdW50ZWQgZm9yIHRoaXMgcHVycG9zZS4KICkKIHBpbmRleChIVVAp
CiBwaW5kZXgoTk9fSFVQKQorcGluZGV4KE5PSFVQKQogY2luZGV4KGpvYnMsIEhVUCkKIGl0ZW0o
dHQoSFVQKSA8Wj4pKAogU2VuZCB0aGUgdHQoSFVQKSBzaWduYWwgdG8gcnVubmluZyBqb2JzIHdo
ZW4gdGhlCkBAIC0xMjQ2LDEyICsxMjU3LDE0IEBAIExpc3Qgam9icyBpbiB0aGUgbG9uZyBmb3Jt
YXQgYnkgZGVmYXVsdC4KICkKIHBpbmRleChNT05JVE9SKQogcGluZGV4KE5PX01PTklUT1IpCitw
aW5kZXgoTk9NT05JVE9SKQogY2luZGV4KGpvYiBjb250cm9sLCBhbGxvd2luZykKIGl0ZW0odHQo
TU9OSVRPUikgKHR0KC1tKSwga3NoOiB0dCgtbSkpKSgKIEFsbG93IGpvYiBjb250cm9sLiAgU2V0
IGJ5IGRlZmF1bHQgaW4gaW50ZXJhY3RpdmUgc2hlbGxzLgogKQogcGluZGV4KE5PVElGWSkKIHBp
bmRleChOT19OT1RJRlkpCitwaW5kZXgoTk9OT1RJRlkpCiBjaW5kZXgoYmFja2dyb3VuZCBqb2Jz
LCBub3RpZmljYXRpb24pCiBjaW5kZXgobm90aWZpY2F0aW9uIG9mIGJhY2tncm91bmQgam9icykK
IGl0ZW0odHQoTk9USUZZKSAodHQoLTUpLCBrc2g6IHR0KC1iKSkgPFo+KSgKQEAgLTE0MjMsNiAr
MTQzNiw3IEBAIGZ1bmN0aW9uIGlzIHJldGFpbmVkIGR1cmluZyB0aGUgZXZhbHVhdGlvbi4KICkK
IHBpbmRleChFWEVDKQogcGluZGV4KE5PX0VYRUMpCitwaW5kZXgoTk9FWEVDKQogY2luZGV4KGNv
bW1hbmQgZXhlY3V0aW9uLCBlbmFibGluZykKIGl0ZW0odHQoRVhFQykgKHR0KFBMVVMoKW4pLCBr
c2g6IHR0KFBMVVMoKW4pKSA8RD4pKAogRG8gZXhlY3V0ZSBjb21tYW5kcy4gIFdpdGhvdXQgdGhp
cyBvcHRpb24sIGNvbW1hbmRzIGFyZQpAQCAtMTQ4Nyw2ICsxNTAxLDcgQEAgdXNlZCBhbmQgY2Fu
IGNhdXNlIG9ic2N1cmUgZXJyb3JzLgogKQogcGluZGV4KE1VTFRJT1MpCiBwaW5kZXgoTk9fTVVM
VElPUykKK3BpbmRleChOT01VTFRJT1MpCiBpdGVtKHR0KE1VTFRJT1MpIDxaPikoCiBQZXJmb3Jt
IGltcGxpY2l0IGJmKHRlZSlzIG9yIGJmKGNhdClzIHdoZW4gbXVsdGlwbGUKIHJlZGlyZWN0aW9u
cyBhcmUgYXR0ZW1wdGVkIChzZWUgbm9kZXJlZihSZWRpcmVjdGlvbikpLgpAQCAtMTUyMCw2ICsx
NTM1LDcgQEAgdGhlIG9wdGlvbiBpcyBzZXQuCiApCiBwaW5kZXgoVkVSQk9TRSkKIHBpbmRleChO
T19WRVJCT1NFKQorcGluZGV4KE5PVkVSQk9TRSkKIGNpbmRleCh0cmFjaW5nLCBvZiBpbnB1dCBs
aW5lcykKIGNpbmRleChpbnB1dCwgdHJhY2luZykKIGl0ZW0odHQoVkVSQk9TRSkgKHR0KC12KSwg
a3NoOiB0dCgtdikpKSgKQEAgLTE1MjcsNiArMTU0Myw3IEBAIFByaW50IHNoZWxsIGlucHV0IGxp
bmVzIGFzIHRoZXkgYXJlIHJlYWQuCiApCiBwaW5kZXgoWFRSQUNFKQogcGluZGV4KE5PX1hUUkFD
RSkKK3BpbmRleChOT1hUUkFDRSkKIGNpbmRleCh0cmFjaW5nLCBvZiBjb21tYW5kcykKIGNpbmRl
eChjb21tYW5kcywgdHJhY2luZykKIGl0ZW0odHQoWFRSQUNFKSAodHQoLXgpLCBrc2g6IHR0KC14
KSkpKApAQCAtMTgxMyw2ICsxODMwLDcgQEAgc3Vic2VjdChTaGVsbCBTdGF0ZSkKIHN0YXJ0aXRl
bSgpCiBwaW5kZXgoSU5URVJBQ1RJVkUpCiBwaW5kZXgoTk9fSU5URVJBQ1RJVkUpCitwaW5kZXgo
Tk9JTlRFUkFDVElWRSkKIGl0ZW0odHQoSU5URVJBQ1RJVkUpICh0dCgtaSksIGtzaDogdHQoLWkp
KSkoCiBUaGlzIGlzIGFuIGludGVyYWN0aXZlIHNoZWxsLiAgVGhpcyBvcHRpb24gaXMgc2V0IHVw
b24gaW5pdGlhbGlzYXRpb24gaWYKIHRoZSBzdGFuZGFyZCBpbnB1dCBpcyBhIHR0eSBhbmQgY29t
bWFuZHMgYXJlIGJlaW5nIHJlYWQgZnJvbSBzdGFuZGFyZCBpbnB1dC4KQEAgLTE4MjMsNiArMTg0
MSw3IEBAIFRoZSB2YWx1ZSBvZiB0aGlzIG9wdGlvbiBjYW5ub3QgYmUgY2hhbmdlZCBhbnl3aGVy
ZSBvdGhlciB0aGFuIHRoZSBjb21tYW5kIGxpbmUuCiApCiBwaW5kZXgoTE9HSU4pCiBwaW5kZXgo
Tk9fTE9HSU4pCitwaW5kZXgoTk9MT0dJTikKIGl0ZW0odHQoTE9HSU4pICh0dCgtbCksIGtzaDog
dHQoLWwpKSkoCiBUaGlzIGlzIGEgbG9naW4gc2hlbGwuCiBJZiB0aGlzIG9wdGlvbiBpcyBub3Qg
ZXhwbGljaXRseSBzZXQsIHRoZSBzaGVsbCBpcyBhIGxvZ2luIHNoZWxsIGlmCkBAIC0xODMwLDYg
KzE4NDksNyBAQCB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZSB0dChhcmd2WzBdKSBwYXNzZWQg
dG8gdGhlIHNoZWxsIGlzIGEgYHR0KC0pJy4KICkKIHBpbmRleChQUklWSUxFR0VEKQogcGluZGV4
KE5PX1BSSVZJTEVHRUQpCitwaW5kZXgoTk9QUklWSUxFR0VEKQogY2luZGV4KHByaXZpbGVnZWQg
bW9kZSkKIGNpbmRleChtb2RlLCBwcml2aWxlZ2VkKQogaXRlbSh0dChQUklWSUxFR0VEKSAodHQo
LXApLCBrc2g6IHR0KC1wKSkpKApAQCAtMTg0Nyw2ICsxODY3LDcgQEAgb3B0aW9uLgogKQogcGlu
ZGV4KFJFU1RSSUNURUQpCiBwaW5kZXgoTk9fUkVTVFJJQ1RFRCkKK3BpbmRleChOT1JFU1RSSUNU
RUQpCiBjaW5kZXgocmVzdHJpY3RlZCBzaGVsbCkKIGl0ZW0odHQoUkVTVFJJQ1RFRCkgKHR0KC1y
KSkpKAogRW5hYmxlcyByZXN0cmljdGVkIG1vZGUuICBUaGlzIG9wdGlvbiBjYW5ub3QgYmUgY2hh
bmdlZCB1c2luZwpAQCAtMTg3OSw3ICsxOTAwLDYgQEAgcGluZGV4KFNJTkdMRUNPTU1BTkQpCiBw
aW5kZXgoTk9TSU5HTEVDT01NQU5EKQogY2luZGV4KHNpbmdsZSBjb21tYW5kKQogcGluZGV4KElO
VEVSQUNUSVZFLCB1c2Ugb2YpCi1waW5kZXgoTk9fSU5URVJBQ1RJVkUsIHVzZSBvZikKIGl0ZW0o
dHQoU0lOR0xFX0NPTU1BTkQpICh0dCgtdCksIGtzaDogdHQoLXQpKSkoCiBJZiB0aGUgc2hlbGwg
aXMgcmVhZGluZyBmcm9tIHN0YW5kYXJkIGlucHV0LCBpdCBleGl0cyBhZnRlciBhIHNpbmdsZSBj
b21tYW5kCiBoYXMgYmVlbiBleGVjdXRlZC4gIFRoaXMgYWxzbyBtYWtlcyB0aGUgc2hlbGwgbm9u
LWludGVyYWN0aXZlLCB1bmxlc3MgdGhlCkBAIC0xODkyLDYgKzE5MTIsNyBAQCBzdWJzZWN0KFps
ZSkKIHN0YXJ0aXRlbSgpCiBwaW5kZXgoQkVFUCkKIHBpbmRleChOT19CRUVQKQorcGluZGV4KE5P
QkVFUCkKIGNpbmRleChiZWVwLCBlbmFibGluZykKIGNpbmRleChlbmFibGluZyB0aGUgYmVlcCkK
IGl0ZW0odHQoQkVFUCkgKHR0KFBMVVMoKUIpKSA8RD4pKApAQCAtMTkyMCw2ICsxOTQxLDcgQEAg
T3RoZXJ3aXNlIHRoZSBiYXNlIHNoZWxsIGRvZXMgbm90IGhhbmRsZSBjb21iaW5pbmcgY2hhcmFj
dGVycyBzcGVjaWFsbHkuCiApCiBwaW5kZXgoRU1BQ1MpCiBwaW5kZXgoTk9fRU1BQ1MpCitwaW5k
ZXgoTk9FTUFDUykKIGl0ZW0odHQoRU1BQ1MpKSgKIElmIFpMRSBpcyBsb2FkZWQsIHR1cm5pbmcg
b24gdGhpcyBvcHRpb24gaGFzIHRoZSBlcXVpdmFsZW50IGVmZmVjdAogb2YgYHR0KGJpbmRrZXkg
LWUpJy4gIEluIGFkZGl0aW9uLCB0aGUgVkkgb3B0aW9uIGlzIHVuc2V0LgpAQCAtMTkyOSw2ICsx
OTUxLDcgQEAgcHJvdmlkZWQgZm9yIGNvbXBhdGliaWxpdHk7IHR0KGJpbmRrZXkpIGlzIHRoZSBy
ZWNvbW1lbmRlZCBpbnRlcmZhY2UuCiApCiBwaW5kZXgoT1ZFUlNUUklLRSkKIHBpbmRleChOT19P
VkVSU1RSSUtFKQorcGluZGV4KE5PT1ZFUlNUUklLRSkKIGNpbmRleChlZGl0b3IsIG92ZXJzdHJp
a2UgbW9kZSkKIGNpbmRleChvdmVyc3RyaWtlIG1vZGUsIG9mIGVkaXRvcikKIGl0ZW0odHQoT1ZF
UlNUUklLRSkpKApAQCAtMTk1MCw2ICsxOTczLDcgQEAgd2hlbiB1c2luZyBrc2ggZW11bGF0aW9u
IGludGVyYWN0aXZlbHkuCiApCiBwaW5kZXgoVkkpCiBwaW5kZXgoTk9fVkkpCitwaW5kZXgoTk9W
SSkKIGl0ZW0odHQoVkkpKSgKIElmIFpMRSBpcyBsb2FkZWQsIHR1cm5pbmcgb24gdGhpcyBvcHRp
b24gaGFzIHRoZSBlcXVpdmFsZW50IGVmZmVjdAogb2YgYHR0KGJpbmRrZXkgLXYpJy4gIEluIGFk
ZGl0aW9uLCB0aGUgRU1BQ1Mgb3B0aW9uIGlzIHVuc2V0LgpAQCAtMTk1OSw2ICsxOTgzLDcgQEAg
cHJvdmlkZWQgZm9yIGNvbXBhdGliaWxpdHk7IHR0KGJpbmRrZXkpIGlzIHRoZSByZWNvbW1lbmRl
ZCBpbnRlcmZhY2UuCiApCiBwaW5kZXgoWkxFKQogcGluZGV4KE5PX1pMRSkKK3BpbmRleChOT1pM
RSkKIGNpbmRleChlZGl0b3IsIGVuYWJsaW5nKQogY2luZGV4KGVuYWJsaW5nIHRoZSBlZGl0b3Ip
CiBpdGVtKHR0KFpMRSkgKHR0KC1aKSkpKApAQCAtMjAxNyw2ICsyMDQyLDcgQEAgdHQoQkFOR19I
SVNUKQogKQogcGluZGV4KExPRykKIHBpbmRleChOT19MT0cpCitwaW5kZXgoTk9MT0cpCiBpdGVt
KHR0KExPRykpKAogZW0oTk9fKXR0KEhJU1RfTk9fRlVOQ1RJT05TKQogKGtzaCBjb21wYXRpYmls
aXR5KQpAQCAtMjAzOSw2ICsyMDY1LDcgQEAgdHQoU0lOR0xFX0NPTU1BTkQpCiApCiBwaW5kZXgo
UEhZU0lDQUwpCiBwaW5kZXgoTk9fUEhZU0lDQUwpCitwaW5kZXgoTk9QSFlTSUNBTCkKIGl0ZW0o
dHQoUEhZU0lDQUwpKSgKIHR0KENIQVNFX0xJTktTKQogKGtzaCBhbmQgYmFzaCBjb21wYXRpYmls
aXR5KQpAQCAtMjA1Myw2ICsyMDgwLDcgQEAgdHQoUFJPTVBUX1NVQlNUKQogKQogcGluZGV4KFNU
RElOKQogcGluZGV4KE5PX1NURElOKQorcGluZGV4KE5PU1RESU4pCiBpdGVtKHR0KFNURElOKSko
CiB0dChTSElOX1NURElOKQogKGtzaCBjb21wYXRpYmlsaXR5KQotLSAKMS41LjYuNQoK
--000e0cd24804723f510462991b64--

