From zsh-users-return-5760-mason-zsh=primenet.com.au@sunsite.dk Sun Jan 19 23:01:51 2003
Return-Path: <zsh-users-return-5760-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 26929 invoked from network); 19 Jan 2003 23:01:50 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 19 Jan 2003 23:01:50 -0000
Received: (qmail 16819 invoked by alias); 19 Jan 2003 23:01:27 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 5760
Received: (qmail 16810 invoked from network); 19 Jan 2003 23:01:27 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Message-ID: <20030119230128.3992.qmail@web12301.mail.yahoo.com>
Date: Sun, 19 Jan 2003 18:01:28 -0500 (EST)
From: Le Wang <lewang@yahoo.com>
Subject: Re: passing arrays
To: Zsh users list <zsh-users@sunsite.dk>
In-Reply-To: <20030119225023.GA30393@fysh.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

 --- Zefram <zefram@fysh.org> wrote: > Le Wang wrote:
> >Is it possible to pass an array into a function and
> >have the function return an array?
> 
> The arguments to a function are an array, accessible
> through the
> $1/$@/$argv parameters.

hmm.  I figured as much.

Here is an extension of the problem.  Say I have a
bunch of functions that operate on $PATH, how would I
generalize it so that it works with any $PATH like
variable?

--
le

______________________________________________________________________ 
Post your free ad now! http://personals.yahoo.ca

