From zsh-workers-return-7214-mason-zsh=primenet.com.au@sunsite.auc.dk Tue Jul 20 06:00:52 1999
Return-Path: <zsh-workers-return-7214-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 10926 invoked from network); 20 Jul 1999 06:00:51 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 20 Jul 1999 06:00:51 -0000
Received: (qmail 14506 invoked by alias); 20 Jul 1999 06:00:42 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 7214
Received: (qmail 14495 invoked from network); 20 Jul 1999 06:00:41 -0000
To: zsh-workers@sunsite.auc.dk
Subject: Re: string range between 1 and 0.
References: <rsqvhbi7fww.fsf@crane.jaist.ac.jp>
 <990719000259.ZM8741@candle.brasslantern.com>
 <rsqbtd9v4eu.fsf@crane.jaist.ac.jp>
 <990719050457.ZM8827@candle.brasslantern.com>
MIME-Version: 1.0 (generated by AKEMI 1.13.2 - =?ISO-2022-JP?B?Ig==?=
 =?ISO-2022-JP?B?GyRCQTA0Y0s8GyhCIg==?=)
Content-Type: text/plain; charset=US-ASCII
From: Tanaka Akira <akr@jaist.ac.jp>
Date: 20 Jul 1999 14:59:48 +0900
In-Reply-To: "Bart Schaefer"'s message of "Mon, 19 Jul 1999 05:04:57 +0000"
Message-ID: <rsqpv1nvp2j.fsf@crane.jaist.ac.jp>
Lines: 34
User-Agent: Chao-gnus/6.12.5 AKEMI/1.13.2 (=?ISO-2022-JP?B?GyRCQTAbKEI=?=
 =?ISO-2022-JP?B?GyRCNGNLPBsoQg==?=) FLAM-DOODLE/1.12.6
 (=?ISO-2022-JP?B?GyRCM3cbKEI=?= 10R4.0/5.0) Emacs/20.3.11
 (sparc-sun-solaris2.6) MULE/4.0 (HANANOEN)

In article <990719050457.ZM8827@candle.brasslantern.com>,
  "Bart Schaefer" <schaefer@candle.brasslantern.com> writes:

> That scheme wouldn't work in ksh mode in any case ... ${buffer[0,-1]} is
> the whole buffer, not the empty string.

I agree. ksharrays makes the scheme damaged.

> The difficulty with doing this is that C arrays are indexed from 0.  So
> when zsh uses 1-based indices, it has to decrement them before indexing
> into the internal representation of the value.  This decrement is done
> at parse time (unless the value is already zero), so that thereafter the
> same code can be used for ksh and zsh arrays.  Since negative numbers
> are already used for indexing back from the end, there isn't any value
> to represent the nonexistent position, which is in effect what you're
> asking for (because the only position to the left of the leftmost is
> the one that doesn't exist).

I understand that my expectation is not so trivial.

> If you represent the null region by unsetting pos2 or setting it empty,
> you can do this:
> 
> 	${pos2:+$buffer[pos1,pos2]}

I found another tricky answer.

  $buffer[pos2 == 0 ? 2 : pos1, pos2]

Hm. Arithmetic evaluation has the much closer syntax to ordinary
language such as perl or C. It's good. I feel regret that it cannot
handle objects other than integers.
-- 
Tanaka Akira

