From zsh-workers-return-15458-mason-zsh=primenet.com.au@sunsite.dk Mon Jul 23 11:39:08 2001
Return-Path: <zsh-workers-return-15458-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24899 invoked from network); 23 Jul 2001 11:39:07 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 23 Jul 2001 11:39:07 -0000
Received: (qmail 7902 invoked by alias); 23 Jul 2001 11:39:00 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 15458
Received: (qmail 7887 invoked from network); 23 Jul 2001 11:38:58 -0000
Message-ID: <Tc0a88d0154ec3a388b@mailsweeper01.cambridgesiliconradio.com>
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: Re: Enhanced shell 
In-reply-to: "Oliver Kiddle"'s message of "Mon, 23 Jul 2001 12:13:42 BST."
             <3B5C06E6.FFFCCFCC@u.genie.co.uk> 
Date: Mon, 23 Jul 2001 12:38:18 +0100
From: Peter Stephenson <pws@csr.com>

Oliver Kiddle wrote:
> > David Korn is asking for suggestions for features from the various
> > shells to be included in a standard, so I've been jotting possible
> > things from zsh down.
> 
> I had also jotted down a list so I've merged it in with yours and added
> a few comments.
> 
> typeset builtin (yes, it isn't in POSIX). Also, note that bash has
> obsoleted `typeset' in favour of `declare' which I think is better.

It strikes me as a bit late for that now.

> > ? disable/enable? [bash]
> not so useful. they are also common as commands to enable/disable
> printers (on AIX and Solaris at least).

Yes, I can see it would be silly defining a standard which is known to have
this clash in it.

> multios option (and maybe other redirection extensions)

This is very useful, but it's maybe a bit too much of a hack to
standardise (e.g. the race condition on output multios in the current
implementation, although I hope that's fixable).

> > precmd, chpwd, periodic
> preexec
> I'm not too sure about these because of the sort of problems we get
> with, for example the prompt themes overwriting the existing functions.
> I can think of a few more flexible ways of allowing the same.

In which case, we should probably think about that for our own purposes
before attempting to standardise.

> backreferences (ksh93's possibly being better)

I haven't looked at those at all.

> > `ESS_VERSION' (version no. of extended shell standard)
> or possibly take that idea further to cover more details. I like
> ksh93's use of a .sh namespace

Since namespaces were on David Korn's list, that might be preferable.

> > ? typeset -T? (possible with discipline functions)
> that's a good point about the disciplines

> > ? typeset etc. -g?
> zsh/bash dynamically scoped local variables.

Hmm.  I don't know how this will pan out if ksh is going the way of
statically scoped parameters.

> > command [bash]
-, builtin and noglob. I think command is already in the standard.

I hadn't looked at the standard --- this was something I meant to check.
I'm pretty sure builtin is there hence the POSIX_BUILTINS option.  noglob
is really for saving typing interactively, so I'm not sure it's what we're
looking for at the moment.

> > suspend [bash
> it's a default alias in ksh

OK, may well be worth standardising

> cd -
> two argument form of cd
> directory stack, and access with ~num

Again, these are really interactive shortcuts; you can (and probably would)
do them in a more verbose way in a script.  Standardising handling of
symbolic links in cd might be sensible, though.

> process substitution

That's already in ksh, but it wasn't on David Korn's list, so we could
suggest it.

> C style for loop syntax

I would tend to avoid trying to standardise variant syntax altogether.

> prompt percent substitutions

Interactive shortcut again --- very useful, but less so for scripts.  Quite
a sizeable extension if you haven't already got it.  It's annoying bash
does this with backslashes.

> [[ ... ]] conditions

I suspect that's already implied.

> some of the default key bindings (e.g tab for completion)

Some of our key bindings have come from ksh, it might indeed be sensible to
keep track of which we want to list as standard.

> array subscripts with start and end
> subscripts on a scalar variable

Apparently this works a different way:  ${param:start:offset}, or
something, haven't looked at the details.

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR Ltd., Unit 300, Science Park, Milton Road,
Cambridge, CB4 0XL, UK                          Tel: +44 (0)1223 392070


**********************************************************************
The information transmitted is intended only for the person or
entity to which it is addressed and may contain confidential 
and/or privileged material. 
Any review, retransmission, dissemination or other use of, or
taking of any action in reliance upon, this information by 
persons or entities other than the intended recipient is 
prohibited.  
If you received this in error, please contact the sender and 
delete the material from any computer.
**********************************************************************

