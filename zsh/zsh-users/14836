From zsh-users-return-14836-mason-zsh=primenet.com.au@zsh.org Sun Feb 14 21:10:30 2010
Return-Path: <zsh-users-return-14836-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 8159 invoked by alias); 14 Feb 2010 21:10:30 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14836
Received: (qmail 1747 invoked from network); 14 Feb 2010 21:10:27 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: pass (ns1.primenet.com.au: SPF record at benizi.com designates 64.130.10.15 as permitted sender)
Date: Sun, 14 Feb 2010 16:10:22 -0500 (EST)
From: "Benjamin R. Haskell" <zsh@benizi.com>
To: Peter Stephenson <p.w.stephenson@ntlworld.com>
cc: Zsh Users <zsh-users@zsh.org>
Subject: Re: Standard 'filtering' mechanism?
In-Reply-To: <201002142055.o1EKsxfr003143@pws-pc.ntlworld.com>
Message-ID: <alpine.LNX.2.01.1002141559230.2729@hp.internal>
References: <201002142055.o1EKsxfr003143@pws-pc.ntlworld.com>
User-Agent: Alpine 2.01 (LNX 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

On Sun, 14 Feb 2010, Peter Stephenson wrote:

> "Benjamin R. Haskell" wrote:
> > I'm still getting acquainted with the intricacies of Zsh completion 
> > and pattern matching.  One thing I've wanted to do for a while is 
> > prevent 'vim' completion from matching the various 'junk' files that 
> > are associated with various phases of TeX compilation.
> 
> If I've worked out correctly what you're trying to do (exclude files 
> which have the same basename as a .tex file)

Roughly, but not quite 'basename' exactly.  From my example, 
'document.tex' also produces the intermediate file: document-mpgraph.mp


> , how about something like this...
> 
> 
> vim-files() {
>   local dir
>   if [[ $PREFIX = */* ]]; then
>     if [[ $PREFIX[-1] = / ]]; then
>       dir=$PREFIX[1,-2]
>     else
>       dir=${PREFIX:h}
>     fi
>   else
>     dir=.
>   fi
>   local -a texfiles nontexfiles
>   local -aU suffixes
>   texfiles=($dir/*.tex(N))
>   if (( $#texfiles )); then
>     nontexfiles=(${texfiles:r}.*)
>     suffixes=(${${nontexfiles:e}:#tex})
>     reply=("^*.(${(j.|.)suffixes})")
>   fi
> }
> zstyle -e ':completion:*:*:vim:*' file-patterns vim-files

[example fixed for 'non' vs. 'no' that was just mentioned in a followup 
before I could send]

That, modulo the not-quite-basename problem will probably work.  But, it 
kind of gets to the heart of what I wanted to avoid (namely: doing the 
globbing manually).  It'd be much nicer to have _path_files handle the 
various PREFIX things your function does there, and then filter as a 
post-processing step.  I guess there's no zstyle way to 'hook' into that 
stage of completion?

-- 
Thanks,
Ben

