From zsh-users-return-14419-mason-zsh=primenet.com.au@sunsite.dk Mon Sep 21 14:41:26 2009
Return-Path: <zsh-users-return-14419-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 7324 invoked from network); 21 Sep 2009 14:41:14 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 21 Sep 2009 14:41:14 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 37545 invoked from network); 21 Sep 2009 14:41:02 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 21 Sep 2009 14:41:02 -0000
Received: (qmail 5836 invoked by alias); 21 Sep 2009 14:40:54 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 14419
Received: (qmail 5823 invoked from network); 21 Sep 2009 14:40:54 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 21 Sep 2009 14:40:54 -0000
Received: from vms173013pub.verizon.net (vms173013pub.verizon.net [206.46.173.13])
	by bifrost.dotsrc.org (Postfix) with ESMTP id AA284801E2BF
	for <zsh-users@sunsite.dk>; Mon, 21 Sep 2009 16:40:45 +0200 (CEST)
Received: from torch.brasslantern.com ([96.238.222.107])
 by vms173013.mailsrvcs.net
 (Sun Java(tm) System Messaging Server 6.3-7.04 (built Sep 26 2008; 32bit))
 with ESMTPA id <0KQB00NXWSRH2862@vms173013.mailsrvcs.net> for
 zsh-users@sunsite.dk; Mon, 21 Sep 2009 09:40:34 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id n8LEeSXt004383	for
 <zsh-users@sunsite.dk>; Mon, 21 Sep 2009 07:40:29 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id n8LEeR0Z004382	for zsh-users@sunsite.dk; Mon,
 21 Sep 2009 07:40:27 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <090921074027.ZM4381@torch.brasslantern.com>
Date: Mon, 21 Sep 2009 07:40:24 -0700
In-reply-to: <20090921134728.GA10174@fsst.voodoo.lan>
Comments: In reply to Frank Terbeck <ft@bewatermyfriend.org>
 "_expand completer and hashed dirs" (Sep 21,  3:47pm)
References: <20090921134728.GA10174@fsst.voodoo.lan>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@sunsite.dk
Subject: Re: _expand completer and hashed dirs
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii
X-Virus-Scanned: ClamAV 0.94.2/9819/Mon Sep 21 16:06:33 2009 on bifrost
X-Virus-Status: Clean

On Sep 21,  3:47pm, Frank Terbeck wrote:
}
} While this works fine:
} 
}     % ls ~vi<tab>
}     % ls ~vim/
} 
} This doesn't:
} 
}     % ls ~vim<tab>
}     - all expansions -
}     /home/hawk/.vim
}     - original -
}     ~vim
} 
} I would much rather like to get 'ls ~vim/' out of it.

To the extent that there's an intention involved here, it's that the
presumption is that completion is supposed to save keystrokes; so if
you hit TAB at a position where exactly one other keystroke (in this
case a slash) would remove the ambiguity, you get offered the longer
possibility ... because if you meant the shorter one you would have
just typed that other key in the first place.

That said ...

} I've been playing with a number of styles, but they don't seem to
} have any impact on the situation.

    zstyle ':completion:*:expand:*' accept-exact true

would seem to be *supposed* to produce the effect you want, but the
definition of "words beginning with a tilde or parameter expansion"
is implemented so as to exclude words that have no suffix beyond the 
parameter or nameddir -- that is, as I noted above, it's making the
presumption that you wouldn't have used TAB at that position if your
intent was not to expand the word.

Here's a patch that implements accept-exact strict, which applies
in the way that you want.  I'll not commit this, for the following
reasons:

(1) "setopt rec_exact" behaves like strict rather than like true

(2) a better word than "strict" might be found

(3) a better (but changed from historical) behavior might be to
    extend yes/true/on/1 to behave as this makes strict, and have
    a different value ("prefix"?) to mean the current behavior

(4) I haven't had a chance to document it

Patch is bigger than would seem necessary because the "tmp" local
is clobbered after it's initially used to test accept-exact.


Index: Completion/Base/Completer/_expand
===================================================================
retrieving revision 1.10
diff -c -r1.10 _expand
--- _expand	18 Mar 2006 08:00:20 -0000	1.10
+++ _expand	21 Sep 2009 14:27:04 -0000
@@ -12,7 +12,7 @@
 [[ _matcher_num -gt 1 ]] && return 1
 
 local exp word sort expr expl subd suf=" " force opt asp tmp opre pre epre
-local continue=0
+local continue=0 exact
 
 (( $# )) &&
     while getopts gsco opt; do
@@ -38,16 +38,16 @@
      "${(e)word}" != (#s)(*[^\\]|)[][^*?\(\)\<\>\{\}\|]* ]] &&
   return 1
 
-zstyle -s ":completion:${curcontext}:" accept-exact tmp ||
-    [[ ! -o recexact ]] || tmp=1
+zstyle -s ":completion:${curcontext}:" accept-exact exact ||
+    [[ ! -o recexact ]] || exact=1
 
-if [[ "$tmp" != (yes|true|on|1) ]]; then
+if [[ "$exact" != (strict|yes|true|on|1) ]]; then
   { [[ "$word" = \~(|[-+]) ||
        ( "$word" = \~[-+][1-9]## && $word[3,-1] -le $#dirstack ) ]] && return
1 }
   { [[ ( "$word" = \~* &&
${#userdirs[(I)${word[2,-1]}*]}+${#nameddirs[(I)${word[2,-1]}*]} -gt 1 ) ||
        ( "$word" = *\$[a-zA-Z0-9_]## && 
          ${#parameters[(I)${word##*\$}*]} -ne 1 ) ]] && continue=1 }
-  [[ continue -eq 1 && "$tmp" != continue ]] && return 1
+  [[ continue -eq 1 && "$exact" != continue ]] && return 1
 fi
 
 # In exp we will collect the expansions.
@@ -114,7 +114,8 @@
 
 (( $#exp )) || exp=("$subd[@]")
 
-[[ $#exp -eq 1 && "${exp[1]//\\}" = "${word//\\}"(|\(N\)) ]] && return 1
+[[ $#exp -eq 1 && ( "$exact" = "strict" ||
+                    "${exp[1]//\\}" = "${word//\\}"(|\(N\)) ) ]] && return 1
 
 # With subst-globs-only we bail out if there were no glob expansions,
 # regardless of any substitutions


-- 

