From zsh-workers-return-26626-mason-zsh=primenet.com.au@sunsite.dk Fri Feb 27 23:21:57 2009
Return-Path: <zsh-workers-return-26626-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 4273 invoked from network); 27 Feb 2009 23:21:44 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,HTML_MESSAGE
	autolearn=ham version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 27 Feb 2009 23:21:44 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 62712 invoked from network); 27 Feb 2009 23:21:38 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 27 Feb 2009 23:21:38 -0000
Received: (qmail 6913 invoked by alias); 27 Feb 2009 23:21:33 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 26626
Received: (qmail 6899 invoked from network); 27 Feb 2009 23:21:32 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 27 Feb 2009 23:21:32 -0000
Received: from novuscom.net (smtp.novuscom.net [216.19.176.3])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 108918058F83
	for <zsh-workers@sunsite.dk>; Sat, 28 Feb 2009 00:21:24 +0100 (CET)
Received: (qmail 28674 invoked from network); 27 Feb 2009 23:21:22 -0000
Received: from 216-19-179-189.dyn.novuscom.net (HELO [192.168.0.101]) ([216.19.179.189])
          (envelope-sender <jstrait@moonloop.net>)
          by smtp.novuscom.net (qmail-ldap-1.03) with SMTP
          for <zsh-workers@sunsite.dk>; 27 Feb 2009 23:21:22 -0000
Message-ID: <49A872E1.3050309@moonloop.net>
Date: Fri, 27 Feb 2009 15:10:25 -0800
From: Jon Strait <jstrait@moonloop.net>
User-Agent: Thunderbird 2.0.0.18 (X11/20081206)
MIME-Version: 1.0
To: zsh workers <zsh-workers@sunsite.dk>
Subject: Re: PATCH: New options for the PCRE module
Content-Type: multipart/alternative;
 boundary="------------010000020703020108040507"
X-Virus-Scanned: ClamAV 0.92.1/9055/Fri Feb 27 21:16:01 2009 on bifrost
X-Virus-Status: Clean

This is a multi-part message in MIME format.
--------------010000020703020108040507
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

Phil Pennock wrote:
> Chiming in because I'm the most recent person to mess with regex
> functionality (I think).
>
> On 2009-02-26 at 23:15 -0800, Jon Strait wrote:
>   
>> 1.  A new '-s' option to pcre_compile.  This is the frequently set 
>> PCRE_DOTALL option, allowing the dot character to match a newline as well.
>>     
>
> This makes sense, since we already have the other common options as
> flags.  In the meantime, you know about the internal option setting
> feature of PCRE syntax, right?  Putting (?s) at the start of the pattern
> is equivalent.
>
>   
Yes, I've had to use the (? prefixes on language bindings where the 
command options were missing.  It's a matter of taste, I guess.  If 
one's not expecting the prefix options, then it's a little more 
confusing to read, but if one's accustom to using the prefix options 
then they may even prefer that way.
>> On the safe side, regarding the possibility of multi-byte characters, 
>> I'm assuming that the returned offset positions are only for sending 
>> back to pcre_match and not for indexing on a match string, because the 
>> offsets are in byte count, not character count.
>>     
>
> This is dubious.  I can see someone quite reasonably using
> $var[start,end] for substring extraction; the shell should be internally
> consistent.  In a worst-case scenario, there could be another option to
> select which offset semantics shall be used.  Peter's work on UTF-8
> support has so far managed to keep the user from ever knowing or caring
> about this.
>
> Or return four numbers instead of two, so that anyone using the
> interface has to be aware of the difference and can think about it.
>
> I'm not coming up with a more elegant solution.
>
>   
I understand that the use of UTF-8 is transparent to the Z shell user.  
This should mean that any character, whether represented as single or 
multi-byte, will be seen as one character position in a user string.  
However, the offset numbers that pcre_match will return are representing 
byte lengths.  If one character position is really two bytes, then the 
PCRE offset will be increased by two, and a mismatch will occur if the 
user tries to use the offset number for indexing on their user string.
This is how I understand it, or have I missed something along the way?  
I'm not that UTF-8 savvy, so maybe there is a way around this that I'm 
not seeing.  Also, I would like to have those two extra offset numbers 
that represent character positions, but AFAIK, PCRE doesn't provide that 
info on a match.
>> 3.  A needed correction: all of the module's external variables are now 
>> unset on each match attempt, so that a failed match will be obvious.
>>     
>
> Well, the exit status is set already.  And since the last shell release,
> we've documented explicitly that nothing is altered:
>
> 2009-01-15:
>         * 26312: Phil Pennock: Doc/Zsh/cond.yo, Doc/Zsh/mod_pcre.yo,
>         Doc/Zsh/mod_regex.yo: Document no variables altered on failed
>         match.
>
> On the other hand, there's value to a reset too.  I don't have a strong
> preference either way, but now is the time to fix it, before there's
> been a release which documents the behaviour.  :)  Part of the problem
> is that pcre_regex has been in Zsh for many years and we tend to be
> cautious when changing behaviour.
>
> I doubt that anyone is relying on the value being unchanged after a
> match attempt.  Thus the lack of a strong preference.  Anyone else?
>
> While you're at it, there's also the zsh/regex module which uses the
> system's normal extended regex libraries and if you're changing the
> semantics of one, both should change.
>
>   
Right, the exit status should really be checked anyway instead of my 
checking the match results.  Like so:
~~~~~~

pcre_match -b -- $body_match

accum=()

while [[ $? -eq 0 ]] do
    b=($=ZPCRE_OP)
    accum+=$match[1]
    pcre_match -b -n $b[2] -- $body_match
done
   
print -l $accum

~~~~~~~
I'll change it back, unless others think that the new reset actions are 
worth changing to.  The standard behavior is sloppy, but then the whole 
mechanism is sloppy and it doesn't matter.
>> Could someone please point me to the doc files that would need updating 
>> (for the zshmodule man page), or if someone here has that part 
>> automated, I can send them whatever targeted write-up they want.
>>     
>
> Doc/Zsh/mod_pcre.yo (and mod_regex.yo), which are in YODL format.
>
>   
>> -    ret = pcre_exec(pcre_pattern, pcre_hints, *args, strlen(*args), 0, 0, ovec, ovecsize);
>> +    ret = pcre_exec(pcre_pattern, pcre_hints, *args, strlen(*args), offset_start, 0, ovec, ovecsize);
>>     
>
> How gracefully does pcre_exec() fail when offset_start is set to a value
> larger than the length of the string?  To maxint-smallnumber?
>
> -Phil
>   
Oops, it fails like a winged elephant.  I'll put a check in the next 
patch.  Thanks Phil.


-Jon

--------------010000020703020108040507
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
</head>
<body bgcolor="#ffffff" text="#000000">
Phil Pennock wrote:
<blockquote cite="mid:20090227083340.GA44689@redoubt.spodhuis.org"
 type="cite">
  <pre wrap="">Chiming in because I'm the most recent person to mess with regex
functionality (I think).

On 2009-02-26 at 23:15 -0800, Jon Strait wrote:
  </pre>
  <blockquote type="cite">
    <pre wrap="">1.  A new '-s' option to pcre_compile.  This is the frequently set 
PCRE_DOTALL option, allowing the dot character to match a newline as well.
    </pre>
  </blockquote>
  <pre wrap=""><!---->
This makes sense, since we already have the other common options as
flags.  In the meantime, you know about the internal option setting
feature of PCRE syntax, right?  Putting (?s) at the start of the pattern
is equivalent.

  </pre>
</blockquote>
Yes, I've had to use the (? prefixes on language bindings where the
command options were missing.&nbsp; It's a matter of taste, I guess.&nbsp; If
one's not expecting the prefix options, then it's a little more
confusing to read, but if one's accustom to using the prefix options
then they may even prefer that way.<br>
<blockquote cite="mid:20090227083340.GA44689@redoubt.spodhuis.org"
 type="cite">
  <blockquote type="cite">
    <pre wrap="">On the safe side, regarding the possibility of multi-byte characters, 
I'm assuming that the returned offset positions are only for sending 
back to pcre_match and not for indexing on a match string, because the 
offsets are in byte count, not character count.
    </pre>
  </blockquote>
  <pre wrap=""><!---->
This is dubious.  I can see someone quite reasonably using
$var[start,end] for substring extraction; the shell should be internally
consistent.  In a worst-case scenario, there could be another option to
select which offset semantics shall be used.  Peter's work on UTF-8
support has so far managed to keep the user from ever knowing or caring
about this.

Or return four numbers instead of two, so that anyone using the
interface has to be aware of the difference and can think about it.

I'm not coming up with a more elegant solution.

  </pre>
</blockquote>
I understand that the use of UTF-8 is transparent to the Z shell user.&nbsp;
This should mean that any character, whether represented as single or
multi-byte, will be seen as one character position in a user string.&nbsp;
However, the offset numbers that pcre_match will return are
representing byte lengths.&nbsp; If one character position is really two
bytes, then the PCRE offset will be increased by two, and a mismatch
will occur if the user tries to use the offset number for indexing on
their user string.<br>
This is how I understand it, or have I missed something along the way?&nbsp;
I'm not that UTF-8 savvy, so maybe there is a way around this that I'm
not seeing.&nbsp; Also, I would like to have those two extra offset numbers
that represent character positions, but AFAIK, PCRE doesn't provide
that info on a match.<br>
<blockquote cite="mid:20090227083340.GA44689@redoubt.spodhuis.org"
 type="cite">
  <blockquote type="cite">
    <pre wrap="">3.  A needed correction: all of the module's external variables are now 
unset on each match attempt, so that a failed match will be obvious.
    </pre>
  </blockquote>
  <pre wrap=""><!---->
Well, the exit status is set already.  And since the last shell release,
we've documented explicitly that nothing is altered:

2009-01-15:
        * 26312: Phil Pennock: Doc/Zsh/cond.yo, Doc/Zsh/mod_pcre.yo,
        Doc/Zsh/mod_regex.yo: Document no variables altered on failed
        match.

On the other hand, there's value to a reset too.  I don't have a strong
preference either way, but now is the time to fix it, before there's
been a release which documents the behaviour.  :)  Part of the problem
is that pcre_regex has been in Zsh for many years and we tend to be
cautious when changing behaviour.

I doubt that anyone is relying on the value being unchanged after a
match attempt.  Thus the lack of a strong preference.  Anyone else?

While you're at it, there's also the zsh/regex module which uses the
system's normal extended regex libraries and if you're changing the
semantics of one, both should change.

  </pre>
</blockquote>
Right, the exit status should really be checked anyway instead of my
checking the match results.&nbsp; Like so:<br>
~~~~~~<br>
<br>
pcre_match -b -- $body_match<br>
<br>
accum=()<br>
<br>
while [[ $? -eq 0 ]] do<br>
&nbsp;&nbsp;&nbsp; b=($=ZPCRE_OP)<br>
&nbsp;&nbsp;&nbsp; accum+=$match[1]<br>
&nbsp;&nbsp;&nbsp; pcre_match -b -n $b[2] -- $body_match<br>
done<br>
&nbsp;&nbsp;&nbsp; <br>
print -l $accum<br>
<br>
~~~~~~~<br>
I'll change it back, unless others think that the new reset actions are
worth changing to.&nbsp; The standard behavior is sloppy, but then the whole
mechanism is sloppy and it doesn't matter. <br>
<blockquote cite="mid:20090227083340.GA44689@redoubt.spodhuis.org"
 type="cite">
  <blockquote type="cite">
    <pre wrap="">Could someone please point me to the doc files that would need updating 
(for the zshmodule man page), or if someone here has that part 
automated, I can send them whatever targeted write-up they want.
    </pre>
  </blockquote>
  <pre wrap=""><!---->
Doc/Zsh/mod_pcre.yo (and mod_regex.yo), which are in YODL format.

  </pre>
  <blockquote type="cite">
    <pre wrap="">-    ret = pcre_exec(pcre_pattern, pcre_hints, *args, strlen(*args), 0, 0, ovec, ovecsize);
+    ret = pcre_exec(pcre_pattern, pcre_hints, *args, strlen(*args), offset_start, 0, ovec, ovecsize);
    </pre>
  </blockquote>
  <pre wrap=""><!---->
How gracefully does pcre_exec() fail when offset_start is set to a value
larger than the length of the string?  To maxint-smallnumber?

-Phil
  </pre>
</blockquote>
Oops, it fails like a winged elephant.&nbsp; I'll put a check in the next
patch.&nbsp; Thanks Phil.<br>
<br>
<br>
-Jon
</body>
</html>

--------------010000020703020108040507--

