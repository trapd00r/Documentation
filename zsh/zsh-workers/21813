From zsh-workers-return-21813-mason-zsh=primenet.com.au@sunsite.dk Mon Oct 03 16:22:08 2005
Return-Path: <zsh-workers-return-21813-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5330 invoked from network); 3 Oct 2005 16:22:06 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 3 Oct 2005 16:22:06 -0000
Received: (qmail 58320 invoked from network); 3 Oct 2005 16:21:55 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 3 Oct 2005 16:21:55 -0000
Received: (qmail 25383 invoked by alias); 3 Oct 2005 16:21:53 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 21813
Received: (qmail 25374 invoked from network); 3 Oct 2005 16:21:53 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 3 Oct 2005 16:21:52 -0000
Received: (qmail 58039 invoked from network); 3 Oct 2005 16:21:52 -0000
Received: from vms046pub.verizon.net (206.46.252.46)
  by a.mx.sunsite.dk with SMTP; 3 Oct 2005 16:21:51 -0000
Received: from candle.brasslantern.com ([71.116.81.225])
 by vms046.mailsrvcs.net
 (Sun Java System Messaging Server 6.2 HotFix 0.04 (built Dec 24 2004))
 with ESMTPA id <0INS0012XLFCK50F@vms046.mailsrvcs.net> for
 zsh-workers@sunsite.dk; Mon, 03 Oct 2005 11:21:13 -0500 (CDT)
Received: from candle.brasslantern.com (IDENT:schaefer@localhost [127.0.0.1])
	by candle.brasslantern.com (8.12.11/8.12.11) with ESMTP id j93GLBsr004535;
 Mon, 03 Oct 2005 09:21:11 -0700
Received: (from schaefer@localhost)	by candle.brasslantern.com
 (8.12.11/8.12.11/Submit) id j93GLAvt004534; Mon, 03 Oct 2005 09:21:10 -0700
Date: Mon, 03 Oct 2005 16:21:09 +0000
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: Exception handling and "trap" vs. TRAPNAL()
In-reply-to: <20051003090121.GC278@DervishD>
To: DervishD <zsh@dervishd.net>
Cc: zsh-workers@sunsite.dk
Message-id: <1051003162109.ZM4533@candle.brasslantern.com>
MIME-version: 1.0
X-Mailer: Z-Mail (5.0.0 30July97)
Content-type: text/plain; charset=us-ascii
References: <20050929200741.GA1156@DervishD>
	<20050930124130.45eb0463.pws@csr.com>	<20051001153756.GA12183@DervishD>
	<1051001183818.ZM27904@candle.brasslantern.com>
	<20051001202856.GA134@DervishD>
	<1051002044052.ZM28373@candle.brasslantern.com>
	<20051002190940.437F9866F@pwstephenson.fsnet.co.uk>
	<1051002195518.ZM2163@candle.brasslantern.com>	<20051002230027.GA194@DervishD>
	<1051003013758.ZM3107@candle.brasslantern.com>	<20051003090121.GC278@DervishD>
Comments: In reply to DervishD <zsh@dervishd.net>
 "Re: Exception handling and "trap" vs. TRAPNAL()" (Oct  3, 11:01am)
X-Spam-Checker-Version: SpamAssassin 3.0.4 (2005-06-05) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham 
	version=3.0.4

On Oct 3, 11:01am, DervishD wrote:
}
}     I know, I know, but AFAIK the "always" block works more or less
} the same as exception handling does in other languages.

Less, not more.  The problem is that in a language with real exceptions,
the difference between an error and an exception is well-defined, and it
is usually possible to have errors without exceptions and vice-versa.
Zsh's "always" block is an error handler, not an exception handler, and
PWS's functions are overloading the meaning of "error".

} > }   Propagating "errflag" may break current code only if that code is
} > } using an inline trap which "returns" a value and that error value is
} > } ignored on purpose.
} > That's not quite correct.  Remember, an inline trap using the "return"
} > builtin actually causes the surrounding/calling context to return
} 
}     That's why I was quoting "return": I didn't mean a literal
} "return" command, but a way of returning a value to the current code.

Yes, but there *isn't* any way of returning a value to the surrounding
code -- unless you mean something like setting $REPLY.  So your basis
for the statement is a practical impossibility.

} If $? is restored, then there is not easy way of returning the error,
} but that's good because then propagating "errflag" shouldn't break
} current code, am I wrong?

Yes, unfortunately, you're wrong.

}     But if you propagate the error, you won't break such code. I
} mean, even with your patch, this code...
} 
}     trap 'readonly VAR; VAR=0' ZERR
} 
}     print "HERE"
}     false
}     print "HERE AGAIN"
} 
}     ...will print both strings.
   
In 4.0.6, or with my second potential patch, that prints only "HERE"
(plus the error message about the readonly assignment).  In 4.2.5, it
prints both strings.  In bash2, it also prints both strings.  Anything
that relies on the 4.2.5 or bash2 behavior will break if we go back to
propagating the error as was done in 4.0.6.

} O:)) As far as I understan, "errflag" just signals the error and
} propagate it to the current execution environment (for inline traps,
} I mean), but doesn't make the shell abort :?

It doesn't make the shell *exit*, but it does stop execution in the
way that would jump into an "always" block.  (If it did not, how
would it solve your problem?)  In the absence of the "always", it
simply bails out of the current context.  The "always" block is a way
to intercept the "bail out" action, but the bail-out happens whether
"always" is there or not.
 
}     If no patch is applied I can still use TRAPNAL's for throwing
} exceptions, but I must think a way of doing that with inline traps,
} which I think it's impossible because the value of TRY_BLOCK_ERROR is
} reset.

You're right, it's impossible.  You'll have to think about how you
would write the code if you never had "always" in the first place,
and write it that way.

