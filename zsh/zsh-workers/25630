From zsh-workers-return-25630-mason-zsh=primenet.com.au@sunsite.dk Sun Sep 07 08:30:26 2008
Return-Path: <zsh-workers-return-25630-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27383 invoked from network); 7 Sep 2008 08:30:09 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 7 Sep 2008 08:30:09 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 63181 invoked from network); 7 Sep 2008 08:29:46 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 7 Sep 2008 08:29:46 -0000
Received: (qmail 22939 invoked by alias); 7 Sep 2008 08:29:32 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 25630
Received: (qmail 22915 invoked from network); 7 Sep 2008 08:29:29 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 7 Sep 2008 08:29:29 -0000
Received: from mu-out-0910.google.com (mu-out-0910.google.com [209.85.134.186])
	by bifrost.dotsrc.org (Postfix) with ESMTP id AB02E802710B
	for <zsh-workers@sunsite.dk>; Sun,  7 Sep 2008 10:28:58 +0200 (CEST)
Received: by mu-out-0910.google.com with SMTP id g7so916558muf.1
        for <zsh-workers@sunsite.dk>; Sun, 07 Sep 2008 01:28:53 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:user-agent
         :mime-version:to:subject:references:in-reply-to:content-type
         :content-transfer-encoding:from;
        bh=LuHy3YN+cGMJ/6ONeBf6ZRbsSFLXV6jXK3USZv8AM7M=;
        b=Y/R5dMf0CyjSqVYfuTLCqxiW+CoJvIQLO9ZrM4G/G3aj9tmhPoIfU51vgiPd7cTlQq
         +9Qtz3gqV3ulgFk1aA+npNugbx1/qpcMq7cJD+TptmflGmJdW2LMDaMn9EQeFVl4b6u/
         k1w1ibGbZLdHzRfvOwe9cKMrYJJK2O1GADyVU=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlemail.com; s=gamma;
        h=message-id:date:user-agent:mime-version:to:subject:references
         :in-reply-to:content-type:content-transfer-encoding:from;
        b=aDTPMLMj/JzeD6ImQV4fEBdgxsTir1IRKUsOCCyYdxNPR+AWelId11eqqbbG8ZF2Bm
         YC/DnvEgtYWnjElZ/DBdTReAZTAp8UyYnn05g958A3xtSrdQKlPo8MdoPRsCZq6fq4VA
         Pu++/xKxdUD1WZFLZk0RkRHfIDX7kCUdhOlFw=
Received: by 10.103.137.19 with SMTP id p19mr9221850mun.108.1220775808656;
        Sun, 07 Sep 2008 01:23:28 -0700 (PDT)
Received: from ?192.168.1.3? ( [87.123.233.200])
        by mx.google.com with ESMTPS id t10sm3454364muh.16.2008.09.07.01.23.26
        (version=TLSv1/SSLv3 cipher=RC4-MD5);
        Sun, 07 Sep 2008 01:23:27 -0700 (PDT)
Message-ID: <48C38F88.9040202@gmail.com>
Date: Sun, 07 Sep 2008 10:23:36 +0200
User-Agent: Thunderbird 2.0.0.14 (X11/20080728)
MIME-Version: 1.0
To: zsh-workers@sunsite.dk
Subject: [PATCH] compsys maps anonymous memory and never frees it
References: <48BDF1EC.4050204@gmail.com>	<080902200652.ZM9887@torch.brasslantern.com>	<682f90440809031604j5e349af2q8d40f24fc429dcc3@mail.gmail.com> <080904072526.ZM12341@torch.brasslantern.com>
In-Reply-To: <080904072526.ZM12341@torch.brasslantern.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 8bit
From: =?ISO-8859-1?Q?=22xRaich=5Bo=5D=B2x=22?= <raichoo@googlemail.com>
X-Virus-Scanned: ClamAV 0.92.1/8177/Sun Sep  7 06:29:39 2008 on bifrost
X-Virus-Status: Clean

Bart Schaefer wrote:
> On Sep 4,  1:04am, =?ISO-8859-1?Q?Bj=F6rn_Herzig?= wrote:
> }
> } I looked at the problem a little closer. Zsh does not call mmap to
> } allocate them and they dont get allocated when completion happens but
> } when the next command gets issued.
>
> If this is true, then this is something happening down in the library
> or kernel implementation of fork() and is out of zsh's control.
>
> Did you build zsh yourself?  Can you check config.h for USE_MMAP ?
> If USE_MMAP is defined then anytime zsh parses a command it will have
> called mmap() to allocate zsh-heap space.  You can try reconfiguring
> with --enable-zsh-mem and then check the pmap behavior again.
>
> } So in my example the new maps got added to the process' address space
> } when i executed pmap, but the same happens with any other programm.
> } Builtins however are an exception. So things start to go wrong when it
> } comes to forking.
>
> If you run pmap from another shell window rather than executing it
> from within the shell whose map you're examining, does the behavior
> change at all?
>
> My only guess goes something like this:
>
> Zsh has mapped memory for the heap during parsing etc.  Those pages
> have had data written and therefore are marked "dirty".  When fork()
> is called, those pages become shared address space with the child
> process.  Zsh munmap()s them later but they aren't returned to the
> system because the child process is still using them.
>
> I'm not really happy with any of these explanations yet.
>
>   

Ok, i found it.... after wandering around in a few deadends and getting 
some stuff wrong... but well.

i did the following change to mem.c

mod_export void
old_heaps(Heap old)
{
    Heap h, n;

    queue_signals();
    for (h = heaps; h; h = n) {
    n = h->next;
    DPUTS(h->sp, "BUG: old_heaps() with pushed heaps");
#ifdef USE_MMAP
    //munmap((void *) h, sizeof(*h));
    munmap((void *) h, h->size);
#else
    //zfree(h, sizeof(*h));
    zfree(h, h->size);
#endif
    }
    heaps = old;
    fheap = NULL;
    unqueue_signals();
}

this might open up a can of worms. i don't know where this is going to 
blow up, but i'm pretty sure it will. but well... it seems to work.
old_heaps tried to unmap a 16384 bytes big segment by calling 
munmap(...,sizeof(h*)) which is 16 and left the rest in memory (which 
explains why the segments wasn't added explicitly).

Here is the dtrace script that finally caught the bug, if someone is 
interested:

#!/usr/sbin/dtrace -s

BEGIN
{
    printf("\nTarget is : %d\nSegement is %X\n",$target, $1);
}

syscall::mmap64:return
/arg1 == $1 && pid == $target/
{
    printf("mmap returns: %x",arg1);
    self->triggered = 1;
}

pid$target:zsh:dupstring:return
/self->triggered == 1/
{
    printf("Dupstring: %s",copyinstr(arg1));
    self->triggered = 0;
}

syscall::mmap64:entry
/pid == $target/
{
    printf("mmap size: %d",arg1);
}

syscall::munmap:entry
/arg0 == $1 && pid == $target/
{
    printf("munmap size: %d\n",arg1);
    ustack();
    self->munmapping = 1;
}

syscall::munmap:return
/self->munmapping/
{
    printf("Result of munmapping the segment in question was: %d",arg1);
    self->munmapping = 0;
}

fbt::as_removeseg:entry
/execname == "zsh" && ((struct seg*)arg1)->s_base == (caddr_t)$1/
{
    printf("\nGot removed");
    ustack(50);
    stack();
    exit(0);
}

fbt::as_addseg:entry
/execname == "zsh" && ((struct seg*)arg1)->s_base == (caddr_t)$1/
{
    printf("\nGot added");
    ustack();
    stack();
}

Regards,
Björn

