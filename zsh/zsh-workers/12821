From zsh-workers-return-12821-mason-zsh=primenet.com.au@sunsite.auc.dk Sun Sep 17 15:05:19 2000
Return-Path: <zsh-workers-return-12821-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 20088 invoked from network); 17 Sep 2000 15:05:07 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 17 Sep 2000 15:05:07 -0000
Received: (qmail 10013 invoked by alias); 17 Sep 2000 15:04:30 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 12821
Received: (qmail 10006 invoked from network); 17 Sep 2000 15:04:30 -0000
Date: Sun, 17 Sep 2000 11:04:03 -0400
From: Clint Adams <schizo@debian.org>
To: Bart Schaefer <schaefer@candle.brasslantern.com>
Cc: zsh-workers@sunsite.auc.dk
Subject: Re: PATCH: zasprintf
Message-ID: <20000917110403.A4270@dman.com>
References: <20000916145333.A29559@dman.com> <1000917004721.ZM18698@candle.brasslantern.com> <20000917002552.A31354@dman.com> <1000917053751.ZM18817@candle.brasslantern.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
User-Agent: Mutt/1.1.2i
In-Reply-To: <1000917053751.ZM18817@candle.brasslantern.com>; from schaefer@candle.brasslantern.com on Sun, Sep 17, 2000 at 05:37:50AM +0000

> I don't think it's impossible either, but the only way to "provide a
> compatibility function for vsnprintf()" is to implement a parser for
> printf format-strings.  There simply is no way to fake it if you don't

Which is not unheard of.  sendmail, for example, has compatibility
snprintf/vsnprintf functions.

> have it.  I don't believe there's any use zsh could make of asprintf()
> that isn't better solved another way.  In particular:

If by "better" you mean "avoiding asprintf and dealing with a specialized
case."

> I don't have any such confidence that asprintf() would be cleaner or more
> efficient than, say, a realloc'ing version of tricat() that takes a char**
> to an allocated string as its first parameter.

Why, other than portability?  The difference in speed between asprintf()
and the real tricat() is negligible.

Speaking of the real tricat, this eliminates bin_dot's dependence on PATH_MAX:

Index: Src/builtin.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/builtin.c,v
retrieving revision 1.32
diff -u -r1.32 builtin.c
--- Src/builtin.c	2000/09/14 15:55:00	1.32
+++ Src/builtin.c	2000/09/17 14:27:56
@@ -3250,11 +3250,10 @@
 {
     char **old, *old0 = NULL;
     int ret, diddot = 0, dotdot = 0;
-    char buf[PATH_MAX];
-    char *s, **t, *enam, *arg0;
+    char *s, **t, *enam, *arg0, *buf;
     struct stat st;
 
-    if (!*argv || strlen(*argv) >= PATH_MAX)
+    if (!*argv)
 	return 0;
     old = pparams;
     /* get arguments for the script */
@@ -3295,18 +3294,18 @@
 		    if (diddot)
 			continue;
 		    diddot = 1;
-		    strcpy(buf, arg0);
-		} else {
-		    if (strlen(*t) + strlen(arg0) + 1 >= PATH_MAX)
-			continue;
-		    sprintf(buf, "%s/%s", *t, arg0);
-		}
+		    buf = ztrdup(arg0);
+		} else
+		    buf = tricat(*t, "/", arg0);
+
 		s = unmeta(buf);
 		if (access(s, F_OK) == 0 && stat(s, &st) >= 0
 		    && !S_ISDIR(st.st_mode)) {
 		    ret = source(enam = buf);
+		    zsfree(buf);
 		    break;
 		}
+		zsfree(buf);
 	    }
 	}
     }

