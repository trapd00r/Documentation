From zsh-users-return-11580-mason-zsh=primenet.com.au@sunsite.dk Sun Jun 17 00:33:47 2007
Return-Path: <zsh-users-return-11580-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24735 invoked from network); 17 Jun 2007 00:33:44 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.1 (2007-05-02) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.1
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 17 Jun 2007 00:33:44 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 44408 invoked from network); 17 Jun 2007 00:33:38 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 17 Jun 2007 00:33:38 -0000
Received: (qmail 18309 invoked by alias); 17 Jun 2007 00:33:23 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 11580
Received: (qmail 18300 invoked from network); 17 Jun 2007 00:33:18 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 17 Jun 2007 00:33:18 -0000
Received: (qmail 43069 invoked from network); 17 Jun 2007 00:33:18 -0000
Received: from vms048pub.verizon.net (206.46.252.48)
  by a.mx.sunsite.dk with SMTP; 17 Jun 2007 00:33:15 -0000
Received: from torch.brasslantern.com ([71.116.90.58])
 by vms048.mailsrvcs.net (Sun Java System Messaging Server 6.2-6.01 (built Apr
 3 2006)) with ESMTPA id <0JJR00BG78664C81@vms048.mailsrvcs.net> for
 zsh-users@sunsite.dk; Sat, 16 Jun 2007 19:32:32 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id l5H0WOjW013589	for
 <zsh-users@sunsite.dk>; Sat, 16 Jun 2007 17:32:25 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id l5H0WNuY013588	for zsh-users@sunsite.dk; Sat,
 16 Jun 2007 17:32:23 -0700
Date: Sat, 16 Jun 2007 17:32:23 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: incr. search: skip duplicates on the same history event
In-reply-to: <20070616183107.GC5199@fsst.voodoo.lan>
In-reply-to: <2d460de70706161203l4665a1a1q6ff27e25162fb5d3@mail.gmail.com>
To: zsh users <zsh-users@sunsite.dk>
Message-id: <070616173223.ZM13587@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <20070616183107.GC5199@fsst.voodoo.lan>
	<2d460de70706161203l4665a1a1q6ff27e25162fb5d3@mail.gmail.com>
Comments: In reply to Frank Terbeck <ft@bewatermyfriend.org>
 "incr. search: skip duplicates on the same history event" (Jun 16,  8:31pm)
Comments: In reply to "Richard Hartmann" <richih.mailinglist@gmail.com>
 "Re: incr. search: skip duplicates on the same history event" (Jun 16,  9:03pm)

On Jun 16,  8:31pm, Frank Terbeck wrote:
}
} Now, the idea is to after searching backwards for the first time
} (^Rmake), hitting ^R again, to go further backwards should ignore any
} other occurrences of 'make' in the current history event and jump
} directly to the next history event containing 'make' ('make depend')
} in the example above.

On Jun 16,  9:03pm, Richard Hartmann wrote:
} 
} I would like to add that, ideally, the ^R should jump to make clean, not
} make install (if possible).

This is very difficult.  There's no non-interactive history-search
operation that leaves the cursor at the word that was found, and the
incremental search won't let you "interrupt" it to force the cursor
farther towards the beginning of the line until the *next* character
is typed *after* it has stopped at the match near the end of the line.

On Jun 16,  8:31pm, Frank Terbeck wrote:
} 
} So, I took another approach and the closest I got (which works) is the
} following. It exists the incremental search and re-enters it if you
} continue typing. That is not an exceptionally nice solution and it
} would require additional tweaking to become usable.

Unfortunately that's probably the best approach to take without a lot
of work.  If history-incremental-search-* were implemented with real
widgets and a named keymap, you could copy the keymap, selectively
replace some widgets, and be on your way; but instead it's implemented
by hijacking specific widget names internally, so replacing them has no
effect within an incremental search in progress.

Another complication is that a wrapper for history-incremental-search-*
has to handle its own looping.  I'm not precisely sure what's going on,
but pressing the key that's bound to incsearch (which would, from the
top level, exit history-incremental-search-backward and execute your
widget) merely interrupts the search and returns control to the wrapper
*unless* the call to the wrapper *is* the first one (from the top level),
in which case one nested call is OK.  Maybe it has something to do with
whether an argument is passed to history-incremental-search-backward.

Then there are the strangenesses of up-line-* and beginning-of-line
behaving differently in multi-line buffers vs. single-line buffers, etc.
Perhaps the most annoying is that if the cursor is already on the first
character of a string matching the argument search pattern, you have
to invoke the search twice to move the cursor to the next occurrence
-- which means that in the wrapper function you *must* move the cursor
before trying another search -- which means moving up a history entry if
you're at the beginning of one -- so it's impossible to leave the buffer
unchanged when the search fails, though you can restore the old buffer
once the search is abandoned.

Having taken about 10 different stabs at this without really getting
any of them working any better than what Frank posted, I'm going to
leave this to someone with the patience to actually populate an entire
keymap.

