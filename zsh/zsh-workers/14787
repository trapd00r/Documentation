From zsh-workers-return-14787-mason-zsh=primenet.com.au@sunsite.dk Thu Jun 07 13:18:10 2001
Return-Path: <zsh-workers-return-14787-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 522 invoked from network); 7 Jun 2001 13:18:08 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 7 Jun 2001 13:18:08 -0000
Received: (qmail 11462 invoked by alias); 7 Jun 2001 13:17:43 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14787
Received: (qmail 11448 invoked from network); 7 Jun 2001 13:17:42 -0000
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
Date: Thu, 7 Jun 2001 15:16:39 +0200 (MET DST)
Message-Id: <200106071316.PAA27682@beta.informatik.hu-berlin.de>
To: zsh-workers@sunsite.dk
Subject: Re: Modules dependencies RE: PATCH: zftp/tcp abstraction
In-Reply-To: <E157wrq-0005Ck-00@bowl.fysh.org>

Zefram wrote:

> ...
> 
> Neither of my solutions is completely satisfactory, but it now seems that
> we are making sufficient use of interdependent modules that we need some
> form of implicit dependencies.

I've thought about this, too, when I started working with modules.  On
systems supporting RTLD_LAZY it should be possible to have the setup_
function call back the core to load needed modules, shouldn't it?

The other thing I was thinking about is to define a string or a symbol
with a defined prefix that contains the dependencies.  The core could
then scan the module binary to find out which modules to load first
(searching for the prefix and using the rest of the string).

But if we can't make sure that the string/symbol is near the beginning
of the module file, this isn't fun, of course.


Bye
  Sven


-- 
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

