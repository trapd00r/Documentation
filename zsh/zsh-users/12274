From zsh-users-return-12274-mason-zsh=primenet.com.au@sunsite.dk Mon Dec 03 01:12:11 2007
Return-Path: <zsh-users-return-12274-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 26915 invoked from network); 3 Dec 2007 01:12:02 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.3 (2007-08-08) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.3
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 3 Dec 2007 01:12:02 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 52957 invoked from network); 3 Dec 2007 01:11:55 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 3 Dec 2007 01:11:55 -0000
Received: (qmail 3708 invoked by alias); 3 Dec 2007 01:11:39 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12274
Received: (qmail 3690 invoked from network); 3 Dec 2007 01:11:38 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 3 Dec 2007 01:11:38 -0000
Received: (qmail 51585 invoked from network); 3 Dec 2007 01:11:38 -0000
Received: from vinc17.pck.nerim.net (HELO prunille.vinc17.org) (213.41.242.187)
  by a.mx.sunsite.dk with SMTP; 3 Dec 2007 01:11:32 -0000
Received: by prunille.vinc17.org (Postfix, from userid 501)
	id EAED01C218E9; Mon,  3 Dec 2007 02:11:31 +0100 (CET)
Date: Mon, 3 Dec 2007 02:11:31 +0100
From: Vincent Lefevre <vincent@vinc17.org>
To: zsh-users@sunsite.dk
Subject: Re: command substitution: zsh waits until command exits
Message-ID: <20071203011131.GT5855@prunille.vinc17.org>
Mail-Followup-To: zsh-users@sunsite.dk
References: <20071130133943.GG5855@prunille.vinc17.org> <071130073719.ZM18090@torch.brasslantern.com> <20071130163155.GL5855@prunille.vinc17.org> <071130185827.ZM18402@torch.brasslantern.com> <20071202021652.GO5855@prunille.vinc17.org> <071201210744.ZM20044@torch.brasslantern.com> <20071202152254.GP5855@prunille.vinc17.org> <071202102717.ZM2757@torch.brasslantern.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <071202102717.ZM2757@torch.brasslantern.com>
X-Mailer-Info: http://www.vinc17.org/mutt/
User-Agent: Mutt/1.5.17-vl-r19795 (2007-11-30)

On 2007-12-02 10:27:15 -0800, Bart Schaefer wrote:
> On Dec 2,  4:22pm, Vincent Lefevre wrote:
> } The substituted command doesn't need to be finished to be able to
> } build the argument list: its standard output just needs to be closed
> } (which is what I did in my example).
> 
> This discussion is getting sort of cyclical.  It doesn't work that way.
> It doesn't work that way in any other shell, either, never has, and
> although I don't have it handy I'm pretty sure the POSIX spec would
> prohibit it from working that way.

POSIX just says:

  The shell shall expand the command substitution by executing command
  in a subshell environment (see Shell Execution Environment) and
  replacing the command substitution (the text of command plus the
  enclosing "$()" or backquotes) with the standard output of the
  command, removing sequences of one or more <newline>s at the end of
  the substitution. Embedded <newline>s before the end of the output
  shall not be removed; however, they may be treated as field
  delimiters and eliminated during field splitting, depending on the
  value of IFS and quoting that is in effect.

I don't think this is prohibited. Even pipeline completion is
implementation defined:

  If the pipeline is not in the background (see Asynchronous Lists),
  the shell shall wait for the last command specified in the pipeline
  to complete, and may also wait for all commands to complete.
                   ^^^

> You'll also note that even though "cat" finishes in
> 
>    { echo ab; exec 1>&-; sleep 5 } | cat
> 
> the parent shell does not return to a prompt until the sleep finishes.

Yes, and POSIX shells can choose to return immediately (see above).

> That's the real analogy to what's happening with $(...).

In which case, you should agree that a POSIX shell may do the
substitution while the command has not terminated (if the standard
output has been closed, of course).

Now, in both cases, zsh should document what it's doing.

> This seems to do what you want by restoring the interactive handlers:
> 
> echo $(coproc xterm -e 'zsh -fic "tty >&3 ; exec sleep 999999"' 3>&1 ;
>        read -E <&p)
> 
> Or this, which doesn't rely on coproc:
> 
> echo $({ xterm -e 'zsh -fic "tty >&3 ; exec sleep 999999"' 3>&1 & } |
>        read -E)

Both are working. Is there one of them that is better?

> The zsh -fic is still needed there so I think it may be $(...) that's
> ignoring interrupts, which possibly it should not do.

FYI, under Mac OS X, with both

echo $({ xterm -e 'sh -c "tty >&3 ; exec sleep 999999"' 3>&1 & } | read -E)

and

echo $({ xterm -e 'sh -ic "tty >&3 ; exec sleep 999999"' 3>&1 & } | read -E)

Ctrl-C is ignored (but Ctrl-\ still works).

> } > Incidentally I use this little function all the time:
> } > 
> } > gdbterm () {
> } >     xterm -title GDBterm -e sh -c 'exec xterm -e gdb --tty=$(tty) '"$*"
> } > }
> } 
> } but that's specific to gdb. And why starting two xterms?
> 
> GDB runs in one, and the command run by GDB uses the other for I/O, and
> both of them close together when I exit GDB because the I/O xterm is the
> parent waiting for completion of the GDB xterm.

Thanks, that's interesting to know. It could be useful for me too...

-- 
Vincent Lefèvre <vincent@vinc17.org> - Web: <http://www.vinc17.org/>
100% accessible validated (X)HTML - Blog: <http://www.vinc17.org/blog/>
Work: CR INRIA - computer arithmetic / Arenaire project (LIP, ENS-Lyon)

