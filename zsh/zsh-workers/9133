From zsh-workers-return-9133-mason-zsh=primenet.com.au@sunsite.auc.dk Wed Dec 22 10:48:08 1999
Return-Path: <zsh-workers-return-9133-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 10071 invoked from network); 22 Dec 1999 10:48:07 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 22 Dec 1999 10:48:07 -0000
Received: (qmail 14639 invoked by alias); 22 Dec 1999 10:48:00 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 9133
Received: (qmail 14629 invoked from network); 22 Dec 1999 10:47:48 -0000
Subject: Re: More tests
In-Reply-To: <E120XrM-00073o-00.1999-12-21-22-34-25@mail4.svr.pol.co.uk> from
 Peter Stephenson at "Dec 21, 1999 10:35:40 pm"
To: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Date: Wed, 22 Dec 1999 10:47:31 +0000 (GMT)
CC: Zsh hackers list <zsh-workers@sunsite.auc.dk>
X-Mailer: ELM [version 2.4ME+ PL65 (25)]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Message-Id: <E120jIp-0000Nf-00@crucigera.fysh.org>
From: Zefram <zefram@fysh.org>

Peter Stephenson wrote:
>2. There's something wrong with synchronisation in multios:
>% print hello >foo >bar && print "$(<foo)"
>

What happens here is that stdout for the first print is a pipe to a
process doing what amounts to a tee.  After the print, that pipe gets
closed, the tee process notices this and exits, after it's written all
the pending data to its outputs.  However, this is fundamentally done
asynchronously.  Closing the tee's input does not immediately force
the tee to complete.  Quite feasibly, the print could send its output
and close tee's input and then the empty foo gets read, all in a single
timeslice, before tee has had a chance to look at its input.

To fix this, closing the redirected fd would have to also wait for the
tee process to exit.  This should be doable by storing pids in the save
array and waiting in fixfds().  There's also the subtlety of nested tees
to handle.  Might be easier just to save all the necessary pids in a
single linked list, separately from the saved fd information; we don't
really need to correlate them.

There's a similar issue with input multios.  The closing of the multio fd
should guarantee that all the input files have been closed.  This could
be done most easily by directly killing the cat process (at this point,
we *want* to lose any data it has buffered).

-zefram

