From zsh-workers-return-27607-mason-zsh=primenet.com.au@zsh.org Tue Jan 19 22:46:48 2010
Return-Path: <zsh-workers-return-27607-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 17284 invoked by alias); 19 Jan 2010 22:46:48 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 27607
Received: (qmail 19244 invoked from network); 19 Jan 2010 22:46:46 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,DKIM_SIGNED,
	DKIM_VERIFIED autolearn=ham version=3.2.5
Received-SPF: pass (ns1.primenet.com.au: SPF record at _spf.google.com designates 209.85.218.216 as permitted sender)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:sender:received:in-reply-to
         :references:date:x-google-sender-auth:message-id:subject:from:to
         :content-type:content-transfer-encoding;
        bh=Ve2Iwx087rmsJnmSSdV8Jc6GchR7V701gn6MwDyTBFE=;
        b=RJM95ye59Ri2ZI7geXqFixE4yfgqOlDz01ghcCcIALcuM3g4sKZoIwkY112bNZvFtS
         bZmTwEx8cPomjOmpJs0QMVPQSRUT/m4t/mqf2n86Zq2kASVvTd8GbLJQKptAUuj/DyNF
         ti39nF40FodZo1GpTUDG5TFvGUmnMlW87MuJk=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:sender:in-reply-to:references:date
         :x-google-sender-auth:message-id:subject:from:to:content-type
         :content-transfer-encoding;
        b=GOs25Saqjy3zHuzh4yNhy7/ur31r+QtCzpbXUCja15sXuLlegNf4iSxINknPqi7CTN
         6BbuNijrdi/7yT+FzsWe0YqFMKJVcxK7y5Ju+ZF9ouhCpOF2cO6oqS+KlVWv3hCqggZb
         hV4ALh80+4kF1TUINbkI2ERjKOO/4iiTw0FPA=
MIME-Version: 1.0
Sender: ethersoft@gmail.com
In-Reply-To: <20a807211001191445x5924b63frc6916febda023502@mail.gmail.com>
References: <20a807211001191316x79ce2ffeib91fdc59cdfcb189@mail.gmail.com>
	 <20a807211001191342i4b1d8d63o9bede714f1831477@mail.gmail.com>
	 <20a807211001191445x5924b63frc6916febda023502@mail.gmail.com>
Date: Tue, 19 Jan 2010 17:46:43 -0500
X-Google-Sender-Auth: 26ff9d00c55a50b0
Message-ID: <20a807211001191446y4a16143eg3014207f8c8e609c@mail.gmail.com>
Subject: Fwd: Test Failure
From: Vin Shelton <acs@alumni.princeton.edu>
To: zsh-workers@zsh.org
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Dear zsh-workers,

Since 2010-01-17, I've been getting a failure in the test suite:

: build/zsh-2010-01-17 Tue 19 16:09; make check
**************************************
37 successful test scripts, 1 failure, 0 skipped
**************************************
make[1]: *** [check] Error 1
make[1]: Leaving directory `/home/opt/build/zsh-2010-01-17/Test'
make: *** [check] Error 2

C02 doesn't report an error, but it doesn't report a pass, either.

Here is the tail of the test C02 run with verbosity =3D 2 (the entire
trace bounced because the message was too big). =A0Please let me know if
you need more info.

=A0- Vin


Running test: argument checking for test builtin
ZTST_test: expecting status: 1
Input: /tmp/zsh.ztst.in.6558, output: /tmp/zsh.ztst.out.6558, error:
/tmp/zsh.ztst.terr.6558
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
(eval):test:1: too many arguments
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
=A0[ -n foo -a -n bar scrimble ]
ZTST_getchunk: read code chunk:
=A0[ -n foo -a -n bar scrimble ]
ZTST_test: examining line:
?(eval):[:1: too many arguments
ZTST_getredir: read redir for '?':
(eval):[:1: too many arguments
ZTST_test: examining line:

Running test: argument checking for [ builtin
ZTST_test: expecting status: 1
Input: /tmp/zsh.ztst.in.6558, output: /tmp/zsh.ztst.out.6558, error:
/tmp/zsh.ztst.terr.6558
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
(eval):[:1: too many arguments
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
=A0test -n foo -a -z "" scramble
ZTST_getchunk: read code chunk:
=A0test -n foo -a -z "" scramble
ZTST_test: examining line:
?(eval):test:1: too many arguments
ZTST_getredir: read redir for '?':
(eval):test:1: too many arguments
ZTST_test: examining line:

Running test: argument checking for test builtin
ZTST_test: expecting status: 1
Input: /tmp/zsh.ztst.in.6558, output: /tmp/zsh.ztst.out.6558, error:
/tmp/zsh.ztst.terr.6558
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
(eval):test:1: too many arguments
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
=A0fn() {
ZTST_getchunk: read code chunk:
=A0fn() {
=A0 =A0# careful: first file must exist to trigger bug
=A0 =A0[[ -e unmodified ]] || print Where\'s my file\?
=A0 =A0[[ unmodified -nt NonExistentFile ]]
=A0 =A0print status =3D $?
=A0}
=A0fn
ZTST_test: examining line:
>status =3D 1
ZTST_getredir: read redir for '>':
status =3D 1
ZTST_test: examining line:

Running test: -nt shouldn't abort on non-existent files
ZTST_test: expecting status: 0
Input: /tmp/zsh.ztst.in.6558, output: /tmp/zsh.ztst.out.6558, error:
/tmp/zsh.ztst.terr.6558
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
status =3D 1
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
=A0if zmodload -i zsh/regex 2>/dev/null; then
ZTST_getchunk: read code chunk:
=A0if zmodload -i zsh/regex 2>/dev/null; then
=A0 =A0 echo >regex_test.sh 'if [[ $# =3D 1 ]]; then
=A0 =A0 =A0 =A0if [[ $1 =3D~ /?[^/]+:[0-9]+:$ ]]; then
=A0 =A0 =A0 =A0 =A0:
=A0 =A0 =A0 =A0fi
=A0 =A0 =A0fi
=A0 =A0 =A0exit 0'
=A0 =A0 =A0$ZTST_testdir/../Src/zsh -f ./regex_test.sh
=A0fi
ZTST_test: examining line:

Running test: regex tests shouldn't crash
ZTST_test: expecting status: 0
Input: /tmp/zsh.ztst.in.6558, output: /tmp/zsh.ztst.out.6558, error:
/tmp/zsh.ztst.terr.6558
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
=A0if zmodload -i zsh/regex 2>/dev/null; then
ZTST_getchunk: read code chunk:
=A0if zmodload -i zsh/regex 2>/dev/null; then
=A0 =A0string=3D"this has stuff in it"
=A0 =A0bad_regex=3D0
=A0 =A0if [[ $string =3D~ "h([a-z]*) s([a-z]*) " ]]; then
=A0 =A0 =A0if [[ "$MATCH $MBEGIN $MEND" !=3D "has stuff =A06 15" ]]; then
=A0 =A0 =A0 =A0print -r "regex variables MATCH MBEGIN MEND:
=A0'$MATCH $MBEGIN $MEND'
=A0should be:
=A0'has stuff =A06 15'" >&2
=A0 =A0 =A0 =A0bad_regex=3D1
=A0 =A0 =A0else
=A0 =A0 =A0 =A0results=3D("as 7 8" "tuff 11 14")
=A0 =A0 =A0 =A0for i in 1 2; do
=A0 =A0 =A0 =A0 =A0if [[ "$match[$i] $mbegin[$i] $mend[$i]" !=3D $results[i=
] ]]; then
=A0 =A0 =A0 =A0 =A0 =A0print -r "regex variables match[$i] mbegin[$i] mend[=
$i]:
=A0'$match[$i] $mbegin[$i] $mend[$i]'
=A0should be
=A0'$results[$i]'" >&2
=A0 =A0 =A0 =A0 =A0 =A0break
=A0 =A0 =A0 =A0 =A0fi
=A0 =A0 =A0 =A0done
=A0 =A0 =A0fi
=A0 =A0else
=A0 =A0 =A0print -r "regex failed to match '$string'" >&2
=A0 =A0fi
=A0 =A0(( bad_regex )) || print OK
=A0else
=A0 =A0# if it didn't load, tough, but not a test error
=A0 =A0print OK
=A0fi
ZTST_test: examining line:
>OK
ZTST_getredir: read redir for '>':
OK
ZTST_test: examining line:

Running test: MATCH, MBEGIN, MEND, match, mbegin, mend
ZTST_test: expecting status: 0
Input: /tmp/zsh.ztst.in.6558, output: /tmp/zsh.ztst.out.6558, error:
/tmp/zsh.ztst.terr.6558
**************************************
0 successful test scripts, 1 failure, 0 skipped
**************************************
make[1]: Leaving directory `/home/opt/build/zsh-2010-01-17/Test'

Regards,
=A0Vin

