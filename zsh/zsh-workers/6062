From zsh-workers-return-6062-mason-zsh=primenet.com.au@sunsite.auc.dk Tue Apr 20 14:18:11 1999
Return-Path: <zsh-workers-return-6062-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 3805 invoked from network); 20 Apr 1999 14:18:09 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 20 Apr 1999 14:18:09 -0000
Received: (qmail 14931 invoked by alias); 20 Apr 1999 14:17:41 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 6062
Received: (qmail 14878 invoked from network); 20 Apr 1999 14:17:35 -0000
Date: Tue, 20 Apr 1999 16:17:30 +0200 (MET DST)
Message-Id: <199904201417.QAA23159@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: Peter Stephenson's message of Tue, 20 Apr 1999 14:36:31 +0200
Subject: Re: compstate[old_list]


Peter Stephenson wrote:

> Sven Wischnowsky wrote:
> > Peter Stephenson wrote:
> > 
> > > But when I start a non-contextual completion, and the list is displayed by
> > > autolist, and I then type ^D, this doesn't work --- it seems
> > > $compstate[old_list] is not set.  Is this just me?
> > 
> > This was caused in zle_main.c, which I obviously forgot to change.
> 
> I didn't notice to begin with, but this seems to have the opposite effect.
> If I do a non-contextual completion, every completion-based command
> following it always acts as if it were using the old list, and
> _main_complete never gets called at all (I checked that the widget I first
> used wasn't being called again, either).  This even happens to the extent
> that calling a different ad-hoc completion when menucompletion is active
> still simply cycles through the existing list.  The default should
> presumably be to call the appropriate widget and allow the shell code to
> decide whether to re-use the old list (though it's quite convenient that
> TAB will now cycle through the ad-hoc completion list, which might be
> harder to do in the shell code where it belongs).

Uh, err... hm.

For now I don't know how to change it. This is an effect of
menucompletion being set. Without menucompletion, the other completion 
widgets get called all right. But with menucompletion and the ad-hoc
completion widget not behaving like `list-choices' or `delete-char-or-list',
the test in zle_tricky:759 keeps the next completion widget from being
called.

Hm. maybe if we move the test I removed zle_main.c to this place...

Could you play with it and tell me if this is better?

Bye
 Sven

diff -u os/Zle/zle_tricky.c Src/Zle/zle_tricky.c
--- os/Zle/zle_tricky.c	Tue Apr 13 10:32:15 1999
+++ Src/Zle/zle_tricky.c	Tue Apr 20 16:15:12 1999
@@ -72,6 +72,10 @@
 
 static int offs;
 
+/* the last completion widget called */
+
+static Widget lastcompwidget;
+
 /* These control the type of completion that will be done.  They are      *
  * affected by the choice of ZLE command and by relevant shell options.   *
  * usemenu is set to 2 if we have to start automenu and 3 if we have to   *
@@ -756,10 +760,12 @@
 
     /* If we are doing a menu-completion... */
 
-    if (menucmp && lst != COMP_LIST_EXPAND) {
+    if (menucmp && lst != COMP_LIST_EXPAND && compwidget &&
+	compwidget == lastcompwidget) {
 	do_menucmp(lst);
 	return;
     }
+    lastcompwidget = compwidget;
 
     /* We may have to reset the cursor to its position after the   *
      * string inserted by the last completion. */

--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

