From zsh-users-return-15001-mason-zsh=primenet.com.au@zsh.org Sat Apr 10 20:05:33 2010
Return-Path: <zsh-users-return-15001-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24456 invoked by alias); 10 Apr 2010 20:05:33 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15001
Received: (qmail 5319 invoked from network); 10 Apr 2010 20:05:31 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <100410130524.ZM17378@torch.brasslantern.com>
Date: Sat, 10 Apr 2010 13:05:24 -0700
In-reply-to: <hpqcvj$avi$1@dough.gmane.org>
Comments: In reply to Thorsten Kampe <thorsten@thorstenkampe.de>
 "How to iterate over lines cross-platform" (Apr 10,  7:36pm)
References: <hpqcvj$avi$1@dough.gmane.org>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@zsh.org
Subject: Re: How to iterate over lines cross-platform
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Apr 10,  7:36pm, Thorsten Kampe wrote:
}
} How can I iterate over lines of output when I don't know in advance 
} whether the line endings will be DOS or Unix?!

You might have better luck if you do not change IFS from the default,
and use this:

slptool findscopes |
while read scope; do
    slptool -s "$scope" findsrvtypes |
    while read srvtype; do
        [inner loop]
    done
done

It should be the case that "read" does the right thing with line ends.

} The reason is that the slptool on Windows is a native Win32 
} application that outputs lines with "\r\n" endings (and not "\n").

I believe this means that "$scope" has a trailing "\r" and therefore
slptool -s "$scope" doesn't find a matching scope.  If it turns out
that "read" also mishandles things, use ${scope%$'\r'} to trim.
 
} So I simply set "IFS=$'\r\n'" and now the output is correct - but the 
} scipt goes through an additional iteration for each loop

Yes, as you suspected, IFS=$'\r\n' means that each of "\r" and "\n" is
individually taken as a separator, so "foo\r\n" splits into "foo" and
(empty string).

