From zsh-users-return-14616-mason-zsh=primenet.com.au@zsh.org Mon Nov 30 06:15:23 2009
Return-Path: <zsh-users-return-14616-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29432 invoked by alias); 30 Nov 2009 06:15:23 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14616
Received: (qmail 25209 invoked from network); 30 Nov 2009 06:15:19 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=AWL,BAYES_00,PLING_QUERY
	autolearn=no version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <091129211436.ZM1769@torch.brasslantern.com>
Date: Sun, 29 Nov 2009 21:14:36 -0800
In-reply-to: <m3638sr72x.fsf_-_@klanderman.net>
Comments: In reply to Greg Klanderman <gak@klanderman.net>
 "unable to wait on completed job [was: should $! give the pid of subshell?]"
 (Nov 29, 11:04pm)
References: <19213.26295.345572.732238@gargle.gargle.HOWL>
	<200911251748.nAPHmrCX010198@news01.csr.com>	<m3638sr72x.fsf_-_@klanderman.net>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@zsh.org
Subject: Re: unable to wait on completed job [was: should $! give the pid of
 subshell?]
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Nov 29, 11:04pm, Greg Klanderman wrote:
} Subject: unable to wait on completed job [was: should $! give the pid of s
} 
} Shouldn't I be able to wait on a job that has completed in zsh?

I'd be inclined to respond "only if you set the POSIX_JOBS option," but
that doesn't appear to suffice either (and in fact has a bug).

In any case this is one of those places where zsh does not claim full
compatibility with POSIX.

} Using bash or ksh, I can successfully wait on the completed job.

Hmm.  [The extra "exit 19" below is so I could check whether bash
correctly reports the status of the waited-for PID.]

[schaefer@torch]$ (sleep 10; exit 19) &
[1] 1680
[schaefer@torch]$ pid=$!
[schaefer@torch]$ sleep 12; wait $pid
[1]+  Exit 19                 ( sleep 10; exit 19 )
bash: wait: pid 1680 is not a child of this shell
[schaefer@torch]$ echo $BASH_VERSION
3.00.15(1)-release

However, "wait" works as Greg describes in bash version 3.2.25(1)-release.
(More on this below [*].)

}   #!/bin/zsh -f
}   sleep 10 &
}   pid=$!
}   sleep 12
}   wait $pid

(The bug I mentioned:  If I run those commands in a subshell of an
interactive shell with POSIX_JOBS set, the subshell gets hit with a
SIGTTOU signal and the parent shell ends up hung waiting for it.)

Apparently POSIX.2 requires "wait" be able to access the exit status
of an asynchronous job until the next asynchronous job is started.
Zsh is only able to access that status until the next job (whether
synchronous or not) completes; the completion of "sleep 12" clears
the previously-completed "sleep 10 &" from the job table, so "wait"
is no longer able to see it.

"Fixing" this may be a fairly convoluted change to the already somewhat
baroque job table management code.

[*] The CHANGES file with bash-3.2 appears to claim this was changed a
lot longer ago than bash-3.0; some possibly-relevant entries:

----------
This document details the changes between this version, bash-3.1-rc1,
and the previous version, bash-3.1-beta1.

...

e.  In Posix mode, after `wait' is called to wait for a particular process
    explicitly, that process is removed from the list of processes known to
    the shell, and subsequent attempts to wait for it return errors.

----------
This document details the changes between this version, bash-2.03-beta1,
and the previous version, bash-2.03-alpha.

...

j.  Some changes were made to the job reaping code when the shell is not
    interactive, so the shell will retain exit statuses longer for examination
    by `wait'.

----------
This document details the changes between this version, bash-2.02-alpha1,
and the previous version, bash-2.01.1-release.

...

q.  A bug was fixed so that the job containing the last asynchronous
    process is not removed from the job table until a `wait' is executed
    for that process or another asynchronous process is started.  This
    satisfies a POSIX.2 requirement.

----------

