From zsh-users-return-6716-mason-zsh=primenet.com.au@sunsite.dk Sat Oct 18 15:12:47 2003
Return-Path: <zsh-users-return-6716-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 16521 invoked from network); 18 Oct 2003 15:12:46 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 18 Oct 2003 15:12:46 -0000
Received: (qmail 19706 invoked by alias); 18 Oct 2003 15:12:23 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 6716
Received: (qmail 21772 invoked from network); 18 Oct 2003 14:57:22 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 18 Oct 2003 14:57:22 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [195.197.252.71] by sunsite.dk (MessageWall 1.0.8) with SMTP; 18 Oct 2003 14:57:20 -0000
Received: from azure by lynx.tre-1.ionific.com with local (Exim 3.35 #1 (Debian))
	id 1AAsWI-0003xR-00; Sat, 18 Oct 2003 17:57:30 +0300
To: Zsh Users' List <zsh-users@sunsite.dk>
Subject: Completion exercise; a few misc. questions
Mail-copies-to: nobody
From: Hannu Koivisto <azure@iki.fi>
Date: Sat, 18 Oct 2003 17:57:30 +0300
Message-ID: <87n0bytwyt.fsf@lynx.tre-1.ionific.com>
User-Agent: Gnus/5.090014 (Oort Gnus v0.14) Emacs/21.2
 (i386-debian-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: Hannu Koivisto <Hannu.Koivisto@ionific.com>

Greetings,

I finally decided to learn how to make simple completion functions.
I chose a toy package manager called lpm for which to write
completion support; the usage is as follows:

Usage: [OPTION]... COMMAND [COMMAND ARGUMENT]...

At the moment there are no OPTIONs.

COMMAND is one of the following:
--help       Display this usage.
-i           Install/create package.  The first command argument is the name
             of the package, the rest form the command that creates
             the package.  A typical example is "lpm -i foo-1.0 make install".
-l           List installed packages.
-L           List files owned by the package.  The first command argument is
             the name of the package.
-u           Uninstall a package.  The first command argument is
             the name of the package.
-p           Package files owned by the package into a .tar.bz2 archive.
             The first command argument is the name of the package to be
             archived.  The second, optional argument is the name of the
             archive.  If it is not provided, the archive name shall be
             ./<name-of-the-package>.tar.bz2

What I managed to write is this:

_lpm_package () {
    #_files -g "${PACKAGEDIR:-/usr/local/etc/packages/}/*(.N:t)"
    compadd $(lpm -l)
}    

_lpm () {
    _arguments \
        - '(commands)' \
        '--help[display usage]' \
        '-l[list installed packages]' \
        '-L[list files owned by a package]:package name: _lpm_package' \
        '-i[install/create a package]:package name: :*:::installation command: _normal' \
        '-u[uninstall a package]:package name: _lpm_package' \
        '-p[repackage into a .tar.bz2 archive]:package name: _lpm_package::archive name: _files -/'
}

compdef _lpm lpm

Does this seem like a reasonable start?  One thing that was a bit
unclear to me was the usage of a space in front of ACTIONs.  Should
I remove it in the case of the last OPTSPEC and let the system pass
its magic options to _files?  I understood that it accepts at least
some of compadd's options and passes them through.  I tried it in
the case of my _lpm_package function and modified it to insert to a
temp file what was passed to it, and that was "-J -default-".
Would it be important to pass these to compadd and in which case it
would have some effect?  I haven't noticed any difference this far.

Another problem is the $(lpm -l) in _lpm_package.  Is there an easy
way to make it expand so that each _line_ (that may contain spaces)
of "lpm -l"'s output is passed to compadd as a separate argument?
Now lines that contain spaces turn to multiple arguments.  Since
lpm -l lists files, I also tried a _files approach that is now
comented out.  It does not have problems with spaces in the
filenames but it seems that _files allows one to complete other
files than those listed by my glob pattern even though the
documentation of the -g option says "Specifies that only files
matching the PATTERN should be completed."  Is this because of the
option -f which according to the documentation "Complete all
filenames.  This is the default." is on by default?  If that is the
case, how can I turn it off?

-- 
Hannu

