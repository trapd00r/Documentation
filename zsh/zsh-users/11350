From zsh-users-return-11350-mason-zsh=primenet.com.au@sunsite.dk Tue Mar 27 23:41:08 2007
Return-Path: <zsh-users-return-11350-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 2455 invoked from network); 27 Mar 2007 23:41:06 -0000
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.7 required=5.0 tests=AWL,BAYES_00,FORGED_RCVD_HELO,
	WEIRD_QUOTING autolearn=no version=3.1.8
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 27 Mar 2007 23:41:06 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 62989 invoked from network); 27 Mar 2007 19:32:56 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 27 Mar 2007 19:32:56 -0000
Received: (qmail 27777 invoked by alias); 27 Mar 2007 19:32:10 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 11350
Received: (qmail 27443 invoked from network); 27 Mar 2007 19:32:04 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 27 Mar 2007 19:32:04 -0000
Received: (qmail 54321 invoked from network); 27 Mar 2007 19:32:03 -0000
Received: from smtpout0130.sc1.he.tucows.com (HELO n066.sc1.he.tucows.com) (64.97.136.130)
  by a.mx.sunsite.dk with SMTP; 27 Mar 2007 19:31:54 -0000
Received: from sc.homeunix.net (82.26.160.246) by n066.sc1.he.tucows.com (7.2.069.1)
        id 45FC2B7200067E35; Tue, 27 Mar 2007 19:31:47 +0000
Received: from chazelas by sc.homeunix.net with local (Exim 4.63)
	(envelope-from <stephane_chazelas@yahoo.fr>)
	id 1HWHOH-0003n3-1O; Tue, 27 Mar 2007 20:31:33 +0100
Date: Tue, 27 Mar 2007 20:31:33 +0100
From: Stephane Chazelas <Stephane_Chazelas@yahoo.fr>
To: "Brian K. White" <brian@aljex.com>
Cc: zsh-users@sunsite.dk
Subject: Re: Lonely spacecowboy
Message-ID: <20070327193132.GD4885@sc.homeunix.net>
Mail-Followup-To: "Brian K. White" <brian@aljex.com>, zsh-users@sunsite.dk
References: <20070327175336.GA22601@solfire> <003c01c770a2$5bb43ca0$9502a8c0@venti>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-15
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <003c01c770a2$5bb43ca0$9502a8c0@venti>
User-Agent: Mutt/1.5.6i

On Tue, Mar 27, 2007 at 03:01:42PM -0400, Brian K. White wrote:
> You did not say in what way it fails, nor what <cmd> might be.
> But I can say 2 things:
> 
> 1) pipeing into read only "works" in ksh, the real korn ksh not pdksh or 
> any of the others like bash and zsh that have a "ksh compatibility" mode.
> But you can still use a similar construct with file redirection that will 
> work.
> The difference is "|read" creates a child process that read runs in, and 
> any env variables set in that child process are not visible from the 
> parent, and the while-do-done command (and all commands in that loop) ar 
> running in the parent.

While this is true for bash and pdksh it's not true for zsh:

~$ echo foo | read
~$ echo $REPLY
foo


[...]
> You might be able to redirect stdin just for the cmd but I never tried that 
> in a loop like this so I don't know if it actually works.

Generally done as:

while IFS= read -r <&3; do
  cmd ... "$REPLY"
done 3< file.txt

(read without -r or with the default value of IFS is very
special, you generally don't want that in scripts).

> 
> # test for no tty to allow for cron jobs, cgi script, print filter, etc...
> tty -s && MYTTY=`tty` || MYTTY=/dev/null
> while read
> do
>      vi "$REPLY" <$MYTTY
> done < files.txt

Even if there's a tty, there's no guarantee that stdin is
guaranteed. There's no need for that trick except if you're
using csh type shells that hardly have any fd handling
capability.


> You could also just use awk and not worry about stdin and tty and read 
> etc...
> no redirection or piping, no read command, no tty issues, etc...
> 
> awk '{system("somecommand \""$0"\"")}' files.txt

Then you'd run into more problems (possibly serious) if the
lines in files.txt contain any ", \, $, `...

> It's a little less efficient because system() spawns a new sh process to 
> run command in, where the while-read loop will run command right in the 
> same top level shell process where the while loop itself is running.
[...]

If "<cmd>" is not builtin, there's be as many processes (unless
is not optimised to exec the last command is run). The
difference is on the loading and initialising of sh.

-- 
Stéphane

