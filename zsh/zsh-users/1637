From zsh-workers-request@math.gatech.edu Tue Jun 23 11:32:48 1998
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 9770 invoked from network); 23 Jun 1998 11:32:46 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 23 Jun 1998 11:32:46 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.8.5/8.8.5) id HAA07244;
	Tue, 23 Jun 1998 07:21:30 -0400 (EDT)
Resent-Date: Tue, 23 Jun 1998 07:17:02 -0400 (EDT)
Message-ID: <19980623131045.A25779@math.fu-berlin.de>
Date: Tue, 23 Jun 1998 13:10:45 +0200
From: Sven Guckes <guckes@math.fu-berlin.de>
To: zsh-users@math.gatech.edu
Subject: zsh features short list - update?!
Mail-Followup-To: zsh-users@math.gatech.edu
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.92.8i
X-Mailer-Info: http://www.math.fu-berlin.de/~guckes/mutt/
X-Editor: Vim-5 http://www.vim.org/
Resent-Message-ID: <"RO-fE2.0.el1.jwuZr"@math>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/1637
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

I am pretty sure that my short list of zsh features needs an update.
Please let me know about additions - or, better yet, an up-to-date
webpage on www.zsh.org (I might be missing this).

Sven

=== http://www.math.fu-berlin.de/~guckes/zsh/features :

ZSH features

===
very close to ksh/sh grammar, with csh additions
most features of ksh, bash, and tcsh
75 builtins, 89 options, 154 key bindings
short for loops, ex: for i (*.c) echo $i
select
shell functions
conditional expressions (test builtin, [ ... ], and ksh-style [[ ... ]])
global aliases (may be expanded anywhere on the line)
directory stack access with =num
process substitution (vi =(cmd) edits the output of cmd)
generalized pipes (ls foo >>(cmd1) 2>>(cmd2) pipes stdout to cmd1
  and stderr to cmd2)
arithmetic expressions
advanced globbing:
  ls **/file  searches recursively for "file" in subdirectories
  ls file<20->  matches file20, file30, file100, etc.
  ls *.(c|pro)  matches *.c and *.pro
  ls *(R)  matches only world-readable files
  ls *.c~lex.c  matches all .c files except lex.c
null command shorthands:
  "< file" is same as "more <file"
  "> file" is same as "cat >file"
  ">> file" is same as "cat >>file"
ksh-style coprocesses
automatic file stream teeing (ls >foo >bar puts output in two places)
chpwd() function run every time you change directory (useful for
  updating the status line)
job control
csh-style history
full vi line editing, including "c2w" and "y$" and such things
full emacs line editing
incremental history search
magic-space history
spelling correction
array parameters
$HOSTTYPE, $LINENO, $RANDOM, $SECONDS, $cdpath, $COLUMNS, $fignore,
  $HISTCHARS, $mailpath
with autocd option, typing a directory name by itself is the same as
  typing "cd dirname"
menu completion: pressing TAB repeatedly cycles through the possible matches
incremental path hashing
automatic process time reporting for commands that run over a certain limit
full tcsh-style prompt substitution
utmp login/logout reporting
with histverify option, performing csh-style history expansions causes the
  input line to be brought up for editing instead of being executed
with sunkeyboardhack option, accidently typed trailing ` characters
  are removed from the input line (for those of you with Sun keyboards :-) )
autoloaded functions (loaded from a file when they are first referenced)
"cd old new" replaces "old" with "new" in directory string
generalized argument completion, including:
  - command name completion
  - filename and path completion
  - hostname completion
  - key binding completion
  - option completion
  - variable name completion
  - user-specified keyword completion
  - anything else you can think of
prompt on right side of screen
directory stacks
history datestamps and execution time records
command scheduling (like at(1), but in the shell's context)
tty mode freezing
up to 9 startup files (but you only need 1 or 2)
8-bit clean
which -a cmd lists all occurences of "cmd" in the path

=== END

