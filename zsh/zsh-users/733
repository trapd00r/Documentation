From zsh-workers-request@euclid.skiles.gatech.edu Sun Mar 02 14:22:07 1997
Return-Path: <zsh-workers-request@euclid.skiles.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 26852 invoked from network); 2 Mar 1997 14:22:05 -0000
Received: from euclid.skiles.gatech.edu (list@130.207.146.50)
  by coral.primenet.com.au with SMTP; 2 Mar 1997 14:22:05 -0000
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id JAA08747; Sun, 2 Mar 1997 09:10:23 -0500 (EST)
Resent-Date: Sun, 2 Mar 1997 09:05:03 -0500 (EST)
Message-Id: <9703020941.AA04832@tallowcross.uni-frankfurt.de>
Content-Type: text/plain
Mime-Version: 1.0 (NeXT Mail 3.3 v118.2)
X-Nextstep-Mailer: Mail 3.3 (Enhance 1.3)
From: Uli Zappe <uli@tallowcross.uni-frankfurt.de>
Date: Sun,  2 Mar 97 10:41:55 +0100
To: zsh-users@math.gatech.edu
Subject: very weird echo problem
Resent-Message-ID: <"q0E0M3.0.D72.9aO6p"@euclid>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/733
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

Hi,

excuse me for bothering you again but I have experienced another  
(to me) very strange problem.

I want to log messages of a shell script to both standard output  
and a logfile, and have to do a "date" call before.

If I do something like

   DATE=$(date)
   echo $MESSAGE
   echo $MESSAGE >> $LOGFILE

everything works as expected.

However, as soon as I capsulate this in a shell function:

   log_function()
   {
      DATE=$(date)
      echo $MESSAGE
      echo $MESSAGE >> $LOGFILE
   }

weird things happen.

Assume in my script I have the following function calls:

   log_function TEST1; log_function TEST2
   log_function TEST3; log_function TEST4

then:

A. If I execute the script from a TERMINAL everything is fine
   (messages get printed to the terminal and to the log file)
B. If I execute the script NOT FROM A TERMINAL (but e.g. cron), then
   the script will stop after the first LINE with log_function calls
   (NOT the first log_function!), i.e. it will print
      TEST1
      TEST2
   to the logfile and then STOP EXECUTION of any code following
C. As soon as I COMMENT OUT ANY ONE of the 3 lines of the log
   function (i.e. no date, or one of the two echo's missing)
   everything again will work as expected. (Concerning date, it is
   sufficient to not put it into a variable, i.e. a pure "date" as
   the first line does no harm.)


The workaround I have found is to write the first echo line as

   echo $MESSAGE 1>&1

i.e I redirected stdout to itself...!?! This shouldn't change  
anything, one would expect, but in fact it solves the problem. Now  
everything works, but as hard as I've tried I simply don't  
understand WHY. Am I totally confused or is this a bug? (I have to  
still use zsh 2.5.02, if that matters).

Thanks for any insight!


                Bye
                        Uli

______________________________________________________________________

Uli Zappe               E-Mail: uli@tallowcross.uni-frankfurt.de
                                (NeXTMail,Mime,ASCII) PGP on request
Lorscher Strasse 5      WWW:    -
D-60489 Frankfurt       Fon:    +49 (69) 9784 0007
Germany                 Fax:    +49 (69) 9784 0042

staff member of NEXTTOYOU - the German NEXTSTEP/OPENSTEP magazine
______________________________________________________________________

