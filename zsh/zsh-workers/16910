From zsh-workers-return-16910-mason-zsh=primenet.com.au@sunsite.dk Tue Mar 26 19:51:27 2002
Return-Path: <zsh-workers-return-16910-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 16510 invoked from network); 26 Mar 2002 19:51:27 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 26 Mar 2002 19:51:27 -0000
Received: (qmail 4419 invoked by alias); 26 Mar 2002 19:51:13 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 16910
Received: (qmail 4399 invoked from network); 26 Mar 2002 19:51:09 -0000
Date: Tue, 26 Mar 2002 11:51:01 -0800 (PST)
From: Bart Schaefer <schaefer@brasslantern.com>
Sender: schaefer@ns1.sodaware.com
To: Oliver Kiddle <okiddle@yahoo.co.uk>
cc: Zsh hackers list <zsh-workers@sunsite.dk>
Subject: Re: up-line-or-search question
In-Reply-To: <20020326192340.GA12802@logica.com>
Message-ID: <Pine.LNX.4.44.0203261140300.13204-100000@ns1.sodaware.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

On Tue, 26 Mar 2002, Oliver Kiddle wrote:

> I didn't realise that the numeric argument would propagate so thought
> the second history-beginning-search-backward was harmless. Your
> replacement breaks the addition that it goes down a line if at the end
> of the history.

I'd rather have it feep at the end of the history.  Moving down a line
when the search fails means I lose my context and have to re-establish
it before I can e.g. reverse the direction of the search.

> Changing the zle h-b-s-? commands to:
>
>     [[ $LASTWIDGET = $__searching ]] && CURSOR=$__savecursor
>     zle .history-beginning-search-backward
>     __savecursor=$CURSOR
>     zle .end-of-line
>   (and moving the return statement in the down-line function)
>
> It works for going up but breaks when changing to going down.
> Basically, it searches down using the whole line instead of up to where
> the cursor was. Any ideas?

Don't test [[ $LASTWIDGET = $__searching ]], test [[ -n $__searching ]].
And name the cursor-saving variable something less generic, there may be
other functions that want to save and restore the cursor ...

> > 	zle .vi-fetch-history -n $NUMERIC
>
> Ok. Thanks. It isn't possible to include args (numeric or otherwise)
> with a bindkey though is it?

I'm not sure what you mean.  If you mean supply args at the time that you
invoke the key binding, then you only get the numeric argument (digits
typed as a prefix, in vi mode).  If you mean supply args at the time you
create the key binding, then you just create a new widget that has the
arguments and call it:

function vi-fetch-history-twentyseven {
  zle .vi-fetch-history -n 27	# Always retrieve event 27
}
zle -N vi-fetch-history-twentyseven
bindkey -v g vi-fetch-history-twentyseven

