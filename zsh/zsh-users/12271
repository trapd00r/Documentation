From zsh-users-return-12271-mason-zsh=primenet.com.au@sunsite.dk Sun Dec 02 05:08:34 2007
Return-Path: <zsh-users-return-12271-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 13823 invoked from network); 2 Dec 2007 05:08:25 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.3 (2007-08-08) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.3
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 2 Dec 2007 05:08:25 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 90420 invoked from network); 2 Dec 2007 05:08:19 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 2 Dec 2007 05:08:19 -0000
Received: (qmail 24432 invoked by alias); 2 Dec 2007 05:07:59 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12271
Received: (qmail 24412 invoked from network); 2 Dec 2007 05:07:58 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 2 Dec 2007 05:07:58 -0000
Received: (qmail 88952 invoked from network); 2 Dec 2007 05:07:58 -0000
Received: from vms046pub.verizon.net (206.46.252.46)
  by a.mx.sunsite.dk with SMTP; 2 Dec 2007 05:07:51 -0000
Received: from torch.brasslantern.com ([71.121.18.67])
 by vms046.mailsrvcs.net (Sun Java System Messaging Server 6.2-6.01 (built Apr
 3 2006)) with ESMTPA id <0JSE002SUOWYBG77@vms046.mailsrvcs.net> for
 zsh-users@sunsite.dk; Sat, 01 Dec 2007 23:07:50 -0600 (CST)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id lB257jaY020046	for
 <zsh-users@sunsite.dk>; Sat, 01 Dec 2007 21:07:45 -0800
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id lB257ip6020045	for zsh-users@sunsite.dk; Sat,
 01 Dec 2007 21:07:44 -0800
Date: Sat, 01 Dec 2007 21:07:44 -0800
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: command substitution: zsh waits until command exits
In-reply-to: <20071202021652.GO5855@prunille.vinc17.org>
To: zsh-users@sunsite.dk
Message-id: <071201210744.ZM20044@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <20071130133943.GG5855@prunille.vinc17.org>
	<071130073719.ZM18090@torch.brasslantern.com>
	<20071130163155.GL5855@prunille.vinc17.org>
	<071130185827.ZM18402@torch.brasslantern.com>
	<20071202021652.GO5855@prunille.vinc17.org>
Comments: In reply to Vincent Lefevre <vincent@vinc17.org>
 "Re: command substitution: zsh waits until command exits" (Dec  2,  3:16am)

On Dec 2,  3:16am, Vincent Lefevre wrote:
} Subject: Re: command substitution: zsh waits until command exits
}
} > } (I assumed asynchronously), but could replace the $(...) in some
} > } arbitrary order, once it knows the result, i.e. once the standard
} > } output is closed.
} > 
} > No, that would be non-deterministic with respect to left-to-right order.
} 
} But there can be the same kind of problem with process substitution.
} So, why allowing non-deterministic behavior for process substitution
} but not for command substitution?

Process substitution is opening a pipe to the process without remaining
in control of where the input or output is going; the process started
within a process substitution and the command executed dirctly by the
parent shell must run simultaneously to be able to communicate with each
other.  Process substitution wouldn't work at all if it were synchronous.

Command substitution, on the other hand, keeps control of the input and
output and must all be finished before the command line to be executed
by the parent shell is fully formed. It's impossible for the shell to
start the command before its argument list has been built; it's natural
for this to be a synchronous mechanism.
 
} > The default is to do everything synchronously.
} 
} How can the user know that?

That's part of the basic principles of how *nix shells work.  When you
execute something from the command line, and that something then closes
its standard descriptors, the shell doesn't immediately give you back a
prompt; it waits for the process to actually exit.  You have to tell it
when not to wait.

} > } >   echo $(coproc xterm -e 'tty >&3; sleep 999999' 3>&1 ; read -E <&p)
} > } 
} > } OK, thanks. But is there any reason why Ctrl-C doesn't work in the
} > } xterm?
} > 
} > Could be any of a variety of reasons, the most likely of which is that
} > no interactive shell is being run.
} 
} But Ctrl-C works with things like: xterm -e 'sleep 9999'

At this point I don't really know.  It could even be dependent on which
pseudo-tty device xterm happens to open and will seemingly randomly work
or not.  It could be that I got the syntax of -xrm wrong and you need
"XTerm*ttyModes: ..." -- better might be to just run "stty".

I'm not even sure what you mean by "works".  You mean ends the sleep?
It's possible that coproc is ignoring SIGINT and that's passed down
through xterm to sleep, so even though ^C is sending an interrupt the
sleep doesn't respond to it.  Yeah, that seems to be it; this causes
^C to end the sleep for me by changing it to a SIGQUIT:

  echo $(coproc xterm -e 'stty intr "" quit ^C ; tty >&3 ;
                          sleep 999999' 3>&1 ;
         read -E <&p)

Incidentally I use this little function all the time:

gdbterm () {
    xterm -title GDBterm -e sh -c 'exec xterm -e gdb --tty=$(tty) '"$*"
}

