From zsh-users-return-15015-mason-zsh=primenet.com.au@zsh.org Tue Apr 20 10:17:05 2010
Return-Path: <zsh-users-return-15015-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28380 invoked by alias); 20 Apr 2010 10:17:05 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15015
Received: (qmail 5655 invoked from network); 20 Apr 2010 10:16:51 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_LOW,
	SPF_HELO_PASS autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at csr.com does not designate permitted sender hosts)
Date: Tue, 20 Apr 2010 10:47:31 +0100
From: Peter Stephenson <pws@csr.com>
To: zsh-users@zsh.org
Subject: Re: Strange behaviour of setopt and binkey in a widget
Message-ID: <20100420104731.670bb5f7@csr.com>
In-Reply-To: <w2m8c8a289c1004200202n5ad1e316pb78a0ba44f043b30@mail.gmail.com>
References: <w2m8c8a289c1004200202n5ad1e316pb78a0ba44f043b30@mail.gmail.com>
Organization: Cambridge Silicon Radio
X-Mailer: Claws Mail 3.7.5 (GTK+ 2.18.9; i686-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 20 Apr 2010 09:47:32.0616 (UTC) FILETIME=[7FA71080:01CAE06E]
X-Scanned-By: MailControl A_09_40_00 (www.mailcontrol.com) on 10.71.0.138

On Tue, 20 Apr 2010 11:02:29 +0200
Mike Perdide <mike.perdide@gmail.com> wrote:
> Hello zsh users,
> I'm trying to customize the behaviour of CTRL-D in certain conditions
> and I 'm observing strange behaviours from zsh.
> Here is what I do :
> 
> -------------- From my .zshrc ---------------
> widg0() { echo "not really exiting"; }
> zle -N widg0
> widg1() { setopt ignoreeof; bindkey "^D" widg0; }
> widg2() { unsetopt ignoreeof; bindkey -r "^D"; }
> zle -N widg1
> zle -N widg2
> bindkey "^O" widg1
> bindkey "^P" widg2
> 
> -------------- Starting from a bash shell :
> 
> [22:49] :~$ zsh
> north.~% <CTRL-O> <CTRL-D>
> zsh: use 'exit' to exit.
> north.~% <CTRL-D>not really exiting
>           !!! First strange behaviour : the prompt is not redrawn. At
> this point I press <ENTER> to get my prompt back :

This isn't actually strange at all if you consider that all widg0 done is
echo "not really exiting" to the screen.  You haven't told the shell to
redraw the prompt.  The way to do this is tell ZLE you're taking over the
display for a bit, so that when the widget exits it will redraw the prompt
below:

widg0() {
  zle -I
  echo "not really exiting"
}


> north.~% <CTRL-P> <CTRL-D>
> !!! The previous ligne is rewritten with these two :
> [22:53] :~$
> zsh: use 'exit' to exit

This actually did exit the shell for me (which is what you want, although
I'm not sure now much I expected it given the ^D wasn't bound to anything
any more and it's being processed by zsh, not handled directly as EOF which
zsh has to synthesise).  Does "stty -a" show that ^D is the EOF character?


I once wrote a widget delete-char-or-list-new, which is a reimplementation
of what ^D usually does with Emacs bindings with slightly different
behaviour.  The interesting thing is I had to put in the EOF handling
directly.  I don't know if it's any use to you.  Note that unlike the
default shell behaviour you need to tell it the maximum number of "EOF"s to
ignore, e.g.

  zstyle ':zle:*' ignore-eof-count 10"

The message is also customisable, e.g.

  zstyle ':zle:*' ignore-eof-msg "ignoring eof (%c / %m times)"

I tried this and it seemed to work...


#start delete-char-or-list-new
# This is supposed to work like delete-char-or-list, except that the
# list generated is always new.

if [[ -z $BUFFER ]]; then
  integer eofmax ignoreeof
  if zstyle -s ":zle:$WIDGET" ignore-eof-count eofmax; then
    ignoreeof=1
  else
    [[ -o ignore_eof ]] && ignoreeof=1
  fi
  if [[ -n $ignoreeof ]]; then
    integer -g __eof_count

    if [[ eofmax -le 0 ]]; then
      __eof_count=0
    elif [[ $LASTWIDGET = $WIDGET ]]; then
      if (( ++__eof_count == eofmax )); then
	exit
      fi
    else
      __eof_count=1
    fi

    zmodload -i zsh/zutil

    local fmt msg what=exit
    zstyle -s ":zle:$WIDGET" ignore-eof-msg fmt ||
    fmt="zsh: use '%s' to %s."
    [[ -o login ]] && what=logout
    zformat -f msg $fmt s:$what m:$eofmax c:$__eof_count
    zle -M $msg

    return 1
  else
    exit
  fi
fi

# The <= 0 (formally just != 0) is so that negative prefixes used in
# Perforce completion force a new listing.

if (( ${NUMERIC:-0} <= 0 )); then
  (( CURSOR = CURSOR ))
fi

zle delete-char-or-list
#end delete-char-or-list-new


-- 
Peter Stephenson <pws@csr.com>            Software Engineer
Tel: +44 (0)1223 692070                   Cambridge Silicon Radio Limited
Churchill House, Cambridge Business Park, Cowley Road, Cambridge, CB4 0WZ, UK


Member of the CSR plc group of companies. CSR plc registered in England and Wales, registered number 4187346, registered office Churchill House, Cambridge Business Park, Cowley Road, Cambridge, CB4 0WZ, United Kingdom

