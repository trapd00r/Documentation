From zsh-workers-return-14980-mason-zsh=primenet.com.au@sunsite.dk Tue Jun 19 22:33:35 2001
Return-Path: <zsh-workers-return-14980-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 2407 invoked from network); 19 Jun 2001 22:33:34 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 19 Jun 2001 22:33:34 -0000
Received: (qmail 651 invoked by alias); 19 Jun 2001 22:32:56 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14980
Received: (qmail 639 invoked from network); 19 Jun 2001 22:32:55 -0000
Date: Tue, 19 Jun 2001 18:33:24 -0400
From: Clint Adams <schizo@debian.org>
To: zsh-workers@sunsite.dk
Cc: Michal Politowski <mpol@charybda.icm.edu.pl>,
   101523-forwarded@bugs.debian.org
Subject: Re: Bug#101523: zsh segmentation fault
Message-ID: <20010619183324.A17427@dman.com>
References: <20010619225633.A7077@Amber.lab.icm.edu.pl>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="BOKacYhQ+x31HxR3"
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <20010619225633.A7077@Amber.lab.icm.edu.pl>; from mpol@charybda.icm.edu.pl on Tue, Jun 19, 2001 at 10:56:33PM +0200



--BOKacYhQ+x31HxR3
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

On Tue, Jun 19, 2001 at 10:56:33PM +0200, Michal Politowski wrote:

> zsh segfaults when trying to source /usr/share/shoop/shoop.sh from the shoop package.
> Unfortunately this file is rather complicated and I can't provide a smaller
> example.

I can reproduce this with zsh --no-equals -fx shoop.sh

shoop.sh is attached

--BOKacYhQ+x31HxR3
Content-Type: text/x-sh; charset=us-ascii
Content-Disposition: attachment; filename="shoop.sh"

#!/bin/sh -e
# This script has been preprocessed prior to installation
# It has had comments, blank lines, and leading spaces
# removed, and \-style lines combined.  This was done so
# that it could run quicker under some shells.
_shoop () {
local TRUEOBJ=$1 TRYOBJ=$2 METH=$3 TRUEMETH=$1_$3 TRYMETH=$2_$3 LASTMETH=$METH
shift 3
case "$1" in
=|=q|=p|.=|.=q|.=p|.=qp|:|:p)
local varmeth=$1 append="" quiet="" private=""; shift
if [ "${varmeth%p}" != $varmeth ]; then private=1; varmeth=${varmeth%p}; fi
if [ "$_shoop_introspect" ] &&
eval [ -z \"\$_shooptype_$TRYMETH\$private\" ]; then
eval "_shoopdefines_$TRUEOBJ=\"\$_shoopdefines_$TRUEOBJ $METH\""
fi
if [ -z "$_shoopnocache_" ]; then
eval $_shoopcacheclear_
fi
if [ "${varmeth#.}" != $varmeth ]; then append=1 varmeth=${varmeth#.}; fi
if [ "${varmeth%q}" != $varmeth ]; then quiet=1 varmeth=${varmeth%q}; fi
if [ "$varmeth" = = ]; then
if [ "$append" ];then set -- "$(eval eval "\$_shoop_$TRUEMETH") $@"; fi
if [ ! "$quiet" ]; then echo -n $@; fi
eval "_shoop_$TRUEMETH='echo -n $@'
_shooptype_$TRUEMETH=variable"
else
if [ "$quiet" ]; then echo "Invalid modifier(q) on assignment!($TRUEOBJ.$METH)" >&2; fi
if [ "$append" ];then
eval eval "_shoop_$TRUEMETH=\'\$_shoop_$TRUEMETH;\$@\'
_shooptype_$TRUEMETH=method"
else
eval "_shoop_$TRUEMETH='$@'
_shooptype_$TRUEMETH=method"
fi
fi
return
;;esac
if eval [ \"\$_shooptype_$TRYMETH\" ]; then
local THIS=$TRUEOBJ
eval eval "\$_shoop_$TRYMETH"
return
else
eval local P PARENTS=\"$(eval eval "\$_shoop_${TRYOBJ}_parent")\"			THIS=$TRUEOBJ GETMETH="" NEWPARENTS=""
if [ -z "$_shoopnocache_" ]; then
eval local CACHE=\"\$_shoopcache_link_$TRUEMETH\"
if [ "$CACHE" ]; then
eval eval \$$CACHE
return
fi
fi
for P in $PARENTS; do
eval GETMETH=\"\$_shoop_${P}_$METH\"
if [ "$GETMETH" ]; then
eval "$GETMETH"
return
fi
NEWPARENTS="$NEWPARENTS $(eval eval "\$_shoop_${P}_parent")"
done
local orgargs="$@"
set -- $NEWPARENTS
while [ $# -gt 0 ];do
P=$1
eval GETMETH="\$_shoop_${P}_$METH"
if [ "$GETMETH" ]; then
set -- $orgargs
if [ -z "$_shoopnocache_" ]; then
eval _shoopcache_link_${THIS}_$METH=_shoop_${P}_$METH					     _shoopcache_=\"\$_shoopcache_						  _shoopcache_method_$METH _shoopcache_link_${THIS}_$METH \"					     _shoopcache_method_$METH=\"\$_shoopcache_method_$METH						  _shoopcache_link_${THIS}_$METH\"					     _shoopcache_linkmethod_${P}_$METH=\"\$_shoopcache_linkmethod_${P}_$METH						  _shoopcache_link_${THIS}_$METH\"
fi
eval "$GETMETH"
return
fi
shift
set -- $(eval eval "\$_shoop_${P}_parent") "$@"
done
echo "\"$METH\" is undefined for $TRYOBJ." >&2
return 1
fi
}
IFS=" " _shoopcacheclear_="
if eval [ \\\"\\\$_shoopcache_method_\$METH\\\" ]; then
if eval [ -z \\\"\\\$_shoopcache_linkmethod_\$TRUEMETH\\\" ]; then
eval unset _shoopcache_method_\$METH				 \\\$_shoopcache_method_\$METH				   _shoopcache_linkmethod_\$TRUEMETH				 \\\$_shoopcache_linkmethod_\$TRUEMETH
fi
fi
"
_shoop_introspect=1
IFS=" " _shoop OBJECT OBJECT new :p '
local OBJNAME=$1
eval "$OBJNAME () { shift; _shoop $OBJNAME $OBJNAME \"\$@\"; };"
if [ $THIS != $OBJNAME ]; then
_shoop $OBJNAME $OBJNAME parent = $THIS >/dev/null
fi
eval unset _shoopcache_ \$_shoopcache_ || true
'
_shoop OBJECT OBJECT new OBJECT
OBJECT . parent = ""
OBJECT . super :p '_shoop $THIS $($THIS . parent) "$LASTMETH" "$@"; return'
unset _shoop_introspect

--BOKacYhQ+x31HxR3--

