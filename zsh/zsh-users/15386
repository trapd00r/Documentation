From zsh-users-return-15386-mason-zsh=primenet.com.au@zsh.org Fri Sep 10 12:36:25 2010
Return-Path: <zsh-users-return-15386-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 10985 invoked by alias); 10 Sep 2010 12:36:25 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15386
Received: (qmail 20154 invoked from network); 10 Sep 2010 12:36:22 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,FREEMAIL_FROM,
	RCVD_IN_DNSWL_NONE,T_TO_NO_BRKTS_FREEMAIL autolearn=ham version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at gmx.de designates 213.165.64.23 as permitted sender)
Content-Type: text/plain; charset="utf-8"
Date: Fri, 10 Sep 2010 14:36:16 +0200
From: "Dominik Vogt" <dominik.vogt@gmx.de>
In-Reply-To: <20100910113632.GA4692@yahoo.fr>
Message-ID: <20100910123616.114190@gmx.net>
MIME-Version: 1.0
References: <20100910063544.45240@gmx.net> <20100910113632.GA4692@yahoo.fr>
Subject: Re: Tesing a fifo without opening it?
To: zsh-users@zsh.org
X-Authenticated: #885628
X-Flags: 0001
X-Mailer: WWW-Mail 6100 (Global Message Exchange)
X-Priority: 3
X-Provags-ID: V01U2FsdGVkX1+Fqgpc1O+FZlvPbltN2tUfz8cfoaR3s+vXc0d0+N
 J6r7PU49oU6v2JFVNuMYDmu8p8X0UUO52xZQ== 
Content-Transfer-Encoding: 8bit
X-GMX-UID: eBS5ePFlX1V6HUjuYWFyde5/SDc4NAxB
X-FuHaFi: 0.48999999999999999

> > 05   if read -t REQUEST < "$1"; then
> [...]
> > Now, the problem is that input redirection in line 5 blocks
> > until the main script also opens the fifo.  So the -t flag of
> > read does not "work" here (because read is not even executed
> > until the fifo can be opened).  I want to check if data is
> > available in the fifo without blocking, but I can't find a way
> > around blocking in the input redirection.
> [...]
> 
> On Linux (at least, though the behavior is not clearly defined
> by POSIX)
> 
> read -t REQUEST <> "$1"
> 
> should work.

That prevents the shell from blocking, the reading shell does
not receive any data and the writing shell is killed by SIGPIPE:

1. Run "echo foo > fifo" in one shell W
2. W blocks when opening the fifo (no reader open)
3. Run "read -t 0 REQUEST <> fifo" in shell R
4. R opens the fifo without blocking.
5. W opens the fifo.
6. R runs "read -t 0" and notices that no data is available.
7. R closes the fifo.
8. W tries to write "foo" to the pipe.
9. As the pipe has already been closed, W gets SIGPIPE and dies.

So what is actually required is opening the shell non-blocking,
but blocking for input if the pipe could be opened.

I think I'm asking for something that is not possible without
precise control over the underlying syscalls.

> Otherwise, other approaches: open with O_NONBLOCK (though you'd
> need to do it in something else as I don't think zsh has an
> interface to open with O_NONBLOCK).

Right.  I'm not aware that there is such an interface.

> Or you could do
> 
> : > "$1" & read...
> 
> though it would have other side effects.

Allright, this approach works:

  $ : > fifo & read -t 1 REQUEST <> fifo; kill %

Thanks for helping!

Ciao

Dominik ^_^  ^_^

P.S.:  Please don't cc me; I'm on the list.
-- 
Achtung Sicherheitswarnung: GMX warnt vor Phishing-Attacken!
http://portal.gmx.net/de/go/sicherheitspaket

