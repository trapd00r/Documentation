From zsh-users-return-12289-mason-zsh=primenet.com.au@sunsite.dk Tue Dec 04 14:15:20 2007
Return-Path: <zsh-users-return-12289-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 19242 invoked from network); 4 Dec 2007 14:15:11 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.3 (2007-08-08) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.3
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 4 Dec 2007 14:15:11 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 63675 invoked from network); 4 Dec 2007 14:15:03 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 4 Dec 2007 14:15:03 -0000
Received: (qmail 19922 invoked by alias); 4 Dec 2007 14:14:37 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12289
Received: (qmail 19904 invoked from network); 4 Dec 2007 14:14:36 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 4 Dec 2007 14:14:36 -0000
Received: (qmail 62189 invoked from network); 4 Dec 2007 14:14:36 -0000
Received: from smtp20.orange.fr (80.12.242.27)
  by a.mx.sunsite.dk with SMTP; 4 Dec 2007 14:14:30 -0000
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf2009.orange.fr (SMTP Server) with ESMTP id C0F671C000AB
	for <zsh-users@sunsite.dk>; Tue,  4 Dec 2007 15:14:29 +0100 (CET)
Received: from artesyncp.com (unknown [86.194.142.19])
	by mwinf2009.orange.fr (SMTP Server) with ESMTP id 00CA01C000A1
	for <zsh-users@sunsite.dk>; Tue,  4 Dec 2007 15:14:28 +0100 (CET)
X-ME-UUID: 20071204141429331.00CA01C000A1@mwinf2009.orange.fr
Date: Tue, 4 Dec 2007 14:14:05 +0000
From: Stephane Chazelas <Stephane_Chazelas@yahoo.fr>
To: Zsh Users <zsh-users@sunsite.dk>
Subject: Re: mairix+mutt+zsh (Was: outputting quotes in a command)
Message-ID: <chaz20071204141359.GA32555@artesyncp.com>
Mail-Followup-To: Zsh Users <zsh-users@sunsite.dk>
References: <20071204124228.GA31450@fruitcom.com> <20071204125442.GG591@fsst.voodoo.lan> <chaz20071204131549.GA23122@artesyncp.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="qDbXVdCdHGoSgWSk"
Content-Disposition: inline
In-Reply-To: <chaz20071204131549.GA23122@artesyncp.com>
Organization: Embedded Computing Emerson Network Power
X-URL: http://www.emersonembeddedcomputing.com
User-Agent: Mutt/1.5.16 (2007-09-19)


--qDbXVdCdHGoSgWSk
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

On Tue, Dec 04, 2007 at 01:15:52PM +0000, Stephane CHAZELAS wrote:
> On Tue, Dec 04, 2007 at 01:54:42PM +0100, Frank Terbeck wrote:
> > Eric Smith <es@fruitcom.com>:
> > > I want to output from a script the following command
> > > (obviously where I will have foo bar as variables).
> > > 
> > >  $  mutt -f foo -e 'push "<limit> ~f bar ~d <2w^M"'
> > > Where ^M represents a carriage return
> > 
> > That works here (unless I'm misunderstanding you).
> > Note, that you can use:
> > 
> >   % mutt -f foo -e 'push "<limit> ~f bar ~d <2w<enter>"'
> [...]
> 
> You may also want to consider "mairix" for mail box indexing.
> mairix integrates very well with mutt.
> 
> For those interested, I can share my mairix+zsh+mutt
> customizations (where mairix is invoked within mutt via a zsh
> script that handles a command line with history and completion).
[...]

Ok then, here it is:

In ~/.muttrc, I have:

macro generic S "<enter-command>set my_cmd = \`mutt-mairix\`<return><enter-command>push \$my_cmd<return>"

Where mutt-mairix is the script attached.

mutt-mairix is a wrapper script to mairix that calls an
interactive zsh with "vared" to query the user with search
criteria.

mairix configuration is in ~/.mairixrc as usual. For me,
something like:

base=/home/stephane/Mail
maildir=INBOX...
maildir=Sent Items...
maildir=other-mailboxes...
mfolder=.mairix/mfolder
database=/home/stephane/Mail/.mairix/database

(my mail is in maildir format in ~/Mail).

There's a bit of configuration at the top of mutt-mairix to
match that.

In ~/Mail/.mairix, I also have a .zshrc that customizes the
completion stuff (see attached). It completes using the values
returned by mairix -d (except for body searches for size
reasons).

It completes the f:, a:, n:... stuff. The command lines are
saved in ~/Mail/.mairix/cmdhist, you can use the usual zsh key
binding to look through the history.

It could be tidied up a bit and made more self-contained, but
that works well enough for me as it is.

HTH,
Stephane

--qDbXVdCdHGoSgWSk
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename=mutt-mairix

#! /bin/sh -
# require a POSIX sh, on those systems where the POSIX sh is not in /bin
# (like Solaris), you may need to adapt the shebang line above
# (/usr/xpg4/bin/sh on Solaris). You also need a terminfo aware "tput",
# ncurses one (the default on most systems) will do.

# wrapper around mairix, the mail indexing/searching utility for mutt.
# in your ~/.muttrc:
# macro generic S "<enter-command>set my_cmd = \`mutt-mairix\`<return><enter-command>push \$my_cmd<return>"
# we're not using <shell-escape> because we want to prompt the user in
# mutt's prompt area and still have mutt's index visible.

mairix_base=~/Mail/.mairix
histfile=$mairix_base/cmdhist

# mairix result folder in mutt folder syntax:
mfolder=+.mairix/mfolder

set -f

# restore stdin/stdout to the terminal, fd 3 goes to mutt's backticks.
exec < /dev/tty 3>&1 > /dev/tty

# save tty settings before modifying them
saved_tty_settings=$(stty -g)

trap '
    printf "\r"; tput ed; tput rc
    printf "<refresh>" >&3
    stty "$saved_tty_settings"
    exit
' INT TERM

# retrieve the size of the screen.
set $(stty size)

# save cursor position:
tput sc

# go to last line of the screen
tput cup "$1" 0

# Clear.
tput ed


# run zsh in interactive mode (for history to work and .zshrc to
# be read).
search=$(
  histfile=$histfile ZDOTDIR=$mairix_base zsh -ic '
  stty sane
  bindkey -e
  send-break() {
    print "<BREAK>"
    kill -HUP $$
  }
  accept-line() {
    print -r -- "$BUFFER"
    print -rs -- "$BUFFER"
    fc -P
    kill -HUP $$
  }
  zle -N accept-line
  zle -N send-break
  fc -p -a "$histfile" 100
  a=; vared -p "Search: " -eh a'
)

args=

case $search in
  ("<BREAK>") ;;
  ("")
    # rebuild the index
    args="$args -F"
    cmd="<refresh>"
    ;;
  (+*)
    # append mode
    args="$args -a ${search#+}"
    cmd="<refresh><change-folder-readonly>$mfolder<return>"
    ;;
  (*)
    args="$args $search"
    cmd="<refresh><change-folder-readonly>$mfolder<return>"
    ;;
esac
mairix $args > /dev/null 3>&- &

# clear our mess
printf '\r'; tput ed

# restore cursor position
tput rc

# and tty settings
stty "$saved_tty_settings"

printf %s "$cmd" >&3

--qDbXVdCdHGoSgWSk
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename=".zshrc"

zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate _prefix
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' max-errors 1 not-numeric
zstyle ':completion:*' menu select=0
zstyle ':completion:*' original true
zstyle ':completion:*' prompt 'correct> '
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
autoload -U compinit
compinit -i

mairix_comp() {
  typeset -gA mairix_comp_cache
  typeset -gA mairix_comp_table
  typeset -ga mairix_comp_flags
  typeset -ga mairix_comp_query
  if ((!$#mairix_comp_cache)); then
    . <(
      mairix -d | awk -F '[<>]' '
	/^Contents of <.*> table/ {
	  if (table != "") print "'\''"
	  table = $2
	  gsub(/ .*/, "", table)
	  if (table == "Body")
	    table = ""
	  else {
	    print "zle -R \"Building completion cache [" table "]\""
	    print "mairix_comp_cache[" table "]='\''"
	  }
	  next
	}
	table == "" {next}
	/^Word/ {
	  word = $(NF-1)
	  if (length(word) < 6) next
	  gsub(/'\''/, "'\''\\'\'\''", word)
	  print word
	}
	END {
	  if (table != "") print "'\''"
	}'
    )
    mairix_comp_flags=(
      s:Message\ Seen
      r:Message\ Replied
      f:Message\ Flagged
    )
    mairix_comp_table=(
      t To
      c Cc
      f From
      s Subject
      n Attachment
    )
    mairix_comp_query=(
      t:To
      c:Cc
      f:From
      b:Body
      s:Subject
      n:Attachment
      d:Date
      z:Size
      F:Flags
      m:Message-Id
    )
  fi
    
  if compset -P '*:(*[,/]|)([~^]|)'; then
    local i category
    category=${${IPREFIX%:}//a/bft}
    if [[ $category = F ]]; then
      _describe -t flags 'Message flags' mairix_comp_flags
    else
      typeset -gUa mairix_comp_result
      mairix_comp_result=()
      for i in ${(us::)${IPREFIX%:}//a/cft}; do
	mairix_comp_result+=(${(f)mairix_comp_cache[$mairix_comp_table[$i]]})
      done
      (($#mairix_comp_result)) && compadd $mairix_comp_result
    fi
  else
    local suf
    IPREFIX=$PREFIX[1,-2]
    PREFIX=${PREFIX#$IPREFIX}
    compset -S ':*' || suf=:
    compset -S '*'
    _describe -t query-type 'Query type' mairix_comp_query -S "$suf"
  fi
}
compdef mairix_comp -vared-

--qDbXVdCdHGoSgWSk--

