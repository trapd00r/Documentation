From zsh-workers-return-8837-mason-zsh=primenet.com.au@sunsite.auc.dk Wed Dec 01 12:02:21 1999
Return-Path: <zsh-workers-return-8837-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12521 invoked from network); 1 Dec 1999 12:02:20 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 1 Dec 1999 12:02:20 -0000
Received: (qmail 18233 invoked by alias); 1 Dec 1999 12:02:12 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 8837
Received: (qmail 18226 invoked from network); 1 Dec 1999 12:02:11 -0000
Date: Wed, 1 Dec 1999 13:02:04 +0100 (MET)
Message-Id: <199912011202.NAA14850@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: Alexandre Duret-Lutz's message of 01 Dec 1999 12:15:48 +0000
Subject: Re: PATCH: _prompt: two useless ':*:'


Alexandre Duret-Lutz wrote:

> ~ % prompt -<TAB>
> ~ % prompt -_arguments: bad pattern: adam1):*: [253]
> 
> parse_cadef/parse_caarg won't split the action at colons once the
> first `:*pattern:' is encountered in a description, or for description
> of normal/rest arguments (starting with `n:', `*:' or `:').
> 
> Should this be said en zshcompsys.1 ?  I guess this means we can
> write `:foo:((a\:bar b\:baz))' without needing to escape colons in
> such cases (I didn't try).

Since things may change (i.e. meaning may be given to things which are 
now not meaningful), I thought it better to not document this. In the
pure shell code version this wasn't possible, btw.

Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

