From zsh-workers-request@euclid.skiles.gatech.edu  Fri Dec  8 07:46:04 1995
Received: from euclid.skiles.gatech.edu (euclid.skiles.gatech.edu [130.207.146.50]) by werple.net.au (8.7/8.7.1) with ESMTP id HAA15444 for <mason@werple.mira.net.au>; Fri, 8 Dec 1995 07:45:58 +1100 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id PAA23395; Thu, 7 Dec 1995 15:26:43 -0500 (EST)
Resent-Date: Thu, 7 Dec 1995 15:26:43 -0500 (EST)
Message-Id: <199512072022.PAA02295@redwood.skiles.gatech.edu>
To: zsh-workers@math.gatech.edu
Subject: Re: couple of zsh features 
In-reply-to: Your message of "Thu, 07 Dec 1995 09:29:00 PST."
             <951207092900.ZM17571@zyrcon.z-code.com> 
Date: Thu, 07 Dec 1995 15:22:42 -0500
From: Richard Coleman <coleman@math.gatech.edu>
Resent-Message-ID: <"JOotJ1.0.Tj5.2uqnm"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/681
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

> I do think correctall would be more usable if you could actually enter
> the corrected spelling at the SPROMT, rather than merely accepting or
> rejecting the guess and then having to go back to zle to edit the line.
> 
> } Maybe some kind of compctl-based matching could be used to determine 
> } which word in the previous command was a likely mismatch.
> 
> It might be useful to have the word or character position of the last
> failed correction available to compctl, and to have a history reference
> for the last unknown command or syntax error.

I've also been thinking about similar things.  A lot of the recent
work in zsh has moved more of the intelligence in the code into
the hashtable code.  To use an overused buzz-word, the internals
of zsh have become more `object-oriented' in some sense.  This is
a trend I would like to continue.  The next thing would be to move
some of the command completion and spelling correction code into
hashtable.c.  So (in some sense) each type of object (alias, builtin,
etc...) would know how to complete itself, or spell check itself.
Once this is done, I think we could generalize the code so that both
spelling correction and command completion would be  programmable
in similar ways.

Just a thought.

rc

