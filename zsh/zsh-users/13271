From zsh-users-return-13271-mason-zsh=primenet.com.au@sunsite.dk Sun Sep 21 03:33:57 2008
Return-Path: <zsh-users-return-13271-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 22864 invoked from network); 21 Sep 2008 03:33:44 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,HTML_MESSAGE
	autolearn=ham version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 21 Sep 2008 03:33:44 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 92386 invoked from network); 21 Sep 2008 03:33:29 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 21 Sep 2008 03:33:29 -0000
Received: (qmail 13924 invoked by alias); 21 Sep 2008 03:33:09 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13271
Received: (qmail 13912 invoked from network); 21 Sep 2008 03:33:08 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 21 Sep 2008 03:33:08 -0000
Received: from rv-out-0506.google.com (rv-out-0506.google.com [209.85.198.224])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 6A9AB802720D
	for <zsh-users@sunsite.dk>; Sun, 21 Sep 2008 05:32:49 +0200 (CEST)
Received: by rv-out-0506.google.com with SMTP id g37so899386rvb.21
        for <zsh-users@sunsite.dk>; Sat, 20 Sep 2008 20:32:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to
         :subject:in-reply-to:mime-version:content-type:references;
        bh=zk9wfFwc6TICgC342gKAtVPZ/IyVXnJNuI/Bdq59PK4=;
        b=MwdGDonJ2m2P4HmmrIWdAfcn+eGbQ+AjkQKYlUQ7rBu3oXtVFgKBk3UfW4GDMQMCSZ
         0vkcyXZ47NOndBHzzwT6OZCioeiPd6OMBxwI1UQeFfR615IQyiTI9C1WLUfFDM0jzc8/
         bluivLMrb5TQwjh9V+MqHHOcB10cTP/3H0qGI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:in-reply-to:mime-version
         :content-type:references;
        b=rfBrP4Pu4bVr9q44e+LCiEwl37PE5RIBgd/VmwO+pUtTAfDbfA8J/UdTMRubrUom9E
         pHGVBbrX9JOBxTt0i8Gx9zvcIfOfKVmvCVDTXeCfDz0SmSKVoR9c5dMc8m2SrQjfuwfL
         tBNgomWlryqszKQduN2m13V04jCwVG/+7TpbA=
Received: by 10.115.50.5 with SMTP id c5mr2510072wak.192.1221967968764;
        Sat, 20 Sep 2008 20:32:48 -0700 (PDT)
Received: by 10.114.159.2 with HTTP; Sat, 20 Sep 2008 20:32:48 -0700 (PDT)
Message-ID: <6cd6de210809202032h7a59ad4ck1d4d0f4d292c72f7@mail.gmail.com>
Date: Sat, 20 Sep 2008 23:32:48 -0400
From: "Rocky Bernstein" <rocky.bernstein@gmail.com>
To: "zsh users mailing list" <zsh-users@sunsite.dk>
Subject: Re: reading a file into an array. mapfile? (f)?
In-Reply-To: <20080920202907.GA43828@redoubt.spodhuis.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_32787_21047275.1221967968747"
References: <6cd6de210809171953pd956d75gd4b3609ac036fe0@mail.gmail.com>
	 <080917214418.ZM27616@torch.brasslantern.com>
	 <6cd6de210809181747kc0f0a5bt4489f534589725a8@mail.gmail.com>
	 <20080919100725.5c471019@news01>
	 <6cd6de210809190339g57a4e722u5ad1371e858c8501@mail.gmail.com>
	 <200809191100.m8JB0sAC028936@news01.csr.com>
	 <6cd6de210809190744y38654349qa0db6e4d4b8fc2a5@mail.gmail.com>
	 <20080920202907.GA43828@redoubt.spodhuis.org>
X-Virus-Scanned: ClamAV 0.92.1/8295/Sun Sep 21 00:57:38 2008 on bifrost
X-Virus-Status: Clean

------=_Part_32787_21047275.1221967968747
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On Sat, Sep 20, 2008 at 4:29 PM, Phil Pennock <
zsh-workers+phil.pennock@spodhuis.org<zsh-workers%2Bphil.pennock@spodhuis.org>
> wrote:

> On 2008-09-19 at 10:44 -0400, Rocky Bernstein wrote:
> > So now with this, file listing (the "list" command) is now in the
> debugger.
> > Down the line, file information should be kept. Most important would be
> > modification time and some sort of checksum (or "cryptographic")
> > information. Too bad this isn't already in the zsh/files module.
>
> Mod-time you get from zsh/stat.
>
> You probably want to avoid loading the 'stat' built-in name, since
> nowadays that's an external command with different behaviour, but:
>  zmodload -aF zsh/stat b:zstat
> will get you 'zstat', same behaviour.
>
> % zstat -H foo src
> % print ${(k)foo}
> blksize nlink size rdev mode mtime inode blocks device atime uid link ctime
> gid
> % print $foo[mtime]
> 1220980489
> % zstat -sH foo src
> % print $foo[mtime]
> Tue Sep  9 10:14:49


Ok. Thanks! Missed seeing this because it's not mentioned the last installed
manpage for zshmodules that I have. (However I do see it now in
Doc/Zsh/mod/mod_stat.yo

>
>
> Cryptographic, I'm more cautious of, as the cryptographic libraries tend
> to be fairly large and the ABI compatibility awkward.  Having an
> external command seg-fault because the version of OpenSSL it's loading
> doesn't match the version it was linked against is one thing.  Having
> your shell seg-fault and die when a module is loaded or you run a
> command is another.
>

Actually I didn't use the word "Cryptographic" initially; someone else did.
And I put it in quotes. I'm more thinking hash of the file data more like a
signature or checksum.

>
>
> While zsh could just implement certain checksum algorithms internally,
> picking which ones are "safe" is a cryptanalysis job and the sort of
> thing we should stay away from, as the decisions made would last for
> years (measured in decades, probably).


I think you're making this a bigger deal than it need be. A module
implementing SHA1 would probably be sufficient although what implementers I
think tend to find is that if you code SHA1 adding others isn't a big deal.
So Perl, Python and Ruby all have such modules for SHA1 along with and for a
vast number of other kinds of digests.

>
>
> IMO adding cryptographic support to the shell would be into the area of
> bloat;


Perhaps. All of this is a matter of taste and opinion. To me it's as much
bloat as say mod_files given that, as you say zsh is still well-suited to
running external commands. :-) If it's put in a module, folks can decide to
install it or not.


> zsh is still a Unix shell and still well suited to running
> external commands.
>
> Is there a reason that a single fork/exec to get a checksum is a problem
> (besides worrying about the portability of the checksum commands used)?


Portability is what exactly what I was thinking.

Here is the particular scenario I'm thinking. In debuggers for C, C++, Java,
Python and Ruby (among probably others) one can debug a program remotely.
What often happens here is that the source code may be coming from a
different filesystem than where the program is in fact running. In this
situation one would like a signature or checksum of the data to verify that
the source code is the same. I've noticed in the past that "sum" on Solaris
gives a different result than "sum" on GNU/Linux. I think however that
"md5sum" does give the same result.

But in practice, I am not aware of any debugging systems make use of a
checksum of the source currently. Kind of a shame, but that's the way it is.
And in truth I can't see zshdb getting good enough in the short term to need
this anytime soon. And if I really needed it, I could code up a zsh module.

I had just thought that if it happens to be out there -- like fast file
reading into an array or getting the modification time --  I'd use it in
preparation for someday when it really could be used.

Although the example I give is drawn from debuggers, the same is true in
other problem domains. git for example makes use of signatures for files.
And again the data doesn't have to reside strictly in a file, it could be an
internal string.

But again, thanks for the info.


>
> -Phil
>

------=_Part_32787_21047275.1221967968747
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

<div dir="ltr"><br><br><div class="gmail_quote">On Sat, Sep 20, 2008 at 4:29 PM, Phil Pennock <span dir="ltr">&lt;<a href="mailto:zsh-workers%2Bphil.pennock@spodhuis.org">zsh-workers+phil.pennock@spodhuis.org</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><div class="Ih2E3d">On 2008-09-19 at 10:44 -0400, Rocky Bernstein wrote:<br>
&gt; So now with this, file listing (the &quot;list&quot; command) is now in the debugger.<br>
&gt; Down the line, file information should be kept. Most important would be<br>
&gt; modification time and some sort of checksum (or &quot;cryptographic&quot;)<br>
&gt; information. Too bad this isn&#39;t already in the zsh/files module.<br>
<br>
</div>Mod-time you get from zsh/stat.<br>
<br>
You probably want to avoid loading the &#39;stat&#39; built-in name, since<br>
nowadays that&#39;s an external command with different behaviour, but:<br>
&nbsp;zmodload -aF zsh/stat b:zstat<br>
will get you &#39;zstat&#39;, same behaviour.<br>
<br>
% zstat -H foo src<br>
% print ${(k)foo}<br>
blksize nlink size rdev mode mtime inode blocks device atime uid link ctime gid<br>
% print $foo[mtime]<br>
1220980489<br>
% zstat -sH foo src<br>
% print $foo[mtime]<br>
Tue Sep &nbsp;9 10:14:49</blockquote><div><br>Ok. Thanks! Missed seeing this because it&#39;s not mentioned the last installed manpage for zshmodules that I have. (However I do see it now in Doc/Zsh/mod/mod_stat.yo<br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br>
<br>
Cryptographic, I&#39;m more cautious of, as the cryptographic libraries tend<br>
to be fairly large and the ABI compatibility awkward. &nbsp;Having an<br>
external command seg-fault because the version of OpenSSL it&#39;s loading<br>
doesn&#39;t match the version it was linked against is one thing. &nbsp;Having<br>
your shell seg-fault and die when a module is loaded or you run a<br>
command is another.<br></blockquote><div><br>Actually I didn&#39;t use the word &quot;Cryptographic&quot; initially; someone else did.&nbsp; And I put it in quotes. I&#39;m more thinking hash of the file data more like a signature or checksum.<br>
</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
<br>
While zsh could just implement certain checksum algorithms internally,<br>
picking which ones are &quot;safe&quot; is a cryptanalysis job and the sort of<br>
thing we should stay away from, as the decisions made would last for<br>
years (measured in decades, probably).</blockquote><div><br>I think you&#39;re making this a bigger deal than it need be. A module implementing SHA1 would probably be sufficient although what implementers I think tend to find is that if you code SHA1 adding others isn&#39;t a big deal. So Perl, Python and Ruby all have such modules for SHA1 along with and for a vast number of other kinds of digests.<br>
</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
<br>
IMO adding cryptographic support to the shell would be into the area of<br>
bloat; </blockquote><div><br>Perhaps. All of this is a matter of taste and opinion. To me it&#39;s as much bloat as say mod_files given that, as you say zsh is still well-suited to running external commands. :-) If it&#39;s put in a module, folks can decide to install it or not.<br>
&nbsp;</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">zsh is still a Unix shell and still well suited to running<br>
external commands.<br>
<br>
Is there a reason that a single fork/exec to get a checksum is a problem<br>
(besides worrying about the portability of the checksum commands used)?</blockquote><div><br>Portability is what exactly what I was thinking. <br><br>Here is the particular scenario I&#39;m thinking. In debuggers for C, C++, Java, Python and Ruby (among probably others) one can debug a program remotely. What often happens here is that the source code may be coming from a different filesystem than where the program is in fact running. In this situation one would like a signature or checksum of the data to verify that the source code is the same. I&#39;ve noticed in the past that &quot;sum&quot; on Solaris gives a different result than &quot;sum&quot; on GNU/Linux. I think however that &quot;md5sum&quot; does give the same result.<br>
<br>But in practice, I am not aware of any debugging systems make use of a checksum of the source currently. Kind of a shame, but that&#39;s the way it is. And in truth I can&#39;t see zshdb getting good enough in the short term to need this anytime soon. And if I really needed it, I could code up a zsh module.<br>
<br>I had just thought that if it happens to be out there -- like fast file reading into an array or getting the modification time --&nbsp; I&#39;d use it in preparation for someday when it really could be used. <br><br>Although the example I give is drawn from debuggers, the same is true in other problem domains. git for example makes use of signatures for files. And again the data doesn&#39;t have to reside strictly in a file, it could be an internal string. <br>
<br>But again, thanks for the info.<br><br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
<font color="#888888"><br>
-Phil<br>
</font></blockquote></div><br></div>

------=_Part_32787_21047275.1221967968747--

