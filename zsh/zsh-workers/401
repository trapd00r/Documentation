From zsh-workers-request@math.gatech.edu  Sat Sep 23 04:41:48 1995
Received: from gatech.edu (gatech.edu [130.207.244.244]) by werple.mira.net.au (8.6.12/8.6.12) with SMTP id EAA13301 for <mason@werple.mira.net.au>; Sat, 23 Sep 1995 04:41:42 +1000
Received: from math (math.skiles.gatech.edu) by gatech.edu with SMTP id AA05512
  (5.65c/Gatech-10.0-IDA for <mason@werple.mira.net.au>); Fri, 22 Sep 1995 14:44:03 -0400
Received: by math (5.x/SMI-SVR4)
	id AA25197; Fri, 22 Sep 1995 14:37:47 -0400
Resent-Date: Fri, 22 Sep 1995 11:37:42 -0700
Old-Return-Path: <schaefer@z-code.ncd.com>
From: schaefer@z-code.com (Barton E. Schaefer)
Message-Id: <950922113744.ZM13023@zyrcon.z-code.com>
Date: Fri, 22 Sep 1995 11:37:42 -0700
In-Reply-To: hzoli@cs.elte.hu (Zoltan Hidvegi)
        "Re: input.c and here documents bugfixes" (Sep 22,  6:09pm)
References: <9509221609.AA01612@turan.elte.hu> 
	<9509221703.AA02888@turan.elte.hu>
In-Reply-To: hzoli@cs.elte.hu (Zoltan Hidvegi)
        "Re: input.c and here documents bugfixes" (Sep 22,  7:03pm)
Reply-To: schaefer@z-code.com
X-Face: czU|*h"p8AX?4.I.yU.^s%TIMx|"-s,*'|#H^|e,QjE&!jL%<]:-.U/;khS%3a2BC5_d#)(
 mz=$$G0u9P&*N8cA~b[URf;lgKRif@#qEf[ltie#Gg0%6$b`e`k.Cgw:\qJx\\a7c(K7^3;gXW:e1@
 J<dlE"_MR!jLyY^_Ig[6-B#D2;B2V
X-Mailer: Z-Mail Lite (3.3dev.921 21sep95)
To: hzoli@cs.elte.hu (Zoltan Hidvegi)
Subject: (Fwd) Re: input.c and here documents bugfixes
Cc: zsh-workers@math.gatech.edu
Mime-Version: 1.0
Content-Type: multipart/mixed;
	boundary="PART-BOUNDARY=.1950922113743.ZM13023.z-code.com"
Resent-Message-Id: <"B91qx2.0.d96.w9mOm"@math>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/401
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

--
--PART-BOUNDARY=.1950922113743.ZM13023.z-code.com
Content-Type: text/plain; charset=us-ascii

On Sep 22,  7:03pm, Zoltan Hidvegi wrote:
} Subject: Re: input.c and here documents bugfixes
}
} !     for (l = 0; l < n - 1; l++)
} !       if ((buf[l] = ingetc()) == '\n' || lexstop)
} !           break;
} !     buf[l + (lexstop ? 0 : 1)] = 0;
} 
} If it exit on the l < n - 1 condition, buf[l-1] is the last character it
} wrote, but in all other cases it is buf[l].
} 
} !     for (l = 0; l < n - 1 && (buf[l++] = ingetc()) != '\n' && !lexstop;);
} !     if (lexstop)
} !       l--;
} !     buf[l] = '\0';
} 
} Note that here in all cases, buf[l-1] was the last character written.
} 
} The exit condition guarantees that l < n on exit from the loop, and l is not
} incremented after the exit from the loop, so buf[l] is always in the usable
} address range (unless n = 1 but ingets() never called with this value).

OK, I'm convinced.  I still think ingets() should handle n <= 1, though;
just because it's not called that way now doesn't mean somebody else won't
decide to call it that way in the future.

Attached are Zoltan's two messages that didn't go to zsh-workers.  Here's
a slight variant of Zoltan's patch to handle n <= 1.

--- input.c.0	Thu Sep 21 09:33:45 1995
+++ input.c	Fri Sep 22 11:29:23 1995
@@ -272,10 +272,12 @@
 ingets(char *buf, int n)
 {
     int l;
-    for (l = 0; l < n - 1; l++)
-      if ((buf[l] = ingetc()) == '\n' || lexstop)
-          break;
-    buf[l + (lexstop ? 0 : 1)] = 0;
+
+    for (l = 0; l < n - 1 && (buf[l++] = ingetc()) != '\n' && !lexstop;)
+	;
+    if (lexstop && l > 0)
+	--l;
+    buf[l] = 0;
 
     return (!lexstop || l) ? buf : NULL;
 }

-- 
Bart Schaefer                     Vice President, Technology, Z-Code Software
schaefer@z-code.com                  Division of NCD Software Corporation
http://www.well.com/www/barts

--PART-BOUNDARY=.1950922113743.ZM13023.z-code.com
Content-Description: Message from hzoli@cs.elte.hu (Zoltan Hidvegi)
Content-Type: message/rfc822

Received: from rosebud.ncd.com by zyrcon via SMTP (920330.SGI/920502.SGI)
	for schaefer id AA12729; Fri, 22 Sep 95 09:15:19 -0700
Received: from z-code.z-code.com (z-code.z-code.com [192.82.56.21]) by rosebud.ncd.com (8.6.9/8.6.9) with ESMTP id JAA23312 for <schaefer@zyrcon.z-code.ncd.com>; Fri, 22 Sep 1995 09:13:29 -0700
Received: from ncd.com (firewall-user@hoek.ncd.com [138.43.168.3]) by z-code.z-code.com (8.6.9/8.6.9) with ESMTP id JAA12757 for <schaefer@z-code.ncd.com>; Fri, 22 Sep 1995 09:07:38 -0700
Received: by ncd.com; id JAA04650; Fri, 22 Sep 1995 09:24:59 -0700
Received: from moon.nbn.com(199.4.65.1) by welch.ncd.com via smap (g3.0.1)
	id xma004638; Fri, 22 Sep 95 09:24:45 -0700
Received: from konig.elte.hu (konig.elte.hu [157.181.6.22]) by moon.nbn.com (8.6.12/8.6.12) with SMTP id JAA06794 for <schaefer@z-code.com>; Fri, 22 Sep 1995 09:12:02 -0700
Received: by turan.elte.hu (5.x/SMI-SVR4)
	id AA01612; Fri, 22 Sep 1995 18:09:12 +0200
From: hzoli@cs.elte.hu (Zoltan Hidvegi)
Message-Id: <9509221609.AA01612@turan.elte.hu>
Subject: Re: input.c and here documents bugfixes
To: schaefer@z-code.com
Date: Fri, 22 Sep 1995 18:09:11 +0200 (MET DST)
In-Reply-To: <950921110903.ZM9297@zyrcon.z-code.com> from "Barton E. Schaefer" at Sep 21, 95 11:09:02 am
X-Mailer: ELM [version 2.4 PL23]
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit

Barton E. Schaefer wrote:
> 
> I think Zoltan's input.c patch was incorrect.  The exec.c part of the
> patch is OK.  Here's the relevant bit:
> 
-- patch deleted ---

Sorry, I forgot the semicolon at the end. The patch below should be correct.

The problem with the original file is that is can exit from the for loop on
two conditions.  If it exits when the buffer is filled up, the l counter is
one more than otherwise.

Zoltan

*** 1.2	1995/09/19 17:57:52
--- input.c	1995/09/22 14:59:56
***************
*** 274,283 ****
  {
      int l;
  
!     for (l = 0; l < n - 1; l++)
! 	if ((buf[l] = ingetc()) == '\n' || lexstop)
! 	    break;
!     buf[l + (lexstop ? 0 : 1)] = 0;
  
      return (!lexstop || l) ? buf : NULL;
  }
--- 274,283 ----
  {
      int l;
  
!     for (l = 0; l < n - 1 && (buf[l++] = ingetc()) != '\n' && !lexstop;);
!     if (lexstop)
! 	l--;
!     buf[l] = '\0';
  
      return (!lexstop || l) ? buf : NULL;
  }


--PART-BOUNDARY=.1950922113743.ZM13023.z-code.com
Content-Description: Message from hzoli@cs.elte.hu (Zoltan Hidvegi)
Content-Type: message/rfc822

Received: from rosebud.ncd.com by zyrcon via SMTP (920330.SGI/920502.SGI)
	for schaefer id AA12825; Fri, 22 Sep 95 10:08:47 -0700
Received: from z-code.z-code.com (z-code.z-code.com [192.82.56.21]) by rosebud.ncd.com (8.6.9/8.6.9) with ESMTP id KAA24541 for <schaefer@zyrcon.z-code.ncd.com>; Fri, 22 Sep 1995 10:06:57 -0700
Received: from ncd.com (firewall-user@hoek.ncd.com [138.43.168.3]) by z-code.z-code.com (8.6.9/8.6.9) with ESMTP id KAA13268 for <schaefer@z-code.ncd.com>; Fri, 22 Sep 1995 10:01:06 -0700
Received: by ncd.com; id KAA07225; Fri, 22 Sep 1995 10:18:30 -0700
Received: from moon.nbn.com(199.4.65.1) by welch.ncd.com via smap (g3.0.1)
	id xma007220; Fri, 22 Sep 95 10:18:12 -0700
Received: from konig.elte.hu (konig.elte.hu [157.181.6.22]) by moon.nbn.com (8.6.12/8.6.12) with SMTP id KAA07121 for <schaefer@z-code.com>; Fri, 22 Sep 1995 10:05:51 -0700
Received: by turan.elte.hu (5.x/SMI-SVR4)
	id AA02888; Fri, 22 Sep 1995 19:03:32 +0200
From: hzoli@cs.elte.hu (Zoltan Hidvegi)
Message-Id: <9509221703.AA02888@turan.elte.hu>
Subject: Re: input.c and here documents bugfixes
To: schaefer@z-code.com
Date: Fri, 22 Sep 1995 19:03:32 +0200 (MET DST)
In-Reply-To: <9509220938.ZM4578@zipx1.z-code.com> from "Bart Schaefer" at Sep 22, 95 09:38:15 am
X-Mailer: ELM [version 2.4 PL23]
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit

Bart Schaefer wrote:
> } The problem with the original file is that is can exit from the for loop on
> } two conditions.  If it exits when the buffer is filled up, the l counter is
> } one more than otherwise.
> 
> But that's the right thing to do, unless ingetc() has changed a lot from
> hgetch().  Originally, hgetch() would return a space that wasn't really
> in the input stream whenever lexstop was true; and hgets() [which became
> ingets() recently] would have to trim that space off to return the real
> input.  If the buffer is filled up, then the last character returned by
> ingetc() is a real part of the stream, and the counter should be one
> greater so that the '\0' string-terminator will be inserted after the
> last character read.
> 
> Your loop is completely equivalent as far as I can tell, except that if
> n <= 1 and lexstop happens to already be true before ingets() is called,
> you'll write a '\0' into buf[-1].

Here is the original:

!     for (l = 0; l < n - 1; l++)
!       if ((buf[l] = ingetc()) == '\n' || lexstop)
!           break;
!     buf[l + (lexstop ? 0 : 1)] = 0;


If it exit on the l < n - 1 condition, buf[l-1] is the last character it
wrote, but in all other cases it is buf[l].  The (lexstop ? 0 : 1) hack does
what you said but if l = n - 1 (the buffer filled up) and lexstop is not yes
true (more to come) then buf[n] will be written, which is one byte over the
end of the buffer.  This means that it overwrites the next element on the
stack which may be a return address, a frame pointer or anything else.  And
here is the fixed version:

!     for (l = 0; l < n - 1 && (buf[l++] = ingetc()) != '\n' && !lexstop;);
!     if (lexstop)
!       l--;
!     buf[l] = '\0';

Note that here in all cases, buf[l-1] was the last character written.  This
means that in most cases the terminating null must be written to buf[l], but
if lexstop is one, I decrement l to delete the additional space returned by
ingetc().

The exit condition guarantees that l < n on exit from the loop, and l is not
incremented after the exit from the loop, so buf[l] is always in the usable
address range (unless n = 1 but htegs() never called with this value).

Zoltan


--PART-BOUNDARY=.1950922113743.ZM13023.z-code.com--


