From zsh-users-return-3758-mason-zsh=primenet.com.au@sunsite.dk Wed Mar 28 15:43:11 2001
Return-Path: <zsh-users-return-3758-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29941 invoked from network); 28 Mar 2001 15:43:10 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 28 Mar 2001 15:43:10 -0000
Received: (qmail 16659 invoked by alias); 28 Mar 2001 15:42:54 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 3758
Received: (qmail 16640 invoked from network); 28 Mar 2001 15:42:53 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1010328154142.ZM16104@candle.brasslantern.com>
Date: Wed, 28 Mar 2001 15:41:42 +0000
In-Reply-To: <200103280900.LAA06786@beta.informatik.hu-berlin.de>
Comments: In reply to Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
        "Re: Backticks and                       other tricks" (Mar 28, 11:00am)
References: <200103280900.LAA06786@beta.informatik.hu-berlin.de>
X-Mailer: Z-Mail (5.0.0 30July97)
To: zsh-users@sunsite.dk
Subject: Re: Backticks and                       other tricks
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Mar 28, 11:00am, Sven Wischnowsky wrote:
} 
} Mario Lang wrote:
} 
} > Can anyone cast some light on the following questions
} > regarding the code below:
} > 1. Why does ${(P)...[...]} not work with subscripts of the
} > array? (in fucntion argsargs).
} 
} `array', that's the point.  The ${(P)1} yields an array (a *normal*
} array, not an associative array).

That's not directly the problem ... directly, the problem is that
${(P)1[$i]} first computes ${1[$i]} and then applies (P) to it.

If you get around THAT problem by using ${${(P)1}[$i]}, THEN you get
the problem Sven describes.

Given the relative precedence of flags and subscripts, there's no simple
workaround for this.  We're just going to have to implement ksh namerefs
(not for 4.0.1).

} Currently I don't see a solution other than just not using an
} associative array at all

One can always be creative:

    ${(kP)1}				gives an array of keys, so
    ${${(kP)1}[(i)$i]}			gives the index of the key;
    ${(vP)1}				gives an array of values, so
    ${${(vP)1}[${${(kP)1}[(i)$i]}]}	is the answer.


-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

Zsh: http://www.zsh.org | PHPerl Project: http://phperl.sourceforge.net   

