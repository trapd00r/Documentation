From zsh-users-return-13235-mason-zsh=primenet.com.au@sunsite.dk Thu Sep 18 04:45:19 2008
Return-Path: <zsh-users-return-13235-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 8402 invoked from network); 18 Sep 2008 04:45:17 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 18 Sep 2008 04:45:17 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 39042 invoked from network); 18 Sep 2008 04:44:56 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 18 Sep 2008 04:44:56 -0000
Received: (qmail 24665 invoked by alias); 18 Sep 2008 04:44:27 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13235
Received: (qmail 24648 invoked from network); 18 Sep 2008 04:44:25 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 18 Sep 2008 04:44:25 -0000
Received: from vms173005pub.verizon.net (vms173005pub.verizon.net [206.46.173.5])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 65C4C802720D
	for <zsh-users@sunsite.dk>; Thu, 18 Sep 2008 06:44:21 +0200 (CEST)
Received: from torch.brasslantern.com ([96.238.220.178])
 by vms173005.mailsrvcs.net
 (Sun Java System Messaging Server 6.2-6.01 (built Apr  3 2006))
 with ESMTPA id <0K7D00G2EJTVW8V2@vms173005.mailsrvcs.net> for
 zsh-users@sunsite.dk; Wed, 17 Sep 2008 23:44:20 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id m8I4iI67027618	for
 <zsh-users@sunsite.dk>; Wed, 17 Sep 2008 21:44:19 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id m8I4iIxb027617	for zsh-users@sunsite.dk; Wed,
 17 Sep 2008 21:44:18 -0700
Date: Wed, 17 Sep 2008 21:44:18 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: reading a file into an array. mapfile? (f)?
In-reply-to: <6cd6de210809171953pd956d75gd4b3609ac036fe0@mail.gmail.com>
To: "zsh users mailing list" <zsh-users@sunsite.dk>
Message-id: <080917214418.ZM27616@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <6cd6de210809171953pd956d75gd4b3609ac036fe0@mail.gmail.com>
Comments: In reply to "Rocky Bernstein" <rocky.bernstein@gmail.com>
 "reading a file into an array. mapfile? (f)?" (Sep 17, 10:53pm)
X-Virus-Scanned: ClamAV 0.92.1/8275/Thu Sep 18 03:16:55 2008 on bifrost
X-Virus-Status: Clean

On Sep 17, 10:53pm, Rocky Bernstein wrote:
} Subject: reading a file into an array. mapfile? (f)?
} 
} I'd like to a read a file (a zsh script file) into an array fast.

Ending up with what, one line per array entry?  I'm guessing so since
you mention the (f) expansion flag.

} [...] I also know about mapfile which reads the file and turns it
} into a single long zsh string. Question: if the underlying file
} changes, what does mapfile do? Update its data? Keep the original?
} Show something which is indeterminant?

When you reference a hash key in the mapfile hash, zsh calls mmap()
to access the file contents, but immediately allocates enough memory
to contain the data and copies into it.  The file is then unmapped.
This is done because parameter values are stored with zsh's internal
"metafication" already applied, and it's obviously not possible to
metafy the file in place.

If the file is modified during the brief period when zsh has it mapped
and is copying it, you could get indeterminate results.  It probably
depends on the system's mmap() implementation.  After the file has been
copied, zsh no longer pays attention to it.

If you assign a value to a field in the mapfile hash, zsh attempts
to mmap() the the corresponding disk file for writing, and whatever
you assigned replaces the file contents by way of msync().  You can
(I think) assign to slices of the file, but nothing magical is done,
so the entire file is rewritten unless the msync() implementation is
clever.
 
} There is also the zsh parameter expansion operator (f) "a shorthand
} for 'pws:\n:'". But I don't see how to use that with either mapfile or
} input redirection to save this into an array variable short of putting
} this in a loop

It's much simpler than you seem to believe:

lines=( ${(f)mapfile[/path/to/file]} )

Splitting up /etc/termcap this way (17890 lines on my system) takes
a little less than 0.08 seconds on my 3GHz Pentium 4.  Fully parsing
termcap into "shell words" with (z) takes about 0.13 seconds.  For
/usr/share/dict/words (479829 lines), (f) takes about 0.8 seconds but
(z) takes almost 13 seconds.

