From zsh-workers-request@math.gatech.edu Mon Sep 15 03:11:07 1997
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 10035 invoked from network); 15 Sep 1997 03:11:05 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 15 Sep 1997 03:11:05 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.8.5/8.8.5) id XAA13734;
	Sun, 14 Sep 1997 23:03:33 -0400 (EDT)
Resent-Date: Sun, 14 Sep 1997 23:03:07 -0400 (EDT)
Message-ID: <19970914200202.04363@sco.com>
Date: Sun, 14 Sep 1997 20:02:02 -0700
From: "Adam R. Paul" <adamp@sco.com>
To: zsh <zsh-users@math.gatech.edu>
Subject: Re: multiple background jobs of the same program
References: <9709140326.AA21133@cryptica.UCSD.EDU> <19970914102839.45957@sco.com> <970914121042.ZM22784@candle.brasslantern.com> <19970914150505.11879@sco.com> <970914160910.ZM23900@candle.brasslantern.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.81
In-Reply-To: <970914160910.ZM23900@candle.brasslantern.com>; from Bart Schaefer on Sun, Sep 14, 1997 at 04:09:10PM -0700
Resent-Message-ID: <"Nj9y63.0.6M3.hLA7q"@math>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/1021
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

It would appear that on Sun, Sep 14, 1997 at 04:09:10PM -0700, Bart Schaefer wrote:
> On Sep 14,  3:05pm, Adam R. Paul wrote:
> } Subject: Re: multiple background jobs of the same program
> }
> } > Replace the `#' with `;:'.  This works best if you have menu completion
> } > so that the `;' isn't interpreted as a command separator until after you
> } > have a chance to cycle through all the possibilities.
> } 
> } Hmm, it doesn't appear to work at all unless menu_complete is set :(  
> 
> I use automenu, not menucomplete, and it's OK there ....

Hmm, I think I'm using automenu too (its not set explicitly, but it does
show up in my 'unsetopt' completion (which completes on set options), and 
not in my 'setopt' completion (which completes on unset options:) )

> However, it works for me with autolist and listambiguous, at least as far
> as getting the listing:
> 
> zagzig[37] fg <TAB>
> %1 ;: vim fo       %2 ;: info -f zsh  %3 ;: vim bar
> zagzig[37] fg %
> 
> At this point if I hit TAB again I get a beep, and if I supply (say) the
> digit 1 and then hit TAB I encounter what must be a completion bug:
> 
> zagzig[37] fg %1<TAB>
> zagzig[37] fg %^@1
> %1 ;: vim fo       %2 ;: info -f zsh  %3 ;: vim bar
> zagzig[37] fg %
> 
> That ^@ in there is a nul byte that zsh is incorrectly inserting.  It then
> gets erased by compctl -U, but it shouldn't be there to begin with.
> 
> Anyway, the ;: has nothing to do with this particular problem -- get rid of
> the -U if you don't use automenu or menucomplete, and things should be much
> better.
> 
> I just played around with this a bit and discovered that you don't need -U
> at all as long as reply is an empty array (rather than an array containing
> the empty string) when there are no jobs -- which you can do by testing
> whether "jobs" produced any output before running the "sed".  See below.
> 
> } > Either remove the temp file or use >| so `setopt clobber' isn't needed.
> } 
> } I'd love to not use a temp file, but it appears that piping 'jobs' output
> 
> No, I didn't mean don't use the temp file; I meant end the function with
> "rm /tmp/._zshjobcomp.$$".
> 
> Anyway, to summarize:
> 
> listjobs() {
>   jobs >| /tmp/._zshjobcomp.$$ 2>&1
>   if [[ -s /tmp/._zshjobcomp.$$ ]]
>   then
>    reply=( "${(@f)$(sed -e '{
>     s/.\(....\).............\(.*\)/%\1 ;: \2/g
>     s/\]//g
>     s/  */ /g
>     }' /tmp/._zshjobcomp.$$)}" )
>   else
>    reply=()
>   fi
> }
> 
> compctl -Q -K listjobs fg bg kill

Thanks much again!  That's _almost_ perfect :)  The only remaining thing is
that if a job is suspended due to tty output/input, the sed script doesn't
quite do the right thing (the completion looks like:

fg %1 ;: tty output) vi foo

which then gives a parse error if you hit <return> due to the unmatched ')'.
Oh well, no biggie:)


Thanks again, Bart,
	_Adam

-----
Adam R. Paul    - adamp@sco.com 
SCO Engineering - #include <stddisclaimer.h>

Nshiaththao.  Thcolkathsh iont eth n'aathtaghaa kgandu ouaiaaphu thbakggaghn.  

