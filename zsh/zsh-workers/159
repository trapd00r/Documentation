From zsh-workers-request@math.gatech.edu  Fri Jul  7 01:27:32 1995
Received: from gatech.edu (gatech.edu [130.207.244.244]) by werple.mira.net.au (8.6.12/8.6.9) with SMTP id BAA26661 for <mason@werple.mira.net.au>; Fri, 7 Jul 1995 01:27:24 +1000
Received: from math (math.skiles.gatech.edu) by gatech.edu with SMTP id AA09492
  (5.65c/Gatech-10.0-IDA for <mason@werple.mira.net.au>); Thu, 6 Jul 1995 11:26:25 -0400
Received: by math (5.x/SMI-SVR4)
	id AA06418; Thu, 6 Jul 1995 11:23:26 -0400
Resent-Date: Thu, 6 Jul 1995 17:21:57 +0200 (MET DST)
Old-Return-Path: <kaefer@aglaia.snafu.DE>
Message-Id: <m0sTskY-00000PC@aglaia.snafu.DE>
Subject: SIGSEGV caused by global substitution modifier
To: zsh-workers@math.gatech.edu
Date: Thu, 6 Jul 1995 17:21:57 +0200 (MET DST)
From: Thorsten Meinecke <kaefer@aglaia.snafu.de>
Organization: none. Location: Berlin, Germany
X-Mailer: ELM [version 2.4 PL23]
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Resent-Message-Id: <"Q_TFe1.0.Ca1.j__-l"@math>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/159
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

Please have a look at this:

  $ zsh-2.6-beta5 -Fc 'FOO=123;echo $FOO:gs//bar/'
  bar
  $ zsh-2.6-beta10 -fc 'FOO=123;echo $FOO:gs//bar/'
  zsh: segmentation fault  zsh-2.6-beta10 -fc 'FOO=123;echo $FOO:gs//bar/'
  

$FOO:gs/// loops forever now, which is especially unpleasant (since
not interruptible) when it occurs in completion control functions like
P.Stephenson's new `multicomp'. This is how I noticed the problem.

You might want to try `!??:gs///' on the command line, too. Don't.

An empty left-hand side of a substitution has a special meaning
("use scan string or previous match"), right? Only if there's no
non-empty scan string or previous match, the left-hand side evaluates
to a null string, and zsh chokes.


There's another (somewhat related) problem: Used on the result of
parameter expansion, empty l strings of substitution modifiers don't
produce the expected result:

  $ FOO=1213
  $ echo $FOO:s/1/a/:s//b/
  b

I've expected `a2b3'. That is what `!:s/1/a/:s//b/' would give.

This "feature" is present at least since zsh-2.4.306-beta. Are there
any rationales behind this?


[zsh-2.6-beta10, Linux 1.2.0, libc 4.5.26, gcc 2.5.8]
-- 
Thorsten Meinecke
<kaefer@aglaia.snafu.de>

