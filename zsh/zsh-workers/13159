From zsh-workers-return-13159-mason-zsh=primenet.com.au@sunsite.auc.dk Mon Nov 13 16:21:02 2000
Return-Path: <zsh-workers-return-13159-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 6536 invoked from network); 13 Nov 2000 16:20:43 -0000
Received: from sunsite.dk (HELO sunsite.auc.dk) (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 13 Nov 2000 16:20:43 -0000
Received: (qmail 7772 invoked by alias); 13 Nov 2000 16:20:48 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 13159
Received: (qmail 7763 invoked from network); 13 Nov 2000 16:20:44 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1001113162002.ZM22020@candle.brasslantern.com>
Date: Mon, 13 Nov 2000 16:20:01 +0000
In-Reply-To: <200011131021.LAA30936@beta.informatik.hu-berlin.de>
Comments: In reply to Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
        "Re: PATCH: Misc. zpty tweaks, plus commentary" (Nov 13, 11:21am)
References: <200011131021.LAA30936@beta.informatik.hu-berlin.de>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>,
        zsh-workers@sunsite.auc.dk
Subject: Re: PATCH: Misc. zpty tweaks, plus commentary
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Nov 13, 11:21am, Sven Wischnowsky wrote:
} Subject: Re: PATCH: Misc. zpty tweaks, plus commentary
}
} [ in another message: ]
} 
} > This reveals that still another remaining problem is that `zpty -w' on a
} > blocking pty doesn't stop when the process on the pty is killed.  There
} > doesn't seem to be any simple fix for this; write() itself is blocked,
} > and does not get interrupted with SIGPIPE as would normally occur.
} 
} Hm, yes. There might be a solution using the fact that we have a
} subshell that we could make ignore SIGHUP (and write something to the
} pty or whatever). But I currently can't see how this really helps.

If we kept track of the fact that the process on the pty is one of our
children, we could handle all of this when the SIGCHLD arrives.  Modules
need to be able to register handlers for that as much (if not more) than
they need to be able to register I/O handlers.

A simple table mapping PIDs to callbacks would suffice.

} [ and in yet another message: ]
} 
} > I haven't done anything about it, but this code clearly expects that
} > no '\0' bytes will ever be sent to or received from the pty.  That's
} > obviously a fallacy; we shouldn't be treating this data as C strings.
} 
} Yes and no. For reading, this already worked (the call to metafy()).

Lines 467 and 519 sling cmd->old around with strcpy().  The metafy() on
525 only works if there's never been read-ahead.

} > (On my RH5.2 linux system, select() always returns 1 after the pty's
} > command has exited, so read_poll() also returns 1 and cmd->fin never
} > gets set.  read(), however, gets an I/O error (errno == 5), so `zpty -r'
} > returns 1 and it's not possible to detect that the command has finished.
} 
} Another reason for not using read_poll(), does anyone see a way to
} allow us to find out if a command has exited and still be able to read 
} the rest of its output?

The SIGCHLD handler could deal with this, too.  (The finding-out part, not
the reading-the-rest part.)

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

Zsh: http://www.zsh.org | PHPerl Project: http://phperl.sourceforge.net   

