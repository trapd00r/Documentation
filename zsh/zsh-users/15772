From zsh-users-return-15772-mason-zsh=primenet.com.au@zsh.org Sat Feb 05 18:08:55 2011
Return-Path: <zsh-users-return-15772-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27746 invoked by alias); 5 Feb 2011 18:08:55 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15772
Received: (qmail 27252 invoked from network); 5 Feb 2011 18:08:45 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <110205100816.ZM26346@torch.brasslantern.com>
Date: Sat, 05 Feb 2011 10:08:16 -0800
In-reply-to: <alpine.DEB.2.00.1102051117470.6077@MyComp2.rgm-web.net>
Comments: In reply to Rory Mulvaney <rory1@umbc.edu>
 "I/O to shell function in zsh coproc" (Feb  5, 11:22am)
References: <alpine.DEB.2.00.1102051117470.6077@MyComp2.rgm-web.net>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@zsh.org
Subject: Re: I/O to shell function in zsh coproc
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Feb 5, 11:22am, Rory Mulvaney wrote:
>
> I think this is a bug in zsh (4.3.10), I can't figure out what is wrong:
> 
> function wcFunc() {
>    wc
> }
> 
> # coproc wc : works with plain wc
> coproc wcFunc

You're right, there is a bug there.  I'm not immediately sure where to
fix it, but there's a workaround.

The bug is that when you do 'coproc shellfunction', zsh has to fork a
subshell to run the shellfunction in another process.  The trouble is
that the subshell therefore gets copies of the coprocess descriptors
that are open in the parent shell.  If the subshell later forks off
a job (wc in this example) and waits for it, it will hold that job's
standard input open forever.

Related:  It'd be nice if SHLVL was incremented when entering this
special-purpose intermediate subshell, but it isn't.

The workaround until this is repaired is to force the coproc descriptors
closed in the function the same way you're later going to force them to
be closed in the parent:

    wcFunc() {
      coproc exit
      wc
    }

