From zsh-workers-return-11564-mason-zsh=primenet.com.au@sunsite.auc.dk Wed May 24 16:23:11 2000
Return-Path: <zsh-workers-return-11564-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 3389 invoked from network); 24 May 2000 16:23:10 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 24 May 2000 16:23:10 -0000
Received: (qmail 3332 invoked by alias); 24 May 2000 16:23:04 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 11564
Received: (qmail 3325 invoked from network); 24 May 2000 16:23:03 -0000
X-Envelope-Sender-Is: Andrej.Borsenkow@mow.siemens.ru (at relayer david.siemens.de)
From: "Andrej Borsenkow" <Andrej.Borsenkow@mow.siemens.ru>
To: "Peter Stephenson" <pws@cambridgesiliconradio.com>,
   "Zsh hackers list" <zsh-workers@sunsite.auc.dk>
Subject: RE: FIFOs again
Date: Wed, 24 May 2000 20:23:00 +0400
Message-ID: <000301bfc59c$53d10300$21c9ca95@mow.siemens.ru>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="koi8-r"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
Importance: Normal
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6700
In-reply-to: <0FV200D5BGD1A8@la-la.cambridgesiliconradio.com>


  I tried with
>
>   cat <(echo foo)
>
> and confirmed that it's the cat which hangs forever, waiting
> for something
> to open the other end of the pipe for writing.  At least
> that's what seems
> to be happening with Solaris 2.6.
>

Yes, you are right. The correct thing is - open FIFO for read AND write
and close it after command exited. (Opening just for read or write is
not enough and has potentially the same problems).

Probably, we could use the same structure as is used to keep track of
FIFO names for descriptors as well. It should cover the case of
background job as well.

Hmm ... and then again, all of them should be closed in next child ...
why do not we simply use

for(i=3;i++;i<MAX_FD) close(i);

in child? I just discovered that (probably, due to a bug) logon shells
keep one stray open file descriptor that is never closed by shell.

> Keeping the process open in the parent might work, however (there's a
> slight extra subtlety over your code that we need to check the fork
> returned a positive value).

Yes, of course. I think, there is no problem to have it opened as long
as we never actually use it.

-andrej

