From zsh-workers-return-11535-mason-zsh=primenet.com.au@sunsite.auc.dk Tue May 23 14:43:48 2000
Return-Path: <zsh-workers-return-11535-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 17369 invoked from network); 23 May 2000 14:43:46 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 23 May 2000 14:43:46 -0000
Received: (qmail 26995 invoked by alias); 23 May 2000 14:43:31 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 11535
Received: (qmail 26970 invoked from network); 23 May 2000 14:43:30 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1000523144310.ZM865@candle.brasslantern.com>
Date: Tue, 23 May 2000 14:43:10 +0000
In-Reply-To: <200005231315.PAA24546@beta.informatik.hu-berlin.de>
Comments: In reply to Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
        "Re: PATCH: Re: _netscape" (May 23,  3:15pm)
References: <200005231315.PAA24546@beta.informatik.hu-berlin.de>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>,
        zsh-workers@sunsite.auc.dk
Subject: zparseopts change (Re: PATCH: Re: _netscape)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On May 23,  3:15pm, Sven Wischnowsky wrote:
} Subject: Re: PATCH: Re: _netscape
}
} +The tt(-E) option allows to extract the options described by the
} +var(specs) from the positional parameters, ignoring all other strings.

Could you make that just a little bit more verbose, please?  What does
"extract" mean?  How does "ignoring" affect the parsing?  E.g.,

	set -- -a x -b y -c -d z -- -e foo bar -f end
	zparseopts -a try1 b:
	zparseopts -a try2 a
	zparseopts -a try3 a: b: c
	zparseopts -a try4 a: b: c d: e:
	zparseopts -E -a try5 b: c d: e:
	zparseopts -E -a try6 a: b: c d: e: -
	echo try1 = $try1		# Parses nothing
	echo try2 = $try2		# Stops at x
	echo try3 = $try3		# Stops at -d
	echo try4 = $try4		# Stops at --
	echo try5 = $try5		# Does what?  Why?
	echo try6 = $try6		# Does what?  Why?

I could find out by trial-and-error, but should I have to?

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

