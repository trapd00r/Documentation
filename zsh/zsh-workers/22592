From zsh-workers-return-22592-mason-zsh=primenet.com.au@sunsite.dk Tue Aug 08 11:25:04 2006
Return-Path: <zsh-workers-return-22592-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5227 invoked from network); 8 Aug 2006 11:25:00 -0000
X-Spam-Checker-Version: SpamAssassin 3.1.4 (2006-07-25) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.4 required=5.0 tests=AWL,BAYES_00,
	FORGED_RCVD_HELO autolearn=ham version=3.1.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 8 Aug 2006 11:25:00 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 14040 invoked from network); 8 Aug 2006 11:24:53 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 8 Aug 2006 11:24:53 -0000
Received: (qmail 2742 invoked by alias); 8 Aug 2006 11:24:50 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 22592
Received: (qmail 2733 invoked from network); 8 Aug 2006 11:24:49 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 8 Aug 2006 11:24:49 -0000
Received: (qmail 13675 invoked from network); 8 Aug 2006 11:24:49 -0000
Received: from cluster-d.mailcontrol.com (217.69.20.190)
  by a.mx.sunsite.dk with SMTP; 8 Aug 2006 11:24:48 -0000
Received: from cameurexb01.EUROPE.ROOT.PRI ([62.189.241.200])
	by rly07d.srv.mailcontrol.com (MailControl) with ESMTP id k78BOELc004383
	for <zsh-workers@sunsite.dk>; Tue, 8 Aug 2006 12:24:39 +0100
Received: from news01.csr.com ([10.103.143.38]) by cameurexb01.EUROPE.ROOT.PRI with Microsoft SMTPSVC(6.0.3790.1830);
	 Tue, 8 Aug 2006 12:24:27 +0100
Received: from news01.csr.com (localhost.localdomain [127.0.0.1])
	by news01.csr.com (8.13.4/8.13.4) with ESMTP id k78BOR0K007023
	for <zsh-workers@sunsite.dk>; Tue, 8 Aug 2006 12:24:27 +0100
Received: from csr.com (pws@localhost)
	by news01.csr.com (8.13.4/8.13.4/Submit) with ESMTP id k78BOR7g007020
	for <zsh-workers@sunsite.dk>; Tue, 8 Aug 2006 12:24:27 +0100
Message-Id: <200608081124.k78BOR7g007020@news01.csr.com>
X-Authentication-Warning: news01.csr.com: pws owned process doing -bs
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: PATCH: tcp_send -c
Date: Tue, 08 Aug 2006 12:24:27 +0100
From: Peter Stephenson <pws@csr.com>
X-OriginalArrivalTime: 08 Aug 2006 11:24:28.0010 (UTC) FILETIME=[35D184A0:01C6BADD]
Content-Type: text/plain
MIME-Version: 1.0
X-Scanned-By: MailControl A-07-04-01 (www.mailcontrol.com) on 10.68.0.117

Minor addition to tcp_send I realised I needed now I have a scope I can
programme remotely...

Index: Doc/Zsh/tcpsys.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/tcpsys.yo,v
retrieving revision 1.9
diff -u -r1.9 tcpsys.yo
--- Doc/Zsh/tcpsys.yo	20 Mar 2006 11:06:25 -0000	1.9
+++ Doc/Zsh/tcpsys.yo	8 Aug 2006 11:22:27 -0000
@@ -185,13 +185,18 @@
 See tt(tcp_log) for how to control where data is sent by tt(tcp_read).
 )
 findex(tcp_send)
-xitem(tt(tcp_send [-nq] [ -s) var(sess) tt(| -l) var(sess)tt(,... ]) var(data) tt(...))
-item(tt(tcp_send [-nq] -a) var(data) tt(...))(
+xitem(tt(tcp_send [-cnq] [ -s) var(sess) tt(| -l) var(sess)tt(,... ]) var(data) tt(...))
+item(tt(tcp_send [-cnq] -a) var(data) tt(...))(
 Send the supplied data strings to all the specified sessions in turn.  The
 underlying operation differs little from a `tt(print -r)' to the session's
 file descriptor, although it attempts to prevent the shell from dying owing
 to a tt(SIGPIPE) caused by an attempt to write to a defunct session.
 
+The option tt(-c) causes tt(tcp_send) to behave like tt(cat).  It reads
+lines from standard input until end of input and sends them in turn to the
+specified session+LPAR()s+RPAR() exactly as if they were given as var(data)
+arguments to individual tt(tcp_send) commands.
+
 The option tt(-n) prevents tt(tcp_send) from putting a newline at the end
 of the data strings.
 
Index: Functions/TCP/tcp_send
===================================================================
RCS file: /cvsroot/zsh/zsh/Functions/TCP/tcp_send,v
retrieving revision 1.3
diff -u -r1.3 tcp_send
--- Functions/TCP/tcp_send	25 Jul 2003 10:53:45 -0000	1.3
+++ Functions/TCP/tcp_send	8 Aug 2006 11:22:28 -0000
@@ -1,14 +1,16 @@
 emulate -L zsh
 setopt extendedglob cbases
 
-local opt quiet all sess fd nonewline
+local opt quiet all sess fd nonewline cat line
 local -a sessions write_fds
 integer mystat
 
-while getopts "al:nqs:" opt; do
+while getopts "acl:nqs:" opt; do
     case $opt in
 	(a) all=1
 	    ;;
+        (c) cat=1
+	    ;;
 	(n) nonewline=-n
 	    ;;
 	(q) quiet=1
@@ -55,21 +57,29 @@
 
 local TCP_SESS
 
-for TCP_SESS in $sessions; do
+while true; do
+  if [[ -n $cat ]]; then
+    read -r line || break
+  else
+    line="$*"
+  fi
+  for TCP_SESS in $sessions; do
     fd=${tcp_by_name[$TCP_SESS]}
     if [[ -z $fd ]]; then
-	print "No such session: $TCP_SESS" >&2
-	mystat=1
-	continue
+      print "No such session: $TCP_SESS" >&2
+      mystat=1
+      continue
     fi
-    print -u $fd $nonewline -r -- $*
+    print -u $fd $nonewline -r -- $line
     if [[ $? -ne 0 || -n $TCP_FD_CLOSED ]]; then
-	print "Session ${TCP_SESS}: fd $fd unusable." >&2
-	unset TCP_FD_CLOSED
+      print "Session ${TCP_SESS}: fd $fd unusable." >&2
+      unset TCP_FD_CLOSED
     fi
     if [[ -n $TCP_OUTPUT ]]; then
-	tcp_output -P "$TCP_OUTPUT" -S $TCP_SESS -F $fd -q "${(j. .)*}"
+      tcp_output -P "$TCP_OUTPUT" -S $TCP_SESS -F $fd -q "${(j. .)*}"
     fi
+  done
+  [[ -z $cat ]] && break
 done
 
 return $mystat

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070


To access the latest news from CSR copy this link into a web browser:  http://www.csr.com/email_sig.php

