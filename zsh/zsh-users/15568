From zsh-users-return-15568-mason-zsh=primenet.com.au@zsh.org Tue Nov 23 07:17:39 2010
Return-Path: <zsh-users-return-15568-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 18293 invoked by alias); 23 Nov 2010 07:17:39 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15568
Received: (qmail 22152 invoked from network); 23 Nov 2010 07:17:37 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <101122231728.ZM14115@torch.brasslantern.com>
Date: Mon, 22 Nov 2010 23:17:25 -0800
In-reply-to: <alpine.LNX.2.01.1011221338470.2792@hp>
Comments: In reply to "Benjamin R. Haskell" <zsh@benizi.com>
 "Re: Equivalent of Vim's has("feature")?" (Nov 22,  2:02pm)
References: <alpine.LNX.2.01.1011221149110.2792@hp>
	<20101122173206.31daca15@pwslap01u.europe.root.pri>
	<alpine.LNX.2.01.1011221338470.2792@hp>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: Zsh Users <zsh-users@zsh.org>
Subject: Re: Equivalent of Vim's has("feature")?
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Nov 22,  2:02pm, Benjamin R. Haskell wrote:
}
} Is there any support for ZSH_PATCHLEVEL in is-at-least?  :a and :A were 
} added in ZSH_VERSION=4.3.10(-dev-1?) ZSH_PATCHLEVEL=1.4618.

is-at-least 1.4618 $ZSH_PATCHLEVEL

However, that fails on versions of zsh where ZSH_PATCHLEVEL itself is
not yet defined.

} > you have to attempt to make use of the feature and record the result.
} 
} Both of these seem slippery-slopy.  (Easy for one feature, but 
} increasingly annoying as more tests are needed.

I don't see any way to avoid "more tests" as features are added, no
matter what form the tests take.

Furthermore, there's a chicken-and-egg problem -- how do you test for
the feature that provides the test for other features?

For example, PWS didn't mention that features derived from modules
(such as the existence of the "widgets" parameter itself) can be
checked by running "zmodload -lF modulename featurespec" as in

    zmodload -lF zsh/zleparameter p:widgets

However, this is the egg of the zmodload chicken, because the feature
of modules providing named lists of their features is also relatively
recent.

} Also, if a given feature takes non-trivial time to test.)

At some point one has to recognize that it's not practical (nor in
actual practice necessary) to test for the existence of every possible
feature every time the shell starts up.  Run "make check" in the zsh
build tree for an idea of how long it takes to test a large number of
features even when each of them takes trivial time to test.

} Nonetheless, I guess I don't have some easy-peasy way to add the      
} feature detection to the case statement in Src/hist.c and a new       
} parameter in Src/Modules/parameter.c                                  

I think you're holding zsh to a rather more detailed standard than
vim if you think zsh ought to provide a compiled-in self-test for
every syntactic nit. :-)  However, no-prize to you if you can even
come up with a naming convention that would cover everything that
might need to be tested.

-- 

