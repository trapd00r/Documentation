From zsh-users-return-4858-mason-zsh=primenet.com.au@sunsite.dk Wed Apr 24 21:50:33 2002
Return-Path: <zsh-users-return-4858-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 19645 invoked from network); 24 Apr 2002 21:50:32 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 24 Apr 2002 21:50:32 -0000
Received: (qmail 10520 invoked by alias); 24 Apr 2002 21:50:11 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 4858
Received: (qmail 10504 invoked from network); 24 Apr 2002 21:50:09 -0000
To: zsh-users@sunsite.auc.dk
Subject: Z-Shell (zsh) FAQ changes this month
Date: Wed, 24 Apr 2002 21:55:34 +0100
From: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Message-Id: <20020424205539.821001C0A2@pwstephenson.fsnet.co.uk>

This file contains general information on how to find out about zsh,
(the first part of the FAQ up to item 1.1), then any other items which
have changed since last month's posting, then the differences in the
yodl version of the FAQ.  If you would like a complete individual
copy, email me and I will add you to the list.





Archive-Name: unix-faq/shell/zsh
Last-Modified: 2002/04/24
Submitted-By: pws@pwstephenson.fsnet.co.uk (Peter Stephenson)
Posting-Frequency: Monthly
Copyright: (C) P.W. Stephenson, 1995--2001 (see end of document)

Changes since last issue posted:

  passim Be more explicit about how to set options.
  1.7    More care about infinite loops exec'ing zsh.

This document contains a list of frequently-asked (or otherwise
significant) questions concerning the Z-shell, a command interpreter
for many UNIX systems which is freely available to anyone with FTP
access.  Zsh is among the most powerful freely available Bourne-like
shell for interactive use.

If you have never heard of `sh', `csh' or `ksh', then you are
probably better off to start by reading a general introduction to UNIX
rather than this document.

If you just want to know how to get your hands on the latest version,
skip to question 1.6; if you want to know what to do with
insoluble problems, go to 5.2.

Notation: Quotes `like this' are ordinary textual quotation
marks.  Other uses of quotation marks are input to the shell.

Contents:
Chapter 1:  Introducing zsh and how to install it
1.1. Sources of information
1.2. What is it?
1.3. What is it good at?
1.4. On what machines will it run?  (Plus important compilation notes)
1.5. What's the latest version?
1.6. Where do I get it?
1.7. I don't have root access: how do I make zsh my login shell?

Chapter 2:  How does zsh differ from...?
2.1. sh and ksh?
2.2. csh?
2.3. Why do my csh aliases not work?  (Plus other alias pitfalls.)
2.4. tcsh?
2.5. bash?
2.6. Shouldn't zsh be more/less like ksh/(t)csh?

Chapter 3:  How to get various things to work
3.1. Why does `$var' where `var="foo bar"' not do what I expect?
3.2. In which startup file do I put...?
3.3. What is the difference between `export' and the ALL_EXPORT option?
3.4. How do I turn off spelling correction/globbing for a single command?
3.5. How do I get the meta key to work on my xterm?
3.6. How do I automatically display the directory in my xterm title bar?
3.7. How do I make the completion list use eight bit characters?
3.8. Why do the cursor (arrow) keys not work?
3.9. Why does my terminal act funny in some way?
3.10. Why does zsh not work in an Emacs shell mode any more?
3.11. Why do my autoloaded functions not autoload [the first time]?
3.12. How does base arithmetic work?
3.13. How do I get a newline in my prompt?
3.14. Why does `bindkey ^a command-name' or 'stty intr ^-' do something funny?
3.15. Why can't I bind \C-s and \C-q any more?
3.16. How do I execute command `foo' within function `foo'?
3.17. Why do history substitutions with single bangs do something funny?
3.18. Why does zsh kill off all my background jobs when I logout?
3.19. How do I list all my history entries?
3.20. How does the alternative loop syntax, e.g. `while {...} {...}' work?
3.21. Why is my history not being saved?
3.22. How do I get a variable's value to be evaluated as another variable?
3.23. How do I prevent the prompt overwriting output when there is no newline?
3.24. What's wrong with cut and paste on my xterm?
3.25. How do I get coloured prompts on my colour xterm?
3.26. Why is my output duplicated with `foo 2>&1 >foo.out | bar'?
3.27. Why am I prompted to correct commands which are in my path?

Chapter 4:  The mysteries of completion
4.1. What is completion?
4.2. What sorts of things can be completed?
4.3. How does zsh deal with ambiguous completions?
4.4. How do I complete in the middle of words / just what's before the cursor?
4.5. How do I get started with programmable completion?
4.6. And if programmable completion isn't good enough?

Chapter 5:  The future of zsh
5.1. What bugs are currently known and unfixed? (Plus recent important changes)
5.2. Where do I report bugs, get more info / who's working on zsh?
5.3. What's on the wish-list?
5.4. Did zsh have problems in the year 2000?

Acknowledgments

Copyright
--- End of Contents ---

Chapter 1: Introducing zsh and how to install it

1.1: Sources of information

  Information on zsh is available via the World Wide Web.  The URL
  is http://zsh.sunsite.dk/ .
  The server provides this FAQ and much else and is
  now maintained by Karsten Thygesen and others (mail zsh@sunsite.dk
  with any related messages).  The FAQ is at http://zsh.sunsite.dk/FAQ/ .
  The site also contains some contributed zsh scripts and functions;
  we are delighted to add more, or simply links to your own collection.

  This document was originally written in YODL, allowing it to be converted
  easily into various other formats.  The master source file lives at
  http://zsh.sunsite.dk/FAQ/zshfaq.yo and the plain text version
  can be found at http://zsh.sunsite.dk/FAQ/zshfaq.txt .

  Another useful source of information is the collection of FAQ articles
  posted frequently to the Usenet news groups comp.unix.questions,
  comp.unix.shells and comp.answers with answers to general questions
  about UNIX.  The fifth of the seven articles deals with shells,
  including zsh, with a brief description of differences.  There is
  also a separate FAQ on shell differences and how to change your
  shell.  Usenet FAQs are available via FTP from rtfm.mit.edu and
  mirrors and also on the World Wide Web; see

    USA         http://www.cis.ohio-state.edu/hypertext/faq/usenet/top.html
    UK          http://www.lib.ox.ac.uk/internet/news/faq/comp.unix.shell.html
    Netherlands http://www.cs.uu.nl/wais/html/na-dir/unix-faq/shell/.html

  You can also get it via email by emailing mail-server@rtfm.mit.edu
  with, in the body of the message, `send faqs/unix-faq/shell/zsh'.

  The latest version of this FAQ is also available directly from any
  of the zsh archive sites listed in question 1.6.

  I have been putting together a user guide to complement the manual by
  explaining the most useful features of zsh in a more easy to read way.
  This is now more than half complete and includes a discussion of
  the new form for command line completion, not described in the FAQ.
  You can find it in various formats at:
    http://zsh.sunsite.dk/Guide/

  (As a method of reading the following in Emacs, you can type \M-2
  \C-x $ to make all the indented text vanish, then \M-0 \C-x $
  when you are on the title you want.)

  For any more eclectic information, you should contact the mailing
  list:  see question 5.2.

--- End of general information, changed items follow in full ---

Minor changes of phrasing, spelling, etc. are not included.

1.7: I don't have root access: how do I make zsh my login shell?

  Unfortunately, on many machines you can't use `chsh' to change your
  shell unless the name of the shell is contained in /etc/shells, so if
  you have your own copy of zsh you need some sleight-of-hand to use it
  when you log on.  (Simply typing `zsh' is not really a solution since
  you still have your original login shell waiting for when you exit.)

  The basic idea is to use `exec <zsh-path>' to replace the current
  shell with zsh.  Often you can do this in a login file such as .profile 
  (if your shell is sh or ksh) or .login (if it's csh).  Make sure you
  have some way of altering the file (e.g. via FTP) before you try this as
  `exec' is often rather unforgiving. 

  If you have zsh in a subdirectory `bin' of your home directory,
  put this in .profile:

    [ x$ZSH_VERSION = x -a -f $HOME/bin/zsh ] && exec $HOME/bin/zsh -l

  --- the first test is a safeguard to avoid an infinite loop in case
  your zsh is set up to source your .profile, which is quite a common
  trick as you can save a lot of duplication that way.  If your login
  shell is csh or tcsh, put this in .login:

    if ( -f ~/bin/zsh ) exec ~/bin/zsh -l

  (in each case the `-l' tells zsh it is a login shell).

  If you want to check this works before committing yourself to it,
  you can make the login shell ask whether to exec zsh.  The following
  work for Bourne-like shells:

    [ -f $HOME/bin/zsh ] && {
            echo "Type Y to run zsh: \c"
            read line
            [ "$line" = Y ] && exec $HOME/bin/zsh -l
    }

  and for C-shell-like shells:

    if ( -f ~/bin/zsh ) then
            echo -n "Type Y to run zsh: "
            if ( "$<" == Y ) exec ~/bin/zsh -l
    endif

  It's not a good idea to put this (even without the -l) into .cshrc,
  at least without some tests on what the csh is supposed to be doing,
  as that will cause _every_ instance of csh to turn into a zsh and
  will cause csh scripts (yes, unfortunately some people write these)
  which do not call `csh -f' to fail.  If you want to tell xterm to
  run zsh, change the SHELL environment variable to the full path of
  zsh at the same time as you exec zsh (in fact, this is sensible for
  consistency even if you aren't using xterm).  If you have to exec
  zsh from your .cshrc, a minimum safety check is `if ($?prompt) exec
  zsh'.

  If you like your login shell to appear in the process list as `-zsh',
  you can link `zsh' to `-zsh' (e.g. by `ln -s ~/bin/zsh 
  ~/bin/-zsh') and change the exec to `exec -zsh'.  (Make sure
  `-zsh' is in your path.) This has the same effect as the `-l'
  option. 

  There was a thread on this topic on the zsh-workers mailing list,
  starting from item 15747.  You can find this at http://www.zsh.org/mla/.

  Footnote: if you DO have root access, make sure zsh goes in
  /etc/shells on all appropriate machines, including NIS clients, or you
  may have problems with FTP to that machine.

2.1: Differences from sh and ksh

  (The following refers to shell options extensively.  To turn an
  option on in zsh you use `setopt var(optionname)', and to turn
  it off you use `unsetopt var(optionname)'.  The option name is
  case insensitive and underscores are ignored.  If you are used to ksh,
  that syntax works too.)

  Most features of ksh (and hence also of sh) are implemented in zsh;
  problems can arise because the implementation is slightly different.
  Note also that not all ksh's are the same either.  I have based this
  on the 11/16/88f version of ksh; differences from ksh93 will be more
  substantial.

  As a summary of the status:

  1) because of all the options it is not safe to assume a general
     zsh run by a user will behave as if sh or ksh compatible;
  2) invoking zsh as sh or ksh (or if either is a symbolic link to
     zsh) sets appropriate options and improves compatibility (from
     within zsh itself, calling `ARGV0=sh zsh' will also work);
  3) from version 3.0 onward the degree of compatibility with sh
     under these circumstances is very high:  zsh can now be used
     with GNU configure or perl's Configure, for example;
  4) the degree of compatibility with ksh is also high, but a few
     things are missing:  for example the more sophisticated
     pattern-matching expressions are different for versions before
     3.1.3 --- see the detailed list below;
  5) also from 3.0, the command `emulate' is available: `emulate
     ksh' and `emulate sh' set various options as well as changing the
     effect of single-letter option flags as if the shell had been
     invoked with the appropriate name.  Including the command
     `emulate sh; setopt localoptions' in a shell function will
     turn on sh emulation for that function only.  In 4.0 (and in
     3.0.6 through 8), this can be abbreviated as `emulate -L sh'.

  The classic difference is word splitting, discussed in question 3.1;
  this catches out very many beginning zsh users.  As explained there,
  this is actually a bug in every other shell.  The answer is to set
  SH_WORD_SPLIT for backward compatibility.  The next most classic
  difference is that unmatched glob patterns cause the command to abort;
  set NO_NOMATCH for those.

  Here is a list of various options which will increase ksh
  compatibility, though maybe decrease zsh's abilities: see the manual
  entries for GLOB_SUBST, IGNORE_BRACES (though brace expansion occurs
  in some versions of ksh), KSH_ARRAYS, KSH_GLOB, KSH_OPTION_PRINT,
  LOCAL_OPTIONS, NO_BAD_PATTERN, NO_BANG_HIST, NO_EQUALS, NO_HUP,
  NO_NOMATCH, NO_RCS, NO_SHORT_LOOPS, PROMPT_SUBST, RM_STAR_SILENT,
  POSIX_BUILTINS, SH_FILE_EXPANSION, SH_GLOB, SH_OPTION_LETTERS,
  SH_WORD_SPLIT (see question 3.1) and SINGLE_LINE_ZLE.
  Note that you can also disable any built-in commands which get in
  your way.  If invoked as `ksh', the shell will try to set suitable
  options.

  Here are some differences from ksh which might prove significant for
  ksh programmers, some of which may be interpreted as bugs; there
  must be more.  Note that this list is deliberately rather full and
  that most of the items are fairly minor.  Those marked `*' perform
  in a ksh-like manner if the shell is invoked with the name `ksh', or
  if `emulate ksh' is in effect.  Capitalised words with underlines
  refer to shell options. 

  o  Syntax:

    o * Shell word splitting: see question 3.1.
    o * Arrays are (by default) more csh-like than ksh-like:
        subscripts start at 1, not 0; array[0] refers to array[1];
        `$array' refers to the whole array, not $array[0];
        braces are unnecessary: $a[1] == ${a[1]}, etc.
        Set the KSH_ARRAYS option for compatibility.
    o   Coprocesses are established by `coproc'; `|&' behaves like
        csh.  Handling of coprocess file descriptors is also different.
    o   In `cmd1 && cmd2 &', only `cmd2' instead of the whole
        expression is run in the background in zsh.  The manual implies
        this is a bug.  Use `{ cmd1 && cmd2 } &' as a workaround.

  o  Command line substitutions, globbing etc.:

    o * Failure to match a globbing pattern causes an error (use
        NO_NOMATCH).
    o * The results of parameter substitutions are treated as plain text:
        `foo="*"; print $foo' prints all files in ksh but `*' in zsh
        (uset GLOB_SUBST).
    o * $PSn do not do parameter substitution by default (use PROMPT_SUBST).
    o * Standard globbing does not allow ksh-style `pattern-lists'.
        Equivalents:

----------------------------------------------------------------------
      ksh              zsh         Meaning
     ------           ------       ---------
     !(foo)            ^foo        Anything but foo.
                or   foo1~foo2     Anything matching foo1 but foo2[1].
@(foo1|foo2|...)  (foo1|foo2|...)  One of foo1 or foo2 or ...
     ?(foo)           (foo|)       Zero or one occurrences of foo.
     *(foo)           (foo)#       Zero or more occurrences of foo.
     +(foo)           (foo)##      One or more occurrences of foo.
----------------------------------------------------------------------

      The `^', `~' and `#' (but not `|')forms require EXTENDED_GLOB.
      From version 3.1.3, the ksh forms are fully supported when the
      option KSH_GLOB is in effect; for previous versions you
      must use the table above.

      [1] Note that `~' is the only globbing operator to have a lower
        precedence than `/'.  For example, `**/foo~*bar*' matches any
        file in a subdirectory called `foo', except where `bar'
        occurred somewhere in the path (e.g. `users/barstaff/foo' will
        be excluded by the `~' operator).  As the `**' operator cannot
        be grouped (inside parentheses it is treated as `*'), this is
        the way to exclude some subdirectories from matching a `**'.
    o   Unquoted assignments do file expansion after `:'s (intended for
        PATHs). 
    o   `integer' does not allow `-i'.
    o   `typeset' and `integer' have special behaviour for
        assignments in ksh, but not in zsh.  For example, this doesn't
        work in zsh:

          integer k=$(wc -l ~/.zshrc)

        because the return value from wc includes leading
        whitespace which causes wordsplitting.  Ksh handles the
        assignment specially as a single word.

  o  Command execution:

    o * There is no $ENV variable (use /etc/zshrc, ~/.zshrc; 
        note also $ZDOTDIR).
    o   $PATH is not searched for commands specified
        at invocation without -c.

  o  Aliases and functions:

    o   The order in which aliases and functions are defined is significant:
        function definitions with () expand aliases -- see question 2.3.
    o   Aliases and functions cannot be exported.
    o   There are no tracked aliases: command hashing replaces these.
    o   The use of aliases for key bindings is replaced by `bindkey'.
    o * Options are not local to functions (use LOCAL_OPTIONS; note this
        may always be unset locally to propagate options settings from a
        function to the calling level).
    o   Functions defined with `function funcname { body }' behave the
        same way as those defined with `funcname () { body }'.  In ksh,
        the former behave as if the body were read from a file with `.',
        and only the latter behave as true functions.

    o  Traps and signals:

    o * Traps are not local to functions.  The option LOCAL_TRAPS is
          available from 3.1.6.
    o   TRAPERR has become TRAPZERR (this was forced by UNICOS which
        has SIGERR).

  o  Editing:

    o   The options emacs, gmacs, viraw are not supported.
        Use bindkey to change the editing behaviour: `set -o {emacs,vi}'
        becomes `bindkey -{e,v}'; for gmacs, go to emacs mode and use
        `bindkey \^t gosmacs-transpose-characters'.
    o   The `keyword' option does not exist and `-k' is instead
        interactivecomments.  (`keyword' will not be in the next ksh
        release either.)
    o * Management of histories in multiple shells is different:
        the history list is not saved and restored after each command.
        The option SHARE_HISTORY appeared in 3.1.6 and is set in ksh
        compatibility mode to remedy this.
    o   `\' does not escape editing chars (use `^V').
    o   Not all ksh bindings are set (e.g. `<ESC>#'; try `<ESC>q').
    o * `#' in an interactive shell is not treated as a comment by
        default. 

  o  Built-in commands:

    o   Some built-ins (r, autoload, history, integer ...)
        were aliases in ksh. 
    o   There is no built-in command newgrp: use e.g. `alias
        newgrp="exec newgrp"'
    o   `jobs' has no `-n' flag.
    o   `read' has no `-s' flag.

  o  Other idiosyncrasies:

    o   `select' always redisplays the list of selections on each loop.

--- End of changed items, diff from previous version follows ---
Index: zshfaq.yo
===================================================================
RCS file: /pack/anoncvs/zsh/www/FAQ/zshfaq.yo,v
retrieving revision 1.78
retrieving revision 1.79
diff -u -r1.78 -r1.79
--- zshfaq.yo	2002/03/24 19:23:57	1.78
+++ zshfaq.yo	2002/04/24 21:09:46	1.79
@@ -43,11 +43,11 @@
 whenman(report(ARG1)(ARG2)(ARG3))\
 whenms(report(ARG1)(ARG2)(ARG3))\
 whensgml(report(ARG1)(ARG2)(ARG3)))
-myreport(Z-Shell Frequently-Asked Questions)(Peter Stephenson)(2002/03/24)
+myreport(Z-Shell Frequently-Asked Questions)(Peter Stephenson)(2002/04/24)
 COMMENT(-- the following are for Usenet and must appear first)\
 description(\
 mydit(Archive-Name:) unix-faq/shell/zsh
-mydit(Last-Modified:) 2002/03/24
+mydit(Last-Modified:) 2002/04/24
 mydit(Submitted-By:) email(pws@pwstephenson.fsnet.co.uk (Peter Stephenson))
 mydit(Posting-Frequency:) Monthly
 mydit(Copyright:) (C) P.W. Stephenson, 1995--2001 (see end of document)
@@ -55,7 +55,8 @@
 
 bf(Changes since last issue posted:)
 description(
-  mydit(2.3)   More description about alias pitfalls.
+  mydit(passim) Be more explicit about how to set options.
+  mydit(1.7)    More care about infinite loops exec'ing zsh.
 )
 
 This document contains a list of frequently-asked (or otherwise
@@ -448,9 +449,12 @@
   If you have zsh in a subdirectory mytt(bin) of your home directory,
   put this in .profile:
   verb(
-    [ -f $HOME/bin/zsh ] && exec $HOME/bin/zsh -l
+    [ x$ZSH_VERSION = x -a -f $HOME/bin/zsh ] && exec $HOME/bin/zsh -l
   )
-  or if your login shell is csh or tcsh, put this in .login:
+  --- the first test is a safeguard to avoid an infinite loop in case
+  your zsh is set up to source your tt(.profile), which is quite a common
+  trick as you can save a lot of duplication that way.  If your login
+  shell is csh or tcsh, put this in .login:
   verb(
     if ( -f ~/bin/zsh ) exec ~/bin/zsh -l
   )
@@ -510,6 +514,12 @@
 sect(Differences from sh and ksh)
 label(21)
 
+  (The following refers to shell options extensively.  To turn an
+  option on in zsh you use `tt(setopt) var(optionname)', and to turn
+  it off you use `tt(unsetopt) var(optionname)'.  The option name is
+  case insensitive and underscores are ignored.  If you are used to ksh,
+  that syntax works too.)
+
   Most features of ksh (and hence also of sh) are implemented in zsh;
   problems can arise because the implementation is slightly different.
   Note also that not all ksh's are the same either.  I have based this
@@ -1496,14 +1506,14 @@
   substitution then sets a default to which later history substitutions
   with single unqualified bangs refer, so that !$ becomes equivalent to
   tt(!-2:$).  The option tt(CSH_JUNKIE_HISTORY) makes all single bangs refer
-  to the last command.
+  to the last command (`tt(setopt cshjunkiehistory)' to turn it on).
 
 
 sect(Why does zsh kill off all my background jobs when I logout?)
 
   Simple answer: you haven't asked it not to.  Zsh (unlike [t]csh) gives
-  you the option of having background jobs killed or not: the mytt(nohup)
-  option exists if you don't want them killed.  Note that you can always
+  you the option of having background jobs killed or not: `tt(setopt nohup)'
+  if you don't want them killed.  Note that you can always
   run programs with mytt(nohup) in front of the pipeline whether or not the
   option is set, which will prevent that job from being killed on
   logout.  (mytt(nohup) is actually an external command.)
@@ -1746,7 +1756,7 @@
   to both files when the redirector appears twice.  What's going on in the
   first example is exactly the same, however the second redirector is
   disguised as a pipe.  So if you want to turn this effect off, you need
-  to unset the option mytt(MULTIOS).
+  to `tt(unsetopt multios)'.
 
 sect(Why am I prompted to correct commands which are in my path?)
 
@@ -1874,7 +1884,8 @@
 
   Often there will be more than one possible completion: two files
   start with the same characters, for example.  Zsh has a lot of
-  flexibility for what it does here via its options.  The default is
+  flexibility for what it does here via its options (use `tt(setopt)
+  var(optioname)' to turn an option on).  The default is
   for it to beep and completion to stop until you type another
   character.  You can type tt(\C-D) to see all the possible completions.
   (That's assuming you're at the end of the line, otherwise tt(\C-D) will
@@ -1915,7 +1926,7 @@
   in zsh, it will simply go to the end of the word and try to complete
   there.  However, there are two ways of changing this.
 
-  First, there is the option COMPLETE_IN_WORD.  This tries to fill in
+  First, you can `tt(setopt complete_in_word)'.  This tries to fill in
   the word at the point of the cursor.  For example, if the current
   directory contains mytt(foobar), then with the option set, you can
   complete mytt(fbar) to mytt(foobar) by moving the cursor to the

