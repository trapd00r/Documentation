From zsh-users-return-14210-mason-zsh=primenet.com.au@sunsite.dk Sun Jun 28 13:27:28 2009
Return-Path: <zsh-users-return-14210-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 13281 invoked from network); 28 Jun 2009 13:27:14 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.3 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 28 Jun 2009 13:27:14 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 98784 invoked from network); 28 Jun 2009 13:26:52 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 28 Jun 2009 13:26:52 -0000
Received: (qmail 23042 invoked by alias); 28 Jun 2009 13:26:19 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 14210
Received: (qmail 23015 invoked from network); 28 Jun 2009 13:26:18 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 28 Jun 2009 13:26:18 -0000
Received: from mailgw10.technion.ac.il (mailgw10.technion.ac.il [132.68.225.10])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 9087C801E289
	for <zsh-users@sunsite.dk>; Sun, 28 Jun 2009 15:26:02 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEAL8MR0qERHMG/2dsb2JhbADLQwKECwU
X-IronPort-AV: E=Sophos;i="4.42,303,1243803600"; 
   d="scan'208";a="185185287"
Received: from fermat.math.technion.ac.il ([132.68.115.6])
  by mailgw10.technion.ac.il with ESMTP; 28 Jun 2009 16:25:57 +0300
Received: from fermat.math.technion.ac.il (localhost [127.0.0.1])
	by fermat.math.technion.ac.il (8.12.10/8.12.10) with ESMTP id n5SDPtPA021677;
	Sun, 28 Jun 2009 16:25:55 +0300 (IDT)
Received: (from nyh@localhost)
	by fermat.math.technion.ac.il (8.12.10/8.12.10/Submit) id n5SDPtOv021676;
	Sun, 28 Jun 2009 16:25:55 +0300 (IDT)
X-Authentication-Warning: fermat.math.technion.ac.il: nyh set sender to nyh@math.technion.ac.il using -f
Date: Sun, 28 Jun 2009 16:25:55 +0300
From: "Nadav Har'El" <nyh@math.technion.ac.il>
To: zsh-users@sunsite.dk
Subject: Re: Multi-core loops
Message-ID: <20090628132555.GA21352@fermat.math.technion.ac.il>
References: <20090628103129.GA15270@fermat.math.technion.ac.il>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20090628103129.GA15270@fermat.math.technion.ac.il>
User-Agent: Mutt/1.4.2.2i
Hebrew-Date: 6 Tammuz 5769
X-Virus-Scanned: ClamAV 0.94.2/9515/Sun Jun 28 05:42:49 2009 on bifrost
X-Virus-Status: Clean

On Sun, Jun 28, 2009, Nadav Har'El wrote about "Multi-core loops":
>...
> 	for i in ...
> 	do
> 		dosomething $i
> 	done
> 	
> But when "dosomething" is CPU intensive, this is *not* what you'd want to
> do on a multi-core (multi CPU) machine, which have more-or-less become
> standard nowadays...
> Such a loop would only use one of the CPUs, and leave the other(s) unused.
> Instead, you'll want to keep all CPUs busy all the time, running M (=number
> of CPUs) processes at the same time.
>...

Sorry for replying to my own emails, but I just remembered another point.
The parallel loop I propose to add is not only relevant to SMP machines
and CPU-intensive tasks.

It is also important, sometimes even more important, for some types of
non-CPU intensive tasks. For example, consider a loop like this for
fetching the content of a list of URLs:

	cat urllist | while read url
	do
		wget $url
	done

The computer will be idle most of the time, as wget will most of the time
just wait for responses from the network. If I could easily tell the loop
to run 10 wgets at a time, this would (in most cases) boost the performance
of this loop almost 10-fold! And this is true even if you have just one CPU.

Searching the web, I found that Chapter 14 "Throttling Parallel Processes"
of Ron Peters' "Shell Script Pearls" is about a similar use case, and his
solution is a very eleborate one using a variant of the coprocess-based
solution in the thread I mentioned earlier from the zsh list 10 years ago.
	
So I think there is definitely a need for such a parallel loop feature.

-- 
Nadav Har'El                        |       Sunday, Jun 28 2009, 6 Tammuz 5769
nyh@math.technion.ac.il             |-----------------------------------------
Phone +972-523-790466, ICQ 13349191 |Creativity consists of coming up with
http://nadav.harel.org.il           |many ideas, not just that one great idea.

