From zsh-workers-request@euclid.skiles.gatech.edu Sat Dec 14 03:59:07 1996
Return-Path: <zsh-workers-request@euclid.skiles.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 1379 invoked from network); 14 Dec 1996 03:59:05 -0000
Received: from euclid.skiles.gatech.edu (list@130.207.146.50)
  by coral.primenet.com.au with SMTP; 14 Dec 1996 03:59:05 -0000
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id WAA09375; Fri, 13 Dec 1996 22:45:24 -0500 (EST)
Resent-Date: Fri, 13 Dec 1996 22:45:24 -0500 (EST)
From: Zoltan Hidvegi <hzoli@cs.elte.hu>
Message-Id: <199612140247.DAA03747@hzoli.ppp.cs.elte.hu>
Subject: Re: [zsh 3.0.0 bug] <command> | <builtin> <redirection>
To: jkelley@algo.ugcs.caltech.edu (Jonathan Kelley)
Date: Sat, 14 Dec 1996 03:47:14 +0100 (MET)
Cc: zsh-workers@math.gatech.edu
In-Reply-To: <199612130226.SAA16385@envy.ugcs.caltech.edu> from Jonathan Kelley at "Dec 12, 96 06:26:03 pm"
X-Mailer: ELM [version 2.4ME+ PL17 (25)]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Resent-Message-ID: <"M-IWN2.0.QI2.JBYio"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/2581
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

> Standard input is closed when the redirection in the above
> command template fails.
> 
> Example:
> 
> algo% zsh -f
> algo% tty
> /dev/ttyq12
> algo% : | : > /
> zsh: invalid argument: /
> algo% tty
> not a tty

It's worse:

hzoli% : < / > foo 2> /
zsh: is a directory: /
hzoli% echo foo
zsh: write error: bad file number

The fix is below.

Zoltan

*** exec.c	1996/12/11 02:27:28	3.1.0.5
--- exec.c	1996/12/14 02:41:28
***************
*** 31,38 ****
  
  #include "zsh.h"
  
! #define execerr() { if (forked) _exit(1); \
! 	closemnodes(mfds); lastval = 1; return; }
  
  static LinkList args;
  static int doneps4;
--- 31,38 ----
  
  #include "zsh.h"
  
! #define execerr() if (!forked) { lastval = 1; return; } else _exit(1)
! 	
  
  static LinkList args;
  static int doneps4;
***************
*** 1483,1494 ****
--- 1483,1496 ----
  	      "BUG: unexpanded here document\n");
  	if (fn->type == INPIPE) {
  	    if (fn->fd2 == -1) {
+ 		closemnodes(mfds);
  		fixfds(save);
  		execerr();
  	    }
  	    addfd(forked, save, mfds, fn->fd1, fn->fd2, 0);
  	} else if (fn->type == OUTPIPE) {
  	    if (fn->fd2 == -1) {
+ 		closemnodes(mfds);
  		fixfds(save);
  		execerr();
  	    }
***************
*** 1497,1502 ****
--- 1499,1505 ----
  	    if (fn->type != HERESTR && xpandredir(fn, cmd->redir))
  		continue;
  	    if (errflag) {
+ 		closemnodes(mfds);
  		fixfds(save);
  		execerr();
  	    }
***************
*** 1504,1509 ****
--- 1507,1513 ----
  	    case HERESTR:
  		fil = getherestr(fn);
  		if (fil == -1) {
+ 		    closemnodes(mfds);
  		    fixfds(save);
  		    if (errno != EINTR)
  			zerr("%e", NULL, errno);
***************
*** 1518,1523 ****
--- 1522,1528 ----
  		else
  		    fil = open(unmeta(fn->name), O_RDWR | O_CREAT, 0666);
  		if (fil == -1) {
+ 		    closemnodes(mfds);
  		    fixfds(save);
  		    if (errno != EINTR)
  			zerr("%e: %s", fn->name, errno);
***************
*** 1543,1548 ****
--- 1548,1554 ----
  		if (fil == -1) {
  		    char fdstr[4];
  
+ 		    closemnodes(mfds);
  		    fixfds(save);
  		    sprintf(fdstr, "%d", fn->fd2);
  		    zerr("%s: %e", fdstr, errno);
***************
*** 1564,1569 ****
--- 1570,1576 ----
  		if (fil == -1 || dfil == -1) {
  		    if(fil != -1)
  			close(fil);
+ 		    closemnodes(mfds);
  		    fixfds(save);
  		    if (errno != EINTR)
  			zerr("%e: %s", fn->name, errno);

