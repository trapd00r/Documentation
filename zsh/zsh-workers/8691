From zsh-workers-return-8691-mason-zsh=primenet.com.au@sunsite.auc.dk Sat Nov 20 13:58:12 1999
Return-Path: <zsh-workers-return-8691-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 2449 invoked from network); 20 Nov 1999 13:58:10 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 20 Nov 1999 13:58:10 -0000
Received: (qmail 7623 invoked by alias); 20 Nov 1999 13:58:02 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 8691
Received: (qmail 7615 invoked from network); 20 Nov 1999 13:58:01 -0000
Sender: aduret@venus.l2i
To: zsh-workers@sunsite.auc.dk
Subject: PATCH: _mount upgrade
References: <199911190921.KAA02203@beta.informatik.hu-berlin.de>
From: Alexandre Duret-Lutz <alexandre.duret@greyc.ismra.fr>
Date: 20 Nov 1999 14:58:01 +0000
In-Reply-To: Sven Wischnowsky's message of "Fri, 19 Nov 1999 10:21:23 +0100 (MET)"
Message-ID: <7dyabttdl2.fsf@venus.l2i>
Lines: 517
User-Agent: Gnus/5.0700000000000003 (Pterodactyl Gnus v0.97) Emacs/20.2
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

>>> "SW" == Sven Wischnowsky <wischnow@informatik.hu-berlin.de> writes:
[...]
 SW> I thought we had agreed that for this kind of stuff the function
 SW> itself does the test. at least _mount has been doing it for some time
 SW> now.
[...]

Speaking of _mount... here is a patch that upgrade _mount for Solaris'
mount.  I had to add a $typeops local to hold the name of mount fs
selection option (the '-t' of most mounts is '-F' under Solaris); and
since many tables describing fs types were not good for solaris (nor
osf) I moved most of them behind a `case "$OSTYPE"' switch.  I also 
added some new file systems for linux (some of them are still lacking 
a description).

I used Solaris, OSF and Linux man pages but could only try this patch
under Solaris, I hope this will work elsewhere.

--- Completion/User/_mount.old	Fri Nov 19 16:28:19 1999
+++ Completion/User/_mount	Sat Nov 20 14:54:24 1999
@@ -6,7 +6,7 @@
 # are below these table.
 
 local curcontext="$curcontext" state line ret=1
-local args fss deffs=iso9660 descr tmp
+local args fss deffs=iso9660 descr tmp typeopt=-t _nfs_access _nfs_ufs
 
 typeset -A opt_args
 
@@ -16,96 +16,21 @@
   # arguments for the `-o' option. There is one array per 
   # file system type (only for those that accept more values
   # than those in the `_fs_any' array). The elements of the
-  # array are used as arguments to `_values'.
+  # array are used as arguments to `_values'. The first tables
+  # are used by several systems while system specific tables are  
+  # (re)defined in a "$OSTYPE" case.
 
   _fs_any=(
-    '(sync)async[do all I/O asynchronously]'
-    '(noatime)atime[update access time]'
-    '(noauto)auto[can be mounted with -a]'
-    '(rw suid dev exec auto nouser async)defaults[use default options]'
-    '(nodev)dev[interpret devices]'
-    '(noexec)exec[permit execution of binaries]'
-    '(atime)noatime[don'"'"'t update access time]'
-    '(auto)noauto[can only be mounted explicitly]'
-    '(dev)nodev[don'"'"'t interpret devices]'
-    '(exec)noexec[don'"'"'t allow execution of binaries]'
-    '(suid)nosuid[ignore suid and sgid bits]'
-    '(user)nouser[can only be mounted by root]'
-    'remount[mount already mounted file system]'
     '(rw)ro[mount file system read-only]'
     '(ro)rw[mount file system read-write]'
-    '(nosuid)suid[use suid and sgib bits]'
-    '(async)sync[do I/O synchronously]'
-    '(nouser noexec nosuid nodev)user[allow normal users to mount]'
-  )
-  _fs_affs=(
-    'uid[set owner of root]:user ID:'
-    'gid[set group of root]:group ID:'
-    'setuid[set owner of all files]:user ID:'
-    'setgid[set group of all files]:group ID:'
-    'mode[set file permissions]:file permission bits:'
-    'protect[don'"'"'t allow changes to permissions]'
-    'usemp[set owner of root to owner of mount point]'
-    'verbose[print message per mount]'
-    'prefix[prefix before volume name (link)]:prefix string:'
-    'volume[prefix before '"'"'/'"'"' (symlink)]:prefix string:'
-    'reserved[set number of unused blocks at start of device]:number of unused blocks:'
-    'root[specify location of the root block]:root block location:'
-    'bs[specify block size]:block size:(512 1024 2048 4192)'
-  )
-  _fs_ext2=(
-    '(minixdf)bsddf[select bsddf behavior]'
-    '(bsddf)minixdf[select bsddf behavior]'
-    '(nocheck)check[set checking level]::checking level:((normal\:check\ inode\ and\ block\ bitmaps\ on\ mount strict\:check\ on block\ deallocation none\:no\ checking))'
-    'errors[specify behavior on error]:error behavior:((continue\:ignore\ errors remount-ro\:remount\ file\ system\ read-only panic\:panic\ and\ halt\ system))'
-    '(nogrpid bsdgroups sysvgroups)grpid[new file gets group ID of directory]'
-    '(grpid nogrpid sysvgroups)bsdgroups[new file gets group ID of directory]'
-    '(grpid bsdgroups sysvgroups)nogrpid[new file gets fsgid of current process]'
-    '(grpid bsdgroups nogrpid)sysvgroups[new file gets fsgid of current process]'
-    'resgid[specify access to reserved space (group ID)]:group ID:'
-    'resuid[specify access to reserved space (user ID)]:user ID:'
-    'sb[specify super block number]:super block number:'
   )
-  _fs_fat=(
-    'blocksize[specify block size]:block size:(512 1024)'
-    'uid[specify user ID of all files]:user ID:'
-    'gid[specify group ID of all files]:group ID:'
-    'umask[specify umask]:umask value (octal):'
-    'check[specify checking level]:checking level:((relaxed\:accept\ upper\ and\ lower\ case,\ truncate\ long\ name normal\:like\ '"'\`'"'relaxed'"\\'"',\ but\ reject\ special\ characters strict\:like\ '"'\`'"'normal'"\\'"',\ but\ no\ long\ parts))'
-    'conf[specify CR/NL conversion]:CR/NL conversion mode:((binary\:no\ translation text\:conversion\ on\ all\ files auto\:perform\ translation\ on\ file\ without\ binary\ extension))'
-    'debug[debug mode]'
-    'fat[specify fat type]:fat type (bit):(12 16)'
-    'quiet[quiet mode]'
-  )
-  _fs_msdos=( "$_fs_fat[@]" )
-  _fs_umsdos=( "$_fs_fat[@]" )
-  _fs_vfat=( "$_fs_fat[@]"
-    'uni_xlate[translate unicode to escaped sequences]'
-    'posix[allow file names only differing in case]'
-    'nonumtail[try short name before number extension]'
-  )
-  _fs_hpfs=(
-    'uid[specify user ID of all files]:user ID:'
-    'gid[specify group ID of all files]:group ID:'
-    'umask[specify umask]:umask value (octal):'
-    'case[specify file name conversion]:file name conversion:((lower\:convert\ to\ lower\ case asis\:no\ conversion))'
-    'conv[specify CR elimination]:CR elimination:((binary\:no\ elimination test\:delete\ CRs\ \(e.g.\ before\ NL\) auto\:sometimes\ yes,\ sometimes\ not))'
-    'nocheck[don'"'"'t abort mount on consistency check failure]'
-  )
-  _fs_iso9660=(
-    'norock[disable Rock Ridge extensions]'
-    'check[specify file name conversion]:file name conversion:((relaxed\:convert\ to\ lower\ case\ before\ lookup strict\:no\ conversion))'
-    'uid[specify user ID of all files]:user ID:'
-    'gid[specify group ID of all files]:group ID:'
-    'map[specify non-Rock Ridge name conversion]:file name conversion:((normal\:map\ upper\ to\ lower,\ ignore\ \;1,\ map\ \;\ to\ . off\:no\ conversion))'
-    'mode[specify permissions]:file access permissions:'
-    'unhide[show hidden and associated files]'
-    'block[specify block size]:block size:(512 1024 2048)'
-    'cruft[ignore high bits of file length]'
+  _nfs_access=(
+    'acregmin[specify cached file attributes minimum hold time]:cached file attributes minimum hold time:'
+    'acregmax[specify cached file attributes maximum hold time]:cached file attributes maximum hold time:'
+    'acdirmin[specify cached directory attributes minimum hold time]:cached directory attributes minimum hold time:'
+    'acdirmax[specify cached directory attributes maximum hold time]:cached directory attributes maximum hold time:'
+    'actimeo[set all attributes'"'"' cache timeout]:set all attributes'"'"' cache timeout:'
   )
-
-  # I fear that we have to make these system specific, too.
-
   _fs_nfs=(
     'rsize[specify read buffer size]:read buffer size:(8192)'
     'wsize[specify write buffer size]:write buffer size:(8192)'
@@ -116,39 +41,235 @@
     'timeo[specify initial timeout for UDP]:initial timeout for UDP:'
     'retrans[set number of NFS retransmissions]:number of NFS retransmissions:'
     'retry[specify number of mount failure retries]:mount failure retries:'
-    '(nobg)bg[retry in the background]'
-    '(nofg)fg[retry in the foreground]'
-    '(nointr)intr[allow operations to be interrupted]'
-    '(bg)nobg[don'"'"'t retry in the background]'
-    '(fg)nofg[don'"'"'t retry in the foreground]'
+    '(fg)bg[retry in the background]'
+    '(bg)fg[retry in the foreground]'
+    '(nintr)intr[allow operations to be interrupted]'
     '(intr)nintr[prevent operations from being interrupted]'
     '(nfsv3)nfsv2[use NFS version 2]'
     '(nfsv2)nfsv3[use NFS version 3]'
     'proto[specify protocol]:protocol:(udp tcp)'
-    'port[specify server port number]:server port number:' \
+    'port[specify server port number]:server port number:'
     'proplist[allow property lists]'
-    'acregmin[specify cached file attributes minimum hold time]:cached file attributes minimum hold time:'
-    'acregmax[specify cached file attributes maximum hold time]:cached file attributes maximum hold time:'
-    'acdirmin[specify cached directory attributes minimum hold time]:cached directory attributes minimum hold time:'
-    'acdirmax[specify cached directory attributes maximum hold time]:cached directory attributes maximum hold time:'
-    'actimeo[set all attributes'"'"' cache timeout]:set all attributes'"'"' cache timeout:'
+    "$_nfs_access[@]"
     'nocto[don'"'"'t get fresh attributes on open]'
     'noac[don'"'"'t set attribute caching]'
   )
-  _fs_advfs=(
-    '(ro rw)rq[mount file system read-write]'
-    'dual[allow mount even if same domain ID as already mounted domain]'
+  _nfs_ufs=(
+    '(nodev)dev[interpret devices]'
+    '(dev)nodev[don'"'"'t interpret devices]'
+    '(nosuid)suid[use suid and sgib bits]'
+    '(suid)nosuid[ignore suid and sgid bits]'
+    '(nosync)sync[do I/O synchronously]'
+    '(sync)nosync[do all I/O asynchronously]'
+    '(noexec)exec[permit execution of binaries]'
+    '(exec)noexec[don'"'"'t allow execution of binaries]'
+    '(nogrpid)grpid[new file gets group ID of directory]'
+    '(grpid)nogrpid[new file gets fsgid of current process]'
   )
   _fs_ufs=(
     'dirty[allow mount even if not cleanly unmounted]'
-    "$_fs_nfs[@]"
-  )
-  _fs_cdfs=(
-    '(nodefperm)defperm[ignore permission bits]'
-    '(defperm)defperm[use permission bits]'
-    'noversion[strip off version extension]'
-    'rrip[use RRIP extensions]'
+    "$_nfs_ufs[@]"
   )
+
+  case "$OSTYPE" in
+  solaris*)
+    _fs_s5fs=(
+      'remount[remount file system]'
+      '(suid)nosuid[ignore suid and sgid bits]'
+      '(nosuid)suid[use suid and sgib bits]'
+    )
+    _fs_ufs=(
+      '(atime)noatime[don'"'"'t update access time]'
+      'f[fake an /etc/mnttab entry]'
+      'm[don'"'"'t make an /etc/mnttab entry]'
+      '(noforcedirectio)forcedirectio[do I/O synchronously]'
+      '(forcedirectio)noforcedirectio[do all I/O asynchronously]'
+      '(nointr)intr[allow operations to be interrupted]'
+      '(intr)nointr[prevent operations from being interrupted]'
+      '(nolargefiles)largefiles[don'"'"' restrict file size]'
+      '(largefiles)nolargefiles[restrict file size]'
+      '(nologging)logging[log transactions]'
+      '(logging)nologging[log transactions]'
+      'onerror[action to recover from error]:action(panic lock umout)'
+      'quota[turn on quotas]'
+      '(ro rw)rq[mount file system read-write with quotas]'
+      "$_fs_s5fs[@]"
+    )
+    _fs_tmpfs=(
+      'size[set file system size]:size:'
+    )
+    _fs_pcfs=(
+      '(nofoldcase)foldcase[force filenames to lowercase]'
+      '(foldcase)nofoldcase[don'"'"'t force filenames to lowercase]'
+    )
+    _fs_hsfs=(
+      'nrr[no rock ridge]'
+      'notraildot[no trail dot when no extension]'
+      'nomaplcase[don'"'"'t force lowercase]'
+      'nosiud[ignore suid and sgid bits]'
+    )
+    _fs_nfs=(
+      '(fg)bg[retry in the background]'
+      '(bg)fg[retry in the foreground]'
+      '(nogrpid)grpid[new file gets group ID of directory]'
+      '(grpid)nogrpid[new file gets fsgid of current process]'
+      '(nointr)intr[allow operations to be interrupted]'
+      '(intr)nointr[prevent operations from being interrupted]'
+      '(sec secure)kerberos[use kerberos authentication]'
+      'noac[no attribute caching]'
+      'port[server IP port number]:port:'
+      'posix[posix sematics]'
+      'proto[specify protocol]:protocol:'\("$(grep -v '^#' /etc/netconfig 2> /dev/null | cut -d ' ' -f 1)"\)
+      'public[force public file handle]'
+      '(noquota)quota[enable quotas]'
+      '(quota)noquota[disable quotas]'
+      'timeo[specify initial timeout for UDP]:initial timeout for UDP:'
+      'retrans[set number of NFS retransmissions]:number of NFS retransmissions:(5)'
+      'retry[specify number of mount failure retries]:mount failure retries:(10000)'
+      'rsize[specify read buffer size]:read buffer size:(8192)'
+      'wsize[specify write buffer size]:write buffer size:(8192)'
+      '(kerberos secure)sec[set the security mode]:security mode:(sys dh krb4 none)'
+      '(kerberos sec)secure[use Diffie-Hellman public key system]'
+      'vers[set NFS vesion number]:NFS version number:(2 3)'
+      "$_nfs_access[@]"
+      "$_fs_s5fs[@]"
+    ) 
+    _fs_cachefs=(
+      "$_nfs_access[@]"
+      'backfstype[type of the back file system]:back file system type:(nfs hsfs)'
+      'backpath[specify back file system location]:back file system location:_files -/'
+      'cacheid[specify a cache ID]:cache ID:'
+      'local-access[check permissions locally]'
+      'noconst[disables cache consistency checking]'
+      'purge[purge any cached informations]'
+      '(suid)nosuid[ignore suid and sgid bits]'
+      '(nosuid)suid[use suid and sgib bits]'
+      '(write-around)non-shared[purge cache on writes]'
+      '(non-shared)write-around[keep file in cache on writes]'
+    )
+    ;;
+  osf*)
+    _fs_advfs=(
+      '(ro rw)rq[mount file system read-write]'
+      'dual[allow mount even if same domain ID as already mounted domain]'
+      'sync[do I/O synchronously]'
+    )
+    _fs_cdfs=(
+      '(nodefperm)defperm[ignore permission bits]'
+      '(defperm)defperm[use permission bits]'
+      'noversion[strip off version extension]'
+      'rrip[use RRIP extensions]'
+    )
+    _fs_nfs=(
+      "$_nfs_ufs[@]"
+      "$_fs_nfs[@]"
+    )
+    ;;
+  linux*)
+    _fs_any=(
+      '(sync)async[do all I/O asynchronously]'
+      '(noatime)atime[update access time]'
+      '(noauto)auto[can be mounted with -a]'
+      '(rw suid dev exec auto nouser async)defaults[use default options]'
+      '(nodev)dev[interpret devices]'
+      '(noexec)exec[permit execution of binaries]'
+      '(atime)noatime[don'"'"'t update access time]'
+      '(auto)noauto[can only be mounted explicitly]'
+      '(dev)nodev[don'"'"'t interpret devices]'
+      '(exec)noexec[don'"'"'t allow execution of binaries]'
+      '(suid)nosuid[ignore suid and sgid bits]'
+      '(user)nouser[can only be mounted by root]'
+      'remount[mount already mounted file system]'
+      '(rw)ro[mount file system read-only]'
+      '(ro)rw[mount file system read-write]'
+      '(nosuid)suid[use suid and sgib bits]'
+      '(async)sync[do I/O synchronously]'
+      '(nouser noexec nosuid nodev)user[allow normal users to mount]'
+    )
+    _fs_affs=(
+      'uid[set owner of root]:user ID:'
+      'gid[set group of root]:group ID:'
+      'setuid[set owner of all files]:user ID:'
+      'setgid[set group of all files]:group ID:'
+      'mode[set file permissions]:file permission bits:'
+      'protect[don'"'"'t allow changes to permissions]'
+      'usemp[set owner of root to owner of mount point]'
+      'verbose[print message per mount]'
+      'prefix[prefix before volume name (link)]:prefix string:'
+      'volume[prefix before '"'"'/'"'"' (symlink)]:prefix string:'
+      'reserved[set number of unused blocks at start of device]:number of unused blocks:'
+      'root[specify location of the root block]:root block location:'
+      'bs[specify block size]:block size:(512 1024 2048 4192)'
+    )
+    _fs_ext2=(
+      '(minixdf)bsddf[select bsddf behavior]'
+      '(bsddf)minixdf[select bsddf behavior]'
+      '(nocheck)check[set checking level]::checking level:((normal\:check\ inode\ and\ block\ bitmaps\ on\ mount strict\:check\ on block\ deallocation none\:no\ checking))'
+      'errors[specify behavior on error]:error behavior:((continue\:ignore\ errors remount-ro\:remount\ file\ system\ read-only panic\:panic\ and\ halt\ system))'
+      '(nogrpid bsdgroups sysvgroups)grpid[new file gets group ID of directory]'
+      '(grpid nogrpid sysvgroups)bsdgroups[new file gets group ID of directory]'
+      '(grpid bsdgroups sysvgroups)nogrpid[new file gets fsgid of current process]'
+      '(grpid bsdgroups nogrpid)sysvgroups[new file gets fsgid of current process]'
+      'resgid[specify access to reserved space (group ID)]:group ID:'
+      'resuid[specify access to reserved space (user ID)]:user ID:'
+      'sb[specify super block number]:super block number:'
+    )
+    _fs_fat=(
+      'blocksize[specify block size]:block size:(512 1024)'
+      'uid[specify user ID of all files]:user ID:'
+      'gid[specify group ID of all files]:group ID:'
+      'umask[specify umask]:umask value (octal):'
+      'check[specify checking level]:checking level:((relaxed\:accept\ upper\ and\ lower\ case,\ truncate\ long\ name normal\:like\ '"'\`'"'relaxed'"\\'"',\ but\ reject\ special\ characters strict\:like\ '"'\`'"'normal'"\\'"',\ but\ no\ long\ parts))'
+      'conf[specify CR/NL conversion]:CR/NL conversion mode:((binary\:no\ translation text\:conversion\ on\ all\ files auto\:perform\ translation\ on\ file\ without\ binary\ extension))'
+      'debug[debug mode]'
+      'fat[specify fat type]:fat type (bit):(12 16)'
+      'quiet[quiet mode]'
+    )
+    _fs_msdos=( "$_fs_fat[@]" )
+    _fs_umsdos=( "$_fs_fat[@]" )
+    _fs_vfat=( "$_fs_fat[@]"
+      'uni_xlate[translate unicode to escaped sequences]'
+      'posix[allow file names only differing in case]'
+      'nonumtail[try short name before number extension]'
+    )
+    _fs_hpfs=(
+      'uid[specify user ID of all files]:user ID:'
+      'gid[specify group ID of all files]:group ID:'
+      'umask[specify umask]:umask value (octal):'
+      'case[specify file name conversion]:file name conversion:((lower\:convert\ to\ lower\ case asis\:no\ conversion))'
+      'conv[specify CR elimination]:CR elimination:((binary\:no\ elimination test\:delete\ CRs\ \(e.g.\ before\ NL\) auto\:sometimes\ yes,\ sometimes\ not))'
+      'nocheck[don'"'"'t abort mount on consistency check failure]'
+    )
+    _fs_iso9660=(
+      'norock[disable Rock Ridge extensions]'
+      'check[specify file name conversion]:file name conversion:((relaxed\:convert\ to\ lower\ case\ before\ lookup strict\:no\ conversion))'
+      'uid[specify user ID of all files]:user ID:'
+      'gid[specify group ID of all files]:group ID:'
+      'map[specify non-Rock Ridge name conversion]:file name conversion:((normal\:map\ upper\ to\ lower,\ ignore\ \;1,\ map\ \;\ to\ . off\:no\ conversion))'
+      'mode[specify permissions]:file access permissions:'
+      'unhide[show hidden and associated files]'
+      'block[specify block size]:block size:(512 1024 2048)'
+      'cruft[ignore high bits of file length]'
+    )
+    _fs_smbfs=( "$_fs_nfs[@]" )
+    _fs_udf=(
+      'uid[specify user ID of all files]:user ID:'
+      'gid[specify group ID of all files]:group ID:'
+      'umask[specify umask]:umask value (octal):'
+      'unhide[show hidden and associated files]'
+      'undelete[show deleted files]'
+      'bs[set the block size]:block size:2048'
+      'novrs[skip volume sequence recognition]'
+      'session[set the CDROM session]:session:'
+      'anchor[override standard anchor location]:anchor location:256'
+      'lastblock[set the last block of the file system]:last block:'
+    )
+    _fs_ufs=(
+      'ufstype[set ufs type]:ufs type:(old 44bsd sun sunx86 nextstep nextstep-cd openstep)'
+      'onerror[set behaviour on error]:behaviour on error:(panic lock umount repair)'
+    )
+    ;;
+  esac
 fi
 
 if [[ "$words[1]" = mount ]]; then
@@ -158,56 +279,82 @@
   # of the file system types understood on this system.
   # This should also set the `deffs' parameter if the default file
   # system type is not `iso9660' (it should be set to the name of
-  # the default file system type).
+  # the default file system type), and set 'typeops' to the mount 
+  # option for file system type selection when it is not '-t'.
 
   case "$OSTYPE" in
   linux*)
     args=( -s
-      '-h[show help]' \
-      '-V[show version]' \
-      '-v[verbose mode]' \
-      '(-o)-a[mount all filesystems in fstab]' \
-      '-F[fork off one child per device]' \
-      '-f[fake mount]' \
-      '-n[don'"'"'t write /etc/mtab]' \
-      '-s[tolerate sloppy mount options]' \
-      '-r[mount read-only]' \
-      '-w[mount read/write]' \
-      '-t[specify file system type]:file system type:->fstype' \
-      '-o[specify file system options]:file system option:->fsopt' \
-      ':dev or dir:->devordir' \
+      '-h[show help]'
+      '-V[show version]'
+      '-v[verbose mode]'
+      '(-o)-a[mount all filesystems in fstab]'
+      '-F[fork off one child per device]'
+      '-f[fake mount]'
+      '-n[don'"'"'t write /etc/mtab]'
+      '-s[tolerate sloppy mount options]'
+      '-r[mount read-only]'
+      '-w[mount read/write]'
+      '-t[specify file system type]:file system type:->fstype'
+      '-o[specify file system options]:file system option:->fsopt'
+      ':dev or dir:->devordir'
       ':mount point:_files -/'
     )
     fss=( minix ext ext2 xiafs hpfs msdos umsdos vfat proc nfs iso9660
-          smbfs ncpfs affs ufs romfs sysv )
+          smbfs ncpfs affs ufs romfs sysv adfs autofs coda devpts efs
+          hfs ntfs qnx4 smbfs udf )
     ;;
   osf*)
     args=( -s
-      '(-o)-a[mount all filesystems in fstab]' \
-      '-d[mount even if not unmounted]' \
-      '-e[list all mount points]' \
-      '-f[fake mount]' \
-      '-l[display values of all file system options]' \
-      '-t[specify file system type]:file system type:->fstype' \
-      '-o[specify file system options]:file system option:->fsopt' \
-      '-u[remount file system]' \
-      ':dev or dir:->devordir' \
+      '(-o)-a[mount all filesystems in fstab]'
+      '-d[mount even if not unmounted]'
+      '-e[list all mount points]'
+      '-f[fake mount]'
+      '-l[display values of all file system options]'
+      '-t[specify file system type]:file system type:->fstype'
+      '-o[specify file system options]:file system option:->fsopt'
+      '-u[remount file system]'
+      '-r[mount read-only]'
+      '-w[mount read/write]'
+      '-v[verbose]'
+      ':dev or dir:->devordir'
       ':mount point:_files -/'
     )
     fss=( advfs ufs nfs mfs cdfs )
+    deffs=cdfs
+    ;;
+  solaris*)
+    args=( -s
+      '(-p -v)-a[mount all filesystems in fstab]'
+      '(-p -v)-F[specify file system type]:file system type:->fstype'
+      '(-a -v)-p[print mounted file systems]'
+      '(-p -a)-v[print mounted file systems verbosely]'
+      '(-p -v)-V[fake mount]'
+      '(-p -v)-m[don'"'"'t write /etc/mnttab]'
+      '(-p -v)-g[mount globally]'
+      '(-p -v)-o[specify file system options]:file system option:->fsopt'
+      '(-p -v)-O[overlay mount]'
+      '(-p -v)-r[mount read-only]'
+      ':dev or dir:->devordir'
+      ':mount point:_files -/'
+    )
+    fss=( ufs nfs hsfs s5fs pcfs cachefs tmpfs )
+    deffs=hsfs
+    typeops=-F
     ;;
   *)
     # Default for all other systems. Dunno.
 
     args=( -s
-      '(-o)-a[mount all filesystems in fstab]' \
-      '-t[specify file system type]:file system type:->fstype' \
-      '-o[specify file system options]:file system option:->fsopt' \
-      '-f[fake mount]' \
-      ':dev or dir:->devordir' \
+      '(-o)-a[mount all filesystems in fstab]'
+      '-t[specify file system type]:file system type:->fstype'
+      '-o[specify file system options]:file system option:->fsopt'
+      '-f[fake mount]'
+      ':dev or dir:->devordir'
       ':mount point:_files -/'
     )
     fss=( ufs )
+    deffs=ufs
     ;;
   esac
 
@@ -238,7 +385,7 @@
 fsopt)
   _tags options || return 1
 
-  eval 'tmp=(' '"$_fs_'${(s:,:)^${opt_args[-t]:-${deffs}}}'[@]"' ')'
+  eval 'tmp=(' '"$_fs_'${(s:,:)^${opt_args[$typeops]:-${deffs}}}'[@]"' ')'
   tmp=( "$_fs_any[@]" "${(@)tmp:#}" )
   _values -s , 'file system options' "$tmp[@]" && ret=0
   ;;


-- 
Alexandre Duret-Lutz

