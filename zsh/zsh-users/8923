From zsh-users-return-8923-mason-zsh=primenet.com.au@sunsite.dk Mon May 30 18:07:08 2005
Return-Path: <zsh-users-return-8923-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 26289 invoked from network); 30 May 2005 18:07:07 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 30 May 2005 18:07:07 -0000
Received: (qmail 73894 invoked from network); 30 May 2005 18:07:01 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 30 May 2005 18:07:01 -0000
Received: (qmail 18727 invoked by alias); 30 May 2005 18:06:53 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 8923
Received: (qmail 18718 invoked from network); 30 May 2005 18:06:53 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 30 May 2005 18:06:53 -0000
Received: (qmail 72905 invoked from network); 30 May 2005 18:06:53 -0000
Received: from vms048pub.verizon.net (206.46.252.48)
  by a.mx.sunsite.dk with SMTP; 30 May 2005 18:06:48 -0000
Received: from candle.brasslantern.com ([4.11.1.68])
 by vms048.mailsrvcs.net (Sun Java System Messaging Server 6.2 HotFix 0.04
 (built Dec 24 2004)) with ESMTPA id <0IHB00ETHEBACTE3@vms048.mailsrvcs.net> for
 zsh-users@sunsite.dk; Mon, 30 May 2005 13:06:47 -0500 (CDT)
Received: from candle.brasslantern.com (IDENT:schaefer@localhost [127.0.0.1])
	by candle.brasslantern.com (8.12.11/8.12.11) with ESMTP id j4UI6jUK030340	for
 <zsh-users@sunsite.dk>; Mon, 30 May 2005 11:06:45 -0700
Received: (from schaefer@localhost)	by candle.brasslantern.com
 (8.12.11/8.12.11/Submit) id j4UI6iTx030339	for zsh-users@sunsite.dk; Mon,
 30 May 2005 11:06:44 -0700
Date: Mon, 30 May 2005 18:06:44 +0000
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: have zsh invoke a command/script but not exit
In-reply-to: <d7fckk$r0b$1@sea.gmane.org>
To: zsh-users@sunsite.dk
Message-id: <1050530180644.ZM30338@candle.brasslantern.com>
MIME-version: 1.0
X-Mailer: Z-Mail (5.0.0 30July97)
Content-type: text/plain; charset=us-ascii
References: <d7fckk$r0b$1@sea.gmane.org>
Comments: In reply to "Tim K. (Gmane)" <tk-gmane+at@idpax.com>
 "have zsh invoke a command/script but not exit" (May 30,  8:51am)
X-Spam-Checker-Version: SpamAssassin 3.0.2 on a.mx.sunsite.dk
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=6.0 tests=BAYES_00 autolearn=ham 
	version=3.0.2
X-Spam-Hits: -2.6

On May 30,  8:51am, Tim K. (Gmane) wrote:
}
} Is it possible to start zsh and invoke some other command/script but 
} upon command completion to return to interactive mode rather than exit 
} from zsh?

After the startup files are finished, zsh reads commands from exactly
one of four places:  The argument of the -c option, the current terminal,
the standard input, or a script file.

A script file is assumed if zsh has arguments but no options specifying
one of the other sources.  The documentation implies that -s forces zsh
to read from stdin, but in fact the -s option only determines whether
any further arguments are taken as the name of a script file; when both
-i and -s appear, -i takes precedence to force input from the terminal.
The -c option overrides both -i and -s, except that the .zshrc file is
read when both -i and -c appear.

The prompt is printed only in interactive mode, and you can't change the
value of that option after startup, so it's impossible to be prompted
after a command has been read from anywhere other than the terminal
(unless you run your own input loop e.g. using "vared").

} The only way I can think off is to put some hack in my .zshrc where if 
} some env variable is set it will run that command at the end of my 
} .zshrc file

How about using $@ instead of an environment variable?

    if [[ $1 == eval ]]
    then
    	"$@"
	set --
    fi

Then you run this as

    zsh -is eval 'ls *.txt'

You could even skip the requirement that "eval" be the first word:

    if (( $# ))
    then
    	eval "$@"
	set --
    fi

However, using "eval" as a keyword there means that you can still use
zsh -is with other argument strings without treating them as commands.

I like this because it lends itself to becoming an alias.

    alias zshi='zsh -is eval '

(The trailing space is for completion purposes.)

Hmm.  Depending on how you expect to use that, you might want to change
the .zshrc part to:

    if [[ $1 == eval ]]
    then
    	"${(q)@}"
	set --
    fi

You can see the difference if you run:

    zshi echo foo \; echo bar
    zshi 'echo foo ; echo bar'

Try each of those both with the (q) and without, and pick the way that
makes the most sense to you.

