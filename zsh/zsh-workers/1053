From hzoli@cs.elte.hu Sun May 12 13:23:18 1996
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by melb.werple.net.au (8.7.5/8.7.3) with ESMTP id NAA28494 for <mason@werple.mira.net.au>; Sun, 12 May 1996 13:21:39 +1000 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id WAA04378; Sat, 11 May 1996 22:59:54 -0400 (EDT)
Resent-Date: Sat, 11 May 1996 22:59:54 -0400 (EDT)
From: Zoltan Hidvegi <hzoli@cs.elte.hu>
Message-Id: <199605120252.EAA05312@hzoli.ppp.cs.elte.hu>
Subject: 8-bit fixes
To: zsh-workers@math.gatech.edu (Zsh hacking and development)
Date: Sun, 12 May 1996 04:52:49 +0200 (MET DST)
Reply-To: hzoli@unicorn.sch.bme.hu
X-Mailer: ELM [version 2.4ME+ PL11 (25)]
MIME-Version: 1.0
Content-Type: application/pgp; format=text; x-action=sign
Content-Transfer-Encoding: 7bit
Resent-Message-ID: <"dwQan3.0.K41.fGLbn"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/1053
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu
Content-Length: 7996
Status: O

-----BEGIN PGP SIGNED MESSAGE-----

If metafy is called to metafy a null terminated string it was done so far
using 0 as the length of the string.  Unfortunately sometimes we want to
metafy a non null terminated 0 long string.  The patch below use -1 instead
of 0 for that purpose.

Zoltan

PS.  My University is now cut off from the Internet because of a badly
configured router.  This problem will be fixed soon.  Till then I can be
reached at the hzoli@unicorn.sch.bme.hu E-mail address.  I subscribed the
zsh-workers list to that address.

 *** Src/builtin.c	1996/05/10 21:01:56	2.25
 --- Src/builtin.c	1996/05/12 02:01:17
 ***************
 *** 945,957 ****

       if (stat(unmeta(pwd), &st1) < 0) {
   	zsfree(pwd);
 ! 	pwd = metafy(zgetcwd(), 0, META_REALLOC);
       } else if (stat(".", &st2) < 0)
   	chdir(unmeta(pwd));
       else if (st1.st_ino != st2.st_ino || st1.st_dev != st2.st_dev) {
   	if (isset(CHASELINKS)) {
   	    zsfree(pwd);
 ! 	    pwd = metafy(zgetcwd(), 0, META_REALLOC);
   	} else {
   	    chdir(unmeta(pwd));
   	}
 --- 945,957 ----

       if (stat(unmeta(pwd), &st1) < 0) {
   	zsfree(pwd);
 ! 	pwd = metafy(zgetcwd(), -1, META_REALLOC);
       } else if (stat(".", &st2) < 0)
   	chdir(unmeta(pwd));
       else if (st1.st_ino != st2.st_ino || st1.st_dev != st2.st_dev) {
   	if (isset(CHASELINKS)) {
   	    zsfree(pwd);
 ! 	    pwd = metafy(zgetcwd(), -1, META_REALLOC);
   	} else {
   	    chdir(unmeta(pwd));
   	}
 ***************
 *** 4645,4651 ****
   			zsfree(buf);
   		}
   		if (!ops['e'])
 ! 		    setsparam(reply, metafy(buf, 0, META_REALLOC));

   		if (haso) {
   		    close(SHTTY);
 --- 4645,4651 ----
   			zsfree(buf);
   		}
   		if (!ops['e'])
 ! 		    setsparam(reply, metafy(buf, -1, META_REALLOC));

   		if (haso) {
   		    close(SHTTY);
 ***************
 *** 4679,4685 ****
   		zsfree(buf);
   	}
   	if (!ops['e'])
 ! 	    setsparam(reply, metafy(buf, 0, META_REALLOC));
   	return 0;
       }

 --- 4679,4685 ----
   		zsfree(buf);
   	}
   	if (!ops['e'])
 ! 	    setsparam(reply, metafy(buf, -1, META_REALLOC));
   	return 0;
       }

 ***************
 *** 4921,4930 ****
   	}
   	if (!ops['e']) {
   	    if (ops['A']) {
 ! 		addlinknode(readll, metafy(buf, 0, META_REALLOC));
   		al++;
   	    } else
 ! 		setsparam(reply, metafy(buf, 0, META_REALLOC));
   	}
   	if (!ops['A'])
   	    reply = *args++;
 --- 4921,4930 ----
   	}
   	if (!ops['e']) {
   	    if (ops['A']) {
 ! 		addlinknode(readll, metafy(buf, -1, META_REALLOC));
   		al++;
   	    } else
 ! 		setsparam(reply, metafy(buf, -1, META_REALLOC));
   	}
   	if (!ops['A'])
   	    reply = *args++;
 ***************
 *** 4981,4987 ****
   	    zsfree(buf);
       }
       if (!ops['e'])
 ! 	setsparam(reply, metafy(buf, 0, META_REALLOC));
       if (zbuforig) {
   	char first = *zbuforig;

 --- 4981,4987 ----
   	    zsfree(buf);
       }
       if (!ops['e'])
 ! 	setsparam(reply, metafy(buf, -1, META_REALLOC));
       if (zbuforig) {
   	char first = *zbuforig;

 *** Src/exec.c	1996/05/10 20:29:55	2.23
 --- Src/exec.c	1996/05/12 02:01:27
 ***************
 *** 205,212 ****
       /* restore the original arguments and path but do not bother with *
        * null characters as these cannot be passed to external commands *
        * anyway.  So the result is truncated at the first null char.    */
 !     pth = metafy(pth, 0, META_NOALLOC);
 !     for (eep = argv; *eep; *eep = metafy(*eep, 0, META_NOALLOC), eep++);
       return eno;
   }

 --- 205,212 ----
       /* restore the original arguments and path but do not bother with *
        * null characters as these cannot be passed to external commands *
        * anyway.  So the result is truncated at the first null char.    */
 !     pth = metafy(pth, -1, META_NOALLOC);
 !     for (eep = argv; *eep; *eep = metafy(*eep, -1, META_NOALLOC), eep++);
       return eno;
   }

 *** Src/init.c	1996/05/04 23:26:18	2.15
 --- Src/init.c	1996/05/12 02:01:55
 ***************
 *** 48,54 ****

       permalloc();

 !     for (t = argv; *t; *t = metafy(*t, 0, META_ALLOC), t++);

       if (!(zsh_name = strrchr(argv[0], '/')))
   	zsh_name = argv[0];
 --- 48,54 ----

       permalloc();

 !     for (t = argv; *t; *t = metafy(*t, -1, META_ALLOC), t++);

       if (!(zsh_name = strrchr(argv[0], '/')))
   	zsh_name = argv[0];
 ***************
 *** 639,645 ****

       /* Get password entry and set info for `HOME' and `USERNAME' */
       if ((pswd = getpwuid(cached_uid))) {
 ! 	home = metafy(pswd->pw_dir, 0, META_DUP);
   	cached_username = ztrdup(pswd->pw_name);
       } else {
   	home = ztrdup("/");
 --- 639,645 ----

       /* Get password entry and set info for `HOME' and `USERNAME' */
       if ((pswd = getpwuid(cached_uid))) {
 ! 	home = metafy(pswd->pw_dir, -1, META_DUP);
   	cached_username = ztrdup(pswd->pw_name);
       } else {
   	home = ztrdup("/");
 ***************
 *** 653,659 ****
       else if ((ptr = zgetenv("PWD")) && ispwd(ptr))
   	pwd = ztrdup(ptr);
       else
 ! 	pwd = metafy(zgetcwd(), 0, META_REALLOC);

       oldpwd = ztrdup(pwd);  /* initialize `OLDPWD' = `PWD' */

 --- 653,659 ----
       else if ((ptr = zgetenv("PWD")) && ispwd(ptr))
   	pwd = ztrdup(ptr);
       else
 ! 	pwd = metafy(zgetcwd(), -1, META_REALLOC);

       oldpwd = ztrdup(pwd);  /* initialize `OLDPWD' = `PWD' */

 *** Src/params.c	1996/05/04 22:52:32	2.16
 --- Src/params.c	1996/05/12 02:02:02
 ***************
 *** 105,111 ****
   	    *str = '\0';
   	    if (!idigit(**envp2) && isident(*envp2) && !strchr(*envp2, '[')) {
   		iname = *envp2;
 ! 		if ((pm = setsparam(iname, metafy(str + 1, 0, META_DUP)))) {
   		    pm->flags |= PM_EXPORTED;
   		    pm->env = *envp;
   		    if (pm->flags & PM_SPECIAL)
 --- 105,111 ----
   	    *str = '\0';
   	    if (!idigit(**envp2) && isident(*envp2) && !strchr(*envp2, '[')) {
   		iname = *envp2;
 ! 		if ((pm = setsparam(iname, metafy(str + 1, -1, META_DUP)))) {
   		    pm->flags |= PM_EXPORTED;
   		    pm->env = *envp;
   		    if (pm->flags & PM_SPECIAL)
 *** Src/utils.c	1996/05/12 01:46:12	2.18
 --- Src/utils.c	1996/05/12 02:07:20
 ***************
 *** 2777,2783 ****
   }

   /* Escape tokens and null characters.  Buf is the string which should be    *
 !  * escaped.  len is the length of the string.  If len is zero, buf should   *
    * be null terminated.  If len is non-zero and the third paramerer is not   *
    * META_DUP buf should point to an at least len+1 long memory area.  The    *
    * return value points to the quoted string.  If the given string does not  *
 --- 2777,2783 ----
   }

   /* Escape tokens and null characters.  Buf is the string which should be    *
 !  * escaped.  len is the length of the string.  If len is -1, buf should     *
    * be null terminated.  If len is non-zero and the third paramerer is not   *
    * META_DUP buf should point to an at least len+1 long memory area.  The    *
    * return value points to the quoted string.  If the given string does not  *
 ***************
 *** 2804,2811 ****
       char *t, *p, *e;
       static char mbuf[PATH_MAX*2+1];

 !     if (! len) {
 ! 	for (e = buf; *e; len++)
   	    if (imeta(*e++))
   		meta++;
       } else
 --- 2804,2811 ----
       char *t, *p, *e;
       static char mbuf[PATH_MAX*2+1];

 !     if (len == -1) {
 ! 	for (e = buf, len = 0; *e; len++)
   	    if (imeta(*e++))
   		meta++;
       } else
 ***************
 *** 2993,2999 ****
       struct dirent *de;

       if ((de = readdir(dir)))
 ! 	metafy(de->d_name, 0, META_STATIC);

       return de;
   }
 --- 2993,2999 ----
       struct dirent *de;

       if ((de = readdir(dir)))
 ! 	metafy(de->d_name, -1, META_STATIC);

       return de;
   }

-----BEGIN PGP SIGNATURE-----
Version: 2.6.3i
Charset: noconv

iQCVAwUBMZVSeAupSCiLN749AQEK4wP9G7+fM+BzzRmYdPBZd0fUlchlXW7SBx8p
gW47i3D7387Tgs+fklJrdh7o+Wp0DlFkuaFfz5PgT++hlZaKodua5qjmt5ypIRdp
oDEbn6mYyPT0ovqX319H6gJ6eFKz7m1Epzc/oqjOflitiR8efk4ZdDpCVfcpP0hv
xQU9ViAlFWM=
=q0l3
-----END PGP SIGNATURE-----


