From zsh-workers-request@math.gatech.edu Mon Jul 27 11:23:10 1998
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 8019 invoked from network); 27 Jul 1998 11:23:09 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 27 Jul 1998 11:23:09 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.9.1/8.9.1) id HAA24712;
	Mon, 27 Jul 1998 07:16:42 -0400 (EDT)
Resent-Date: Mon, 27 Jul 1998 07:16:42 -0400 (EDT)
Sender: B.Stephens@isode.com
To: zsh-workers@math.gatech.edu
Subject: Re: Extending zsh capabilities
References: <Pine.OSF.3.92.980727195209.20094B-100000@pigeon.qut.edu.au>
Mime-Version: 1.0 (generated by tm-edit 7.108)
Content-Type: text/plain; charset=US-ASCII
From: Bruce Stephens <b.stephens@isode.com>
Date: 27 Jul 1998 12:18:16 +0100
In-Reply-To: Mark Hessling's message of "Mon, 27 Jul 1998 20:07:23 +1000 (EST)"
Message-ID: <vbg1fnk0ef.fsf@snake.isode.com>
Lines: 25
X-Mailer: Gnus v5.6.24/XEmacs 20.4 - "Emerald"
Resent-Message-ID: <"oFg2-1.0.326.P66lr"@math>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/4253
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

Mark Hessling <m.hessling@qut.edu.au> writes:

> Executing a Rexx program within a current process is straighforward,
> I need to call the API function RexxStart() with the filename as one
> of the arguments.  The interface is simple; its knowing where to
> hook it into zsh that is my biggest problem.

[caveat: I don't know much about zsh internals]

A first thought is to look at where the shell executes external
commands, and fiddle there.  But as you comment, that's in the wrong
process.  There're presumably lots of subtleties to do with io
redirection, interruptability and things, so looking at builtins is
probably better.  

How about, as a first cut, writing a builtin "rexx" which would
execute a Rexx script?  That could be done as a module (like stat).

I'd have thought that would be acceptable in usage too: you'd just
create aliases for Rexx scripts you used a lot.  If not, you could
change the unknown function so it would try executing an unknown
command as a Rexx script, or work a bit harder.

Probably Zefram has better ideas; I'm sure he was threatening to do
the same for Perl.

