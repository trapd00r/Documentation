From zsh-users-return-3511-mason-zsh=primenet.com.au@sunsite.auc.dk Tue Nov 07 17:31:08 2000
Return-Path: <zsh-users-return-3511-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15386 invoked from network); 7 Nov 2000 17:31:07 -0000
Received: from sunsite.dk (HELO sunsite.auc.dk) (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 7 Nov 2000 17:31:07 -0000
Received: (qmail 20250 invoked by alias); 7 Nov 2000 17:30:51 -0000
Mailing-List: contact zsh-users-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.auc.dk
X-Seq: 3511
Received: (qmail 20243 invoked from network); 7 Nov 2000 17:30:51 -0000
From: "Jack McKinney" <jackmc-zsh-users@lorentz.com>
Date: Tue, 7 Nov 2000 11:30:47 -0600
To: zsh-users@sunsite.auc.dk
Subject: for loop body works, but not when called from for loop...
Message-ID: <20001107113047.A32446@stocks.pillory.com>
Mail-Followup-To: zsh-users@sunsite.auc.dk
Mime-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha1;
	protocol="application/pgp-signature"; boundary="gBBFr7Ir9EOA20Yy"
Content-Disposition: inline
User-Agent: Mutt/1.2i


--gBBFr7Ir9EOA20Yy
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

    You shouldn't need to know PGP or GPG for this.  The commands being
used here are just a filter: a pipeline copying stdin to stdout, but changing
it on the way.

    I have a bunch of PGP files that I want to convert to GPG.  Here is
the for loop I am using:

for i in $(find . -name \*.pgp | fgrep -v ring.pgp) ; do ; echo $i ; pgp -fd -z "My passphrase" < $i | gpg --passphrase-fd 3 --batch -c 3<<< "My passphrase" > ${i%pgp}gpg ; done

    When I run it, it echoes the first file it finds, and creates the .gpg
file (since it is stdout of one of the commands).  However, the file never
gets any data in it.  My first instinct is that I have the commands inside
the loop wrong.  So, I set i to this first file, and run just the body:

i=./test.pgp
pgp -fd -z "My passphrase" < $i | gpg --passphrase-fd 3 --batch -c 3<<< "My passphrase" > ${i%pgp}gpg

    Poof, the command executes in less than a second, and produces the
correct output file.  Since I actually run this command outside the loop
with $i in it, I know for certain that I have the body correct.  However,
when I run the loop version, the echo command echoes the correct filename
(./test.pgp), but it just hangs there.  The output file gets created by
the shell, but the pipeline never puts any data into it.

    Why would a for loop's body execute just fine on it own, but not when
called from the loop?

--
"Restore your inalienable human rights.       Jack McKinney
 Vote Libertarian.  http://www.lp.org         http://www.lorentz.com
 http://www.harrybrowne2000.org               jackmc@lorentz.com
                                              1024D/D68F2C07 4096g/38AEF076

--gBBFr7Ir9EOA20Yy
Content-Type: application/pgp-signature
Content-Disposition: inline

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.4 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iEYEARECAAYFAjoIPEcACgkQimeon9aPLAfM8ACfdZICLm8YecRCSsqCBeTWVdjr
P/0AniPKtHQ75XEHwVcZ3wQgPYJCehiV
=ZWZ8
-----END PGP SIGNATURE-----

--gBBFr7Ir9EOA20Yy--

