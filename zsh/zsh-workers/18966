From zsh-workers-return-18966-mason-zsh=primenet.com.au@sunsite.dk Tue Aug 26 09:10:00 2003
Return-Path: <zsh-workers-return-18966-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29032 invoked from network); 26 Aug 2003 09:09:59 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 26 Aug 2003 09:09:59 -0000
Received: (qmail 13488 invoked by alias); 26 Aug 2003 09:09:50 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 18966
Received: (qmail 13478 invoked from network); 26 Aug 2003 09:09:49 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 26 Aug 2003 09:09:49 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [193.109.254.211] by sunsite.dk (MessageWall 1.0.8) with SMTP; 26 Aug 2003 9:9:49 -0000
X-VirusChecked: Checked
X-Env-Sender: okiddle@yahoo.co.uk
X-Msg-Ref: server-5.tower-36.messagelabs.com!1061888987!153801
X-StarScan-Version: 5.0.7; banners=-,-,-
Received: (qmail 10273 invoked from network); 26 Aug 2003 09:09:47 -0000
Received: from iris.logica.co.uk (158.234.9.163)
  by server-5.tower-36.messagelabs.com with SMTP; 26 Aug 2003 09:09:47 -0000
Received: from gmcs3.local ([158.234.142.61])
	by iris.logica.co.uk (8.12.3/8.12.3/Debian -4) with ESMTP id h7Q99lHM017862;
	Tue, 26 Aug 2003 10:09:47 +0100
Received: from gmcs3.local (localhost [127.0.0.1])
	by gmcs3.local (8.11.6/8.11.6/SuSE Linux 0.5) with ESMTP id h7Q9Bd820426;
	Tue, 26 Aug 2003 11:11:40 +0200
X-VirusChecked: Checked
X-StarScan-Version: 5.0.7; banners=.,-,-
In-reply-to: <CF1EFB86-D75A-11D7-982B-0003930A2D56@ittpoi.com> 
From: Oliver Kiddle <okiddle@yahoo.co.uk>
References: <CF1EFB86-D75A-11D7-982B-0003930A2D56@ittpoi.com>
To: David Remahl <david@ittpoi.com>
cc: zsh-workers@sunsite.dk
Subject: Re: Complicated Completions 
Date: Tue, 26 Aug 2003 11:11:39 +0200
Message-ID: <20424.1061889099@gmcs3.local>

David Remahl wrote:

> I have spent some time trying to get to know the completion system. My  
> aim is to create completion functions for some of the useful and  
> surprisingly well-documented command line tools specific to Mac OS X  
> (hdiutil, diskutil, defaults, SystemStarter, ditto to mention a few).  

Sounds good.

> The thing is, some of them use rather peculiar and complex command line  
> syntaxes, so creating useful completions is quite a challenge.

There's a few other commands that follow a similar scheme. _sccs might
be a better example than _ifconfig. Also worth looking at are _xauth
and _cdcd which are simpler and _cvs which is more complicated.

> I will begin by describing the command line syntax of hdiutil, using  
> snippets from the man page.
> 
> SYNOPSIS
>       hdiutil verb [options]

Can any options appear between hdiutil and the verb? If so, begin with
an _arguments for those options finishing with a '*:: :->verbs' rule to
complete the sub commands in a state.

> Verb is one of the following:
> 	attach, detach, verify, create, convert, burn, help, info, load,  
> checksum, eject (synonym for detach), flatten, unflatten, imageinfo,  
> mount (synonym for attach), mountvol, unmount, plugins,  
> internet-enable, resize, segment, partition, makehybrid, pmap

Just completing those should be straight-forward. If you can use
_describe to give descriptions for them, that is better. For the
synonyms, give them the same description, e.g:
  {eject,detach}':description'
in zsh 4.1, they will then be grouped together.

What does the help verb output? You might be able to parse this to get
descriptions. If you get a recent _cvs from CVS, it does this.

Then follow the pattern of one of the examples:
  service="$words[1]"
  curcontext="${curcontext%:*}-$service:"

This puts the verb into $service and into the zstyle context (so you
will have, e.g. hdiutil-attach in the command part of the zstyle
context). Then, just have a case statement for each possible verb:
  case $service in
    attach)
      ...

> The set of allowed options depends on the sub command (verb). All verbs  
> accept the following optional options (duh), all mutually exclusive:
> 	-verbose
> 	-quiet
> 	-debug

Stick the _arguments specifcations for them in an array at the
beginning and include the array in all later calls to _arguments. e.g:

  args=(
    '(-quiet -debug)-verbose'
    '(-verbose -debug)-quiet'
    '(-quiet -verbose)-debug'
  )

then later, _arguments "$args[@]" \
The lists in parenthesis at the start of the specifications specifies
that they are mutually exclusive.

> Many verbs accept these options:
> 	-plist
> 	-srcimagekey <key>=<value>
> 	-tgtimagekey <key>=<value>
> 	-encryption [crypto method]
> 	-stdinpass
> 	-passphrase password
> 	-shadow [shadow file]

Again, put the specifications for those options in an array and use the
array with those sub-commands that need them.

> Many verbs take additional options that are specific to that verb. For  
> example, convert takes the following additional arguments / options:
> Required:

Specify these options in each branch of the case statement.

> Several commands  
> (attach|verify|compact|convert|burn|checksum|chpass|*flatten|fsid|image- 
> info|internet-enable|resize|segment|partition|pmap) take exactly one  
> filename argument - of a .dmg file. That corresponds to imagefile in  
> teh above convert example.

So they need an _arguments specification that looks like:
  '1:file:_files -g "*.dmg"'

Hope that helps

Oliver

