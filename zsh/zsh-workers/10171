From zsh-workers-return-10171-mason-zsh=primenet.com.au@sunsite.auc.dk Mon Mar 20 06:45:45 2000
Return-Path: <zsh-workers-return-10171-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 22992 invoked from network); 20 Mar 2000 06:45:43 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 20 Mar 2000 06:45:43 -0000
Received: (qmail 9752 invoked by alias); 20 Mar 2000 06:45:25 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 10171
Received: (qmail 9736 invoked from network); 20 Mar 2000 06:45:24 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1000320064519.ZM18353@candle.brasslantern.com>
Date: Mon, 20 Mar 2000 06:45:19 +0000
X-Mailer: Z-Mail (5.0.0 30July97)
To: zsh-workers@sunsite.auc.dk
Subject: Prompt expansion: $((%)foo} != $(print -P $foo)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

The order in which parameter expansion vs. prompt %x expansion takes place
appears to be reversed for ${(%)...} and $(print -P ...).  This is visible
in this situation:

zsh% setopt promptsubst
zsh% PS1='%$[COLUMNS-20]>...%% >some text here %% '
some text here %

The prompt and the output of "print -P" are truncated at COLUMNS-20, so in
that case the $[...] was expanded before %N>...> was parsed.  However:

some text here % echo ${(%)PS1}
[COLUMNS-1]some text here %

There, %$ was taken as a prompt token (and ignored) before parameters were
expanded.  A workaround is to use ${(%)${(e)PS1}}, but of course that's not
right when promptsubst is NOT set.

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

