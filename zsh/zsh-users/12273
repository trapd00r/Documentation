From zsh-users-return-12273-mason-zsh=primenet.com.au@sunsite.dk Sun Dec 02 18:28:11 2007
Return-Path: <zsh-users-return-12273-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 3387 invoked from network); 2 Dec 2007 18:28:03 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.3 (2007-08-08) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.3
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 2 Dec 2007 18:28:03 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 48198 invoked from network); 2 Dec 2007 18:27:56 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 2 Dec 2007 18:27:56 -0000
Received: (qmail 20126 invoked by alias); 2 Dec 2007 18:27:42 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12273
Received: (qmail 20109 invoked from network); 2 Dec 2007 18:27:42 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 2 Dec 2007 18:27:42 -0000
Received: (qmail 46836 invoked from network); 2 Dec 2007 18:27:42 -0000
Received: from vms044pub.verizon.net (206.46.252.44)
  by a.mx.sunsite.dk with SMTP; 2 Dec 2007 18:27:35 -0000
Received: from torch.brasslantern.com ([71.121.18.67])
 by vms044.mailsrvcs.net (Sun Java System Messaging Server 6.2-6.01 (built Apr
 3 2006)) with ESMTPA id <0JSF005DCPXINDI2@vms044.mailsrvcs.net> for
 zsh-users@sunsite.dk; Sun, 02 Dec 2007 12:27:19 -0600 (CST)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id lB2IRHfx002759	for
 <zsh-users@sunsite.dk>; Sun, 02 Dec 2007 10:27:18 -0800
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id lB2IRHJS002758	for zsh-users@sunsite.dk; Sun,
 02 Dec 2007 10:27:17 -0800
Date: Sun, 02 Dec 2007 10:27:15 -0800
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: command substitution: zsh waits until command exits
In-reply-to: <20071202152254.GP5855@prunille.vinc17.org>
To: zsh-users@sunsite.dk
Message-id: <071202102717.ZM2757@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <20071130133943.GG5855@prunille.vinc17.org>
	<071130073719.ZM18090@torch.brasslantern.com>
	<20071130163155.GL5855@prunille.vinc17.org>
	<071130185827.ZM18402@torch.brasslantern.com>
	<20071202021652.GO5855@prunille.vinc17.org>
	<071201210744.ZM20044@torch.brasslantern.com>
	<20071202152254.GP5855@prunille.vinc17.org>
Comments: In reply to Vincent Lefevre <vincent@vinc17.org>
 "Re: command substitution: zsh waits until command exits" (Dec  2,  4:22pm)

On Dec 2,  4:22pm, Vincent Lefevre wrote:
} Subject: Re: command substitution: zsh waits until command exits
}
} On 2007-12-01 21:07:44 -0800, Bart Schaefer wrote:
} > Process substitution wouldn't work at all if it were synchronous.
} 
} This could work: for <(...), zsh could start the process, redirecting
} its output to a temporary file, and once the process has terminated,
} zsh could run the command with a normal redirection, and clean up at
} the end.

Yes, it could work that way, but if that's what you want, <=(...) is
there for you.
 
} The substituted command doesn't need to be finished to be able to
} build the argument list: its standard output just needs to be closed
} (which is what I did in my example).

This discussion is getting sort of cyclical.  It doesn't work that way.
It doesn't work that way in any other shell, either, never has, and
although I don't have it handy I'm pretty sure the POSIX spec would
prohibit it from working that way.

} This is the same thing with a pipe

Mechanically, maybe, but not semantically.  The "|" character is one
of those special syntatic elements that invokes asynchronous behavior.
$(...) or `...` happens NOT to be such a syntactic element.  <(...) IS
such an element, as are "&" and "coproc".

You'll also note that even though "cat" finishes in

   { echo ab; exec 1>&-; sleep 5 } | cat

the parent shell does not return to a prompt until the sleep finishes.
That's the real analogy to what's happening with $(...).

}   echo $(coproc xterm -e 'stty -a ; tty >&3 ; sleep 999999' 3>&1 ;
}          read -E <&p)
} 
} outputs
} 
} speed 38400 baud; rows 60; columns 80;
} intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = <undef>;
} 
} in the xterm, but Ctrl-C still doesn't work.

Hence my speculation that something is setting the SIGINT handler to
SIG_IGN and nothing else is ever resetting it.  I don't immediately know
*what* is ignoring SIGINT.

This seems to do what you want by restoring the interactive handlers:

echo $(coproc xterm -e 'zsh -fic "tty >&3 ; exec sleep 999999"' 3>&1 ;
       read -E <&p)

Or this, which doesn't rely on coproc:

echo $({ xterm -e 'zsh -fic "tty >&3 ; exec sleep 999999"' 3>&1 & } |
       read -E)

The zsh -fic is still needed there so I think it may be $(...) that's
ignoring interrupts, which possibly it should not do.

} > Incidentally I use this little function all the time:
} > 
} > gdbterm () {
} >     xterm -title GDBterm -e sh -c 'exec xterm -e gdb --tty=$(tty) '"$*"
} > }
} 
} but that's specific to gdb. And why starting two xterms?

GDB runs in one, and the command run by GDB uses the other for I/O, and
both of them close together when I exit GDB because the I/O xterm is the
parent waiting for completion of the GDB xterm.

-- 

