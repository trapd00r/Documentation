From zsh-workers-request@euclid.skiles.gatech.edu Wed Jan 15 18:36:52 1997
Return-Path: <zsh-workers-request@euclid.skiles.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 10426 invoked from network); 15 Jan 1997 18:36:50 -0000
Received: from euclid.skiles.gatech.edu (list@130.207.146.50)
  by coral.primenet.com.au with SMTP; 15 Jan 1997 18:36:50 -0000
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id NAA09836; Wed, 15 Jan 1997 13:44:09 -0500 (EST)
Resent-Date: Wed, 15 Jan 1997 13:44:09 -0500 (EST)
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <970115105034.ZM14647@candle.brasslantern.com>
Date: Wed, 15 Jan 1997 10:50:34 -0800
In-Reply-To: Peter Stephenson <pws@ifh.de>
        "#! problem" (Jan 15, 10:37am)
References: <199701150937.KAA00978@hydra.ifh.de>
Reply-To: schaefer@nbn.com
X-Mailer: Z-Mail (4.0b.820 20aug96)
To: Peter Stephenson <pws@ifh.de>,
        zsh-workers@math.gatech.edu (Zsh hackers list)
Subject: Re: #! problem
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Resent-Message-ID: <"t4T4.0.dP2.uLIto"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/2797
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

On Jan 15, 10:37am, Peter Stephenson wrote:
} Subject: #! problem
}
} Somebody here tried something like:
} 
} #!/bin/zsh -f    
} #            ^^^^empty spaces added here

As opposed to ... full spaces?

} I would think dropping meaningless spaces in an option string
} (i.e. when an option letter is expected) again would be harmless.
} I just want to wait for the waves of protest before trying anything.

I don't think *dropping* them is the right idea; that could be pretty
confusing, couldn't it?  I'd say that a space where an option letter
was expected was actually pretty meaning*ful* -- it probably means
that somebody meant to pass two words to the shell, but mistakenly
passed only one.

Possible solutions:

1.  Improve the error message.

	/bin/zsh: bad option character " " in: -

    (There's probably a better improvement.)

2.  Stop parsing options at whitespace, and completely ignore it and
    all the characters that come after it.  I believe BSD 4.2 csh did
    this, if I'm remembering correctly my early days of feeling my way
    through scripting.

3.  As (2), but issue an error if there's anything other than whitespace
    in the trailing part.  I think this is the most reasonable choice, as
    it doesn't silently drop stuff from the #! line (which was mystifying
    when it happened in csh, which is why I'm pretty sure I remember it).

4.  Assume that if whitespace makes it to the option parser, there were
    really supposed to be two arguments, and actually arrange to parse
    it that way, i.e. split the word into two at the whitespace.  I don't
    really think this is a viable solution, not only because it violates
    the whole principle of #! lines (one path plus one argument), but
    because it also could mean arbitrarily increasing the number of words
    in argv.  On the other hand, it makes this work as it appears that it
    should:

	#! /bin/zsh -f -v -x

5.  Ignore whitespace only if it's followed by a `-' and ignore that `-'
    as well; otherwise act like (2).  This also makes "-f -v -x" and the
    like work, but doesn't have the other disadvantages of (4).  It still
    makes zsh a bit mysterious with respect to other programs named on #!
    lines, though, so it's probably not something we should do.

-- 
Bart Schaefer                             Brass Lantern Enterprises
http://www.well.com/user/barts            http://www.nbn.com/people/lantern

