From zsh-workers-return-21340-mason-zsh=primenet.com.au@sunsite.dk Wed Jun 15 08:17:48 2005
Return-Path: <zsh-workers-return-21340-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 21905 invoked from network); 15 Jun 2005 08:17:46 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 15 Jun 2005 08:17:46 -0000
Received: (qmail 39354 invoked from network); 15 Jun 2005 08:17:40 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 15 Jun 2005 08:17:40 -0000
Received: (qmail 8774 invoked by alias); 15 Jun 2005 08:17:37 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 21340
Received: (qmail 8760 invoked from network); 15 Jun 2005 08:17:36 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 15 Jun 2005 08:17:36 -0000
Received: (qmail 39112 invoked from network); 15 Jun 2005 08:17:36 -0000
Received: from vms040pub.verizon.net (206.46.252.40)
  by a.mx.sunsite.dk with SMTP; 15 Jun 2005 08:17:30 -0000
Received: from candle.brasslantern.com ([4.11.1.68])
 by vms040.mailsrvcs.net (Sun Java System Messaging Server 6.2 HotFix 0.04
 (built Dec 24 2004)) with ESMTPA id <0II400G749P3WPZM@vms040.mailsrvcs.net> for
 zsh-workers@sunsite.dk; Wed, 15 Jun 2005 03:17:28 -0500 (CDT)
Received: from candle.brasslantern.com (IDENT:schaefer@localhost [127.0.0.1])
	by candle.brasslantern.com (8.12.11/8.12.11) with ESMTP id j5F8HQ6h007941	for
 <zsh-workers@sunsite.dk>; Wed, 15 Jun 2005 01:17:26 -0700
Received: (from schaefer@localhost)	by candle.brasslantern.com
 (8.12.11/8.12.11/Submit) id j5F8HQa7007940	for zsh-workers@sunsite.dk; Wed,
 15 Jun 2005 01:17:26 -0700
Date: Wed, 15 Jun 2005 08:17:26 +0000
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: subtle `echo' bug
In-reply-to: <20050615074851.GQ4685@solemn.turbinal.org>
To: zsh-workers@sunsite.dk
Message-id: <1050615081726.ZM7939@candle.brasslantern.com>
MIME-version: 1.0
X-Mailer: Z-Mail (5.0.0 30July97)
Content-type: text/plain; charset=us-ascii
References: <20050614172738.GL4685@solemn.turbinal.org>
	<200506142212.24133.arvidjaar@newmail.ru>
	<1050615002844.ZM7767@candle.brasslantern.com>
	<20050615074851.GQ4685@solemn.turbinal.org>
Comments: In reply to Alexey Tourbin <at@altlinux.ru>
 "Re: subtle `echo' bug" (Jun 15, 11:48am)
X-Spam-Checker-Version: SpamAssassin 3.0.2 on a.mx.sunsite.dk
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=6.0 tests=AWL,BAYES_00 autolearn=ham 
	version=3.0.2
X-Spam-Hits: -2.6

On Jun 15, 11:48am, Alexey Tourbin wrote:
> Subject: Re: subtle `echo' bug
>
> On Wed, Jun 15, 2005 at 12:28:44AM +0000, Bart Schaefer wrote:
> > In short, if you write nonsense code, you get nonsense results.  Don't
> > try to feed input to a command that doesn't want it.
> 
> It was quite a real command!

I don't doubt that.  The point is that " ... | echo" is nonsense, no
matter what good reason you may have had for attempting it, because
that's writing on the standard input of a command that does not read
from standard input.

In other words, even with " ... | /bin/echo" in your example here:

>       ... {
> 	echo "$v1 has problems with $v2..." |fmt; grep -w $v2 list; } |
> 	/bin/echo ...

If "grep -w $v2 list" generates a sufficient volume of output, the pipe
on /bin/echo's stdin can fill up and the command may fail.  It's not a
zsh problem, it's a fundamental problem with the nature of unix pipes
and the way you're using them.

Zsh happens to make the problem show up sooner because the first echo
gets a write error when the second echo fails to read; but that's not
a bug, unless echo is somehow required never to fail on write error.

> I used "echo" as a comment to find out and check twice the commands that
> were going to be executed.

The right thing would be something like this, which reads and throws
away its input:

    { ... } | { cat > /dev/null; echo /path/to/my/script ... }

You could make a function:

    notreally() {
       [[ -t 0 ]] || cat > /dev/null
       print -R "$@"
    }

And then

    ... | notreally /path/to/my/script ...

Or, better still, since your script is parsing command line options,
add an option to it that tells it to run without doing its destructive
thing, so that you don't have to wrap it in another command to test it.

    ... | /path/to/my/script --notreally --opt...

