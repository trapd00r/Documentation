From zsh-workers-request@math.gatech.edu  Thu Jul 20 15:54:39 1995
Received: from gatech.edu (gatech.edu [130.207.244.244]) by werple.mira.net.au (8.6.12/8.6.9) with SMTP id PAA04483 for <mason@werple.mira.net.au>; Thu, 20 Jul 1995 15:54:34 +1000
Received: from math (math.skiles.gatech.edu) by gatech.edu with SMTP id AA22706
  (5.65c/Gatech-10.0-IDA for <mason@werple.mira.net.au>); Thu, 20 Jul 1995 01:53:08 -0400
Received: by math (5.x/SMI-SVR4)
	id AA24175; Thu, 20 Jul 1995 01:49:14 -0400
Resent-Date: Thu, 20 Jul 1995 13:49:28 +0800 (WST)
Old-Return-Path: <roy@cs.uwa.edu.au>
From: Roy LIMLEY <roy@cs.uwa.edu.au>
Message-Id: <199507200549.NAA22150@parma.cs.uwa.oz.au>
Subject: zsh bugs
To: zsh-list@sterling.com
Date: Thu, 20 Jul 1995 13:49:28 +0800 (WST)
Cc: unixsupport@parma.cs.uwa.oz.au
X-Mailer: ELM [version 2.4 PL21]
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Resent-Message-Id: <"2aqsX1.0.fv5.PvU3m"@math>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/247
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

Dear Sir/Madam,

I have just installed zsh ver 2.5.03 on our system and encountered a
perculiar bug.  Apparently the zsh process doesn't get kill when we send
a SIGHUP (15) message to it.  Some of our users log off from our system 
by killing their windows which then send the SIGHUP messages to the zsh.  But
since the zsh doesn't die from this, it becomes a wild processes and continue
to consume to CPU process.  Eventually, these wild processes accumulates and
render the system useless.

The last version that we installed (zsh-2.3.1) didn't have this problem.  Can
you suggest a solution or patches for us?

One of the solution that we found was by putting the following line in 
the .zshrc file:

    function TRAPTERM       # signal 15
    {
        fc -W $HISTFILE
        exit
    }

However, we really don't want to change everyone's .zshrc file.  Perhaps
you can offer us a better solution.


Thanks,

Roy Limley

