From zsh-users-return-4160-mason-zsh=primenet.com.au@sunsite.dk Tue Aug 21 16:39:35 2001
Return-Path: <zsh-users-return-4160-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 20014 invoked from network); 21 Aug 2001 16:39:34 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 21 Aug 2001 16:39:34 -0000
Received: (qmail 11784 invoked by alias); 21 Aug 2001 16:39:19 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 4160
Received: (qmail 11772 invoked from network); 21 Aug 2001 16:39:17 -0000
From: Bart Schaefer <schaefer@brasslantern.com>
Message-Id: <1010821163843.ZM21870@candle.brasslantern.com>
Date: Tue, 21 Aug 2001 16:38:43 +0000
In-Reply-To: <1010820182638.ZM20357@candle.brasslantern.com>
Comments: In reply to Bart Schaefer <schaefer@brasslantern.com>
        "Re: Zsh Guide chapter 5 (substitutions)" (Aug 20,  6:26pm)
References: <20010815230024.3E7F614284@pwstephenson.fsnet.co.uk> 
	<1010820182638.ZM20357@candle.brasslantern.com>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>, zsh-users@sunsite.dk
Subject: Re: Zsh Guide chapter 5 (substitutions)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Aug 20, I wrote:
}
} Might be worth pointing out here or elsewhere that (#i)~/foo does NOT
} mean ~(#i)/foo, but rather means (#i)(|)~/foo
} 
} Gotta stop now, back later for sections 5.9.7 and later.

And lo, in 5.9.7 PWS says:

   print (#i)~/.Z*

 doesn't work.

That doesn't say what it does do, though.

A little bit above that:

 You can put the flags at any point in the pattern, and they last either
 till the end, so in

The "either" lacks an "or."

Then I've got nothing until way down under zmv, where:

     [[ $f1 = (#b)${~pattern} ]] || next

That "next" should be a "continue".  (I myself am on the verge of
`alias next=continue' because I've been writing so much Perl at work
lately.)

And that's all, except that I'm left puzzling over this:

 The other tricky point is the use of double quotes in the eval. That
 means that if the second argument has a double quote in it, the shell
 will get very confused.

This refers to:

     eval "f2=\"$result\""

I'm left wondering whether

     f2=${(e)result}

wouldn't be equivalent and avoid the need for the double quotes?

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

Zsh: http://www.zsh.org | PHPerl Project: http://phperl.sourceforge.net   

