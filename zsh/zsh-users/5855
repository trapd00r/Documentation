From zsh-users-return-5855-mason-zsh=primenet.com.au@sunsite.dk Sat Feb 01 07:37:25 2003
Return-Path: <zsh-users-return-5855-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12029 invoked from network); 1 Feb 2003 07:37:24 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 1 Feb 2003 07:37:24 -0000
Received: (qmail 1922 invoked by alias); 1 Feb 2003 07:36:57 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 5855
Received: (qmail 1914 invoked from network); 1 Feb 2003 07:36:57 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 1 Feb 2003 07:36:57 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [64.56.232.6] by sunsite.dk (MessageWall 1.0.8) with SMTP; 1 Feb 2003 7:36:56 -0000
Received: (from parkw@localhost)
	by node1.opengeometry.net (8.11.6/8.11.6) id h117at203897
	for zsh-users@sunsite.dk; Sat, 1 Feb 2003 02:36:55 -0500
Date: Sat, 1 Feb 2003 02:36:55 -0500
From: William Park <opengeometry@yahoo.ca>
To: zsh-users@sunsite.dk
Subject: Re: (feature request) Shell script within shell script
Message-ID: <20030201073655.GA3893@node1.opengeometry.net>
Mail-Followup-To: zsh-users@sunsite.dk
References: <20030128042243.GA3888@node1.opengeometry.net> <20030128104034.GA6470@node1.opengeometry.net> <20030131204945.GA1189@node1.opengeometry.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20030131204945.GA1189@node1.opengeometry.net>
User-Agent: Mutt/1.4i

Dear Zsh expert,

When writing a shell script, quite often, I have to write bunch of
separate Awk/Python/Perl/etc scripts that are more than few lines.  I
tend to lose track of which script does what, and get bitten over two
levels of quotes.

Essentially, I wish I could do something like
    
    herefile test1 << "EOF"
    #! /usr/bin/gawk -f
    ...
    ...
    EOF

and

    herefile test2 << "EOF"
    #! /usr/bin/python
    ...
    ...
    EOF

so that invocation and usage of 'test1' and 'test2' will be the same as
if they were separate real files.

Can Zsh do this now?  If not, does Zsh have standard mechanism to
provide this kind of extensions?

-- 
William Park, Open Geometry Consulting, <opengeometry@yahoo.ca>
Linux solution for data management and processing. 

