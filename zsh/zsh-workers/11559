From zsh-workers-return-11559-mason-zsh=primenet.com.au@sunsite.auc.dk Wed May 24 13:40:24 2000
Return-Path: <zsh-workers-return-11559-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 836 invoked from network); 24 May 2000 13:40:23 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 24 May 2000 13:40:23 -0000
Received: (qmail 5750 invoked by alias); 24 May 2000 13:40:18 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 11559
Received: (qmail 5743 invoked from network); 24 May 2000 13:40:17 -0000
X-Envelope-Sender-Is: Andrej.Borsenkow@mow.siemens.ru (at relayer goliath.siemens.de)
From: "Andrej Borsenkow" <Andrej.Borsenkow@mow.siemens.ru>
To: "Peter Stephenson" <pws@cambridgesiliconradio.com>,
   "Zsh hackers list" <zsh-workers@sunsite.auc.dk>
Subject: RE: FIFOs again
Date: Wed, 24 May 2000 16:43:28 +0400
Message-ID: <000101bfc57d$a8c80d50$21c9ca95@mow.siemens.ru>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="koi8-r"
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
In-Reply-To: <000001bfc579$e40a53e0$21c9ca95@mow.siemens.ru>
Importance: Normal
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6700

> >
> > The second thing is a killer, at least without a rethink.
> In the case
> > first shown, where the fifo is never opened, but this time
> does still
> > exist, the zsh just hangs on for ever waiting for it and sits around
> > uselessly in the process table.
>
>
> Yes, I got the same. Real nasty. One possibility is "dummy open" in
> parent. The child hangs because it tries to open FIFO without
> counterpart. Parent can simply open it and then close when child exits
> or we're done with current commmand (it currently have to delete FIFO
> anyway).
>

Actually, it seems to be possible to immediately close it. The following
trivial change to getproc() (marked with >>>>>>) seems to do the trick
(no more hung processes).

#ifndef PATH_DEV_FD
    if (!jobtab[thisjob].filelist)
šjobtab[thisjob].filelist = znewlinklist();
    zaddlinknode(jobtab[thisjob].filelist, ztrdup(pnam));

    if (zfork()) {
>>>>>>šdummy = open(pnam, !out ? O_WRONLY | O_NOCTTY : O_RDONLY |
O_NOCTTY);
>>>>>>šclose (dummy);
#else
    mpipe(pipes);
    if (zfork()) {
šsprintf(pnam, "%s/%d", PATH_DEV_FD, pipes[!out]);
šzclose(pipes[out]);
šfdtable[pipes[!out]] = 2;
#endif
šreturn pnam;
    }

This looks safe - we do it only if fork() was successful and then child
will open FIFO in turn. BTW this is also a way to sync child and parent
to some extent. Oh, yes, and it should fix the first mentioned problem -
that parent removes FIFO too early.

-andrej

