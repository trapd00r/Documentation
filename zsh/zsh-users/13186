From zsh-users-return-13186-mason-zsh=primenet.com.au@sunsite.dk Wed Sep 03 03:08:21 2008
Return-Path: <zsh-users-return-13186-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23249 invoked from network); 3 Sep 2008 03:08:08 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 3 Sep 2008 03:08:08 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 72879 invoked from network); 3 Sep 2008 03:07:42 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 3 Sep 2008 03:07:42 -0000
Received: (qmail 5451 invoked by alias); 3 Sep 2008 03:07:10 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13186
Received: (qmail 5434 invoked from network); 3 Sep 2008 03:07:08 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 3 Sep 2008 03:07:08 -0000
Received: from vms044pub.verizon.net (vms044pub.verizon.net [206.46.252.44])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 239EE801E2B4
	for <zsh-users@sunsite.dk>; Wed,  3 Sep 2008 05:06:55 +0200 (CEST)
Received: from torch.brasslantern.com ([96.238.220.178])
 by vms044.mailsrvcs.net
 (Sun Java System Messaging Server 6.2-6.01 (built Apr  3 2006))
 with ESMTPA id <0K6L006GLNBHSQHA@vms044.mailsrvcs.net> for
 zsh-users@sunsite.dk; Tue, 02 Sep 2008 22:06:54 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id m8336qpe009891	for
 <zsh-users@sunsite.dk>; Tue, 02 Sep 2008 20:06:53 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id m8336qAJ009890	for zsh-users@sunsite.dk; Tue,
 02 Sep 2008 20:06:52 -0700
Date: Tue, 02 Sep 2008 20:06:52 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: compsys maps anonymous memory and never frees it
In-reply-to: =?iso-8859-1?Q?=3C48BDF1EC=2E4050204=40gmail=2Ecom=3E?=
 =?iso-8859-1?Q?Comments=3A_In_reply_to_=22xRaich=5Bo=5D=B2x=22_=3Craichoo?=
 =?iso-8859-1?Q?=40googlemail=2Ecom=3E?=
 =?iso-8859-1?Q?________=22compsys_maps_anonymous_memory_and_never_frees_i?=
 =?iso-8859-1?Q?t=22_=28Sep__3=2C__4=3A09am=29?=
To: zsh-users@sunsite.dk
Message-id: <080902200652.ZM9887@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=iso-8859-1
Content-transfer-encoding: quoted-printable
References: <48BDF1EC.4050204@gmail.com>
X-Virus-Scanned: ClamAV 0.92.1/8144/Wed Sep  3 03:57:33 2008 on bifrost
X-Virus-Status: Clean

On Sep 3,  4:09am, xRaich[o]=B2x wrote:
}
} I made an interesting observation while testing compsys in zsh on=20
} OpenSolaris. Everytime completion kicks in zsh maps a segment of=20
} anonymous memory and it looks like that it won't unmap it.

Version number of zsh involved?

There are only three places where zsh maps memory.  One is when it
loads a .zwc file (zcompiled functions); one is whan it references
the $mapfile special parameter (which the standard set of compsys
functions never does); and one is the heap allocator in Src/mem.c:

     There are two ways to allocate memory in zsh.  The first way is
     to call zalloc/zshcalloc, which call malloc/calloc directly.  It
     is legal to call realloc() or free() on memory allocated this way.
     The second way is to call zhalloc/hcalloc, which allocates memory
     from one of the memory pools on the heap stack.  Such memory pools=20
     will automatically created when the heap allocation routines are
     called.  [...]

     If possible, the heaps are allocated using mmap() so that the
     (*real*) heap isn't filled up with empty zsh heaps. If mmap()
     is not available and zsh's own allocator is used, we use a simple trick
     to avoid that: we allocate a large block of memory before allocating
     a heap pool, this memory is freed again immediately after the pool
     is allocated. If there are only small blocks on the free list this
     guarantees that the memory for the pool is at the end of the memory
     which means that we can give it back to the system when the pool is
     freed.

It's possible that there's a popheap() or the equivalent missing from
somewhere.  It's also possible that the OpenSolaris munmap() does not
really (or not immediately) release memory back to the system, because
if I repeat your same example on my CentOS 4 box, the number of mapped
blocks remains constant.

