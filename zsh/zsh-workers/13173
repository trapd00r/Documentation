From zsh-workers-return-13173-mason-zsh=primenet.com.au@sunsite.auc.dk Mon Nov 20 16:10:28 2000
Return-Path: <zsh-workers-return-13173-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28969 invoked from network); 20 Nov 2000 16:10:25 -0000
Received: from sunsite.dk (HELO sunsite.auc.dk) (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 20 Nov 2000 16:10:25 -0000
Received: (qmail 8456 invoked by alias); 20 Nov 2000 16:10:14 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 13173
Received: (qmail 8448 invoked from network); 20 Nov 2000 16:10:12 -0000
Date: Mon, 20 Nov 2000 16:09:45 +0000
From: Peter Stephenson <pws@csr.com>
Subject: Allowing traps
To: zsh-workers@sunsite.auc.dk (Zsh hackers list)
Message-id: <0G4B000QJZK9C5@la-la.cambridgesiliconradio.com>
Content-transfer-encoding: 7BIT

It's currently possible, even with the rewritten trap code, for a trap to
be called inside a trap.  For example, if a trap includes a `read', another
trap could be called at that point (whether it is already in the queue, or
the signal has arrived since the trap started).  This is presumably
unhealthy --- at least, I have some shell code using the new trap behaviour
which gets upset if instances of it are not called sequentially.  Should we
add an extra flag to block traps explicitly from running when we are inside
doqueuedtraps()?

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
Cambridge Silicon Radio, Unit 300, Science Park, Milton Road,
Cambridge, CB4 0XL, UK                          Tel: +44 (0)1223 392070

