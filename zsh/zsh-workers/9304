From zsh-workers-return-9304-mason-zsh=primenet.com.au@sunsite.auc.dk Thu Jan 13 08:24:28 2000
Return-Path: <zsh-workers-return-9304-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1300 invoked from network); 13 Jan 2000 08:24:27 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 13 Jan 2000 08:24:27 -0000
Received: (qmail 16151 invoked by alias); 13 Jan 2000 08:24:19 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 9304
Received: (qmail 16144 invoked from network); 13 Jan 2000 08:24:19 -0000
Date: Thu, 13 Jan 2000 09:24:18 +0100 (MET)
Message-Id: <200001130824.JAA03302@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: "Bart Schaefer"'s message of Wed, 12 Jan 2000 16:49:27 +0000
Subject: Re: completion with midword tildes


Bart Schaefer wrote:

> On Jan 12, 10:07am, Sven Wischnowsky wrote:
> } Subject: Re: completion with midword tildes
> }
> } A pure user-code solution would be to use a match spec such as 'm:=\\'
> } (or several of these, making the backslash only optional before some
> } special characters) in ones $compmatchers, but maybe we should make
> } the completion code do that by default. What I want to say is that
> } nowadays I would implement it in exactly this way -- modify the
> } matching function to ignore backslashes. That's what the patch below
> } tries to attempt -- it works but there may be some complicated
> } interactions with complex match specs, I'll have to test that.
> 
> What happens if the file name (or whatever else is being completed)
> actually *contains* a backslash?  I.e. the backslash isn't just there
> to quote some other special character.

I guess you tried it already: here one needs two backslashes on the
line to complete. Hm. The only thing I can say to defend this
behaviour is that the backslash (of course) always shows slightly
different behaviour (comparing `a\b', `a\\b' and `a~b', `a\~b').

Should we change that? (Consider me saying this very timidly.)

Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

