From zsh-workers-return-12932-mason-zsh=primenet.com.au@sunsite.auc.dk Mon Oct 09 15:08:18 2000
Return-Path: <zsh-workers-return-12932-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15685 invoked from network); 9 Oct 2000 15:08:16 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 9 Oct 2000 15:08:16 -0000
Received: (qmail 9494 invoked by alias); 9 Oct 2000 15:07:41 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 12932
Received: (qmail 9487 invoked from network); 9 Oct 2000 15:07:41 -0000
Date: Mon, 9 Oct 2000 11:07:42 -0400
Message-Id: <200010091507.LAA01598@soup.ql.org>
X-Authentication-Warning: soup.ql.org: ejb set sender to ejb@ql.org using -f
From: "E. Jay Berkenbilt" <ejb@apexinc.com>
To: zsh-workers@sunsite.auc.dk
Subject: signal lists and cpp output
Mime-Version: 1.0 (generated by tm-edit 7.106)
Content-Type: text/plain; charset=US-ASCII


Based on the discussion on the gcc-bugs list over my bug report, it
seems quite compelling that zsh should not be relying on cpp output to
figure out which header file to use for the signal list.  I've been
depending upon cpp output for years for dependency generation where
other options are tricky (because of #includes that are conditional
upon symbols defined by the compiler that only cpp knows about), but
in this case, a simple script that looks through every file mentioned
in any #include directive (recursively) even if it ignores
preprocessor symbols may work and would then separate the zsh autoconf
code from depending upon cpp output.  Alternatively, the zsh autoconf
code could detect the case where it didn't find any signals and fail.

As it happens, this "problem" (which some of the gcc people don't even
think is a bug) does not exist in the current development versions of
gcc.  It is only because RedHat botched up and included a development
version of gcc with 7.0 that this even becomes a problem.  (The
problem is much deeper than this -- there are object file
incompatibilities between gcc 2.96 and both earlier and later versions
-- RedHat had no business including 2.96 with a release even if they
do own Cygnus now....)  Regardless of where the bug/mistakes are, the
fact is though that lots of users are probably going to run into this
problem since RedHat 7.0 will certainly have a wide install base.  (I
am thinking of switching to Debian myself, and for now, I've reverted
back to 6.2 since the gcc/libraries in 7.0 can't deal with my C++
multithreading library and fails with one or two bogus error messages
in C++ code that is valid.)

                                Jay

