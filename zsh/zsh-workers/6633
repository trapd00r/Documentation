From zsh-workers-return-6633-mason-zsh=primenet.com.au@sunsite.auc.dk Tue Jun 15 06:58:21 1999
Return-Path: <zsh-workers-return-6633-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 13165 invoked from network); 15 Jun 1999 06:58:20 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 15 Jun 1999 06:58:20 -0000
Received: (qmail 28005 invoked by alias); 15 Jun 1999 06:57:36 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 6633
Received: (qmail 27996 invoked from network); 15 Jun 1999 06:57:33 -0000
Date: Tue, 15 Jun 1999 08:57:31 +0200 (MET DST)
Message-Id: <199906150657.IAA31918@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: Peter Stephenson's message of Mon, 14 Jun 1999 16:42:29 +0200
Subject: Re: WORDCHARS, etc.


Peter Stephenson wrote:

> > - The read builtin uses `getkey()' when called from a zle widget and
> >   when reading from stdin.
> 
> is that when (called from a zle widget && reading from stdin)? in which
> case that's a good idea.

Yes.

> > - Finally, my suggestion for enhancing aliases. I've used a different
> >   option character for this and because I couldn't think of a good
> >   one, I've just taken `X':
> > 
> >     zle -X new-name old-name numeric args...
> 
> I'm not sure we need both this and zle -A.  And having this the other way
> round from zls -A is just creating more confusion, even if the -A choice
> was non-optimal (though it is in the UNIX tradition of things like mv and
> ln; if -L hadn't been used it would have been more obvious).
> 
> There was some opposition to enhancing aliases anyway, since you can
> always define a function widget.  One reason why I like them is it raises
> the possibility of having builtin widgets implemented as aliases at shell
> startup, which is a non-starter if you need a function.

This is almost the only reason why I would want such (more powerful)
aliases: to have a way to define them built in. If we ever decide to
change widgets to accept arguments and to make some of the builtin
widgets aliases to them at all, we can of course easily hide this
completely from the users. They will still only be able to use `-A'
but internally we use aliases with arguments and document it as `foo
behaves like bar with arguments...' or something like that.

Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

