From zsh-users-return-14777-mason-zsh=primenet.com.au@zsh.org Tue Feb 02 21:11:36 2010
Return-Path: <zsh-users-return-14777-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29818 invoked by alias); 2 Feb 2010 21:11:36 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14777
Received: (qmail 7584 invoked from network); 2 Feb 2010 21:11:35 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at benizi.com does not designate permitted sender hosts)
Date: Tue, 2 Feb 2010 16:11:29 -0500 (EST)
From: "Benjamin R. Haskell" <zsh@benizi.com>
To: Zsh Users <zsh-users@zsh.org>
Subject: Re: Want to replace bash w zsh as system shell on Ubuntu
In-Reply-To: <87bpg7jscq.fsf@ft.bewatermyfriend.org>
Message-ID: <alpine.LNX.2.01.1002021600020.2729@hp.internal>
References: <20100202081546.GA5930@panix.com> <201002021928.20601.joke@seiken.de> <87fx5jjw7m.fsf@ft.bewatermyfriend.org> <201002022029.06336.joke@seiken.de> <87bpg7jscq.fsf@ft.bewatermyfriend.org>
User-Agent: Alpine 2.01 (LNX 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

[just responding to a small portion]

On Tue, 2 Feb 2010, Frank Terbeck wrote:

> Joke de Buhr wrote:
> 
> > By the way what is this syntax actually: (( ${#foo} > 0 ))
> 
> Yes, which is exactly what I used in both of my mails:
> (( ${#matches} > 0 )) && ...
> (( ${#array} > 0 ))
> 

I think Joke de Buhr meant (paraphrasing) "What is this syntax exactly?"

See 'man zshall', heading 'ARITHMETIC EVALUATION', second paragraph.  
It's treated as an arithmetic expression, and the return value is true 
if non-zero.

I generally write:

(( $#matches )) && ...do-whatever

omitting the '> 0', since it's semantically equivalent for arrays AFAICT 
(can't have negative number of elements), and leaving out the braces 
(just on personal preference).

> > I would use a conditional expressions: [[ ${#foo} -gt 0 ]]
> > I only remember the syntax (( a = 4 + 3 )) as an alternative to let 
> > and a arithmetic evaluation like "print $((4+3))".
> 
> Well, until someone tells me whether (( .. )) or [[ .. ]] would be 
> preferable performance-wise (which probably doesn't make that much of 
> an impact) I'll keep using arithmetic expressions when it comes to 
> numbers.  I find that a) logical and b) arithmetic expressions have a 
> lot more features for handling numbers than [[ .. ]] type tests do. I 
> guess that's my personal preference.

Pretty sure the performance benefits of one versus the other are more 
than outweighed by the benefit(s) of clarity and/or personal preference.

-- 
Best,
Ben

