From zsh-workers-return-23207-mason-zsh=primenet.com.au@sunsite.dk Thu Mar 08 19:19:44 2007
Return-Path: <zsh-workers-return-23207-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12054 invoked from network); 8 Mar 2007 19:19:39 -0000
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=BAYES_00,FORGED_RCVD_HELO
	autolearn=ham version=3.1.8
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 8 Mar 2007 19:19:39 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 30990 invoked from network); 8 Mar 2007 19:19:33 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 8 Mar 2007 19:19:33 -0000
Received: (qmail 8504 invoked by alias); 8 Mar 2007 19:19:29 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 23207
Received: (qmail 8493 invoked from network); 8 Mar 2007 19:19:29 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 8 Mar 2007 19:19:29 -0000
Received: (qmail 30621 invoked from network); 8 Mar 2007 19:19:29 -0000
Received: from flpvm23.prodigy.net (207.115.20.53)
  by a.mx.sunsite.dk with SMTP; 8 Mar 2007 19:19:22 -0000
X-ORBL: [76.211.241.103]
Received: from [76.211.241.103] (adsl-76-211-241-103.dsl.pltn13.sbcglobal.net [76.211.241.103])
	by flpvm23.prodigy.net (8.13.8 out.dk.spool/8.13.8) with ESMTP id l28JJpEr030268
	for <zsh-workers@sunsite.dk>; Thu, 8 Mar 2007 11:19:52 -0800
Message-ID: <45F0638B.6090203@cowan.name>
Date: Thu, 08 Mar 2007 11:27:07 -0800
From: Micah Cowan <micah@cowan.name>
User-Agent: Thunderbird 1.5.0.9 (X11/20070103)
MIME-Version: 1.0
To: zsh-workers@sunsite.dk
Subject: "jobs" command within substitution
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

Hello, all. This is my first post to this group.

I scoured the manpages and list archives, but could not find the answer 
I seek.

My question, in a nutshell, is: How can I effectively use the "jobs" 
builtin command in producing the interactive prompt?

-- THE PROBLEM --

The following line was the obvious choice (provided appropriate options 
are set), and indeed works fine in several other shells:

: PS1='$(jobs | pjobs_gen_prompt)'
: # pjobs_gen_prompt is a custom shell fn

However, I've discovered that, the output of

: echo $(jobs)

is empty (apart from the spurious newline), even when executing "jobs" 
in the current shell would produce output. In fact,

: ( jobs )

still produces the expected, same results as execution directly within 
the current shell.

It might be argued, due to the language of POSIX ("The jobs utility 
shall display the status of jobs that were started in the current shell 
environment"), that it is not required to do so for /copies/ of the 
current shell environment: however, the case between $(jobs) and (jobs) 
should at least be consistent, since their behavior in POSIX is defined 
the same. I don't think the language in the standard is precise enough 
to warrant me claiming that this actually /breaks/ POSIX, but it seems 
against the likely /intentions/ at any rate, at least to me.

My personal opinion is that this is a bug, but I'd be happy to hear 
explanations if this is intended behavior.

-- WORKAROUNDS? --

Regardless of whether this is a bug or not, I still need a way to do 
what I want. You can get a very clear picture of what I'm trying to 
accomplish by downloading my script (it lacks spit and polish that I 
plan to add soon, so it's not the "official" version yet; but it's 
functional):

http://micah.cowan.name/svn/promptjobs/trunk/prompt-jobs.sh

^^^ source this, DON'T execute it (it won't work).

and sourcing it (". ./prompt-jobs.sh"). After this, run a couple of jobs 
in the foreground (say, "man man" or "ls | less") and then suspend them 
via Ctrl-Z. In bash, this will produce a prompt such as:

   micah(1:man 2:ls)$

The prompt will be colorized in color-supporting terminals.

I wish to get the same effect in zsh. You can follow the same steps in 
zsh, and will get the colorized version of your prompt, but you won't 
get the joblists.

In the case of bash, I'm actually not using command-substitution on the 
value of PS1, but I'm using bash's PROMPT_COMMAND to /set/ PS1's value 
via a command-substitution. This is because, when bash is interpolating 
the value from PS1, it treats the escape-sequence protectors \[ and \] 
(equivalent to zsh's %{, %}) before it does the command-substitution, 
which would cause pjobs_gen_prompt's \[, \] to be printed literally. Zsh 
treats %{ and %} after command-substitution, so that's not a problem.

Is there any /other/ way to do this that will work, today, for zsh? 
Perhaps an equivalent to bash's PROMPT_COMMAND that I haven't found in 
the documentation, or some option I missed that will allow jobs within 
command substitution to produce the output I'm expecting?

Thanks /very/ much for taking the time to read this length explanation. 
And, please let me know what you think of my little script :)

-- 
Micah J. Cowan
Programmer, musician, typesetting enthusiast, gamer...
http://micah.cowan.name/

