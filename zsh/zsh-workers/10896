From zsh-workers-return-10896-mason-zsh=primenet.com.au@sunsite.auc.dk Mon Apr 24 03:31:28 2000
Return-Path: <zsh-workers-return-10896-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 10428 invoked from network); 24 Apr 2000 03:31:27 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 24 Apr 2000 03:31:27 -0000
Received: (qmail 2698 invoked by alias); 24 Apr 2000 03:31:19 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 10896
Received: (qmail 2684 invoked from network); 24 Apr 2000 03:31:18 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1000424033107.ZM30240@candle.brasslantern.com>
Date: Mon, 24 Apr 2000 03:31:07 +0000
In-Reply-To: <0FT0004DUNHOXH@la-la.cambridgesiliconradio.com>
Comments: In reply to Peter Stephenson <pws@cambridgesiliconradio.com>
        "FIFOs" (Apr 14,  6:05pm)
References: <0FT0004DUNHOXH@la-la.cambridgesiliconradio.com>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Peter Stephenson <pws@cambridgesiliconradio.com>,
        zsh-workers@sunsite.auc.dk (Zsh hackers list)
Subject: Re: FIFOs
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Apr 14,  6:05pm, Peter Stephenson wrote:
} Subject: FIFOs
}
} % echo <(echo foo)
} 
} Here the parent shell can, with the wind in the right direction, get back
} and delete the file named by the <(...) before the child has had a chance
} to open it (let alone call the code to fill it).  There's no easy way to
} synch this, since you end up with deadlock --- the child can't open the
} fifo until there's a process reading it.

The obvious solution here is that zsh should fork a subshell to handle the
entire process inside the <(...), including actually removing the file at
the end.  That is, the parent creates the FIFO, then forks a subshell.  The
subshell runs "echo foo" and then removes the FIFO when that exits.

Meanwhile, the parent runs "echo nameofFIFOhere" and treats the subshell as
a backgrounded job.  It never touches the FIFO again.

} The second thing is a killer, at least without a rethink.  In the case
} first shown, where the fifo is never opened, but this time does still
} exist, the zsh just hangs on for ever waiting for it and sits around
} uselessly in the process table.

If the user asked for that, then that's what the user gets.  In the
scenario I just described, it's the subshell that sits around forever,
not the parent; so what?  It's not like the terminal is hung.

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

