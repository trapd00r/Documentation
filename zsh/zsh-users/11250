From zsh-users-return-11250-mason-zsh=primenet.com.au@sunsite.dk Fri Mar 09 11:59:24 2007
Return-Path: <zsh-users-return-11250-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29785 invoked from network); 9 Mar 2007 11:59:19 -0000
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00,FORGED_RCVD_HELO
	autolearn=ham version=3.1.8
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 9 Mar 2007 11:59:19 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 74755 invoked from network); 9 Mar 2007 11:59:12 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 9 Mar 2007 11:59:12 -0000
Received: (qmail 22668 invoked by alias); 9 Mar 2007 11:59:05 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 11250
Received: (qmail 22659 invoked from network); 9 Mar 2007 11:59:05 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 9 Mar 2007 11:59:05 -0000
Received: (qmail 73675 invoked from network); 9 Mar 2007 11:59:05 -0000
Received: from vms040pub.verizon.net (206.46.252.40)
  by a.mx.sunsite.dk with SMTP; 9 Mar 2007 11:58:59 -0000
Received: from torch.brasslantern.com ([71.116.117.231])
 by vms040.mailsrvcs.net
 (Sun Java System Messaging Server 6.2-6.01 (built Apr  3 2006))
 with ESMTPA id <0JEM00D2XX9X38Z4@vms040.mailsrvcs.net> for
 zsh-users@sunsite.dk; Fri, 09 Mar 2007 05:58:46 -0600 (CST)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id l29BwjUh006382	for
 <zsh-users@sunsite.dk>; Fri, 09 Mar 2007 03:58:45 -0800
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id l29Bwi72006381	for zsh-users@sunsite.dk; Fri,
 09 Mar 2007 03:58:44 -0800
Date: Fri, 09 Mar 2007 03:58:44 -0800
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: Organising photos into a list (O/T)
In-reply-to: <Xns98EE6824D7FF6zzappergmailcom@80.91.229.5>
To: zsh-users@sunsite.dk
Message-id: <070309035844.ZM6380@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <Xns98EE6824D7FF6zzappergmailcom@80.91.229.5>
Comments: In reply to zzapper <david@tvis.co.uk>
 "Organising photos into a list (O/T)" (Mar  9, 10:15am)

On Mar 9, 10:15am, zzapper wrote:
}
} I needed to organise about 60 images into a numerical list.
[...]
} (Just realised, the best way would have been to print them all and then 
} organise them on a table: but that would have taken ages)

If the file names or dates don't already reflect something close to the
ordering you want, so you have to look at the pictures to number them,
then no command-line tool is going to be of much help.  You might be
able to write a function to renumber (by renaming) a bunch of files
when you find that you need to move one of them to an earlier place in
the list, but you still need to type out at least the names of the
file to be moved and the file to move it "ahead" of.

So for example

number-files() {
  # Usage:
  #  number-files
  # or
  #  number-files list of up to 9999 file names here
  emulate -L zsh
  (( $# )) || set -- *
  local -Z 4 n
  for ((n = 1; n <= ARGC; n++)); do
    # Comma inserted here in case file names already begin
    # with numbers.  Change or omit as you prefer.
    mv $argv[n] $n,$argv[n]
  done
}

# See "man zshcontrib" for zmv
autoload -U zmv

move-before() {
  # Usage:
  #  move-before source destination
  # Assumes files of interest resulted from number-files,
  # so all file names have a four-digit prefix, and
  # file names remain unique after stripping the prefix.
  # Works only on files in the current directory.
  emulate -L zsh
  local base=${1#[0-9][0-9][0-9][0-9]}
  local min=${(M)2#[0-9][0-9][0-9][0-9]}
  if [[ $1 > $2 ]]
  then
    local max=${(M)1#[0-9][0-9][0-9][0-9]}
  else
    local max=
  fi
  mv $1 tmp$1 || return 1
  # Quoting is very important in the next line
  if zmv "(<$min-$max>)(*)" '${(l:4::0:)$(($1+1))}$2'
  then
    mv tmp$1 $min$base
  else
    # Error, put the original file back
    mv tmp$1 $1
  fi
}

Note that move-before will allow holes to appear in the numbering
if you move a file from the middle towards the end, but the files
should remain in relative number order as you move them around.
Improve as you prefer.

