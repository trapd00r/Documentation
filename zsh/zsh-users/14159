From zsh-users-return-14159-mason-zsh=primenet.com.au@sunsite.dk Fri May 22 03:38:43 2009
Return-Path: <zsh-users-return-14159-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23025 invoked from network); 22 May 2009 03:38:39 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 22 May 2009 03:38:39 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 73895 invoked from network); 22 May 2009 03:38:28 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 22 May 2009 03:38:28 -0000
Received: (qmail 20186 invoked by alias); 22 May 2009 03:38:11 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 14159
Received: (qmail 20169 invoked from network); 22 May 2009 03:38:10 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 22 May 2009 03:38:10 -0000
Received: from vms173019pub.verizon.net (vms173019pub.verizon.net [206.46.173.19])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 74C8B80307FA
	for <zsh-users@sunsite.dk>; Fri, 22 May 2009 05:38:05 +0200 (CEST)
Received: from torch.brasslantern.com ([96.249.201.13])
 by vms173019.mailsrvcs.net
 (Sun Java(tm) System Messaging Server 6.3-7.04 (built Sep 26 2008; 32bit))
 with ESMTPA id <0KK100BW90R1KPIE@vms173019.mailsrvcs.net> for
 zsh-users@sunsite.dk; Thu, 21 May 2009 22:37:54 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id n4M3bljZ015325	for
 <zsh-users@sunsite.dk>; Thu, 21 May 2009 20:37:48 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id n4M3bl2d015324	for zsh-users@sunsite.dk; Thu,
 21 May 2009 20:37:47 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <090521203747.ZM15323@torch.brasslantern.com>
Date: Thu, 21 May 2009 20:37:47 -0700
In-reply-to: <20090522010850.GU27141@prunille.vinc17.org>
Comments: In reply to Vincent Lefevre <vincent@vinc17.org>
 "Re: prompt and ssh" (May 22,  3:08am)
References: <e7db6e960905190954j7be72739p6b521bca8e90fe7f@mail.gmail.com>
	<20090519200217.35368.qmail@smasher.org>
	<20090521074103.GN27141@prunille.vinc17.org>
	<090521092207.ZM14221@torch.brasslantern.com>
	<20090522010850.GU27141@prunille.vinc17.org>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@sunsite.dk
Subject: Re: prompt and ssh
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii
X-Virus-Scanned: ClamAV 0.94.2/9378/Thu May 21 20:49:42 2009 on bifrost
X-Virus-Status: Clean

On May 22,  3:08am, Vincent Lefevre wrote:
}
} > if grep -q $SSH_CONNECTION[(w)1]\:$SSH_CONNECTION[(w)2] =(netstat -na)
} > then
} >     print Using SSH_CONNECTION: $SSH_CONNECTION
} > else
} >     print Invalid SSH_CONNECTION
} > fi
} > 
} > This "fails" only if you disconnect from screen but leave ssh connected.
} 
} This won't work in my case, because I sometimes do the following:
} 1. On my machine at home, start ssh connections to my machine at work.
} 4. Resume the screen session at work (but the ssh connections started
}    in (1) are still there).

Yes, this is exactly what I meant.  However, this ...
 
} I also do the following:
} 1. Start screen remotely (via ssh).
} 2. Detach the screen session.
} 3. Resume the screen session from a different ssh connection (e.g.
}    because the first one has died -- BTW, this is even one of the
}    reasons of using screen).

... is one of the situations the netstat test is meant to discover.

However, if you can load the correct settings from an external file
at will, you probably don't need to bother checking for whether the
existing settings are still valid.  Just always clobber them.

} >   screen() {
} > 	typeset -pm SSH_\* > ~/.screen_SSH
} > 	screen "$@"
} >   }

Oops, that second line should say: command screen "$@"

} >   screen_ssh_precmd() {
} > 	source ~/.screen_SSH
} >   }
} >   precmd_functions+=(screen_ssh_precmd)
} 
} One should also find a way to make it work with several screen
} sessions (in screen, that can be identified by $STY, so that the
} filename could be based on it).

That's a bit problematic, because the file has to be written by the
shell "outside" the screen session, but $STY is only available to
the shell "inside" screen.  That is, $STY doesn't exist yet at the
point when you need to write the file.  This is almost analogous to
the X-session geometry-specific-zsh-startup discussion that went on
several months ago.

There is a workaround:

    screen -S sessionname

In at least some versions of screen, you can also do

    screen -R sessionname

and screen will look for a session on PID.sessionname and if it does
not find it, it'll behave as if you passed the -S option.  I don't know
if that's really intended to work, as it's not documented, so use at
your own risk.

  screen() {
    local -a sty
    # Note: We claim the argument to -R is mandatory because we want
    # zparseopts to fail here if no sessionname argument is provided.
    zparseopts R:=sty S:=sty && [[ $sty[2] != R ]] &&
    { print "unset -m 'SSH_*'"
      typeset -pm SSH_\*
    } > ~/.screen_SSH_$sty[2]
    command screen "$@"
    if [[ -n $sty ]]
    then
      grep -q "[0-9]\.$sty[2]" <(command screen -ls $sty[2]) ||
      rm ~/.screen_SSH_$sty[2]
    fi
  }
  screen_ssh_precmd() {
    [[ -z $STY ]] && return
    local sty=~/.screen_SSH_$STY:e
    if [[ -f $sty ]]
    then
      source $sty
    else
      { print "unset -m 'SSH_*'"
        typeset -pm SSH_\*
      } > $sty
    fi
  }
  precmd_functions+=(screen_ssh_precmd)

That requires that (in the calling login shell) you always provide the
sessionname argument, because if you use just -R or -RR the caller doesn't
know what file to write.  Also it's possible to create more than one
session with the same name, which makes it a bit preferable to use -R
rather than -S.

} When resuming a screen session, one should detect
} which one, and use a filename corresponding to this session.

I don't know any good way to do that from "outside" of screen.  Maybe
something involving using the -X option could be hacked up.

} When screen terminates, one should check if the session still exists
} (attached or detached), and if it isn't, remove the file.

It's unfortunate that screen -ls exits with nonzero status even if it
finds a matching session.

