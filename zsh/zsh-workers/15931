From zsh-workers-return-15931-mason-zsh=primenet.com.au@sunsite.dk Wed Oct 03 15:19:00 2001
Return-Path: <zsh-workers-return-15931-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12741 invoked from network); 3 Oct 2001 15:18:59 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 3 Oct 2001 15:18:59 -0000
Received: (qmail 513 invoked by alias); 3 Oct 2001 15:18:51 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 15931
Received: (qmail 500 invoked from network); 3 Oct 2001 15:18:50 -0000
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: PATCH: (2) test for trap EXIT fix. 
In-reply-to: "Bart Schaefer"'s message of "Tue, 02 Oct 2001 16:03:28 -0000."
             <1011002160329.ZM24847@candle.brasslantern.com> 
Date: Wed, 03 Oct 2001 16:18:15 +0100
Message-ID: <19164.1002122295@csr.com>
From: Peter Stephenson <pws@csr.com>

Bart Schaefer wrote:
> } The 4.0 behaviour is that only the explicit exit produces a trap; falling
> } off the end of the subshell in `( true )' doesn't.  I would guess this is
> } wrong and they should be equivalent.  That may require more special
> } handling.
> 
> Hrm.
> 
> zagzig% echo $ZSH_VERSION
> 3.0.8
> zagzig% TRAPEXIT() { print exiting }
> zagzig% (true)
> zagzig% (exit)
> exiting
> zagzig% fn() { ( true ) ; ( exit ); }
> zagzig% fn
> zagzig% exit
> exiting

Are you saying this is correct and the inconsistency between falling off
the end and exiting is the intended behaviour?  The following might do we
what you want.  Maybe you'd better try it and then complain further.

Index: Src/builtin.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/builtin.c,v
retrieving revision 1.54
diff -u -r1.54 builtin.c
--- Src/builtin.c	2001/09/24 10:12:51	1.54
+++ Src/builtin.c	2001/10/03 15:13:54
@@ -3255,12 +3255,16 @@
 	}
 	/*FALLTHROUGH*/
     case BIN_EXIT:
-	if (locallevel) {
+	if (locallevel > forklevel) {
 	    /*
 	     * We don't exit directly from functions to allow tidying
 	     * up, in particular EXIT traps.  We still need to perform
 	     * the usual interactive tests to see if we can exit at
 	     * all, however.
+	     *
+	     * The forklevel test means we *do* exit from a subshell
+	     * inside a function when we reach the level of the
+	     * function itself.
 	     */
 	    if (stopmsg || (zexit(0,2), !stopmsg)) {
 		retflag = 1;
Index: Src/exec.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/exec.c,v
retrieving revision 1.37
diff -u -r1.37 exec.c
--- Src/exec.c	2001/09/24 10:12:51	1.37
+++ Src/exec.c	2001/10/03 15:13:54
@@ -2490,6 +2490,10 @@
 }
 
 /**/
+int
+forklevel;
+
+/**/
 static void
 entersubsh(int how, int cl, int fake)
 {
@@ -2557,6 +2561,7 @@
     if (cl)
 	clearjobtab();
     times(&shtms);
+    forklevel = locallevel;
 }
 
 /* close internal shell fds */


-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR Ltd., Science Park, Milton Road,
Cambridge, CB4 0WH, UK                          Tel: +44 (0)1223 392070


**********************************************************************
The information transmitted is intended only for the person or
entity to which it is addressed and may contain confidential 
and/or privileged material. 
Any review, retransmission, dissemination or other use of, or
taking of any action in reliance upon, this information by 
persons or entities other than the intended recipient is 
prohibited.  
If you received this in error, please contact the sender and 
delete the material from any computer.
**********************************************************************

