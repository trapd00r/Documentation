From zsh-users-return-14970-mason-zsh=primenet.com.au@zsh.org Fri Mar 26 09:33:16 2010
Return-Path: <zsh-users-return-14970-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 26287 invoked by alias); 26 Mar 2010 09:33:16 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14970
Received: (qmail 1434 invoked from network); 26 Mar 2010 09:33:14 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at ckhb.org does not designate permitted sender hosts)
Date: Fri, 26 Mar 2010 02:24:49 -0700 (PDT)
From: "S. Cowles" <scowles@ckhb.org>
X-X-Sender: picmar@ckhb06.ckhb.org
To: zsh-users@zsh.org
Subject: array element subsetting
In-Reply-To: <Xns9D45D21E0B19Azzappergmailcom@80.91.229.10>
Message-ID: <alpine.LN8.2.00.1003260202111.10812@ckhb06.ckhb.org>
References: <Xns9D456D0F33B88zzappergmailcom@80.91.229.10> <20100324120359.GA29984@fermat.math.technion.ac.il> <Xns9D45D21E0B19Azzappergmailcom@80.91.229.10>
User-Agent: Alpine 2.00 (LN8 1167 2008-08-23)
X-Face: Ek1c-Ll9]E|9mF*Z|hf5VSHqF.]0Qv%;h%=Zne"Y3am*(:Tf_BlXI;j'}FMhu%sNCjSk|</(~~v,k&/W^J;>cxD~oD:g5Tv,gN}{Y8("m<8<%%=_vy
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; format=flowed; charset=US-ASCII


I am trying to figure out the correct syntax for constructing two 
one-liner subsetting operations on arrays.  I have two objectives: 1) 
select nth character from each array element, and 2) select nth element 
within each array element.

The array these methods operate upon is something simple such as:
a=(
     "satu two trio"
     "sah funf seis"
     "boundarycase"
     "revert to pattern"
)

For the first case, the solution I came up with is:

print -l ${a//#%(#b)(?)*/${match[1]}}

for the first character of each element, or

print -l ${a//#%(#b)?(#c2)(?(#c1))*/${match[1]}}

for 3rd character of each element (generalizable to [n,m] elements).

For the second case, doing word splitting on each array element, I came up 
with two variations to print out the second word in each element.

print -l ${a//#%(#b)*[[:IFS:]]##(*)[[:IFS:]]##*/${match[1]}}

print -l ${a//#%(#b)[[:WORD:]]##[^[:WORD:]]##([[:WORD:]]##)[^[:WORD:]]##*/${match[1]}}

(Though not important for my uses, these both fail with the boundary case 
where the array element contains only one word.)

Isn't there a better/cleaner way to accomplish this, especially for the 
second objective?

Thanks.

