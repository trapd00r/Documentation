From zsh-workers-return-15022-mason-zsh=primenet.com.au@sunsite.dk Thu Jun 21 09:53:08 2001
Return-Path: <zsh-workers-return-15022-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28824 invoked from network); 21 Jun 2001 09:53:07 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 21 Jun 2001 09:53:07 -0000
Received: (qmail 6075 invoked by alias); 21 Jun 2001 09:52:25 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 15022
Received: (qmail 6060 invoked from network); 21 Jun 2001 09:52:24 -0000
Message-ID: <Tc0a88d0154470c687b@mailsweeper01.cambridgesiliconradio.com>
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: Re: PATCH: 4.1: multi-parameter for loop 
In-reply-to: ""Andrej Borsenkow""'s message of "Thu, 21 Jun 2001 11:19:54 +0400."
             <001901c0fa22$91a2c6d0$21c9ca95@mow.siemens.ru> 
Date: Thu, 21 Jun 2001 10:52:31 +0100
From: Peter Stephenson <pws@csr.com>

"Andrej Borsenkow" wrote:
> Which opens up a question of odd number of list elements. It is invalid in
> assignment to hash - shuld it be invalid here as well?

This is covered in the manual page.

  for p1 p2 in foo bar something else rubbish; do
    print $p1 $p2
  done

prints (I cut and pasted this from actually trying it out):

  foo bar
  something else
  rubbish

and you get an empty string for the final $p2.  I didn't thing there was
any point in doing too many sums --- particularly since you can use more
than two parameters; here's a way of naming a set of function arguments:

  fn() {
    local nam cmd val dsc
    for nam cmd val dsc; do; break; done;

    print "$nam, $cmd, $val, $dsc"
  }

Then `fn Me nothing none dunno' prints `Me, nothing, none, dunno'.

With regard to `in', the standard interpretation is the one taken in all
the suggestions I've seen so far.  I should make this clear in the manual,
though.

> bor@itsrm2% for i
> for> in a b c
> bor@itsrm2%
> ^^^^^^^^^^^^^^^ Oops!

That shouldn't be too hard to fix, and wouldn't affect the new syntax:  we
just terminate the argument list at the end of the first line.  Currently
it thinks the newline means you're not going to give an `in' and are using
positional parameters.  I don't know why there's no syntax error, though,
but you get one if you set NO_SHORT_LOOPS.

> I guess, Bart suggestion (use foreach) is better. And more Perlish :-)

I'm not so convinced, since `for' and `foreach' currently do the same
thing, and I don't really like dividing the syntax to make people use the
non-standard variant just for one use.  foreach is automatically handled at
the moment, as well as for, by the way.

> foreach key val hash
> 
> or even
> 
> foreach val array
> 
> i.e. do *not* expand $hash/%array value? For large arrays it may result in
> significant speedup.

It's possible, but actually not that effective for hashes, since to iterate
through them they have to be flattened, and that only happens once in the
current system anyway.

By the way, I discovered a problem:  alias expansion is turned on for
parameter names after the first;

  alias h='history -f'
  for g h in foo bar; do; done

turns `h' into `history -f' and the -f causes an unexpected parse error.
This is because of the csh-style syntax --- the shell is looking for a `('
which it needs to parse as a single token, so it uses the parsing rules for
command position.  But now I know about it I can turn alias expansion off
explicitly for that bit.

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR Ltd., Unit 300, Science Park, Milton Road,
Cambridge, CB4 0XL, UK                          Tel: +44 (0)1223 392070


**********************************************************************
The information transmitted is intended only for the person or
entity to which it is addressed and may contain confidential 
and/or privileged material. 
Any review, retransmission, dissemination or other use of, or
taking of any action in reliance upon, this information by 
persons or entities other than the intended recipient is 
prohibited.  
If you received this in error, please contact the sender and 
delete the material from any computer.
**********************************************************************

