" Common set up  "{{{1




function s:describe__internal_key_mappings_0001()  "{{{1
  It "Check the existence of <SID>(count) in each mode"

  let _ = operator#user#_sid_prefix().'(count)'
  Should maparg(_, 'c') != '' ==# 0
  Should maparg(_, 'i') != '' ==# 0
  Should maparg(_, 'n') != '' ==# 1
  Should maparg(_, 'o') != '' ==# 0
  Should maparg(_, 'v') != '' ==# 0
endfunction




function s:describe__operator_user_define_0001()  "{{{1
  It "operator#user#define(): Typical usage"

  function! TestOperatorFunction1(motion_wiseness)
    " echo getpos("'[") getpos("']")
    '[,']sort
  endfunction

  map _ <Plug>(operator-sort)
  noremap <Plug>(operator-sort)  xxx
  call operator#user#define('sort', 'TestOperatorFunction1')

  Should maparg('<Plug>(operator-sort)', 'c') != '' ==# 0
  Should maparg('<Plug>(operator-sort)', 'i') != '' ==# 0
  Should maparg('<Plug>(operator-sort)', 'n') != '' ==# 1
  Should maparg('<Plug>(operator-sort)', 'o') != '' ==# 1
  Should maparg('<Plug>(operator-sort)', 'v') != '' ==# 1
  Should maparg('<Plug>(operator-sort)', 'n')
  \      =~# '\<TestOperatorFunction1\>'
  Should maparg('<Plug>(operator-sort)', 'o') ==# 'g@'
  Should maparg('<Plug>(operator-sort)', 'v')
  \      =~# '\<TestOperatorFunction1\>'

  Should maparg('_', 'c') != '' ==# 0
  Should maparg('_', 'i') != '' ==# 0
  Should maparg('_', 'n') != '' ==# 1
  Should maparg('_', 'o') != '' ==# 1
  Should maparg('_', 'v') != '' ==# 1
  Should maparg('_', 'n') ==# '<Plug>(operator-sort)'
  Should maparg('_', 'o') ==# '<Plug>(operator-sort)'
  Should maparg('_', 'v') ==# '<Plug>(operator-sort)'

  silent put =['a', 'm', 'a', 'n', 'e']
  -4
  normal _4j
  Should getline('.', line('.')+4) ==# ['a', 'a', 'e', 'm', 'n']

  silent put =['a', 'v', 'r', 'i', 'l']
  -4
  normal v4j_
  Should getline('.', line('.')+4) ==# ['a', 'i', 'l', 'r', 'v']

  silent put =['a', 'g', 'n', 'e', 's']
  -4
  normal _5_
  Should getline('.', line('.')+4) ==# ['a', 'e', 'g', 'n', 's']

    " FIXME: This one works as I expect if '5__' is typed interactively,
    "        but it doesn't work via :normal and it selects only the current
    "        line.  Why?
  silent put =['a', 'g', 'n', 'e', 's']
  -4
  normal 5__
  Should getline('.', line('.')+4) ==# ['a', 'e', 'g', 'n', 's']
endfunction




function s:describe__operator_user_define_0002()  "{{{1
  It "operator#user#define(): With {extra}s"
  map _  <Plug>(operator-yank)
  call operator#user#define('yank', 'TestOperatorFunction2',
  \                         'call', 'TestOperatorFunction2Set("yank")')
  function! TestOperatorFunction2Set(command)
    let s:command = a:command
  endfunction
  function! TestOperatorFunction2(motion_wiseness)
    execute "'[,']" s:command
  endfunction

  silent put =['a', 'z', 'u', 's', 'a']
  -4

  silent normal __
  Should @0 ==# "a\n"

  silent normal _2j
  Should @0 ==# "a\nz\nu\n"

  silent normal v4j_
  Should @0 ==# "a\nz\nu\ns\na\n"
endfunction




function s:describe__operator_user_define_0003()  "{{{1
  It "operator#user#define(): With script-local function"

  " FIXME: Script-local functions should not be accepted here.
  "
  " Because 'operatorfunc' with any script-local function doesn't work
  " generally for the following reason:
  " ``E120: Using <SID> not in a script context: s:foo''.
  "
  " But this test is passed unexpectedly, because s: in 'operatorfunc' is
  " treated as the context of this test script.

  map @  <Plug>(operator-sort)
  call operator#user#define('sort', 's:test_operator_function_3')
  function! s:test_operator_function_3(motion_wiseness)
    " echo getpos("'[") getpos("']")
    '[,']sort
  endfunction

  Should maparg('<Plug>(operator-sort)', 'c') != '' ==# 0
  Should maparg('<Plug>(operator-sort)', 'i') != '' ==# 0
  Should maparg('<Plug>(operator-sort)', 'n') != '' ==# 1
  Should maparg('<Plug>(operator-sort)', 'o') != '' ==# 1
  Should maparg('<Plug>(operator-sort)', 'v') != '' ==# 1
  Should maparg('<Plug>(operator-sort)', 'n')
  \      =~# '\<test_operator_function_3\>'
  Should maparg('<Plug>(operator-sort)', 'o') ==# 'g@'
  Should maparg('<Plug>(operator-sort)', 'v')
  \      =~# '\<test_operator_function_3\>'

  Should maparg('@', 'c') != '' ==# 0
  Should maparg('@', 'i') != '' ==# 0
  Should maparg('@', 'n') != '' ==# 1
  Should maparg('@', 'o') != '' ==# 1
  Should maparg('@', 'v') != '' ==# 1
  Should maparg('@', 'n') ==# '<Plug>(operator-sort)'
  Should maparg('@', 'o') ==# '<Plug>(operator-sort)'
  Should maparg('@', 'v') ==# '<Plug>(operator-sort)'

  silent % delete _

  silent put =['a', 'm', 'a', 'n', 'e']
  -4
  normal @4j
  Should getline('.', line('.')+4) ==# ['a', 'a', 'e', 'm', 'n']

  silent put =['a', 'v', 'r', 'i', 'l']
  -4
  normal v4j@
  Should getline('.', line('.')+4) ==# ['a', 'i', 'l', 'r', 'v']

  silent put =['a', 'g', 'n', 'e', 's']
  -4
  normal @5@
  Should getline('.', line('.')+4) ==# ['a', 'e', 'g', 'n', 's']

    " FIXME: This one works as I expect if '5@@' is typed interactively,
    "        but it doesn't work via :normal and it selects only the current
    "        line.  Why?
  silent put =['a', 'g', 'n', 'e', 's']
  -4
  normal 5@@
  Should getline('.', line('.')+4) ==# ['a', 'e', 'g', 'n', 's']
endfunction




function s:describe__operator_user_define_0004()  "{{{1
  It "operator#user#define(): count in Visual mode"

  function! TestOperatorFunction4(motion_wiseness)
    normal! `[v`]gU
  endfunction
  map _  <Plug>(operator-gU)
  call operator#user#define('gU', 'TestOperatorFunction4')

  silent put =['avril agnes', 'amane alice']
  -1
  normal e_4l
  Should getline('.', line('.')+1) ==# ['avriL AGnes', 'amane alice']

    " FIXME: count in Visual mode is not supported.
  silent put =['avril agnes', 'amane alice']
  -1
  normal 3lv3_
  Should getline('.', line('.')+1) ==# ['avrIl agnes', 'amane alice']
endfunction




function s:describe__operator_user_define_0005()  "{{{1
  It "operator#user#define_ex_command(): Typical usage"

  map _  <Plug>(operator-join)
  call operator#user#define_ex_command('join', 'join')

  silent put =['a', 'm', 'a', 'n', 'e']
  -4
  normal _3j
  Should getline('.', line('.')+1) ==# ['a m a n', 'e']

  silent put =['a', 'v', 'r', 'i', 'l']
  -4
  normal v3j_
  Should getline('.', line('.')+1) ==# ['a v r i', 'l']

  silent put =['a', 'g', 'n', 'e', 's']
  -4
  normal _3_
  Should getline('.', line('.')+2) ==# ['a g n', 'e', 's']

  silent put =['a', 'm', 'a', 'n', 'e']
  -4
  normal v3j_
  Should getline('.', line('.')+1) ==# ['a m a n', 'e']

    " FIXME: This one works as I expect if '5__' is typed interactively,
    "        but it doesn't work via :normal and it selects only the current
    "        line.  Why?
  silent put =['a', 'g', 'n', 'e', 's']
  -4
  normal 4__
  Should getline('.', line('.')+1) ==# ['a g n e', 's']

    " FIXME: count in Visual mode is not supported.
  silent put =['a', 'g', 'n', 'e', 's']
  -4
  normal v3_
  Should getline('.', line('.')+4) ==# ['a', 'g', 'n', 'e', 's']
endfunction




function s:describe__operator_user_define_0006()  "{{{1
  It "register designation for user defined operator"

  map _  <Plug>(operator-echo)
  call operator#user#define('echo', 'TestOperatorFunction6')
  function! TestOperatorFunction6(motion_wise)
    put =v:register
  endfunction

  normal __
  Should getline('.') ==# '"'

  normal ""_L
  Should getline('.') ==# '"'

  normal "A_w
  Should getline('.') ==# 'A'

  normal 3"x_k
  Should getline('.') ==# 'x'

  normal "y8_G
  Should getline('.') ==# 'y'

  normal v_
  Should getline('.') ==# '"'

  normal V""_
  Should getline('.') ==# '"'

  normal v"A_
  Should getline('.') ==# 'A'

  normal V3"x_
  Should getline('.') ==# 'x'

  normal v"y8_
  Should getline('.') ==# 'y'
endfunction




function s:describe__operator_user_define_0007()  "{{{1
  It "operator#user#visual_command_from_wise_name()"

  " Valid usage
  let v:errmsg = ''
  silent! let _ = operator#user#visual_command_from_wise_name('char')
  Should _ ==# 'v'
  Should v:errmsg ==# ''

  let v:errmsg = ''
  silent! let _ = operator#user#visual_command_from_wise_name('char')
  Should operator#user#visual_command_from_wise_name('line') ==# 'V'
  Should v:errmsg ==# ''

  let v:errmsg = ''
  silent! let _ = operator#user#visual_command_from_wise_name('char')
  Should operator#user#visual_command_from_wise_name('block') ==# "\<C-v>"
  Should v:errmsg ==# ''

  " Invalid {wise-name} - completely different
  let v:errmsg = ''
  silent! let _ = operator#user#visual_command_from_wise_name('invalid')
  Should _ ==# 'v'
  Should v:errmsg =~# 'operator-user:E1:'

  " Invalid {wise-name} - different cases
  let v:errmsg = ''
  silent! let _ = operator#user#visual_command_from_wise_name('Char')
  Should _ ==# 'v'
  Should v:errmsg =~# 'operator-user:E1:'

  let v:errmsg = ''
  silent! let _ = operator#user#visual_command_from_wise_name('lIne')
  Should _ ==# 'v'
  Should v:errmsg =~# 'operator-user:E1:'

  let v:errmsg = ''
  silent! let _ = operator#user#visual_command_from_wise_name('lIne')
  Should _ ==# 'v'
  Should v:errmsg =~# 'operator-user:E1:'
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
