From zsh-users-return-15405-mason-zsh=primenet.com.au@zsh.org Thu Sep 16 14:27:33 2010
Return-Path: <zsh-users-return-15405-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 18019 invoked by alias); 16 Sep 2010 14:27:32 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15405
Received: (qmail 8085 invoked from network); 16 Sep 2010 14:27:30 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <100916072654.ZM29712@torch.brasslantern.com>
Date: Thu, 16 Sep 2010 07:26:54 -0700
In-reply-to: <AANLkTinyDC-OoGBzuisMKUg+OqeeqG=HKZrNDuJZL+sD@mail.gmail.com>
Comments: In reply to Anonymous bin ich <ichbinanon@gmail.com>
 "Waiting for a process without using pid" (Sep 16,  4:09pm)
References: <AANLkTinyDC-OoGBzuisMKUg+OqeeqG=HKZrNDuJZL+sD@mail.gmail.com>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@zsh.org
Subject: Re: Waiting for a process without using pid
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Sep 16,  4:09pm, Anonymous bin ich wrote:
}
} I am trying to write a 'timeout' script, which will take 2 commands
} and exit after whichever one exits first. Is there a way to do it
} without using pid or polling?

Sure.

    job1 &
    job2 &
    coproc read
    trap "trap - CHLD ; kill $! " CHLD  # Here $! is PID of coprocess
    read -p

This sets up a coprocess child that's blocking on the parent, and then
makes the parent block on the child, creating a deadlock.  The trap
breaks the deadlock by killing the coprocess, at which point the
parent wakes up.

You might need to prefix job1 and job2 with "sleep 2 ;" to prevent a
race condition where one of the jobs exits before the trap is ready.

