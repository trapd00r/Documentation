From zsh-users-return-4692-mason-zsh=primenet.com.au@sunsite.dk Mon Feb 25 19:42:10 2002
Return-Path: <zsh-users-return-4692-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 13098 invoked from network); 25 Feb 2002 19:42:09 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 25 Feb 2002 19:42:09 -0000
Received: (qmail 5560 invoked by alias); 25 Feb 2002 19:41:56 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 4692
Received: (qmail 5547 invoked from network); 25 Feb 2002 19:41:56 -0000
Date: Mon, 25 Feb 2002 11:41:10 -0800 (PST)
From: Bart Schaefer <schaefer@brasslantern.com>
Sender: <schaefer@ns1.sodaware.com>
To: <frank@espresso.hampshire.edu>
cc: <zsh-users@sunsite.dk>
Subject: Re: zsh job control
In-Reply-To: <Pine.LNX.3.96.1020225134642.30105A-100000@espresso.hampshire.edu>
Message-ID: <Pine.LNX.4.33.0202251109140.6510-100000@ns1.sodaware.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

On Mon, 25 Feb 2002 frank@espresso.hampshire.edu wrote:

> What I am looking for is an integration of the control forms like while,
> for, etc with job control.

There was a similar discussion a couple of years ago:

	http://www.zsh.org/cgi-bin/mla/redirect?USERNUMBER=2676

(Hey, Geoff:  When you use a redirect link like the one above, the
followups and references links at the bottom of the archive message
are broken.)

> What I am hoping is that there is some sort of job control associated with
> the standard zsh loops:

No, there's no magic syntax for this built in.  You just have to make use
of the existing job control tools.

If you're not worried about always having exactly N jobs running, you can
do something simple like this:

  N=4
  pids=()
  for file in **/*.gz
  do
    zcat $file | fgrep foobar &
    pids=($pids $!)
    if (( $#pids >= N )); then wait $pids[N]; pids=(); fi
  done > results.txt

This starts four jobs and then waits for the fourth one to finish before
starting four more.  You could use "wait" with no arguments to wait for
all four jobs to finish, but that would also wait for any other background
jobs that might have been started outside the loop.

