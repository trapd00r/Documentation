From zsh-workers-return-27563-mason-zsh=primenet.com.au@zsh.org Tue Jan 05 15:33:26 2010
Return-Path: <zsh-workers-return-27563-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 13179 invoked by alias); 5 Jan 2010 15:33:26 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 27563
Received: (qmail 6918 invoked from network); 5 Jan 2010 15:33:25 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <100105073253.ZM2749@torch.brasslantern.com>
Date: Tue, 05 Jan 2010 07:32:53 -0800
In-reply-to: <20100105094829.613883ab@news01>
Comments: In reply to Peter Stephenson <pws@csr.com>
 "Re: [PATCH] Removed arbitrary limitations on array accesses" (Jan  5,  9:48am)
References: <y>  <1262655497-21263-1-git-send-email-michael.a.hwang@gmail.com>
	<20100105094829.613883ab@news01>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-workers@zsh.org
Subject: Re: [PATCH] Removed arbitrary limitations on array accesses
Cc: Michael Hwang <michael.a.hwang@gmail.com>
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Jan 5,  9:48am, Peter Stephenson wrote:
}
} Those have been there for a long time. I don't have any evidence that
} they're doing a lot of good but we have had people creating positional
} parameters with <long_number>=something and wondering why it uses a
} lot of memory. I suppose this is similar. The arbitrary limit is not
} very useful and also undocumented; most people wouldn't miss it if it
} wasn't there, certainly.

I have a vague memory of when this was added, but it appears to have been
sometime longer ago than when the zsh-workers archive begins and after
the last zsh-2 archive I kept -- which means it was late 1994 or early
1995.

My recollection, such as it is, is that attempting to read an array
slice from N to some huge number would allocate a temporary array with
empty slots for all the intervening positions, causing the shell to
crash with an out-of-memory error or to DoS attack the university time-
share system by attempting to consume all memory.  The arbitrary 262144
number was chosen based on some computation of the space occupied by
one of those empty slots, to assure that the resulting temporary would
be smaller than the typical VM limitations of a machine of the era.

It seems like we need SOME kind of limit here to prevent the user from
accidentally consuming huge amounts of memory, but it's probably useful
for it to become a computed value based on process limits.

