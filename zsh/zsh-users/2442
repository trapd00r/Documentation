From zsh-users-return-2442-mason-zsh=primenet.com.au@sunsite.auc.dk Thu Jul 15 16:40:04 1999
Return-Path: <zsh-users-return-2442-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29848 invoked from network); 15 Jul 1999 16:40:02 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 15 Jul 1999 16:40:02 -0000
Received: (qmail 26211 invoked by alias); 15 Jul 1999 16:39:46 -0000
Mailing-List: contact zsh-users-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.auc.dk
X-Seq: 2442
Received: (qmail 26200 invoked from network); 15 Jul 1999 16:39:45 -0000
Message-Id: <9907151608.AA29292@ibmth.df.unipi.it>
To: zsh-users@sunsite.auc.dk
Subject: Re: pipe on stderr 
In-Reply-To: "Didier Verna"'s message of "15 Jul 1999 18:23:29 DFT."
             <qyjg12pnapq.fsf@metheny.enst.fr> 
Date: Thu, 15 Jul 1999 18:08:45 +0200
From: Peter Stephenson <pws@ibmth.df.unipi.it>

Didier Verna wrote:
>         I've only recently discovered that there's no simple way, in any
> shell, to pipe stderr on another process. As you can write `foo 2> foo.err',
> wouldn't it be nice to be able to write `foo 2| bar' ?

Trouble is, it gets into quite serious trouble with existing syntax, since
you don't need a space before the pipe --- think about 
  echo 2| foo
so although it could be an option there's probably still too much scope for
confusion.

As you may already have discovered, you can swap file descriptors:
  echo foo 3>&1 1>&2 2>&3 | sed 's/foo/bar/'
which has the effect you want provided 1 and 2 were originally going to the
same place, i.e. what used to be 1 still goes there but what used to be 2
now goes to the pipe.  But agree it's not simple (and in zsh you have to
`unsetopt multios').

-- 
Peter Stephenson <pws@ibmth.df.unipi.it>       Tel: +39 050 844536
WWW:  http://www.ifh.de/~pws/
Dipartimento di Fisica, Via Buonarroti 2, 56127 Pisa, Italy

