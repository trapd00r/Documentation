From zsh-workers-return-7132-mason-zsh=primenet.com.au@sunsite.auc.dk Wed Jul 14 10:54:50 1999
Return-Path: <zsh-workers-return-7132-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 193 invoked from network); 14 Jul 1999 10:54:49 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 14 Jul 1999 10:54:49 -0000
Received: (qmail 27435 invoked by alias); 14 Jul 1999 10:54:38 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 7132
Received: (qmail 27428 invoked from network); 14 Jul 1999 10:54:37 -0000
X-Envelope-Sender-Is: Andrej.Borsenkow@mow.siemens.ru (at relayer david.siemens.de)
From: "Andrej Borsenkow" <Andrej.Borsenkow@mow.siemens.ru>
To: "ZSH workers mailing list" <zsh-workers@sunsite.auc.dk>
Subject: Re: something strange with delete-char-or-list 
Date: Wed, 14 Jul 1999 14:54:28 +0400
Message-ID: <000e01becde7$3ea65460$21c9ca95@mow.siemens.ru>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="koi8-r"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2314.1300
Importance: Normal

> > And related question:
> >
> > bor@itsrm2:~%> ls /a/p/u/z/*<TAB>
> > bor@itsrm2:~%> ls /archive/pub/unix/z/\*
> > zip/     zmodem/  zsh/
> >
> > Is it intentional, that pattern after the first ambiguous component is
> > preserved? (Oh, yes, I like it!) Is it possible to output it "as is" then
and
> > not quouted?
>
> We once had this, but that was a bug -- the path prefix and suffix
> wasn't quoted.
> I know that it would be nice to have this, but how should _path_files
> decide what should be quoted (e.g. a component like `foo bar') and
> what not (a pattern like `*[0-9]')?

1. I actually meant, is it possible to quote internally but display original
string. May be, it is impossible.

2. Unfortunately, we still have a clear bug:

bor@itsrm2:~%> l /a/p/u/z/\*<TAB><TAB>
bor@itsrm2:~%> l /archive/pub/unix/zip/\*
zip/     zmodem/  zsh/

now I press a-a-i-n-h and get

bor@itsrm2:~%> l /archive/pub/unix/zip/unzip532.tar.gz
unzip532.tar.gz   zcrypt27.zip      zip22.tar.gz
unzip540.tar.gz   zcrypt28.zip

That is, it is no more possible to distinguish between quoted and unquoted
string. I can no more complete literal '*' :-)

bor@itsrm2:~%> compconf -L
compconf correct_accept='2n'
compconf match_original='yes'
compconf completer='_oldlist:_complete:_match'
compconf dumpfile='/home/bor/.zcompdump'
compconf oldlist_list='_match'
compconf path_cursor='yes'
compconf match_insert='unambig'
compconf correct_prompt='correct to:'
bor@itsrm2:~%>

/andrej

