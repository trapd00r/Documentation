### vim:ft=zsh:foldmethod=marker

if ! zis_31 "atleast"; then
    zprintf 2 'No zle support; Binding nothing.\n'
    return
fi

# I setopt ignore_eof in options.z, so the following can work.
zrcbindkey -W -M viins Ctrl-d ft-vi-cmd
zrcbindkey -W -M vicmd Ctrl-d ft-vi-cmd-cmd
# Remove the escape key binding.
bindkey -r '^['

# The bindings without -M <mapname> go to the `main' keymap. That's
# either the main emacs map or viins. So this really only needs to
# bother with binding things in `vicmd' specially.

if (( ${+widgets[.history-incremental-pattern-search-backward]} )); then
    zrcbindkey -W Ctrl-r   history-incremental-pattern-search-backward
    zrcbindkey -W -M vicmd Ctrl-r   history-incremental-pattern-search-backward
else
    zrcbindkey -W Ctrl-r   history-incremental-search-backward
    zrcbindkey -W -M vicmd Ctrl-r   history-incremental-search-backward
fi
if (( ${+widgets[.history-incremental-pattern-search-forward]} )); then
    zrcbindkey -W Ctrl-s   history-incremental-pattern-search-forward
    zrcbindkey -W -M vicmd Ctrl-s   history-incremental-pattern-search-forward
else
    zrcbindkey -W Ctrl-s   history-incremental-search-forward
    zrcbindkey -W -M vicmd Ctrl-s   history-incremental-search-forward
fi

zrcbindkey -W -M vicmd :        execute-named-cmd
zrcbindkey -W -M vicmd /        ft-vi-search-fwd
zrcbindkey -W -M vicmd '?'      ft-vi-search-back
zrcbindkey -W -M vicmd i        ft-vi-insert
zrcbindkey -W -M vicmd R        ft-vi-replace
zrcbindkey -W -M vicmd Alt-h    run-help

zrcbindkey    Tab           ft-complete
zrcbindkey    Home          beginning-of-line
zrcbindkey    End           end-of-line
zrcbindkey    Insert        overwrite-mode
zrcbindkey    Delete        delete-char
zrcbindkey    Up            up-line-or-history
zrcbindkey    Down          down-line-or-history
zrcbindkey    Left          backward-char
zrcbindkey    Right         forward-char
zrcbindkey    Ctrl-x-p      history-search-backward
zrcbindkey    Ctrl-x-P      history-search-forward
zrcbindkey    Ctrl-x-k      backward-kill-line
zrcbindkey    Ctrl-l        ft-clear-screen
zrcbindkey    Alt-y         _most_recent_file
zrcbindkey    Alt-Enter     self-insert-unmeta
zrcbindkey    Ctrl-p        up-line-or-history
zrcbindkey    Ctrl-n        down-line-or-history
zrcbindkey    Ctrl-w        backward-kill-word
zrcbindkey    Backspace     backward-delete-char
   bindkey    '^?'          backward-delete-char
zrcbindkey -W Alt-D         zap-to-char
zrcbindkey -W Alt-F         delete-to-char
zrcbindkey -W Alt-b         backward-word-match
zrcbindkey -W Alt-d         kill-word-match
zrcbindkey -W Alt-e         edit-command-line
zrcbindkey -W Alt-f         forward-word-match
zrcbindkey -W Alt-t         tranpose-words-match
zrcbindkey -W Alt-h         run-help
zrcbindkey -W Alt-j         smart-slash
zrcbindkey -W Alt-.         smart-slash
if zis_40 "atleast"; then
# I believe there is a bug in some 3.1 versions that keeps this from working.
zrcbindkey -W Ctrl-x-,      ft-replace-pattern
zrcbindkey -M vicmd -W Ctrl-x-, ft-replace-pattern
# And this is another bug, I think.
zrcbindkey -W Ctrl-x-.      replace-string-again
zrcbindkey -M vicmd -W Ctrl-x-. replace-string-again
fi
zrcbindkey -W Ctrl-x-b      exec_on_xclip
zrcbindkey -W Ctrl-x-d      kill-whole-word-match
zrcbindkey -W Ctrl-x-w      backward-kill-to-slash
zrcbindkey -W Ctrl-x-f      complete-files
zrcbindkey -W Ctrl-x-h      complete-history
zrcbindkey -W Ctrl-x-H      _complete_help
zrcbindkey -W Ctrl-x-D      _complete_debug
zrcbindkey -W PageUp        history-beginning-search-backward-end
zrcbindkey -W PageDown      history-beginning-search-forward-end

zrcbindkey -s Ctrl-x-s      '*.[ch]'

zis_317 "atleast" && \
    zrcbindkey -W -M menuselect Alt-Enter accept-and-menu-complete

for i in {0..9} ; do zrcbindkey -W Ctrl-x-${i} jump_after_word${i} ; done

