From zsh-workers-return-7169-mason-zsh=primenet.com.au@sunsite.auc.dk Fri Jul 16 09:13:15 1999
Return-Path: <zsh-workers-return-7169-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28789 invoked from network); 16 Jul 1999 09:13:13 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 16 Jul 1999 09:13:13 -0000
Received: (qmail 12887 invoked by alias); 16 Jul 1999 09:12:58 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 7169
Received: (qmail 12880 invoked from network); 16 Jul 1999 09:12:58 -0000
Date: Fri, 16 Jul 1999 11:12:52 +0200 (MET DST)
Message-Id: <199907160912.LAA18749@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: Sven Wischnowsky's message of Fri, 16 Jul 1999 10:56:36 +0200
	(MET DST)
Subject: Re: Bad optimisations: (Was: Test version zsh-3.1.6-test-1)


I wrote:

> mason@primenet.com.au wrote:
> 
> > Sven Wischnowsky <wischnow@informatik.hu-berlin.de> typed:
> > :Geoff Wing wrote:
> > :> What about just expanding it slightly (with appropriate comments of course)
> > :> instead of duplicating it.
> > :> e.g.
> > :>     if (*args && **args == '?')
> > :>         args++;
> > :>     /* default result parameter */
> > :>     if (*args)
> > :>         reply = *args++;
> > :>     else
> > :>         reply = ops['A'] ? "reply" : "REPLY";
> > :Note this isn't intended as an optimisation (of course), but to work
> > :around a bug in gcc-2.8.1 under DU.
> > 
> > I thought it may be a gcc optimisation bug.  i.e. Does it appear at -O0 or
> > -01 or -O2?  All of them?
> 
> Yes, it is. The problem is in the first two lines of the code
> above. If there is only the `args++' in the `then'-branch, `args'
> contains a random value after the `if'. This happens with all
> optimisation levels, so I guess it's a register allocation problem in
> the backend.

Playing some more: both

    firstarg = (*args && **args == '?' ? *args++ : *args);

and

    if (*args && **args == '?')
    	firstarg = *args++;
    else
        firstarg = *args;

work around the bug, too. Should I send a patch for one of these? They 
probably keep the code better readable (although they don't look much
less silly).

Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

