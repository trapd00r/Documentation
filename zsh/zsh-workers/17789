From zsh-workers-return-17789-mason-zsh=primenet.com.au@sunsite.dk Mon Oct 07 13:59:06 2002
Return-Path: <zsh-workers-return-17789-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15533 invoked from network); 7 Oct 2002 13:59:06 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 7 Oct 2002 13:59:06 -0000
Received: (qmail 10798 invoked by alias); 7 Oct 2002 13:58:55 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 17789
Received: (qmail 10775 invoked from network); 7 Oct 2002 13:58:53 -0000
Message-ID: <20021007135824.26284.qmail@web40507.mail.yahoo.com>
Date: Mon, 7 Oct 2002 14:58:24 +0100 (BST)
From: =?iso-8859-1?q?Oliver=20Kiddle?= <okiddle@yahoo.co.uk>
Subject: Re: db module
To: zsh-workers@sunsite.dk
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit

 --- Bart Schaefer <schaefer@brasslantern.com> wrote:
> It would seem to me that all of this stuff can be accomplished by the
> equivalent of ksh discipline functions (plus, in the DB case, a
> module

It could be useful and more efficient to allow modules to control a
special which doesn't have a fixed name. This last idea of using
functions looks to me exactly like ksh disclipline functions except
the syntax is differnt.

ksh style discipline functions have the big problem that they don't
unambiguously map functions to variables because of the lack of
scoped functions. ksh now solves this by not allowing local variables
to
have disciplines.

> to do the actual database access).  Rather than implementing each of
> these things as different typeset variants, we should work on
> adding discipline functions.

There is a lot else besides that we could do with getting right before
adding discipline functions.

> (Was it Andrej who's working on a parameter code rewerite?)

I thought it was me. And I am working on it - slowly but surely.

> One can also envision cases where it would be nice if a function
> could
> return text instead of an exit code, so that you could "inline" the
> function call in a larger print statement or in a here-document or
> the

To do this, one way might be to allow function calls inside (( ... )).
There is nothing about ((...)) which means it can only ever be used for
math functions and inside it we could pass around objects by references
to struct params instead of by expanding them to strings. But something
like this is way off in the future.

Oliver

__________________________________________________
Do You Yahoo!?
Everything you'll ever need on one web page
from News and Sport to Email and Music Charts
http://uk.my.yahoo.com

