From zsh-workers-request@euclid.skiles.gatech.edu Tue Jul 29 16:55:25 1997
Return-Path: <zsh-workers-request@euclid.skiles.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 8015 invoked from network); 29 Jul 1997 16:55:23 -0000
Received: from euclid.skiles.gatech.edu (list@130.207.146.50)
  by coral.primenet.com.au with SMTP; 29 Jul 1997 16:55:23 -0000
Received: (from list@localhost)
	by euclid.skiles.gatech.edu (8.8.5/8.8.5) id MAA22109;
	Tue, 29 Jul 1997 12:37:44 -0400 (EDT)
Resent-Date: Tue, 29 Jul 1997 12:37:44 -0400 (EDT)
From: "Bart Schaefer" <schaefer@brasslantern.com>
Message-Id: <970729092705.ZM16897@candle.brasslantern.com>
Date: Tue, 29 Jul 1997 09:27:05 -0700
In-Reply-To: <199707290736.DAA03285@hzoli.home>
Comments: In reply to Zoltan Hidvegi <hzoli@frontiernet.net>
        "Re: RC_EXPAND_PARAM bug" (Jul 29,  3:36am)
References: <199707290736.DAA03285@hzoli.home> 
	<970728092639.ZM12131@candle.brasslantern.com> 
	from Bart Schaefer at "Jul 28  97 09:26:39 am" <199707290604.CAA02191@hzoli.home> 
	<slrn5tr7vr.jsh.mason@coral.primenet.com.au>
In-Reply-To: <slrn5tr7vr.jsh.mason@coral.primenet.com.au>
Comments: In reply to mason@primenet.com.au (Geoff Wing)
        "Re: RC_EXPAND_PARAM bug" (Jul 29,  7:47am)
X-Mailer: Z-Mail (4.0b.820 20aug96)
To: Zoltan Hidvegi <hzoli@frontiernet.net>, mason@primenet.com.au,
        zsh-workers@math.gatech.edu
Subject: Re: RC_EXPAND_PARAM bug
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Resent-Message-ID: <"Zb-t63.0.OP5.OnXtp"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/3387
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

On Jul 29,  3:36am, Zoltan Hidvegi wrote:
} Subject: Re: RC_EXPAND_PARAM bug
}
} > Can you generalize this rule for us?  E.g.
} > 
} > % echo ${^a}$[i++]$[++j]${^x}....
} > 
} > where .... is some arbitary number of other substitutions?  Is it just that
} > it now does everything from right to left instead of left to right?  Why?
} 
} No, it is left to right.  ${^a} is expanded first, then the remaining
} part, $[i++]$[++j]${^x} is expanded separately, and the result is
} combined with the expansion of ${^a}.  You can see it if you try
} 
} let i=0; echo $[i++]${^a}$[i++]
} 
} which gives
} 
} 0a1 0b1

I'm still not comprehending this.

Are you saying that all the variables are expanded first, left to right,
and then all the resulting strings are combined?  Whereas before (2.6 and
earlier) each variable would be expanded and combined with what followed,
and then the process repeated for each new string?

On Jul 29,  7:47am, Geoff Wing wrote:
} Subject: Re: RC_EXPAND_PARAM bug
}
} :The logic is that the string after the rc-param, 1${^^x}, is expanded,
} :producing two strings, 1x y, which is combined with 1a 1b.  It is true
} 
} I don't get this,  shouldn't 1${^^x} produce one string "1x y"?  And then the
} expansion of 1${^a}1${^^x} be the string "1a1x y 1b1x y"?  Your logic 
} indicates to me that it's producing array like thingies.  Is this dependant
} on some other wierd option?  Please explain before I go mental.

The trick there is that x is an array variable, so it produces two strings.
The setting of rcexpandparam doesn't affect that part.

zagzig% a=(a b)
zagzig% x=(x y)
zagzig% echo 1${^a}1${^^x}
1a1x 1ay 1b1x 1by
zagzig% echo 1${^a}1${^x} 
1a1x 1a1y 1b1x 1b1y


-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

