From zsh-workers-return-8353-mason-zsh=primenet.com.au@sunsite.auc.dk Thu Oct 21 08:54:27 1999
Return-Path: <zsh-workers-return-8353-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15007 invoked from network); 21 Oct 1999 08:54:25 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 21 Oct 1999 08:54:25 -0000
Received: (qmail 26408 invoked by alias); 21 Oct 1999 08:54:18 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 8353
Received: (qmail 26400 invoked from network); 21 Oct 1999 08:54:17 -0000
Message-ID: <380ED4B0.CB258973@u.genie.co.uk>
Date: Thu, 21 Oct 1999 09:54:09 +0100
From: Oliver Kiddle <opk@u.genie.co.uk>
X-Mailer: Mozilla 4.7 [en] (Win95; I)
X-Accept-Language: en
MIME-Version: 1.0
To: Zsh workers <zsh-workers@sunsite.auc.dk>
Subject: Re: Alternate patch Re: PATCH: New prompt themes
References: <380CC25A.BC019EC7@u.genie.co.uk> <991020041621.ZM6569@candle.brasslantern.com>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Bart Schaefer wrote:

> That's why the prompt themes created by bash2zshprompt install a precmd
> function that includes "setop promptsubst", and why I patched several of

I hadn't thought of doing it that way and had only read the text not the patch in your message so hadn't seen it. I agree with your past comments about stomping on precmd though and think it is better not to use precmd just for one setopt which doesn't need to be run every time the prompt is printed anyway.
 
> Just do
>         [[ $HOST == (${(j(|))~normal_hosts}) ]] && host=""

That works well, thanks.

Bart Schaefer wrote:
> I'm not sure that it's that useful to factor out the prefix "prompt" from
> each of the strings in prompt_opts, but I'm not going to change that here.

I did that because it seemed an easy way to restrict it to the prompt options.

> Further, I might suggest that instead of an assoc. array with both set and
> unset values, just use a regular array of only the values that are meant to
> be set; e.g. one command instead of a loop:
>   setopt noprompt{bang,cr,percent,subst} prompt$^prompt_opts
> However, I didn't make that change either.

That probably is better. An alternative patch to do it that way follows. The only thing I'm not sure about is whether it is wise that promptcr is controlled by the prompt themes. I'd consider it to be down to personal preference whether it's set or not. I also can't see that it could be crucial to a particular theme so you might want to remove cr from the brace expansion.

Incidentally, I had to use prompt${^prompt_opts[@]} instead of what you suggested because after emulate -R ksh, only the first word in the array would be expanded.

*** Functions/Prompts/promptinit.bak	Wed Oct 20 18:25:20 1999
--- Functions/Prompts/promptinit	Wed Oct 20 18:37:18 1999
***************
*** 34,40 ****
    prompt_newline=$(echo -ne "\n%{\r%}")
  }
  
! prompt () {
    emulate -L zsh
    local opt preview theme usage old_theme
  
--- 34,40 ----
    prompt_newline=$(echo -ne "\n%{\r%}")
  }
  
! set_prompt() {
    emulate -L zsh
    local opt preview theme usage old_theme
  
***************
*** 103,108 ****
--- 103,117 ----
         promptzzzz=$reset_color
         ;;
    esac
+ }
+ 
+ prompt() {
+   local prompt_opts
+   
+   set_prompt "$@"
+   
+   (( $#prompt_opts )) &&
+       setopt noprompt{bang,cr,percent,subst} prompt${^prompt_opts[@]}
  }
  
  promptinit "$@"

