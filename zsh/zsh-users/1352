From zsh-workers-request@math.gatech.edu Sun Mar 01 17:50:39 1998
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 13344 invoked from network); 1 Mar 1998 17:50:38 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 1 Mar 1998 17:50:38 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.8.5/8.8.5) id MAA10801;
	Sun, 1 Mar 1998 12:33:42 -0500 (EST)
Resent-Date: Sun, 1 Mar 1998 12:33:20 -0500 (EST)
From: "Bart Schaefer" <schaefer@brasslantern.com>
Message-Id: <980301093523.ZM30983@candle.brasslantern.com>
Date: Sun, 1 Mar 1998 09:35:23 -0800
In-Reply-To: <hvgyayvvxjk.fsf@vinnie.cc.gatech.edu>
Comments: In reply to Jason Zapman II <zapman@cc.gatech.edu>
        "variables set to full lines." (Feb 28, 11:34pm)
References: <hvgyayvvxjk.fsf@vinnie.cc.gatech.edu>
X-Mailer: Z-Mail (4.0b.820 20aug96)
To: Jason Zapman II <zapman@cc.gatech.edu>, zsh-users@math.gatech.edu
Subject: Re: variables set to full lines.
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Resent-Message-ID: <"i-HPR.0.Ae2.WlP-q"@math>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/1352
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

On Feb 28, 11:34pm, Jason Zapman II wrote:
} Subject: variables set to full lines.
}
} I've occasionally wanted to do something like this:
} 
} for line in `cat file` ; do
} 	echo $line >> file1
} done
} 
} where $line is set to a string containing each line in the file, rather
} than each word.
} 
} Is there a way to do this?

Depending on your requirements ...

	while read line; do
		echo $line >> file1
	done < file

This has the drawback that stdin is redirected from "file", so if you
do something inside the loop like

		rm -i $line

then when "rm" prompts for input, it also reads from "file", which is
probably not what you meant.

If you -really- want the entire contents of "file" read into the shell
all at once, this is the way to do it in 3.0.5 and 3.1.x:

	for line in "${(@f)$(<file)}"; do
		echo $line >> file1
	done

The double-quotes are required to preserve newlines in $(<file); the (f)
splits the result into words at newlines; the (@) splits the double-quoted
string into words again.

The same basic trick works in older versions (back to 3.0.0, I think)
but you have to throw in additional ${} to get the parameter substitution
to work correctly, and you probably need a space in the $(< ); I don't
recall exactly, something like

	for line in "${(@)${(f)${$(< file)}}}"; do

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

