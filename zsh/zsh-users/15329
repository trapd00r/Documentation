From zsh-users-return-15329-mason-zsh=primenet.com.au@zsh.org Wed Aug 25 20:55:38 2010
Return-Path: <zsh-users-return-15329-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29621 invoked by alias); 25 Aug 2010 20:55:38 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15329
Received: (qmail 28409 invoked from network); 25 Aug 2010 20:55:35 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at benizi.com designates 64.130.10.15 as permitted sender)
Date: Wed, 25 Aug 2010 16:55:04 -0400 (EDT)
From: "Benjamin R. Haskell" <zsh@benizi.com>
To: zsh-users@zsh.org
Subject: Re: do not write certain commands to history file
In-Reply-To: <mailbox-6437-1282767733-460593@pepper>
Message-ID: <alpine.LNX.2.01.1008251647000.4535@hp>
References: <20100825192608.GG11622@trustfood.org> <AANLkTimkMhrSeX6VpDBbMxO-VdMOr4n-0qsF==xBPjNd@mail.gmail.com> <mailbox-6437-1282767733-460593@pepper>
User-Agent: Alpine 2.01 (LNX 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

On Wed, 25 Aug 2010, Eric Smith wrote:

> Thanks Mikael. If it is not in the buffer I do not care.  But I cannot 
> work your example.
> 
> Found this below in a config file somewhere and thought I could adapt 
> it.  I want to exclude all commands that have "foobar" anywhere in 
> them, as the command or in the arg list.  Quick hack did not work.  
> All lines are still written to the history file.
> 
> zshaddhistory() {
>     local line=${1%%$'\n'}
>     local cmd=${line%% *}
> 
>     [[ ${#line} -ge 5
>         && ${cmd} != "rm"
>         && ${cmd} != (l|l[sal])
>         && ${cmd} != (c|cd)
>         && ${cmd} != (m|man)
>         && ${arg} != (*foobar*)
>     ]]
> }

Where are you setting $arg?  Do you mean $line? or are you trying to 
match *foobar* in $argv?

If the latter, you can't just match an array against a pattern (since 
there's no sensible default for whether it's conjunctive or disjunctive 
[any or all]).  I'm not sure of the [[ ]] form offhand, but the (( )) 
form would be:

[[ # what you already have ]] && (( ! $argv[(I)*foobar*] ))

-- 
Best,
Ben

