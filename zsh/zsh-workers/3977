From zsh-workers-request@math.gatech.edu Fri May 15 10:07:14 1998
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23138 invoked from network); 15 May 1998 10:07:13 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 15 May 1998 10:07:13 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.8.5/8.8.5) id FAA04612;
	Fri, 15 May 1998 05:51:43 -0400 (EDT)
Resent-Date: Fri, 15 May 1998 05:51:43 -0400 (EDT)
Mail-Copies-To: steve@xemacs.org
To: zsh-workers@math.gatech.edu
Subject: A stack traceback on export LANG (where LANG is unset) 
X-Face: (:YAD@JS'&Kz'M}n7eX7gEvPR6U1mJ-kt;asEc2qAv;h{Yw7ckz<7+X_SYeTNAaPui:e~x$
 ,A=gkt*>UPL/}\a/#C~v2%ETiAY_sx;xve0yL??JWTtX_-NUzXyP38UdW#cmN1\4(X!c3m#%IbtB-3
 Z-!xpZi!`E.s{(;aP=b11"!3wQu]1j@^V|;n=B|{l<bZV1.AI`zWV%kPCnUhcgEe\(}/_kNd6,*3ZJ
 Q3o<YQ3^u;7jS=:p0--u3msQO
X-Attribution: sb
From: SL Baur <steve@xemacs.org>
Mime-Version: 1.0 (generated by tm-edit 7.108)
Content-Type: text/plain; charset=US-ASCII
Date: 15 May 1998 02:54:26 -0700
Message-ID: <m2hg2rx3jh.fsf@altair.xemacs.org>
Lines: 36
X-Mailer: Gnus v5.6.9/XEmacs 21.0(beta40) - "Saanen-pre3"
Resent-Message-ID: <"U_Rtm1.0._71.k01Nr"@math>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/3977
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

I think zsh is choking on magic variables being exported but not
defined.  I normally have LANG undefined, but use
`LANG=<something-legal> program-to-test' frequently for testing.

$ zsh -c "export fred"
$ zsh -c "export LANG"
zsh: 32244 segmentation fault (core dumped)  zsh -c export LANG

Here's a better stack backtrace than the one I sent before.  (The
trace is on vanilla zsh-3.1.3, gdb Src/zsh; run -c "export LANG").

Program received signal SIGSEGV, Segmentation fault.
0x807dd3e in mkenvstr (name=0x80b1628 "LANG", value=0x0) at params.c:2073
2073             *s && (*s++ != Meta || *s++ != 32); len_value++);
(gdb) where
#0  0x807dd3e in mkenvstr (name=0x80b1628 "LANG", value=0x0) at params.c:2073
#1  0x807dec7 in addenv (name=0x80b1628 "LANG", value=0x0) at params.c:2112
#2  0x8052c0a in bin_typeset (name=0x80b14d0 "export", argv=0x80b1758, 
    ops=0xbfffed18 "", func=21) at builtin.c:1589
#3  0x804fe28 in execbuiltin (args=0x80b1604, bn=0x8096abc) at builtin.c:352
#4  0x805d271 in execcmd (cmd=0x80b15e4, input=0, output=0, how=2, last1=1)
    at exec.c:1802
#5  0x805a978 in execpline2 (pline=0x80b1734, how=2, input=0, output=0, 
    last1=1) at exec.c:902
#6  0x805a162 in execpline (l=0x80b15d0, how=2, last1=1) at exec.c:747
#7  0x8059dae in execlist (list=0x80b1744, dont_change_job=0, exiting=1)
    at exec.c:627
#8  0x8059cba in execstring (s=0xbffff449 "export LANG", dont_change_job=0, 
    exiting=1) at exec.c:586
#9  0x806cb0c in init_misc () at init.c:742
#10 0x804f4ef in main (argc=3, argv=0xbffff2d4) at ./main.c:73
(gdb) print s
$1 = 0x0


Hope this helps.

