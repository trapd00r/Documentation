From zsh-workers-return-21872-mason-zsh=primenet.com.au@sunsite.dk Thu Oct 13 17:47:29 2005
Return-Path: <zsh-workers-return-21872-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 20370 invoked from network); 13 Oct 2005 17:47:26 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 13 Oct 2005 17:47:26 -0000
Received: (qmail 87486 invoked from network); 13 Oct 2005 17:47:20 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 13 Oct 2005 17:47:20 -0000
Received: (qmail 15638 invoked by alias); 13 Oct 2005 17:47:17 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 21872
Received: (qmail 15629 invoked from network); 13 Oct 2005 17:47:17 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 13 Oct 2005 17:47:17 -0000
Received: (qmail 87201 invoked from network); 13 Oct 2005 17:47:17 -0000
Received: from cluster-c.mailcontrol.com (HELO rly07c.srv.mailcontrol.com) (168.143.177.190)
  by a.mx.sunsite.dk with SMTP; 13 Oct 2005 17:47:16 -0000
Received: from exchange03.csr.com (mailhost1.csr.com [81.105.217.43])
	by rly07c.srv.mailcontrol.com (MailControl) with ESMTP id j9DHlEU8032614;
	Thu, 13 Oct 2005 18:47:14 +0100
Received: from news01 ([10.103.143.38]) by exchange03.csr.com with Microsoft SMTPSVC(5.0.2195.6713);
	 Thu, 13 Oct 2005 18:49:19 +0100
Date: Thu, 13 Oct 2005 18:47:12 +0100
From: Peter Stephenson <pws@csr.com>
To: Radu Duta <rduta@syskey.com>, zsh-workers@sunsite.dk
Subject: Re: question about wait in interactive mode
Message-Id: <20051013184712.3b6c990e.pws@csr.com>
In-Reply-To: <EXCHANGE03zjwtBOmt900002b33@exchange03.csr.com>
References: <20051005133459.GA25549@syskey.com>
	<EXCHANGE03zjwtBOmt900002b33@exchange03.csr.com>
Organization: Cambridge Silicon Radio
X-Mailer: Sylpheed version 0.9.12 (GTK+ 1.2.10; i386-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 13 Oct 2005 17:49:19.0761 (UTC) FILETIME=[700FD810:01C5D01E]
X-Scanned-By: MailControl A-05-40-00 (www.mailcontrol.com) on 10.67.0.117
X-Spam-Checker-Version: SpamAssassin 3.0.4 (2005-06-05) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham 
	version=3.0.4

Peter Stephenson <pws@csr.com> wrote:
> This code:
> 
>   print | (echo & wait)
> 
> also hangs (it's the simplest version I've found:  the pipeline and
> the subshell are both necessary)

I tracked this down to the job table not being cleared properly in a
subshell, so the shell is waiting forever for a process which isn't a
child.

I noticed a couple of other bugs at the same time:

The code to find a new job was inefficient, since any job above maxjob is
guaranteed to be usable (very minor).

Also, the code to save jobs so that they can be reported in a subshell
saved the job in which it was running, which shouldn't be reported since it
isn't in normal use.  For example,

% print | (jobs)
[1]    running    print

doesn't make sense.  (At least, I don't think it does.  Actually, you
can argue that in an explicit subshell, i.e. with parentheses, you
shouldn't be saving jobs at all since, unlike with a pipeline, you've
explicitly told the shell you're using a subshell which won't
have any jobs of its own.)

This ought to go onto 4.2 as well as the main line.

Index: Src/jobs.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/jobs.c,v
retrieving revision 1.41
diff -u -r1.41 jobs.c
--- Src/jobs.c	15 Aug 2005 03:28:39 -0000	1.41
+++ Src/jobs.c	13 Oct 2005 17:37:25 -0000
@@ -1213,9 +1213,14 @@
 	int sz = oldmaxjob * sizeof(struct job);
 	oldjobtab = (struct job *)zalloc(sz);
 	memcpy(oldjobtab, jobtab, sz);
+
+	/* Don't report any job we're part of */
+	if (thisjob != -1 && thisjob < oldmaxjob)
+	    memset(oldjobtab+thisjob, 0, sizeof(struct job));
     }
 
-    memset(jobtab, 0, sizeof(jobtab)); /* zero out table */
+    memset(jobtab, 0, jobtabsize * sizeof(struct job)); /* zero out table */
+    maxjob = 0;
 }
 
 static int initnewjob(int i)
@@ -1241,9 +1246,11 @@
 {
     int i;
 
-    for (i = 1; i < jobtabsize; i++)
+    for (i = 1; i <= maxjob; i++)
 	if (!jobtab[i].stat)
 	    return initnewjob(i);
+    if (maxjob + 1 < jobtabsize)
+	return initnewjob(maxjob+1);
 
     if (expandjobtab())
 	return initnewjob(i);


-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070


This message has been scanned for viruses by BlackSpider MailControl - www.blackspider.com

