From zsh-users-return-11331-mason-zsh=primenet.com.au@sunsite.dk Sat Mar 24 17:24:50 2007
Return-Path: <zsh-users-return-11331-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29230 invoked from network); 24 Mar 2007 17:24:49 -0000
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=BAYES_00,FORGED_RCVD_HELO
	autolearn=ham version=3.1.8
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 24 Mar 2007 17:24:49 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 6133 invoked from network); 24 Mar 2007 17:24:43 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 24 Mar 2007 17:24:43 -0000
Received: (qmail 12075 invoked by alias); 24 Mar 2007 17:24:36 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 11331
Received: (qmail 12066 invoked from network); 24 Mar 2007 17:24:35 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 24 Mar 2007 17:24:35 -0000
Received: (qmail 4872 invoked from network); 24 Mar 2007 17:24:35 -0000
Received: from vms044pub.verizon.net (206.46.252.44)
  by a.mx.sunsite.dk with SMTP; 24 Mar 2007 17:24:32 -0000
Received: from torch.brasslantern.com ([71.116.70.212])
 by vms044.mailsrvcs.net (Sun Java System Messaging Server 6.2-6.01 (built Apr
 3 2006)) with ESMTPA id <0JFF003FB4CU8SP4@vms044.mailsrvcs.net> for
 zsh-users@sunsite.dk; Sat, 24 Mar 2007 12:24:31 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id l2OHOTht015089	for
 <zsh-users@sunsite.dk>; Sat, 24 Mar 2007 10:24:30 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id l2OHOTNY015088	for zsh-users@sunsite.dk; Sat,
 24 Mar 2007 10:24:29 -0700
Date: Sat, 24 Mar 2007 10:24:29 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: GetfFilesize with highest performance
In-reply-to: <20070324143954.GC6685@solfire>
To: zsh-users@sunsite.dk
Message-id: <070324102429.ZM15087@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <20070324143954.GC6685@solfire>
Comments: In reply to meino.cramer@gmx.de
 "GetfFilesize with highest performance" (Mar 24,  3:39pm)

On Mar 24,  3:39pm, meino.cramer@gmx.de wrote:
}
}  What would be the best way to get the size of a file
}  performancewise?

You'd have to try it different ways and compare.  Using a zsh glob
will potentially read status from each of the files and then you'd
still have to read it the status again to capture the size.  On the
other hand "find ... -ls" would probably only stat the file once,
but then you have to text-process the output.

So which one is better probably depends on how fast your CPU is as
compared to how fast your disk is, and whether your OS does file
system caching, etc.

The way to do it wth a zsh glob is:

    zmodload -i zsh/stat
    stat -n +size **/*

(Adjust the glob as necessary to match the files you care about.)

On my machine I can get sizes for 9300 files through 1400 directories
in 0.293 seconds by globbing, 0.05 seconds slower than "find . -ls".
However, if I change it to **/*(.) vs. "find . -type f -ls" then find
speeds up a little and globbing slows down a little.

The next consideration is what you want to do with the sizes after you
have them.  If you want to do anything else with them in the shell,
the zsh/stat method gives you a hook:

    typeset -A sizes
    stat -A sizes -n +size **/*

This is an undocumented trick; -A expects to assign elements to an
array, but by a quirk of the way that's done internally, if the array
is a hash the pairwise assignment works just as if you had done:

    typeset -a tmp
    stat -A tmp -n +size **/*
    typeset -A sizes
    sizes=($tmp)

Now ${(k)sizes} gives the names and ${(v)sizes} gives the sizes, and
${sizes[somefile]} is the size of somefile.  This is almost certainly
faster than reading and parsing the output of find.  Once you have
this you can do other tricks like:

    print Total size of all files is $(( ${(j:+:v)sizes} ))

(My 9300 files are 1360562692 bytes.)

