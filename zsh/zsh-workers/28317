From zsh-workers-return-28317-mason-zsh=primenet.com.au@zsh.org Tue Oct 05 16:16:48 2010
Return-Path: <zsh-workers-return-28317-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 22827 invoked by alias); 5 Oct 2010 16:16:48 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 28317
Received: (qmail 27415 invoked from network); 5 Oct 2010 16:16:45 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <101005091611.ZM5090@torch.brasslantern.com>
Date: Tue, 05 Oct 2010 09:16:11 -0700
In-reply-to: <AANLkTinyNWKax0n2z+XmoyFOuLOdWkLsujfw86Zw8EQK@mail.gmail.com>
Comments: In reply to Mikael Magnusson <mikachu@gmail.com>
 "Re: noclobber overzealous with multios and /dev/stdout" (Oct  5,  5:18pm)
References: <AANLkTi=PxKX2x5M_oseccYWsSgztpWY_n8Lz9gTu=3vE@mail.gmail.com>
	<101005080059.ZM4862@torch.brasslantern.com>
	<AANLkTinyNWKax0n2z+XmoyFOuLOdWkLsujfw86Zw8EQK@mail.gmail.com>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh workers <zsh-workers@zsh.org>
Subject: Re: noclobber overzealous with multios and /dev/stdout
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Oct 5,  5:18pm, Mikael Magnusson wrote:
} Subject: Re: noclobber overzealous with multios and /dev/stdout
}
} On 5 October 2010 17:00, Bart Schaefer <schaefer@brasslantern.com> wrote:
} > ... what has happened is that zsh has opened "file" as the standard
} > output (fd 1), which changes the meaning of /dev/stdout and /dev/fd/1
} > to refer to the regular file "file".
} 
} > } both 0 and 1 are symlinks to /dev/pts/33
} >
} > No, they aren't.  Left-to-right order is important with multios, as
} > it is with descriptor duplication using >&DIGITS.
} 
} In case this was unclear, i was referring to /proc/<pid>/fd/0 and 1
} there, they are both symlinks pointing to the same target
} (/dev/pts/33). When i created a symlink in the current dir to the same
} place, i also didn't get the error. Oh, i just realized now, does what
} the symlink in /proc points to change during the evaluation of the
} redirect operators?

Yes!

} I guess they must, in that case i understand what happens :). Ie after
} "> file", /proc/self/fd/1 points to "file", while 0 still points to
} the terminal...

Exactly.

} What i was actually trying to do when i encountered this was use
} multios to write both to the terminal and a file.

You can do that, but you must always name the terminal device first,
or use a device such as /dev/tty that doesn't depend on stdin/stdout.
So

    echo test > /dev/stdout > file

should do what you want, or

    echo test > file > /dev/tty

if what you really mean is the terminal, rather than the previous
stdout.

} I guess what i must do in that case is first duplicate stdout to a new
} fd with {myfd}>&1 (i always forget the exact syntax for this), and
} then > file >&$myfd ?

That's what you have to do in the absence of multios, e.g. in /bin/sh
(except of course {myfd} doesn't work there, you have to pick a number).

