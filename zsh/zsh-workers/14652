From zsh-workers-return-14652-mason-zsh=primenet.com.au@sunsite.dk Fri Jun 01 14:05:18 2001
Return-Path: <zsh-workers-return-14652-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24506 invoked from network); 1 Jun 2001 14:05:16 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 1 Jun 2001 14:05:16 -0000
Received: (qmail 23372 invoked by alias); 1 Jun 2001 14:05:05 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14652
Received: (qmail 23353 invoked from network); 1 Jun 2001 14:05:05 -0000
X-Envelope-Sender-Is: Andrej.Borsenkow@mow.siemens.ru (at relayer goliath.siemens.de)
From: "Andrej Borsenkow" <Andrej.Borsenkow@mow.siemens.ru>
To: "Peter Stephenson" <pws@csr.com>,
   "Zsh hackers list" <zsh-workers@sunsite.dk>
Subject: RE: zsh and autoconf-2.50 
Date: Fri, 1 Jun 2001 18:05:06 +0400
Message-ID: <002201c0eaa3$dc7b2280$21c9ca95@mow.siemens.ru>
MIME-Version: 1.0
Content-Type: multipart/mixed;
	boundary="----=_NextPart_000_0023_01C0EAC5.638CC280"
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
In-Reply-To: <002101c0eaa2$d31627e0$21c9ca95@mow.siemens.ru>
X-Mimeole: Produced By Microsoft MimeOLE V5.50.4522.1200
Importance: Normal

This is a multi-part message in MIME format.

------=_NextPart_000_0023_01C0EAC5.638CC280
Content-Type: text/plain;
	charset="koi8-r"
Content-Transfer-Encoding: 7bit


>
> I must be stupid, but it does not work foe mr:
>
> bor@itsrm2% autoconf
> configure.in:55: error: undefine: undefined: zsh-debug
> configure.in:55: the top level
>
> even with
>
> dnl Do you want to debug zsh?
> ifdef([zsh-debug],undefine([zsh-debug]))dnl
>

Quoting, quoting ...

ifdef([zsh-debug],[undefine([zsh-debug])])dnl

Please, PLEASE, test it this still works with 2.13. I do not have it anymore
:-)

-andrej

------=_NextPart_000_0023_01C0EAC5.638CC280
Content-Type: application/octet-stream;
	name="ac-2.50.diff"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
	filename="ac-2.50.diff"

Index: configure.in=0A=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=0A=
RCS file: /cvsroot/zsh/zsh/configure.in,v=0A=
retrieving revision 1.59=0A=
diff -u -r1.59 configure.in=0A=
--- configure.in	2001/06/01 13:38:46	1.59=0A=
+++ configure.in	2001/06/01 14:03:20=0A=
@@ -52,7 +52,7 @@=0A=
 zsh_COMPILE_FLAGS($CPPFLAGS, $CFLAGS, $LDFLAGS, $LIBS)=0A=
 =0A=
 dnl Do you want to debug zsh?=0A=
-ifdef([zsh-debug],undefine([zsh-debug]))dnl=0A=
+ifdef([zsh-debug],[undefine([zsh-debug])])dnl=0A=
 AC_ARG_ENABLE(zsh-debug,=0A=
 [  --enable-zsh-debug         compile with debug code and debugger =
symbols],=0A=
 [if test x$enableval =3D xyes; then=0A=
@@ -60,7 +60,7 @@=0A=
 fi])=0A=
 =0A=
 dnl Do you want zsh memory allocation routines.=0A=
-ifdef([zsh-mem],undefine([zsh-mem]))dnl=0A=
+ifdef([zsh-mem],[undefine([zsh-mem])])dnl=0A=
 AC_ARG_ENABLE(zsh-mem,=0A=
 [  --enable-zsh-mem           compile with zsh memory allocation =
routines],=0A=
 [if test x$enableval =3D xyes; then=0A=
@@ -68,7 +68,7 @@=0A=
 fi])=0A=
 =0A=
 dnl Do you want to debug zsh memory allocation routines.=0A=
-ifdef([zsh-mem-debug],undefine([zsh-mem-debug]))dnl=0A=
+ifdef([zsh-mem-debug],[undefine([zsh-mem-debug])])dnl=0A=
 AC_ARG_ENABLE(zsh-mem-debug,=0A=
 [  --enable-zsh-mem-debug     debug zsh memory allocation routines],=0A=
 [if test x$enableval =3D xyes; then=0A=
@@ -76,7 +76,7 @@=0A=
 fi])=0A=
 =0A=
 dnl Do you want to print warnings when errors in memory allocation.=0A=
-ifdef([zsh-mem-warning],undefine([zsh-mem-warning]))dnl=0A=
+ifdef([zsh-mem-warning],[undefine([zsh-mem-warning])])dnl=0A=
 AC_ARG_ENABLE(zsh-mem-warning,=0A=
 [  --enable-zsh-mem-warning   print warnings for errors in memory =
allocation],=0A=
 [if test x$enableval =3D xyes; then=0A=
@@ -84,7 +84,7 @@=0A=
 fi])=0A=
 =0A=
 dnl Do you want to turn on error checking for free().=0A=
-ifdef([zsh-secure-free],undefine([zsh-secure-free]))dnl=0A=
+ifdef([zsh-secure-free],[undefine([zsh-secure-free])])dnl=0A=
 AC_ARG_ENABLE(zsh-secure-free,=0A=
 [  --enable-zsh-secure-free   turn on error checking for free()],=0A=
 [if test x$enableval =3D xyes; then=0A=
@@ -93,7 +93,7 @@=0A=
 =0A=
 dnl Do you want debugging information on internal hash tables.=0A=
 dnl This turns on the `hashinfo' builtin command.=0A=
-ifdef([zsh-hash-debug],undefine([zsh-hash-debug]))dnl=0A=
+ifdef([zsh-hash-debug],[undefine([zsh-hash-debug])])dnl=0A=
 AC_ARG_ENABLE(zsh-hash-debug,=0A=
 [  --enable-zsh-hash-debug    turn on debugging of internal hash =
tables],=0A=
 [if test x$enableval =3D xyes; then=0A=
@@ -101,12 +101,12 @@=0A=
 fi])=0A=
 =0A=
 dnl Pathnames for global zsh scripts=0A=
-ifdef([etcdir],undefine([etcdir]))dnl=0A=
+ifdef([etcdir],[undefine([etcdir])])dnl=0A=
 AC_ARG_ENABLE(etcdir,=0A=
 [  --enable-etcdir=3DDIR        the default directory for global zsh =
scripts],=0A=
 [etcdir=3D"$enableval"], [etcdir=3D/etc])=0A=
 =0A=
-ifdef([zshenv],undefine([zshenv]))dnl=0A=
+ifdef([zshenv],[undefine([zshenv])])dnl=0A=
 AC_ARG_ENABLE(zshenv,=0A=
 [  --enable-zshenv=3DFILE       the full pathname of the global zshenv =
script],=0A=
 [zshenv=3D"$enableval"],=0A=
@@ -119,7 +119,7 @@=0A=
   AC_DEFINE_UNQUOTED(GLOBAL_ZSHENV, "$zshenv")=0A=
 fi=0A=
 =0A=
-ifdef([zshrc],undefine([zshrc]))dnl=0A=
+ifdef([zshrc],[undefine([zshrc])])dnl=0A=
 AC_ARG_ENABLE(zshrc,=0A=
 [  --enable-zshrc=3DFILE        the full pathname of the global zshrc =
script],=0A=
 [zshrc=3D"$enableval"],=0A=
@@ -132,7 +132,7 @@=0A=
   AC_DEFINE_UNQUOTED(GLOBAL_ZSHRC, "$zshrc")=0A=
 fi=0A=
 =0A=
-ifdef([zprofile],undefine([zprofile]))dnl=0A=
+ifdef([zprofile],[undefine([zprofile])])dnl=0A=
 AC_ARG_ENABLE(zprofile,=0A=
 [  --enable-zprofile=3DFILE     the full pathname of the global =
zprofile script],=0A=
 [zprofile=3D"$enableval"],=0A=
@@ -145,7 +145,7 @@=0A=
   AC_DEFINE_UNQUOTED(GLOBAL_ZPROFILE, "$zprofile")=0A=
 fi=0A=
 =0A=
-ifdef([zlogin],undefine([zlogin]))dnl=0A=
+ifdef([zlogin],[undefine([zlogin])])dnl=0A=
 AC_ARG_ENABLE(zlogin,=0A=
 [  --enable-zlogin=3DFILE       the full pathname of the global zlogin =
script],=0A=
 [zlogin=3D"$enableval"],=0A=
@@ -158,7 +158,7 @@=0A=
   AC_DEFINE_UNQUOTED(GLOBAL_ZLOGIN, "$zlogin")=0A=
 fi=0A=
 =0A=
-ifdef([zlogout],undefine([zlogout]))dnl=0A=
+ifdef([zlogout],[undefine([zlogout])])dnl=0A=
 AC_ARG_ENABLE(zlogout,=0A=
 [  --enable-zlogout=3DFILE      the full pathname of the global zlogout =
script],=0A=
 [zlogout=3D"$enableval"],=0A=
@@ -178,19 +178,19 @@=0A=
 AC_SUBST(zlogout)dnl=0A=
 =0A=
 dnl Do you want large file support, if available?=0A=
-ifdef([lfs],undefine([lfs]))dnl=0A=
+ifdef([lfs],[undefine([lfs])])dnl=0A=
 AC_ARG_ENABLE(lfs,=0A=
 [  --disable-lfs              turn off support for large files],=0A=
 [lfs=3D"$enableval"], [lfs=3Dyes])=0A=
 =0A=
 dnl Do you want dynamically loaded binary modules.=0A=
-ifdef([dynamic],undefine([dynamic]))dnl=0A=
+ifdef([dynamic],[undefine([dynamic])])dnl=0A=
 AC_ARG_ENABLE(dynamic,=0A=
 [  --disable-dynamic          turn off dynamically loaded binary =
modules],=0A=
 [dynamic=3D"$enableval"], [dynamic=3Dyes])=0A=
 =0A=
 dnl Do you want to disable restricted on r* commands=0A=
-ifdef([restricted-r],undefine([restricted-r]))dnl=0A=
+ifdef([restricted-r],[undefine([restricted-r])])dnl=0A=
 AC_ARG_ENABLE(restricted-r,=0A=
 [  --disable-restricted-r     turn off r* invocation for restricted =
shell],=0A=
 [if test x$enableval =3D xyes; then=0A=
@@ -213,7 +213,7 @@=0A=
 [  --enable-ansi2knr          translate source to K&R C before =
compiling],=0A=
 [ansi2knr=3D"$enableval"], [ansi2knr=3Ddefault])=0A=
 =0A=
-ifdef([fndir],undefine([fndir]))dnl=0A=
+ifdef([fndir],[undefine([fndir])])dnl=0A=
 AC_ARG_ENABLE(fndir,=0A=
 [  --enable-fndir=3DDIR         the directory in which to install =
functions],=0A=
 dnl ${VERSION} to be determined at compile time.=0A=
@@ -223,7 +223,7 @@=0A=
   fndir=3D"$enableval"=0A=
 fi], [fndir=3D${datadir}/${tzsh_name}/'${VERSION}'/functions])=0A=
 =0A=
-ifdef([sitefndir],undefine([sitefndir]))dnl=0A=
+ifdef([sitefndir],[undefine([sitefndir])])dnl=0A=
 AC_ARG_ENABLE(sitefndir,=0A=
 [  --enable-site-fndir=3DDIR    same for site functions (not version =
specific)],=0A=
 [if test $enableval =3D yes; then=0A=
@@ -232,7 +232,7 @@=0A=
   sitefndir=3D"$enableval"=0A=
 fi], [sitefndir=3D${datadir}/${tzsh_name}/site-functions])=0A=
 =0A=
-ifdef([function_subdirs],undefine([function_subdirs]))=0A=
+ifdef([function_subdirs],[undefine([function_subdirs])])=0A=
 AC_ARG_ENABLE(function-subdirs,=0A=
 [  --enable-function-subdirs  install functions in subdirectories])=0A=
 =0A=
@@ -248,7 +248,7 @@=0A=
 AC_SUBST(FUNCTIONS_SUBDIRS)dnl=0A=
 =0A=
 dnl Do you want maildir support?=0A=
-ifdef([maildir_support],undefine([maildir_support]))dnl=0A=
+ifdef([maildir_support],[undefine([maildir_support])])dnl=0A=
 AC_ARG_ENABLE(maildir-support,=0A=
 [  --enable-maildir-support   enable maildir support in MAIL and =
MAILPATH],=0A=
 [if test x$enableval =3D xyes; then=0A=
@@ -256,7 +256,7 @@=0A=
 fi])=0A=
 =0A=
 dnl Do you want to set a maximum function depth?=0A=
-ifdef([max_function_depth],undefine([max_function_depth]))dnl=0A=
+ifdef([max_function_depth],[undefine([max_function_depth])])dnl=0A=
 AC_ARG_ENABLE(max-function-depth,=0A=
 [  --enable-max-function-depth=3DMAX   limit function depth to MAX],=0A=
 [if test x$enableval =3D xyes; then=0A=
@@ -419,7 +419,7 @@=0A=
 =0A=
 AC_MSG_CHECKING(what to set MAXJOB to)=0A=
 dnl Do you want to alter the maximum job table size?=0A=
-ifdef([max_jobtable_size],undefine([max_jobtable_size]))dnl=0A=
+ifdef([max_jobtable_size],[undefine([max_jobtable_size])])dnl=0A=
 AC_ARG_ENABLE(max-jobtable-size,=0A=
 [  --enable-max-jobtable-size=3DMAX    limit job table size to MAX],=0A=
 =0A=

------=_NextPart_000_0023_01C0EAC5.638CC280--

