From zsh-users-return-15612-mason-zsh=primenet.com.au@zsh.org Mon Dec 06 14:06:01 2010
Return-Path: <zsh-users-return-15612-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 19288 invoked by alias); 6 Dec 2010 14:06:01 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15612
Received: (qmail 14362 invoked from network); 6 Dec 2010 14:05:58 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_LOW,
	SPF_HELO_PASS autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at csr.com does not designate permitted sender hosts)
Date: Mon, 6 Dec 2010 14:05:30 +0000
From: Peter Stephenson <Peter.Stephenson@csr.com>
To: zsh-users@zsh.org
Cc: nix@myproxylists.com
Subject: Re: A strange function behaviour in random password generator
Message-ID: <20101206140530.77fd46a5@pwslap01u.europe.root.pri>
In-Reply-To: <AANLkTi=V_dGPK0FBN9FhEC8ZUYzUvi3-o720r9u_Muuu@mail.gmail.com>
References: <6741cd3f3c35661a5b89e0078c20a0f6.squirrel@gameframe.net>
	<AANLkTi=V_dGPK0FBN9FhEC8ZUYzUvi3-o720r9u_Muuu@mail.gmail.com>
Organization: Cambridge Silicon Radio
X-Mailer: Claws Mail 3.7.6 (GTK+ 2.20.1; i386-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 06 Dec 2010 14:05:30.0511 (UTC) FILETIME=[A434E9F0:01CB954E]
X-Scanned-By: MailControl A_10_80_00 (www.mailcontrol.com) on 10.71.1.122

On Mon, 6 Dec 2010 14:39:41 +0100
Mikael Magnusson <mikachu@gmail.com> wrote:
> On 6 December 2010 14:15,  <nix@myproxylists.com> wrote:
> > Hi, I have just coded a random password generator. It works good
> > but one might want to show me how to do it with rand48() as its
> > output is strange.
> >
> > The problem:
> >
> > ./random_pass.sh
> > iNkiuG
> > iNkiuG6K
> >
> > 6 first chars are the same for both passwords.
>
> > [...]
>
> > pos=$((RANDOM%$seeds_count+1))
> > MY_RCON=$(random 6)
> > MY_PASS=$(random 8)
>
> If you access $RANDOM in a subshell, the parent shell doesn't know
> about it, and next time it forks a subshell the state will be
> identical.

That's what the seed argument for rand48 is for.  Here's a function that
creates a seed in a file and always uses that file.  The new random number
is in $REPLY.  There are all sorts of possible improvements.

rand48() {
  local sfile=~/.zsh_rand48
  zmodload -i zsh/mathfunc

  if [[ ! -f $sfile ]]; then
    touch $sfile
    chmod 600 $sfile
    # Warning: this is not very random.
    # OK for pseudorandom statistics, bad for security.
    printf "%.4x%.4x%.4x\n" $RANDOM $RANDOM $RANDOM >$sfile
  fi

  local seed="$(<$sfile)"

  typeset -g REPLY=$(( rand48(seed) ))

  print $seed >$sfile
}


-- 
Peter Stephenson <pws@csr.com>            Software Engineer
Tel: +44 (0)1223 692070                   Cambridge Silicon Radio Limited
Churchill House, Cambridge Business Park, Cowley Road, Cambridge, CB4 0WZ, UK


Member of the CSR plc group of companies. CSR plc registered in England and Wales, registered number 4187346, registered office Churchill House, Cambridge Business Park, Cowley Road, Cambridge, CB4 0WZ, United Kingdom

