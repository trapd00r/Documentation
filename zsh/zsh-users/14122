From zsh-users-return-14122-mason-zsh=primenet.com.au@sunsite.dk Fri May 15 21:01:16 2009
Return-Path: <zsh-users-return-14122-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 779 invoked from network); 15 May 2009 21:01:13 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 15 May 2009 21:01:13 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 3864 invoked from network); 15 May 2009 21:00:51 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 15 May 2009 21:00:51 -0000
Received: (qmail 23097 invoked by alias); 15 May 2009 21:00:31 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 14122
Received: (qmail 23083 invoked from network); 15 May 2009 21:00:30 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 15 May 2009 21:00:30 -0000
Received: from b.mail.sonic.net (b.mail.sonic.net [64.142.19.5])
	by bifrost.dotsrc.org (Postfix) with ESMTPS id 7E6E780271EA
	for <zsh-users@sunsite.dk>; Fri, 15 May 2009 23:00:24 +0200 (CEST)
Received: from mail.skepticism.us (75-101-5-120.dsl.static.sonic.net [75.101.5.120])
	(authenticated bits=0)
	by b.mail.sonic.net (8.13.8.Beta0-Sonic/8.13.7) with ESMTP id n4FL07k9024969;
	Fri, 15 May 2009 14:00:08 -0700
Received: from dhcp-172-19-56-250.mtv.corp.google.com (localhost [127.0.0.1])
	by mail.skepticism.us (Postfix) with ESMTP id C10AEA0179;
	Fri, 15 May 2009 14:00:54 -0700 (PDT)
Message-ID: <4A0DD7D7.40500@skepticism.us>
Date: Fri, 15 May 2009 14:00:07 -0700
From: Kurtis Rader <krader@skepticism.us>
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20090223 Thunderbird/3.0b2
MIME-Version: 1.0
To: Atom Smasher <atom@smasher.org>
CC: zsh-users@sunsite.dk
Subject: Re: piping stderr
References: <20090514104908.98556.qmail@smasher.org> <691a5d910905140904p538d5343md0712590db983853@mail.gmail.com> <20090515114736.33891.qmail@smasher.org>
In-Reply-To: <20090515114736.33891.qmail@smasher.org>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: ClamAV version 0.94.2, clamav-milter version 0.94.2 on bifrost
X-Virus-Status: Clean

The behavior you're seeing is due to how the Unix stdio library buffers 
output. The stderr stream is always line buffered by default. When the 
file descriptor is open on a tty both stdout is line buffered. When 
directed to a pipe, fifo, or file stdout is fully buffered. Which means 
that when you redirect the output to a file or a coprocess (which sends 
the output through a pipe) the stderr output will typically be seen 
first because it is flushed as soon as an entire line is written. But 
even that isn't guaranteed since if the program writes a large amount of 
data to stdout some or all of the data could be flushed before the first 
line is written to stderr. The only reliable way to solve this is to 
redirect the output to a pty (psuedo-tty). One way is to use the 
script(1) command to run your script and capture its output.

On 09-05-15 04:47, Atom Smasher wrote:
> On Thu, 14 May 2009, Bart Schaefer wrote:
>
>> On Thu, May 14, 2009 at 3:49 AM, Atom Smasher <atom@smasher.org> wrote:
>>> i'd like to pipe all stderr from a script into a command to do
>>> logging...
>>> but this isn't synchronous:
>>> exec 2> >( multilog /path/ )
>>>
>>> i need it to be synchronous so that multiple scripts running at the
>>> same time (and also logging debug messages) can all log together and
>>> not clobber each others output.
>>
>> I'm not sure what you think "synchronous" implies here. Within a
>> particular "instance" of zsh, such as a single running script,
>> commands can be synchronous in the sense that zsh waits for the
>> command to finish before going on to the next one. However, multiple
>> scripts "running at the same time" already implies that the zsh
>> instances are asynchronous with respect to one another, so no command
>> started by a particular zsh instance will be synchronous with respect
>> to other instances (unless you employ some sort of external locking
>> scheme, but then you're just preventing the scripts from "running at
>> the same time").
> ==============
>
> among different scripts (different invocations of the same script)
> things are wildly asynchronous. but within each script, which is logging
> debug output into multilog, i want to make sure that the stderr and
> debug messages appear in the right order. this script shows how that
> doesn't (always) happen:
>
> #!/bin/zsh
>
> exec 2> >(rot13)
>
> date
> dattxxx
> date
> dattxxx
> date
> dattxxx
> date
> dattxxx
>
> the "dattxxx" commands are there to produce "command not found" errors
> on stderr. with zsh 4.2.1 the redirect into a coproc makes it just hang.
>
>
>> That said ... have you tried your example above? I'd be mildly
>> surprised if multilog doesn't already do something to assure that
>> multiple loggers don't clobber one another's output. They might
>> intermingle their output, in which case you need to tag each line of
>> it with a PID or some such, but Dan Bernstein is generally pretty
>> compulsive about preventing data loss.
> ============
>
> if there's one thing multilog does, it makes sure that multiple inputs
> don't clobber each other. i am tagging each line with a PID so i can
> grep out a particular process and see what's going on.
>
> the problem i'm seeing with the script above, and variations on it, is
> that sometimes the output is in the right order, but sometimes all of
> stdout appears, followed by all of stderr.
>
>

