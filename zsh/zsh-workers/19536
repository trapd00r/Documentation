From zsh-workers-return-19536-mason-zsh=primenet.com.au@sunsite.dk Thu Mar 04 13:12:37 2004
Return-Path: <zsh-workers-return-19536-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 9282 invoked from network); 4 Mar 2004 13:12:35 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 4 Mar 2004 13:12:35 -0000
Received: (qmail 25531 invoked by alias); 4 Mar 2004 13:12:18 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 19536
Received: (qmail 25516 invoked from network); 4 Mar 2004 13:12:17 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 4 Mar 2004 13:12:17 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [62.189.77.219] by sunsite.dk (MessageWall 1.0.8) with SMTP; 4 Mar 2004 13:12:16 -0000
Received: by sonic.uk.dev.micromuse.co.uk (Postfix, from userid 1444)
	id F32101D0112; Thu,  4 Mar 2004 13:12:07 +0000 (GMT)
Subject: Re: 4.2.0-pre-2
From: Ibraheem Umaru-Mohammed <umarumohammed@btinternet.com>
To: Peter Stephenson <pws@csr.com>
Cc: Zsh hackers list <zsh-workers@sunsite.dk>
In-Reply-To: <4376.1078401692@csr.com>
References: <4376.1078401692@csr.com>
Content-Type: multipart/mixed; boundary="=-dKPcM8gmOxUKjoicMfZz"
Message-Id: <1078405927.18583.10.camel@sonic>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.4.5 
Date: Thu, 04 Mar 2004 13:12:07 +0000


--=-dKPcM8gmOxUKjoicMfZz
Content-Type: text/plain
Content-Transfer-Encoding: 7bit

On Thu, 2004-03-04 at 12:01, Peter Stephenson wrote:

> HAVE_CAP_GET_PROC is defined, but the shell isn't including appropriate
> headers, or has a completely different system for capabilities.
> 
> Could you please try:
> 1. Undefining HAVE_CAP_GET_PROC in config.h.
>

> 2. Grepping the system headers for cap_t or cap_get_proc.  Presumably
> it's there somewhere.  In that case searching for the right header
> during configuration should fix it.
> 
> Unless we can satisfactorily resolve 2. the only way forward will be
> to introduce an --enable-cap flag.  I have no way of testing this
> code at all.

Ok. I have included the capabilities.h which seems to have the "opaque"
definition for cap_t. Below is the result of running grep through
/usr/include:

[ibraheem@md000002s:~] $ find /usr/include -type f \
		-exec grep -E '(cap_t|cap_get_proc)' \
		/dev/null  {} \;
/usr/include/sys/capabilities.h: * cap_t
/usr/include/sys/capabilities.h: * cap_t is an opaque data type.  The
format used within the
/usr/include/sys/capabilities.h: * library and kernel is represented by
(struct __cap_t).
/usr/include/sys/capabilities.h:struct __cap_t {
/usr/include/sys/capabilities.h:typedef void * cap_t;
/usr/include/sys/capabilities.h:int kcap_get_proc (struct __cap_t *,
int);
/usr/include/sys/capabilities.h:int kcap_set_proc (struct __cap_t *,
int);
/usr/include/sys/capabilities.h:int kcap_is_null_set (cap_flag_t, struct
__cap_t *);
/usr/include/sys/capabilities.h:int kcap_is_subset (cap_flag_t, struct
__cap_t *, struct __cap_t *);
/usr/include/sys/capabilities.h:void kcap_exec (struct __cap_t *);
/usr/include/sys/cred.h:	struct	__cap_t cr_caps;	/* capabilities sets
64-bit and LDT */
/usr/include/sys/cred.h:	struct	__cap_t crx_caps;	/* capabilities sets
*/ 
/usr/include/sys/cred.h:void kcred_getcap (struct ucred *, struct
__cap_t *);
/usr/include/sys/cred.h:void kcred_setcap (struct ucred *, struct
__cap_t *);
/usr/include/pcap.h:typedef struct pcap pcap_t;
/usr/include/pcap.h:pcap_t	*pcap_open_live(char *, int, int, int, char
*);
/usr/include/pcap.h:pcap_t	*pcap_open_offline(const char *, char *);
/usr/include/pcap.h:void	pcap_close(pcap_t *);
/usr/include/pcap.h:int	pcap_loop(pcap_t *, int, pcap_handler, u_char
*);
/usr/include/pcap.h:int	pcap_dispatch(pcap_t *, int, pcap_handler,
u_char *);
/usr/include/pcap.h:	pcap_next(pcap_t *, struct pcap_pkthdr *);
/usr/include/pcap.h:int	pcap_stats(pcap_t *, struct pcap_stat *);
/usr/include/pcap.h:int	pcap_setfilter(pcap_t *, struct bpf_program *);
/usr/include/pcap.h:void	pcap_perror(pcap_t *, char *);
/usr/include/pcap.h:char	*pcap_geterr(pcap_t *);
/usr/include/pcap.h:int	pcap_compile(pcap_t *, struct bpf_program *,
char *, int,
/usr/include/pcap.h:int	pcap_freecode(pcap_t *, struct bpf_program *);
/usr/include/pcap.h:int	pcap_datalink(pcap_t *);
/usr/include/pcap.h:int	pcap_snapshot(pcap_t *);
/usr/include/pcap.h:int	pcap_is_swapped(pcap_t *);
/usr/include/pcap.h:int	pcap_major_version(pcap_t *);
/usr/include/pcap.h:int	pcap_minor_version(pcap_t *);
/usr/include/pcap.h:FILE	*pcap_file(pcap_t *);
/usr/include/pcap.h:int	pcap_fileno(pcap_t *);
/usr/include/pcap.h:pcap_dumper_t *pcap_dump_open(pcap_t *, const char
*);
[ibraheem@md000002s:~]

Hope this helps,

Cheers,

			--ibraheem

--=-dKPcM8gmOxUKjoicMfZz
Content-Disposition: attachment; filename=capabilities.h
Content-Transfer-Encoding: base64
Content-Type: text/x-c-header; name=capabilities.h; charset=iso-8859-1

LyogSUJNX1BST0xPR19CRUdJTl9UQUcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAqLw0KLyogVGhpcyBpcyBhbiBhdXRvbWF0aWNhbGx5IGdlbmVyYXRl
ZCBwcm9sb2cuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLw0KLyogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAqLw0KLyogYm9zNTIwIHNyYy9ib3Mva2VybmVsL3N5cy9jYXBhYmlsaXRpZXMuaCAxLjYgICAg
ICAgICAgICAgICAgICAgICAgICAgICAqLw0KLyogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLw0KLyogTGljZW5z
ZWQgTWF0ZXJpYWxzIC0gUHJvcGVydHkgb2YgSUJNICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAqLw0KLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLw0KLyogUmVzdHJpY3RlZCBNYXRlcmlhbHMg
b2YgSUJNICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLw0KLyog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAqLw0KLyogKEMpIENPUFlSSUdIVCBJbnRlcm5hdGlvbmFsIEJ1c2luZXNz
IE1hY2hpbmVzIENvcnAuIDIwMDAsMjAwMiAgICAgICAgICAqLw0KLyogQWxsIFJpZ2h0cyBSZXNl
cnZlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAq
Lw0KLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAqLw0KLyogVVMgR292ZXJubWVudCBVc2VycyBSZXN0cmljdGVk
IFJpZ2h0cyAtIFVzZSwgZHVwbGljYXRpb24gb3IgICAgICAgICAgICAqLw0KLyogZGlzY2xvc3Vy
ZSByZXN0cmljdGVkIGJ5IEdTQSBBRFAgU2NoZWR1bGUgQ29udHJhY3Qgd2l0aCBJQk0gQ29ycC4g
ICAgICAqLw0KLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAqLw0KLyogSUJNX1BST0xPR19FTkRfVEFHICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqLw0KDQojaWZu
ZGVmIF9IX1NZU19DQVANCiNkZWZpbmUJX0hfU1lTX0NBUA0KDQojaW5jbHVkZSA8c3lzL3R5cGVz
Lmg+DQoNCi8qDQogKiBjYXBfZmxhZ190DQogKg0KICogRmxhZyBmb3Igc2VsZWN0aW5nIHdoaWNo
IGNhcGFiaWxpdGllcyBzZXQgaXMgcmVxdWVzdGVkLg0KICovDQoNCiNkZWZpbmUJQ0FQX0VGRkVD
VElWRQkxDQojZGVmaW5lCUNBUF9JTkhFUklUQUJMRQkyDQojZGVmaW5lCUNBUF9QRVJNSVRURUQJ
Mw0KdHlwZWRlZiB1bnNpZ25lZCBpbnQgY2FwX2ZsYWdfdDsNCg0KLyoNCiAqIGNhcF90DQogKg0K
ICogY2FwX3QgaXMgYW4gb3BhcXVlIGRhdGEgdHlwZS4gIFRoZSBmb3JtYXQgdXNlZCB3aXRoaW4g
dGhlDQogKiBsaWJyYXJ5IGFuZCBrZXJuZWwgaXMgcmVwcmVzZW50ZWQgYnkgKHN0cnVjdCBfX2Nh
cF90KS4NCiAqLw0KDQpzdHJ1Y3QgX19jYXBfdCB7DQoJdWludDY0X3QgY2FwX2VmZmVjdGl2ZTsN
Cgl1aW50NjRfdCBjYXBfaW5oZXJpdGFibGU7DQoJdWludDY0X3QgY2FwX3Blcm1pdHRlZDsNCn07
DQp0eXBlZGVmIHZvaWQgKiBjYXBfdDsNCg0KLyoNCiAqIGNhcF9mbGFnX3ZhbHVlX3QNCiAqDQog
KiBBIGZsYWcgdG8gaW5kaWNhdGUgaWYgYSBjYXBhYmlsaXR5IHNob3VsZCBiZSBvciBpcyBzZXQg
b3IgY2xlYXJlZC4NCiAqLw0KDQojZGVmaW5lIENBUF9DTEVBUgkwDQojZGVmaW5lCUNBUF9TRVQJ
CTENCnR5cGVkZWYgdW5zaWduZWQgaW50IGNhcF9mbGFnX3ZhbHVlX3Q7DQoNCi8qDQogKiBjYXBf
dmFsdWVfdA0KICoNCiAqIFRoZSBzeW1ib2xpYyBjb25zdGFudHMgdXNlZCB0byByZXByZXNlbnQg
Y2FwYWJpbGl0aWVzLg0KICovDQoNCnR5cGVkZWYgaW50IGNhcF92YWx1ZV90Ow0KDQojZGVmaW5l
CUNBUF9QUk9QQUdBVEUJICAgMQkJLyogaW5oZXJpdCB3aXRob3V0IGZpbGUgY2FwYWJpbGl0aWVz
ICovDQojZGVmaW5lCUNBUF9QUk9QT0dBVEUJICAgMQkJLyogZGVwcmVjYXRlZCBzcGVsbGluZyAq
Lw0KI2RlZmluZQlDQVBfTlVNQV9BVFRBQ0gJICAgMgkJLyogTlVNQSBhdHRhY2htZW50IGNhcGFi
aWxpdHkgKi8NCiNkZWZpbmUgQ0FQX0JZUEFTU19SQUNfVk1NIDMJICAgICAgICAvKiBsYXJnZSBw
YWdlIHVzZSBjYXBhYmlsaXR5ICovDQoNCiNkZWZpbmUgQ0FQX01BWElNVU0gQ0FQX0JZUEFTU19S
QUNfVk1NCS8qIEhpZ2hlc3QgdmFsdWVkIGNhcGFiaWxpdHkgKi8NCg0KLyoNCiAqIEtlcm5lbCBm
dW5jdGlvbnMgYW5kIGV4cG9ydGVkIHNlcnZpY2VzDQogKi8NCg0KI2lmZGVmIF9LRVJORUwNCg0K
aW50IGtjYXBfZ2V0X3Byb2MgKHN0cnVjdCBfX2NhcF90ICosIGludCk7DQppbnQga2NhcF9zZXRf
cHJvYyAoc3RydWN0IF9fY2FwX3QgKiwgaW50KTsNCmludCBrY2FwX2lzX3NldF9jciAoaW50LCBz
dHJ1Y3QgdWNyZWQgKik7DQppbnQga2NhcF9pc19zZXQgKGludCk7DQoNCiNpZiBkZWZpbmVkKF9f
NjRCSVRfS0VSTkVMKSB8fCBkZWZpbmVkKF9fTERUX18pDQppbnQga2NhcF9pc19udWxsX3NldCAo
Y2FwX2ZsYWdfdCwgc3RydWN0IF9fY2FwX3QgKik7DQppbnQga2NhcF9pc19zdWJzZXQgKGNhcF9m
bGFnX3QsIHN0cnVjdCBfX2NhcF90ICosIHN0cnVjdCBfX2NhcF90ICopOw0Kdm9pZCBrY2FwX2V4
ZWMgKHN0cnVjdCBfX2NhcF90ICopOw0KI2Vsc2UNCmludCBrY2FwX2lzX251bGxfc2V0IChjYXBf
ZmxhZ190LCBzaG9ydCAqKTsNCmludCBrY2FwX2lzX3N1YnNldCAoY2FwX2ZsYWdfdCwgc2hvcnQg
Kiwgc2hvcnQgKik7DQp2b2lkIGtjYXBfZXhlYyAoc2hvcnQgKik7DQojZW5kaWYJLyogZGVmaW5l
ZChfXzY0QklUX0tFUk5FTCkgfHwgZGVmaW5lZChfX0xEVF9fKSAqLw0KDQojZW5kaWYJLyogX0tF
Uk5FTCAqLw0KDQojZW5kaWYJLyogX0hfU1lTX0NBUCAqLw0K

--=-dKPcM8gmOxUKjoicMfZz--

