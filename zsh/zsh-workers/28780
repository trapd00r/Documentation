From zsh-workers-return-28780-mason-zsh=primenet.com.au@zsh.org Sat Feb 19 23:11:21 2011
Return-Path: <zsh-workers-return-28780-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29646 invoked by alias); 19 Feb 2011 23:11:21 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 28780
Received: (qmail 27790 invoked from network); 19 Feb 2011 23:11:10 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-0.4 required=5.0 tests=BAYES_00,FAKE_REPLY_C
	autolearn=ham version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at spf.stack.nl designates 131.155.140.107 as permitted sender)
Date: Sun, 20 Feb 2011 00:05:40 +0100
From: Jilles Tjoelker <jilles@stack.nl>
To: Zsh Hackers' List <zsh-workers@zsh.org>
Subject: Re: sh compatibility issue
Message-ID: <20110219230540.GA81416@stack.nl>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20110218103012.27fd1869@pwslap01u.europe.root.pri>
User-Agent: Mutt/1.5.21 (2010-09-15)

> !(...) without space

I think the POSIX spec requires this to work, but that may not be
intentional. '(' is an operator and therefore it does not need a space
between it and other characters (except to disambiguate between two
adjacent operators and one two-character operator). It may not be
intentional because it conflicts with ksh extended pattern matching.

More generally, this rule also means that things like
  while(true)do(pwd)done
do not need any spaces. Although this example is contrived, I can
imagine there are real scripts that zsh fails to parse because of this;
the other shells I tried execute it correctly.

The situation for '!{' is different. '{' is a reserved word and
therefore it is not recognized. Instead, this describes a utility (or
alias) that probably does not exist. I do not recommend making special
allowances for it.

On a related note, here is another quite insidious sh compatibility
issue:
  sh -c 'exec </nonexistent/a; echo wrong'
This should not print "wrong" because exec is a special builtin and
redirection errors on special builtins are fatal. Most shells get this
right nowadays (bash only in POSIX mode) but zsh gets it wrong. Even
  set -o posixbuiltins
does not help.

-- 
Jilles Tjoelker

