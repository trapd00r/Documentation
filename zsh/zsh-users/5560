From zsh-users-return-5560-mason-zsh=primenet.com.au@sunsite.dk Thu Dec 05 13:31:57 2002
Return-Path: <zsh-users-return-5560-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 21721 invoked from network); 5 Dec 2002 13:31:57 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 5 Dec 2002 13:31:57 -0000
Received: (qmail 13148 invoked by alias); 5 Dec 2002 13:31:36 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 5560
Received: (qmail 13132 invoked from network); 5 Dec 2002 13:31:34 -0000
Date: Thu, 5 Dec 2002 14:31:33 +0100
From: Phil Pennock <Phil.Pennock@globnix.org>
To: zsh-users@sunsite.dk
Subject: case matching to element in array?
Message-ID: <20021205143133.A29978@globnix.org>
Mail-Followup-To: zsh-users@sunsite.dk
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
X-Disclaimer: Any views expressed in this message, where not explicitly
	attributed otherwise, are mine and mine alone.  Such views
	do not necessarily coincide with those of any organisation
	or company with which I am or have been affiliated.

I'm probably missing something really obvious here.  :^/  zsh-4.0.6.

As part of a shell function, I need to have one case occur if the
parameter matches an element in an array variable.  This can trivially
be done with if/else/endif.

I'm actually extending an existing function, which already uses "case"
and has several other situations handled.  Changing a dispatch-on-value
from "case" to "if" feels unclean.  I'll use an "if" for now, since I
need to get this done quickly, but I'm hoping there's a better method.

What am I missing in the following example?

-----------------------------< cut here >-------------------------------
function check {
	typeset -aU fred_list
	fred_list=(alpha beta gamma delta)

	case ${(L)1} in
		(foo)
			print Foo
			;;
		(${(j:|:)fred_list})
			print In List of Fred
			;;
		(*)
			print Default
			;;
	esac
}

% check foO
Foo
% check asdf
Default
% check beta
Default
-----------------------------< cut here >-------------------------------

Is there any way to construct the pattern for a case-match from a
variable?  Or is the pattern constructed, but the '|' splitting done
first, so that I'm ending up with a pattern with '|' in it?

If there's not a current method of doing this cleanly, then is it a
reasonable request to ask that the () matches in "case" statements be
extended to allow array contents, with an implicit '|' between the
elements of the array?  This would have the advantage of providing an
easy way to match on a string containing a '|', since you could do:

 set -A foo 'a|b'
 case $bar in
  ($foo) print ni ;;
 esac

which would avoid any need for special escaping.

At least, in the docs which I'm reading now, array-contents aren't
mentioned as a possibility and it doesn't seem to "work" as I describe.

If I've missed something, please enlighten me.

Thanks,
-- 
"We've got a patent on the conquering of a country through the use of force.
 We believe in world peace through extortionate license fees." -Bluemeat

