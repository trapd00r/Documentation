From zsh-workers-return-21811-mason-zsh=primenet.com.au@sunsite.dk Mon Oct 03 14:52:00 2005
Return-Path: <zsh-workers-return-21811-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 3577 invoked from network); 3 Oct 2005 14:51:57 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 3 Oct 2005 14:51:57 -0000
Received: (qmail 86861 invoked from network); 3 Oct 2005 14:51:51 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 3 Oct 2005 14:51:51 -0000
Received: (qmail 7037 invoked by alias); 3 Oct 2005 14:51:49 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 21811
Received: (qmail 7028 invoked from network); 3 Oct 2005 14:51:48 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 3 Oct 2005 14:51:48 -0000
Received: (qmail 86569 invoked from network); 3 Oct 2005 14:51:48 -0000
Received: from vms046pub.verizon.net (206.46.252.46)
  by a.mx.sunsite.dk with SMTP; 3 Oct 2005 14:51:46 -0000
Received: from candle.brasslantern.com ([71.116.81.225])
 by vms046.mailsrvcs.net
 (Sun Java System Messaging Server 6.2 HotFix 0.04 (built Dec 24 2004))
 with ESMTPA id <0INS00GTCHA86DME@vms046.mailsrvcs.net> for
 zsh-workers@sunsite.dk; Mon, 03 Oct 2005 09:51:46 -0500 (CDT)
Received: from candle.brasslantern.com (IDENT:schaefer@localhost [127.0.0.1])
	by candle.brasslantern.com (8.12.11/8.12.11) with ESMTP id j93EphpG004431	for
 <zsh-workers@sunsite.dk>; Mon, 03 Oct 2005 07:51:43 -0700
Received: (from schaefer@localhost)	by candle.brasslantern.com
 (8.12.11/8.12.11/Submit) id j93EpgNi004430	for zsh-workers@sunsite.dk; Mon,
 03 Oct 2005 07:51:43 -0700
Date: Mon, 03 Oct 2005 14:51:41 +0000
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: Exception handling and "trap" vs. TRAPNAL()
In-reply-to: <20051003095738.3de5a059.pws@csr.com>
To: zsh-workers@sunsite.dk
Message-id: <1051003145142.ZM4427@candle.brasslantern.com>
MIME-version: 1.0
X-Mailer: Z-Mail (5.0.0 30July97)
Content-type: text/plain; charset=iso-8859-1
Content-transfer-encoding: quoted-printable
References: <20050929200741.GA1156@DervishD>
	<20050930124130.45eb0463.pws@csr.com>	<20051001153756.GA12183@DervishD>
	<1051001183818.ZM27904@candle.brasslantern.com>
	<20051001202856.GA134@DervishD>
	<1051002044052.ZM28373@candle.brasslantern.com>
	<20051002190940.437F9866F@pwstephenson.fsnet.co.uk>
	<1051002195518.ZM2163@candle.brasslantern.com>	<20051002230027.GA194@DervishD>
	<1051003013758.ZM3107@candle.brasslantern.com>
	<20051003095738.3de5a059.pws@csr.com>
Comments: In reply to Peter Stephenson <pws@csr.com>
 "Re: Exception handling and "trap" vs. TRAPNAL()" (Oct  3,  9:57am)
X-Spam-Checker-Version: SpamAssassin 3.0.4 (2005-06-05) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham 
	version=3.0.4

On Oct 3,  9:57am, Peter Stephenson wrote:
} Subject: Re: Exception handling and "trap" vs. TRAPNAL()
}
} Bart Schaefer <schaefer@brasslantern.com> wrote:
} > In zsh prior to 4.1.something, an error condition in an inline trap
} > *WAS* passed through to the calling context.
} =

} it doesn't look like the change was intentional, even though arguably i=
t
} should be the way it now is.

It could also be argued that, if the trap should behave like an "eval",
it ought to set $? =3D 1 when an error occurs inside the trap (but still
not cause an interrupt condition).  The example of bash2 contradicts
that position.  Can anyone who is reading this try ksh?
 =

} > E.g., in bash2 a global INT trap does not prevent the function from
} > being interrupted by a SIGINT; instead it handles the signal in the
} > context where the trap command was run.  Similarly an ERR trap stops
} > being tripped during the body of the function, but remains in effect
} =

} This is presumably implementable without too much horror, since we
} can already save and restore traps.

It's worse than just saving and restoring traps.  It requires treating a
function call like a subshell, in that both the function and the caller
get the SIGINT, the function is interrupted, and the caller's trap is
trigged.

} It would probably now need to be an option, though.

Yes.

} > The zsh "always" syntax could -- and perhaps even should -- have been=

} > implemented equally well as a new syntax for the "eval" builtin, much=

} > like Perl's "eval" can be followed by a curly-bracketed block instead=

} > of a string.
} =

} That's not particularly natural in zsh.

I didn't really mean that the syntax would be exactly like Perl's, just
that the behavior would be.  If you wanted to implement something as
close as possible to "always" in an older version of zsh, you'd do
something like:

    eval "print this is the try block"
    TRY_ERR=3D$?
    print "this is the always block"
    if (( TRY_ERR =3D=3D 0 ))
    then
      print "this is what comes after the always block"
    else
      # This is a stupid way to reset $? without exiting from the
      # parent shell script when we aren't in a function body.
      ( return TRY_ERR )
    fi

} > Given all of this plus the bash2 behavior, I'm inclined to add a few
} > more words to the documentation and apply *neither* of the patches
} > from workers/21804.  Further, *IF* we were going to choose one of
} > those patches to apply, I'd say it should be the first one, to make
} > TRAPNAL ignore errors too.
} =

} It looks like the reason for the error to be propagated is receding int=
o
} history and I'd be perfectly happy with that patch.

As I said, I'm actually leaning towards no patch at all.  However, the
reason for propagating the error isn't actually receding, because Ra=FAl
says he needs that behavior, and given "always" it really is useful.

Here's a possible compromise:  Use my second patch, but propagate the
error if and only if we're in the try-block of an always-construct.
That's guaranteed not to break old code, and continues to behave like
bash2 in the absence of "always".  Can dotrapargs() determine that it
is in "always" context without too much trouble?

