From zsh-workers-return-10708-mason-zsh=primenet.com.au@sunsite.auc.dk Wed Apr 12 16:07:08 2000
Return-Path: <zsh-workers-return-10708-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1972 invoked from network); 12 Apr 2000 16:07:06 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 12 Apr 2000 16:07:06 -0000
Received: (qmail 19041 invoked by alias); 12 Apr 2000 16:06:46 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 10708
Received: (qmail 19012 invoked from network); 12 Apr 2000 16:06:43 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1000412160634.ZM12491@candle.brasslantern.com>
Date: Wed, 12 Apr 2000 16:06:33 +0000
In-Reply-To: <200004120851.KAA07258@beta.informatik.hu-berlin.de>
Comments: In reply to Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
        "Re: Question" (Apr 12, 10:51am)
References: <200004120851.KAA07258@beta.informatik.hu-berlin.de>
X-Mailer: Z-Mail (5.0.0 30July97)
To: zsh-workers@sunsite.auc.dk
Subject: Re: Question
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Apr 12, 10:51am, Sven Wischnowsky wrote:
} Subject: Re: Question
}
} > (1)  Format up the completion listing as if it were going to shout, but
} > stuff it all into a string instead.  (That's probably happening already,
} > I didn't look.)  Then point a parameter at that string and invoke vared.
} > ZLE already takes care of paging up and down.
} 
} The first one is a real problem that can't be avoided with this
} solution: the colouring that's possible with complist would be lost.

I suppose so.

} I'm not sure what could
} happen when we allow something like vared (with possible user defined
} widgets being called) while the completion list is displayed.

Yes, I wondered about the warnings that cna be printed about not using
zle recursively.  You might have to save and restore the whole state of
the completion system to be entirely safe, which could get ugly.
 
} > (2) Use a "select x in ..." loop over the values.  As of some while ago,
} > select already knows how to page through screenfuls of choices.  You
} > can't go backwards, but it cycles to the top after reaching the bottom.
} 
} I never liked select and fiddling with numbers in completion lists
} seems weird to me. But then: `select already knows how to page' and `I
} don't think we should be "in the business" of implementing pagers'.

There's a difference between pausing after N lines and implementing a
pager.  A pager implies being able to scroll one or a few lines at a
time, not by whole screenfuls, and being able to move backwards as well
as forwards (or at least that's what it implies nowadays).

Is the following a pager?

	integer i=0
	while read -E
	do
	  (( ++i == LINES-2 )) &&
	    { i=0; read -q '?Continue? [no] ' </dev/tty || break }
	done

(The above reveals a possible bug:  "read -q" prints a prompt only if
standard input is a TTY, but it always reads from the TTY if there is
one.  So I had to throw in that redirection.)

} A final thought: complist is intended as the module to allow fancy
} completion list handling... would it be acceptable to add this
} scrolling stuff only to it?

If it's getting added, that's the place for it.

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

