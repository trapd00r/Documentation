From zsh-workers-return-10237-mason-zsh=primenet.com.au@sunsite.auc.dk Fri Mar 24 21:05:05 2000
Return-Path: <zsh-workers-return-10237-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24471 invoked from network); 24 Mar 2000 21:05:03 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 24 Mar 2000 21:05:03 -0000
Received: (qmail 20711 invoked by alias); 24 Mar 2000 21:04:57 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 10237
Received: (qmail 20694 invoked from network); 24 Mar 2000 21:04:56 -0000
To: zsh-workers@sunsite.auc.dk (Zsh hackers list)
Subject: endianness of wordcode
Date: Thu, 23 Mar 2000 21:04:32 +0000
From: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Message-Id: <E12YbFr-0003N4-00.2000-03-24-21-04-27@mail12.svr.pol.co.uk>

I'm a little doubtful about the necessity of having doubled wordcode files
for different endianness.  It's only useful when sharing files across
heterogeneous networks --- you wouldn't distribute wordcode files, you'd
compile them in situ (or at least I would).  I wonder whether it would be
better always to dump in the native format, check if the order is swapped
when reading, and if so swap it back on the fly.  That's a fairly trivial
operation compared with all the rest of the stuff zsh is going to be doing
with the extracted code.

In fact, the code I stole as the basis for the pattern-matching equivalent
of wordcode explicitly reconstructs integers by shifting and or'ing,
probably without even the intention of making it machine-independent since
the compiled patterns were for internal use.

I think the zcompile documentation, and maybe other places where wordcode
is mentioned, could be friendlier: it introduces the (non-existent?) word
`wordcode' with no explanation, and you really don't even need to know that
it exists, only that there is a black box which produces versions of
functions that load faster and maybe save memory.

-- 
Peter Stephenson <pws@pwstephenson.fsnet.co.uk>

