From schaefer@candle.brasslantern.com Wed Jul 17 07:54:03 1996
Received: from eplet.mira.net.au (eplet.mira.net.au [203.9.190.17]) by melb.werple.net.au (8.7.5/8.7.3/2) with ESMTP id HAA13440 for <mason@werple.mira.net.au>; Wed, 17 Jul 1996 07:54:01 +1000 (EST)
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by eplet.mira.net.au (8.7.5/8.7.3) with ESMTP id HAA10260 for <mason@werple.mira.net.au>; Wed, 17 Jul 1996 07:21:02 +1000 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id RAA08782; Tue, 16 Jul 1996 17:12:48 -0400 (EDT)
Resent-Date: Tue, 16 Jul 1996 17:04:38 -0400 (EDT)
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <9607161405.ZM1099@candle.brasslantern.com>
Date: Tue, 16 Jul 1996 14:05:18 -0700
In-Reply-To: "Colin Holmes" <colin@fuligin.loni.ucla.edu>
        "Re: [[ -x ]] and root" (Jul 16, 10:57am)
References: <9607161057.ZM17052@fuligin.loni.ucla.edu>
Reply-To: schaefer@nbn.com
X-Mailer: Z-Mail (3.2.1 24feb96 Caldera)
To: "Colin Holmes" <colin@fuligin.loni.ucla.edu>, zsh-users@math.gatech.edu
Subject: Re: [[ -x ]] and root
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Resent-Message-ID: <"19iL9.0.W72.bF0xn"@euclid>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/302
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu
Content-Length: 2119
Status: O

On Jul 16, 10:57am, Colin Holmes wrote:
> Subject: Re: [[ -x ]] and root
> Hi again,
> 
>  I started this thread looking for a way to do a [[ -x file]] while
> running as root.  I got responses from this list (Zefram, mostly) to
> the effect that access() was improperly functioning under Irix 5.3, as
> it was under Linux.  I posted to comp.sys.sgi.bug to find out what they
> thought and here are the more useful results....
> 
> Response 1:
> The access(2) system call is intended for use by setuid
> executables, trying to determine if the real id of the process,
> as opposed to the effective, could access a particular file.
> 
> Implementations of test -x should stat and look at mode bits.
> 
> Response 2:
> It's not a problem, it's the way it's designed and supposed
> to work.

Response 1 is correct as far as it goes, but if response 2 is claiming
that access(X_OK) is ever intended to return 0 for a file that has NONE
of the execute bits set, then I'd like to see more of his explanation.
It almost sounds like they didn't understand the question.

It is definitely the case that access() can return misleading results
if geteuid() != getuid() or (on some systems, including IRIX) if
getegid() != getgid().  However, the results ought to be correct for
at least one of the IDs.

Using stat() and examining mode bits is possible, but on systems that
support supplementary groups you have to get the group ID of the file
and the list of supplemental groups of the process, and then walk the
list to see if the file's group is present.  It's messy to #ifdef for
complete portability, too.

As a workaround in your zsh scripts, glob qualifiers [which do use
stat()] can eliminate files that do not have an execute bit set.

	executable() {
	    setopt localoptions nullglob
	    local x ret=1 files=(${^*}(xEX))
	    for x in $files
	    do [[ -x $x ]] && echo $x && ret=0
	    done
	    return $ret
	}

As a quick hack, you can probably replace [[ -x foo ]] in your scripts
with [[ -x $(setopt nobadpattern; echo foo(xEX)) ]].  It's unlikely
that a file with "(xEX)" in its name is going to be encountered.


