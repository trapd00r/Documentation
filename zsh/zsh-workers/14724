From zsh-workers-return-14724-mason-zsh=primenet.com.au@sunsite.dk Tue Jun 05 21:16:50 2001
Return-Path: <zsh-workers-return-14724-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 26560 invoked from network); 5 Jun 2001 21:16:48 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 5 Jun 2001 21:16:48 -0000
Received: (qmail 10771 invoked by alias); 5 Jun 2001 21:16:32 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14724
Received: (qmail 10758 invoked from network); 5 Jun 2001 21:16:31 -0000
Date: Tue, 5 Jun 2001 14:16:19 -0700
From: Jos Backus <josb@cncdsl.com>
To: zsh-workers@sunsite.dk
Subject: Re: 4.0.1: problem with sourcing on Solaris
Message-ID: <20010605141619.A36532@lizzy.bugworks.com>
Reply-To: Jos Backus <josb@cncdsl.com>
Mail-Followup-To: zsh-workers@sunsite.dk
References: <20010604143759.A91833@lizzy.bugworks.com> <1010605061126.ZM4201@candle.brasslantern.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
In-Reply-To: <1010605061126.ZM4201@candle.brasslantern.com>; from schaefer@candle.brasslantern.com on Tue, Jun 05, 2001 at 06:11:04AM +0000

Here's a clue: for some reason, after re-running configure (because I changed a
couple of entries in config.modules), BROKEN_KILL_ESRCH got define'd. When
defined, I see the problem; when I undefine BROKEN_KILL_ESRCH (the default),
the shell works fine. I'm wondering how this could end up being define'd...

On Tue, Jun 05, 2001 at 06:11:04AM +0000, Bart Schaefer wrote:
> } 29084:      Received signal #2, SIGINT, in sigsuspend() [caught]
> } 29084:  sigsuspend(0xFFBEF000)                          Err#4 EINTR
> 
> It would have been nice to see what came after that, but my guess is
> that `errflag' became true and we exited the loop that way.  The real
> question still is, why didn't we see the ESRCH error from kill(pid, 0)?

29084:  sigprocmask(SIG_BLOCK, 0x000DABE0, 0x000DABFC)  = 0
29084:  sigprocmask(SIG_SETMASK, 0xFFBEEBD8, 0xFFBEEB48) = 0
29084:  setcontext(0xFFBEECE8)
29084:  sigprocmask(SIG_BLOCK, 0x000DABE0, 0x000DABFC)  = 0
29084:  sigprocmask(SIG_UNBLOCK, 0x000DABE0, 0x000DABFC) = 0
29084:  llseek(11, 0, SEEK_CUR)                         = 13
29084:  close(11)                                       = 0
29084:  sigprocmask(SIG_BLOCK, 0x000DABE0, 0x000DABFC)  = 0
29084:  sigprocmask(SIG_UNBLOCK, 0x000DABE0, 0x000DABFC) = 0
29084:  ioctl(10, TIOCGSID, 0xFFBEF964)                 = 0
29084:  getsid(0)                                       = 9149
29084:  ioctl(10, TIOCSPGRP, 0xFFBEFA10)                = 0
29084:  fstat64(0, 0xFFBEF988)                          = 0
29084:  fcntl(0, F_GETFL, 0x00000000)                   = 2
29084:  fstat64(0, 0xFFBEF820)                          = 0
29084:  time()                                          = 991690436
29084:  time()                                          = 991690436
29084:  sigaction(SIGINT, 0xFFBEF988, 0x00000000)       = 0
29084:  sigaction(SIGINT, 0xFFBEF5E0, 0x00000000)       = 0
29084:  getuid()                                        = 3387 [3387]
29084:  ioctl(10, FIONREAD, 0xFFBEF644)                 = 0
29084:  ioctl(10, TIOCGSID, 0xFFBEF50C)                 = 0
29084:  getsid(0)                                       = 9149
29084:  ioctl(10, TIOCSPGRP, 0xFFBEF5B8)                = 0
29084:  ioctl(10, TCSETSW, 0xFFBEF648)                  = 0
29084:  write(10, "\r1B [ m1B [ m1B [ m1B [".., 20)     = 20
29084:  write(10, "1B [ K", 3)                          = 3
29084:  read(10, 0xFFBEF4CB, 1)         (sleeping...)
29084:  read(10, "04", 1)                               = 1
29084:  write(10, "\r\n", 2)                            = 2
29084:  alarm(0)                                        = 0
29084:  ioctl(10, TCSETSW, 0x000DAB04)                  = 0
29084:  getpid()                                        = 29084 [29083]
29084:  llseek(0, 0, SEEK_CUR)                          = 6483602
29084:  _exit(1)

Thanks,
-- 
Jos Backus                 _/  _/_/_/        "Modularity is not a hack."
                          _/  _/   _/                -- D. J. Bernstein
                         _/  _/_/_/             
                    _/  _/  _/    _/
josb@cncdsl.com     _/_/   _/_/_/            use Std::Disclaimer;

