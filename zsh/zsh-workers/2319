From zsh-workers-request@euclid.skiles.gatech.edu  Mon Nov  4 06:08:06 1996
Return-Path: zsh-workers-request@euclid.skiles.gatech.edu
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by coral.primenet.com.au (8.7.5/8.7.3) with ESMTP id GAA27850 for <mason@primenet.com.au>; Mon, 4 Nov 1996 06:08:03 +1100 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id NAA08958; Sun, 3 Nov 1996 13:40:55 -0500 (EST)
Resent-Date: Sun, 3 Nov 1996 13:40:55 -0500 (EST)
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <961103104434.ZM27585@candle.brasslantern.com>
Date: Sun, 3 Nov 1996 10:44:34 -0800
In-Reply-To: "C. v. Stuckrad" <stucki@math.fu-berlin.de>
        "Re: Strange coredump in new zsh-3.0.1 on Sunos4.1.3 (FIXED)" (Nov  3,  4:37pm)
References: <Pine.GSO.3.95.961103162221.8490C-100000@petzval>
Reply-To: schaefer@nbn.com
X-Mailer: Z-Mail (4.0b.820 20aug96)
To: "C. v. Stuckrad" <stucki@math.fu-berlin.de>
Subject: Re: Strange coredump in new zsh-3.0.1 on Sunos4.1.3 (FIXED)
Cc: Zsh workers list <zsh-workers@math.gatech.edu>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Resent-Message-ID: <"EmxRA3.0.uB2.sSEVo"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/2319
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

On Nov 3,  4:37pm, C. v. Stuckrad wrote:
} Subject: Re: Strange coredump in new zsh-3.0.1 on Sunos4.1.3 (FIXED)
}
} OK, setting OPEN_MAX to 64 (and applying Zoltan's fix too)
} did get rid of the bug. 

I'd be curious to know if you tried the two fixes separately.  I don't
see how decrementing max_zsh_fd below zero in that loop could possibly
change it to 16777234 ( == (1<<24)+18, which is a lot of decrements);
but taking the bytes in 16777234 as an array of chars (char fdtable[])
yields "\01\0\0\021" which looks suspiciously like what you'd get if
you started with max_zsh_fd == 18 and stuffed 1 into the first byte.

} BUT, it might be something totally different than I thought, NOT 'screen'
} but 'ssh' (sshd), The secure-shell- programs from Tatu Ylonen
} do open and pass on a filedescriptor to all their descendants.
} 
} This filedescriptor is 'constructed' by a test-program, and seems to
} somehow get a definite number. And I saw this descriptor being the LAST
} POSSIBLE Number (64!).

That shouldn't be a problem, and in fact the reason it shouldn't be one
is *because* it's the last possible descriptor; zsh should never find
out that it exists, because open/dup/etc. should always return the lowest
available descriptor (which should be something between 3 and 63).  The
fdtable[] only includes descriptors that zsh itself has opened.

} So zsh on screen on sshd might have died on that ...

Easy enough to test; run the unpatched zsh under ssh without screen, and
then under screen without ssh.

-- 
Bart Schaefer                             Brass Lantern Enterprises
http://www.well.com/user/barts            http://www.nbn.com/people/lantern

