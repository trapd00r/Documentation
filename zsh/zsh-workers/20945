From zsh-workers-return-20945-mason-zsh=primenet.com.au@sunsite.dk Mon Mar 07 11:02:37 2005
Return-Path: <zsh-workers-return-20945-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1176 invoked from network); 7 Mar 2005 11:02:36 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 7 Mar 2005 11:02:36 -0000
Received: (qmail 30455 invoked from network); 7 Mar 2005 11:02:30 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 7 Mar 2005 11:02:30 -0000
Received: (qmail 19956 invoked by alias); 7 Mar 2005 11:02:28 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 20945
Received: (qmail 19942 invoked from network); 7 Mar 2005 11:02:27 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 7 Mar 2005 11:02:27 -0000
Received: (qmail 30147 invoked from network); 7 Mar 2005 11:02:24 -0000
Received: from mailhost1.csr.com (HELO MAILSWEEPER01.csr.com) (81.105.217.43)
  by a.mx.sunsite.dk with SMTP; 7 Mar 2005 11:02:19 -0000
Received: from exchange03.csr.com (unverified [10.100.137.60]) by MAILSWEEPER01.csr.com
 (Content Technologies SMTPRS 4.3.12) with ESMTP id <T6f8915589e0a6c8d01628@MAILSWEEPER01.csr.com> for <zsh-workers@sunsite.dk>;
 Mon, 7 Mar 2005 11:00:47 +0000
Received: from news01.csr.com ([10.103.143.38]) by exchange03.csr.com with Microsoft SMTPSVC(5.0.2195.6713);
	 Mon, 7 Mar 2005 11:03:44 +0000
Received: from news01.csr.com (localhost.localdomain [127.0.0.1])
	by news01.csr.com (8.13.1/8.12.11) with ESMTP id j27B2N74006176
	for <zsh-workers@sunsite.dk>; Mon, 7 Mar 2005 11:02:23 GMT
Received: from csr.com (pws@localhost)
	by news01.csr.com (8.13.1/8.13.1/Submit) with ESMTP id j27B2Nma006173
	for <zsh-workers@sunsite.dk>; Mon, 7 Mar 2005 11:02:23 GMT
Message-Id: <200503071102.j27B2Nma006173@news01.csr.com>
X-Authentication-Warning: news01.csr.com: pws owned process doing -bs
To: zsh-workers@sunsite.dk
Subject: Re: [aj@andaco.de: Bug#297893: zsh-beta: FTBFS (amd64/gcc-4.0): static declaration of 'cmdstr' follows non-static declaration] 
In-reply-to: <20050303163138.GA23262@scowler.net> 
References: <20050303163138.GA23262@scowler.net>
Date: Mon, 07 Mar 2005 11:02:23 +0000
From: Peter Stephenson <pws@csr.com>
X-OriginalArrivalTime: 07 Mar 2005 11:03:44.0115 (UTC) FILETIME=[5401F430:01C52305]
X-Spam-Checker-Version: SpamAssassin 3.0.2 on a.mx.sunsite.dk
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=6.0 tests=AWL,BAYES_00 autolearn=ham 
	version=3.0.2
X-Spam-Hits: -2.5

Clint Adams wrote:
> zle_tricky's exporting a cmdstr..

I thought I'd replied to this, but it seems not.

The completion code exports some funny things.  There used to be an
exported variable called "c" until I persuaded it not to.

In this case renaming the statics is easier.

Index: Src/Zle/zle_misc.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Zle/zle_misc.c,v
retrieving revision 1.20
diff -u -r1.20 zle_misc.c
--- Src/Zle/zle_misc.c	24 Feb 2005 21:11:44 -0000	1.20
+++ Src/Zle/zle_misc.c	3 Mar 2005 16:55:37 -0000
@@ -742,9 +742,9 @@
  * cmdstr is the buffer used for execute-named-command converted
  * to a metafied multibyte string.
  */
-static char *cmdstr;
-static LinkList cmdll;
-static int cmdambig;
+static char *namedcmdstr;
+static LinkList namedcmdll;
+static int namedcmdambig;
 
 /**/
 static void
@@ -753,11 +753,11 @@
     int l;
     Thingy t = (Thingy) hn;
 
-    if(strpfx(cmdstr, t->nam)) {
-	addlinknode(cmdll, t->nam);
-	l = pfxlen(peekfirst(cmdll), t->nam);
-	if (l < cmdambig)
-	    cmdambig = l;
+    if(strpfx(namedcmdstr, t->nam)) {
+	addlinknode(namedcmdll, t->nam);
+	l = pfxlen(peekfirst(namedcmdll), t->nam);
+	if (l < namedcmdambig)
+	    namedcmdambig = l;
     }
 
 }
@@ -808,7 +808,7 @@
 		int zmultsav = zmult;
 
 		zmult = 1;
-		listlist(cmdll);
+		listlist(namedcmdll);
 		showinglist = 0;
 		zmult = zmultsav;
 	    }
@@ -818,7 +818,7 @@
 		int zmultsav = zmult;
 
 		zmult = 1;
-		listlist(cmdll);
+		listlist(namedcmdll);
 		showinglist = 0;
 		zmult = zmultsav;
 	    }
@@ -860,10 +860,10 @@
 		Thingy r;
 		unambiguous:
 		*ptr = 0;
-		cmdstr = zlelineasstring(cmdbuf, len, 0, NULL, NULL, 0);
-		r = rthingy(cmdstr);
-		free(cmdstr);
-		cmdstr = NULL;
+		namedcmdstr = zlelineasstring(cmdbuf, len, 0, NULL, NULL, 0);
+		r = rthingy(namedcmdstr);
+		free(namedcmdstr);
+		namedcmdstr = NULL;
 		if (!(r->flags & DISABLED)) {
 		    unrefthingy(r);
 		    statusline = NULL;
@@ -886,16 +886,16 @@
 		cmd == Th(z_expandorcomplete) || cmd == Th(z_completeword) ||
 		cmd == Th(z_expandorcompleteprefix) || cmd == Th(z_vicmdmode) ||
 		cmd == Th(z_acceptline) || lastchar == ' ' || lastchar == '\t') {
-		cmdambig = 100;
+		namedcmdambig = 100;
 
-		cmdll = newlinklist();
+		namedcmdll = newlinklist();
 
-		cmdstr = zlelineasstring(cmdbuf, len, 0, NULL, NULL, 0);
+		namedcmdstr = zlelineasstring(cmdbuf, len, 0, NULL, NULL, 0);
 		scanhashtable(thingytab, 1, 0, DISABLED, scancompcmd, 0);
-		free(cmdstr);
-		cmdstr = NULL;
+		free(namedcmdstr);
+		namedcmdstr = NULL;
 
-		if (empty(cmdll)) {
+		if (empty(namedcmdll)) {
 		    feep = 1;
 		    if (listed)
 			clearlist = listshown = 1;
@@ -906,12 +906,12 @@
 		    *ptr = ZWC('_');
 		    statusll = l + len + 1;
 		    zmult = 1;
-		    listlist(cmdll);
+		    listlist(namedcmdll);
 		    listed = curlist = 1;
 		    showinglist = 0;
 		    zmult = zmultsav;
-		} else if (!nextnode(firstnode(cmdll))) {
-		    ZLE_STRING_T ztmp = stringaszleline(peekfirst(cmdll),
+		} else if (!nextnode(firstnode(namedcmdll))) {
+		    ZLE_STRING_T ztmp = stringaszleline(peekfirst(namedcmdll),
 							&len, NULL);
 		    ZS_memcpy(ptr = cmdbuf, ztmp, len);
 		    ptr += len;
@@ -920,25 +920,25 @@
 			goto unambiguous;
 		} else {
 		    int ltmp;
-		    ZLE_STRING_T ztmp = stringaszleline(peekfirst(cmdll),
+		    ZLE_STRING_T ztmp = stringaszleline(peekfirst(namedcmdll),
 							&ltmp, NULL);
 		    ZS_memcpy(cmdbuf, ztmp, ltmp);
 		    free(ztmp);
-		    ptr = cmdbuf + cmdambig;
+		    ptr = cmdbuf + namedcmdambig;
 		    *ptr = ZWC('_');
 		    if (isset(AUTOLIST) &&
-			!(isset(LISTAMBIGUOUS) && cmdambig > len)) {
+			!(isset(LISTAMBIGUOUS) && namedcmdambig > len)) {
 			int zmultsav = zmult;
 			if (isset(LISTBEEP))
 			    feep = 1;
-			statusll = l + cmdambig + 1;
+			statusll = l + namedcmdambig + 1;
 			zmult = 1;
-			listlist(cmdll);
+			listlist(namedcmdll);
 			listed = curlist = 1;
 			showinglist = 0;
 			zmult = zmultsav;
 		    }
-		    len = cmdambig;
+		    len = namedcmdambig;
 		}
 	    } else {
 		if (len == NAMLEN || cmd != Th(z_selfinsert))

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070


**********************************************************************
This email and any files transmitted with it are confidential and
intended solely for the use of the individual or entity to whom they
are addressed. If you have received this email in error please notify
the system manager.

**********************************************************************

