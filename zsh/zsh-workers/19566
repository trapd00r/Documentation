From zsh-workers-return-19566-mason-zsh=primenet.com.au@sunsite.dk Mon Mar 08 17:02:31 2004
Return-Path: <zsh-workers-return-19566-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23465 invoked from network); 8 Mar 2004 17:02:31 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 8 Mar 2004 17:02:31 -0000
Received: (qmail 3768 invoked by alias); 8 Mar 2004 17:02:22 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 19566
Received: (qmail 3759 invoked from network); 8 Mar 2004 17:02:22 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 8 Mar 2004 17:02:22 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [216.254.112.45] by sunsite.dk (MessageWall 1.0.8) with SMTP; 8 Mar 2004 17:2:22 -0000
Received: by acolyte.scowler.net (Postfix, from userid 1000)
	id 75AA87004A; Mon,  8 Mar 2004 12:02:21 -0500 (EST)
Date: Mon, 8 Mar 2004 12:02:21 -0500
From: Clint Adams <clint@zsh.org>
To: Peter Stephenson <pws@csr.com>
Cc: zsh-workers@sunsite.dk
Subject: Re: [frederik@ugcs.caltech.edu: Bug#236748: zsh: associative array documentation reference broken]
Message-ID: <20040308170221.GA19189@scowler.net>
References: <20040308163528.GA18877@scowler.net> <15034.1078764007@csr.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <15034.1078764007@csr.com>
User-Agent: Mutt/1.5.5.1+cvs20040105i

> Probably better to rephrase the parenthesis so that it says something
> like

Committing this then

Index: Doc/Zsh/params.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/params.yo,v
retrieving revision 1.19
diff -u -r1.19 params.yo
--- Doc/Zsh/params.yo	30 Aug 2003 19:06:10 -0000	1.19
+++ Doc/Zsh/params.yo	8 Mar 2004 16:53:20 -0000
@@ -107,8 +107,12 @@
 appear within double quotes.
 `tt("$foo[*]")' evaluates to `tt("$foo[1] $foo[2] )...tt(")', whereas
 `tt("$foo[@]")' evaluates to `tt("$foo[1]" "$foo[2]" )...'.  For
-associative arrays, `tt([*])' or `tt([@])' evaluate to all the values (not
-the keys, but see em(Subscript Flags) below), in no particular order.
+associative arrays, `tt([*])' or `tt([@])' evaluate to all the values,
+in no particular order.  Note that this does not substitute
+the keys; see the documentation for the `tt(k)' flag under
+ifzman(em(Parameter Expansion Flags) in zmanref(zshexpn))\
+ifnzman(noderef(Parameter Expansion))
+for complete details.
 When an array parameter is referenced as `tt($)var(name)' (with no
 subscript) it evaluates to `tt($)var(name)tt([*])', unless the tt(KSH_ARRAYS)
 option is set in which case it evaluates to `tt(${)var(name)tt([0]})' (for

