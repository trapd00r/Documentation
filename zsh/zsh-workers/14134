From zsh-workers-return-14134-mason-zsh=primenet.com.au@sunsite.dk Fri Apr 27 12:21:17 2001
Return-Path: <zsh-workers-return-14134-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 20618 invoked from network); 27 Apr 2001 12:21:16 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 27 Apr 2001 12:21:16 -0000
Received: (qmail 9917 invoked by alias); 27 Apr 2001 12:21:09 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14134
Received: (qmail 9905 invoked from network); 27 Apr 2001 12:21:09 -0000
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
Date: Fri, 27 Apr 2001 14:20:49 +0200 (MET DST)
Message-Id: <200104271220.OAA05898@beta.informatik.hu-berlin.de>
To: zsh-workers@sunsite.dk
Subject: Re: cvs completion does not support partial path completion
In-Reply-To: <001001c0ce59$ec182370$21c9ca95@mow.siemens.ru>

Andrej Borsenkow wrote:

> Is "nice to have" in released version ...
> 
> bor@itsrm2% cvs diff S/M/t.c (meaning Src/Modules/termcap.c)
> No matches for: `cvs command', `file', `directory', or `removed file'

As far as I can see, the problem is in _cvs, which I always try to avoid
coming near to.  Have a look if you wish, you might have to have to deal
with interesting functions such as:

_cvs_modified_entries () {
  if _cvs_loadstat; then
    local expl match linedir realdir pat
    match=()
    : ${PREFIX:#(#b)(*/)(*)}
    linedir="$match[1]"
    realdir=${(e)~linedir}
    [[ -f "$realdir"CVS/Entries ]] &&
    [[ -n ${pat::="${(@j:|:)${(@)${(@)${(@)${(@)${(@)${(@M)${(@f)"$(<"$realdir"CVS/Entries)"}:#/*}#/}/\\/[^\\/]#\\///}%/[^/]#/[^/]#}:#${(j:|:)~${${${${(f)"$(LC_ALL=C builtin stat -gn +mtime -F '%a %b %e %T %Y' ${realdir}*(D) 2>/dev/null)"}##*/}/ //}//(#m)[][*?()<|^~#\\]/\\$MATCH}}}%%/*}//(#m)[][*?()<|^~#\\]/\\$MATCH}"} ]] &&
    _wanted files expl file _path_files -g "$pat"
  else
    _cvs_existing_entries
  fi
}

As far as I can see, that directory handling would require re-thinking
(or just placing a call to _files somewhere at the end as a catch-all
case when the clever functions failed, but placing it somewhere where it
won't get called more than once and not too early etc.).

Bye
  Sven


-- 
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

