From zsh-workers-return-22780-mason-zsh=primenet.com.au@sunsite.dk Wed Sep 27 16:38:03 2006
Return-Path: <zsh-workers-return-22780-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27491 invoked from network); 27 Sep 2006 16:37:59 -0000
X-Spam-Checker-Version: SpamAssassin 3.1.5 (2006-08-29) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.4 required=5.0 tests=AWL,BAYES_00,
	FORGED_RCVD_HELO autolearn=ham version=3.1.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 27 Sep 2006 16:37:59 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 80326 invoked from network); 27 Sep 2006 16:37:53 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 27 Sep 2006 16:37:53 -0000
Received: (qmail 8443 invoked by alias); 27 Sep 2006 16:37:50 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 22780
Received: (qmail 8433 invoked from network); 27 Sep 2006 16:37:49 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 27 Sep 2006 16:37:49 -0000
Received: (qmail 79994 invoked from network); 27 Sep 2006 16:37:49 -0000
Received: from cluster-d.mailcontrol.com (217.69.20.190)
  by a.mx.sunsite.dk with SMTP; 27 Sep 2006 16:37:45 -0000
Received: from cameurexb01.EUROPE.ROOT.PRI ([62.189.241.200])
	by rly11d.srv.mailcontrol.com (MailControl) with ESMTP id k8RGR3Fe015811
	for <zsh-workers@sunsite.dk>; Wed, 27 Sep 2006 17:36:43 +0100
Received: from news01.csr.com ([10.103.143.38]) by cameurexb01.EUROPE.ROOT.PRI with Microsoft SMTPSVC(6.0.3790.1830);
	 Wed, 27 Sep 2006 17:29:46 +0100
Received: from news01.csr.com (localhost.localdomain [127.0.0.1])
	by news01.csr.com (8.13.7/8.13.4) with ESMTP id k8RGTkOx031022
	for <zsh-workers@sunsite.dk>; Wed, 27 Sep 2006 17:29:46 +0100
Received: from csr.com (pws@localhost)
	by news01.csr.com (8.13.7/8.13.7/Submit) with ESMTP id k8RGTkll031019
	for <zsh-workers@sunsite.dk>; Wed, 27 Sep 2006 17:29:46 +0100
Message-Id: <200609271629.k8RGTkll031019@news01.csr.com>
X-Authentication-Warning: news01.csr.com: pws owned process doing -bs
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: PATCH: Set index of first non-option argument in _arguments
Date: Wed, 27 Sep 2006 17:29:46 +0100
From: Peter Stephenson <pws@csr.com>
X-OriginalArrivalTime: 27 Sep 2006 16:29:46.0614 (UTC) FILETIME=[25362960:01C6E252]
Content-Type: text/plain
MIME-Version: 1.0
X-Scanned-By: MailControl A-07-04-02 (www.mailcontrol.com) on 10.68.0.121

One thing that's annoyed me about _arguments (let's stick at that for now,
shall we?) is that although it, or rather the comparguments builtin,
knows perfectly well where the first argument after the options
started, it won't tell you.  This makes it unnecessarily difficult to
handle commands with subcommands with different arguments (such as cvs
or svn); you basically have to reparse the command line yourself to do
it properly.

This adds the option -n to _arguments to set NORMARG to the index of
first non-option argument, and uses it in _todo.sh to illustrate.

My first reaction to this was "OH MY *@!@! IT WORKS!", so I haven't
dared to peer too deeply into the code, where there could easily be
funnies.

_arguments still needs better documentation, in particular for the other
of its own options, whose documentation is hidden away.

There's a possible incompatibility if you don't use : to end _arguments'
option list, but that was always a difficulty and we'll have to pick up
the pieces as they fall.  The fact that : ends the list of options sucks
quite badly even by the standards of _arguments syntax.  OK, *now* I'm
rambling.

Index: Completion/Base/Utility/_arguments
===================================================================
RCS file: /cvsroot/zsh/zsh/Completion/Base/Utility/_arguments,v
retrieving revision 1.16
diff -u -r1.16 _arguments
--- Completion/Base/Utility/_arguments	18 Jun 2004 09:49:00 -0000	1.16
+++ Completion/Base/Utility/_arguments	27 Sep 2006 16:26:31 -0000
@@ -5,6 +5,7 @@
 
 local long cmd="$words[1]" descr mesg subopts opt usecc autod
 local oldcontext="$curcontext" hasopts rawret optarg singopt alwopt
+local setnormarg
 
 long=$argv[(I)--]
 if (( long )); then
@@ -189,12 +190,13 @@
 
 subopts=()
 singopt=()
-while [[ "$1" = -(O*|[CRWsw]) ]]; do
+while [[ "$1" = -(O*|[CRWnsw]) ]]; do
   case "$1" in
   -C)  usecc=yes; shift ;;
   -O)  subopts=( "${(@P)2}" ); shift 2 ;;
   -O*) subopts=( "${(@P)${1[3,-1]}}" ); shift ;;
   -R)  rawret=yes; shift;;
+  -n)  setnormarg=yes; NORMARG=-1; shift;;
   -w)  optarg=yes; shift;;
   -s)  singopt=(-s); shift;;
   -W)  alwopt=arg; shift;;
@@ -251,6 +253,10 @@
 	  descr="$descrs[anum]"
 	  subc="$subcs[anum++]"
 
+	  if [[ $subc = argument* && -n $setnormarg ]]; then
+	    comparguments -n NORMARG
+	  fi
+
           if [[ -n "$matched" ]] || _requested "$subc"; then
 
             curcontext="${oldcontext%:*}:$subc"
Index: Completion/Unix/Command/_todo.sh
===================================================================
RCS file: /cvsroot/zsh/zsh/Completion/Unix/Command/_todo.sh,v
retrieving revision 1.2
diff -u -r1.2 _todo.sh
--- Completion/Unix/Command/_todo.sh	27 Sep 2006 14:50:35 -0000	1.2
+++ Completion/Unix/Command/_todo.sh	27 Sep 2006 16:26:31 -0000
@@ -11,8 +11,9 @@
 
 local expl curcontext="$curcontext" state line pri nextstate
 local -a cmdlist itemlist
+integer NORMARG
 
-_arguments -s \
+_arguments -s -n : \
   '-d[alternate config file]:config file:_files' \
   '-f[force, no confirmation]' \
   '-h[display help]' \
@@ -20,8 +21,7 @@
   '-v[verbose mode, confirmation messages]' \
   '-V[display version etc.]' \
   '1:command:->commands' \
-  '2:first argument:->firstarg' \
-  '3:second argument:->secondarg' && return 0
+  '*:arguments:->arguments' && return 0
 
 local txtmsg="text, can include p:<project> and @<where>"
 
@@ -45,11 +45,25 @@
   _describe -t todo-commands 'todo.sh command' cmdlist
   ;;
 
-  (firstarg)
-  case $words[CURRENT-1] in
+  (arguments)
+  case $words[NORMARG] in
     (append|del|do|prepend|pri|replace)
-    itemlist=(${${(M)${(f)"$(todo.sh list)"}##<-> *}/(#b)(<->) (*)/${match[1]}:${match[2]}})
-    _describe -t todo-items 'todo item' itemlist
+    if (( NORMARG == CURRENT - 1 )); then
+      itemlist=(${${(M)${(f)"$(todo.sh list)"}##<-> *}/(#b)(<->) (*)/${match[1]}:${match[2]}})
+      _describe -t todo-items 'todo item' itemlist
+    else
+      case $words[NORMARG] in
+	(pri)
+	nextstate=pri
+	;;
+	(append|prepend)
+	_message $txtmsg
+	;;
+	(replace)
+	compadd -Q -- "${(qq)$(todo.sh list "^0*${words[CURRENT-1]} ")##<-> }"
+	;;
+      esac
+    fi
     ;;
 
     (add)
@@ -59,9 +73,6 @@
     (list|listall)
     # This completes stuff beginning with p: (projects) or @ (contexts);
     # these are todo.sh conventions.
-    # We should do it for any argument after list or listall, but
-    # _arguments doesn't make that easy.  We need it to tell us
-    # the position of the first non-option argument.
     _wanted search expl 'context or project' \
       compadd ${${=${${(M)${(f)"$(todo.sh list)"}##<-> *}##<-> }}:#^(p:*|@*)}
     ;;
@@ -75,23 +86,6 @@
     ;;
   esac
   ;;
-
-  (secondarg)
-  case $words[CURRENT-2] in
-    (append|prepend)
-    _message $txtmsg
-    ;;
-    (pri)
-    nextstate=pri
-    ;;
-    (replace)
-    compadd -Q -- "${(qq)$(todo.sh list "^0*${words[CURRENT-1]} ")##<-> }"
-    ;;
-    (*)
-    return 1
-    ;;
-  esac
-  ;;
 esac
 
 case $nextstate in
Index: Doc/Zsh/compsys.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/compsys.yo,v
retrieving revision 1.192
diff -u -r1.192 compsys.yo
--- Doc/Zsh/compsys.yo	21 Sep 2006 19:54:31 -0000	1.192
+++ Doc/Zsh/compsys.yo	27 Sep 2006 16:26:32 -0000
@@ -3237,12 +3237,21 @@
 different name for the argument context field.
 )
 findex(_arguments)
-item(tt(_arguments) [ tt(-swWACRS) ] [ tt(-O) var(name) ] [ tt(-M) var(matchspec) ] [ tt(:) ] var(spec) ...)(
+item(tt(_arguments) [ tt(-nswWACRS) ] [ tt(-O) var(name) ] [ tt(-M) var(matchspec) ] [ tt(:) ] var(spec) ...)(
 This function can be used to give a complete specification for
 completion for a command whose arguments follow standard UNIX option and
 argument conventions.  The following forms specify individual sets of
 options and arguments; to avoid ambiguity, these may be separated from the
-options to tt(_arguments) itself by a single colon.
+options to tt(_arguments) itself by a single colon.  Options to
+tt(_arguments) itself must be in separate words, i.e. tt(-s -w), not
+tt(-sw).
+
+With the option tt(-n), tt(_arguments) sets the parameter tt(NORMARG)
+to the position of the first normal argument in the tt($words) array,
+i.e. the position after the end of the options.  If that argument
+has not been reached, tt(NORMARG) is set to tt(-1).  The caller
+should declare `tt(integer NORMARG)' if the tt(-n) option is passed;
+otherwise the parameter is not used.
 
 startitem()
 xitem(var(n)tt(:)var(message)tt(:)var(action))
Index: Src/Zle/computil.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Zle/computil.c,v
retrieving revision 1.96
diff -u -r1.96 computil.c
--- Src/Zle/computil.c	23 Sep 2006 14:43:58 -0000	1.96
+++ Src/Zle/computil.c	27 Sep 2006 16:26:33 -0000
@@ -2371,6 +2371,7 @@
     case 'M': min = 1; max =  1; break;
     case 'a': min = 0; max =  0; break;
     case 'W': min = 2; max =  2; break;
+    case 'n': min = 1; max =  1; break;
     default:
 	zwarnnam(nam, "invalid option: %s", args[0]);
 	return 1;
@@ -2665,6 +2666,20 @@
 	    sethparam(args[2], ret);
 	}
 	return 0;
+    case 'n':
+	/*
+	 * This returns the array index of the word where normal
+	 * arguments began.  It uses optbeg rather than nargbeg
+	 * (the value used when parsing) because nargbeg is assigned
+	 * to optbeg in the returned value and nargbeg isn't
+	 * used.
+	 *
+	 * -->PLEASE DON'T ASK<--
+	 *
+	 * Thank you.
+	 */
+	setiparam(args[1], (zlong)ca_laststate.optbeg + !isset(KSHARRAYS));
+	return 0;
     }
     return 1;
 }

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070


To access the latest news from CSR copy this link into a web browser:  http://www.csr.com/email_sig.php

