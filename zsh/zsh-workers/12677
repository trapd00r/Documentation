From zsh-workers-return-12677-mason-zsh=primenet.com.au@sunsite.auc.dk Fri Aug 18 14:48:23 2000
Return-Path: <zsh-workers-return-12677-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28149 invoked from network); 18 Aug 2000 14:48:22 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 18 Aug 2000 14:48:22 -0000
Received: (qmail 24983 invoked by alias); 18 Aug 2000 14:48:07 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 12677
Received: (qmail 24976 invoked from network); 18 Aug 2000 14:48:06 -0000
Date: Fri, 18 Aug 2000 15:43:18 +0100
From: Oliver Kiddle <opk@u.genie.co.uk>
Subject: PATCH: _zmodload
In-reply-to: <200008160923.LAA11449@beta.informatik.hu-berlin.de>
Sender: okid@cm01.ess
To: zsh-workers@sunsite.auc.dk
Message-id: <200008181443.PAA95540@cm01.ess>
Content-transfer-encoding: 7BIT

On 16 Aug, Sven wrote:

> Oliver Kiddle wrote:
> 
> > On the subject of zmodload completion, how would I prevent the 'module
> > alias' description from being displayed when there are no module
> > aliases 
> 
> Eh? The description for the aliases should not be displayed when there 
> are no matches added for it

That was what I had thought. I've just had a closer look and the problem
was something to do with ${${(f)"$(zmodload -A)"}%% *} returning a
single blank or something when there were no aliases. It's irrelevant
now anyway.

> Anyway. Here is the change to the parameter module to report aliases
> correctly in the $modules parameter. They have values of the form
> `alias:<name>', where <name> is, of course, the aliased-to-name.
> 
> No changes to _zmodload. If Oliver is working on the _arguments
> version anyway...

Well here is the _arguments version and I've also tried to make use of
the $modules parameter where possible. Is my strategy of retricting the
arguments to _tags and then completing everything in the while _tags
loop okay? It seems to work and was the easiest way I could find to
handle _zmodload seeing as it has all the flags first.

Shouldn't we maybe have an option to remove module aliases (-u combined
with -A) or have I missed something?

Oliver

--- Completion/Builtins/_zmodload	Fri Aug 18 11:26:53 2000
+++ Completion/Builtins/_zmodload	Fri Aug 18 16:31:09 2000
@@ -1,21 +1,46 @@
 #compdef zmodload
 
-local fl="$words[2]" expl ret=1
+local suf comp state line expl curcontext="$curcontext" ret=1
+typeset -A opt_args
+suf=()
 
-if [[ "$fl" = -*(a*u|u*a)* || "$fl" = -*a* && CURRENT -ge 4 ]]; then
-  _wanted builtins expl 'builtin command' compadd "$@" -k builtins
-elif [[ "$fl" = -*u* ]]; then
-  _wanted modules expl module compadd -k modules
-else
-  _tags files aliases
-  while _tags; do
-    _requested files expl 'module file' \
-      _files -W module_path -/g '*.(dll|s[ol])(:r)' && ret=0
-    if _requested aliases expl 'module alias'; then
-      local array
-      array=(${${(f)"$(zmodload -A)"}%% *})
-      (( $#array )) && compadd "${expl[@]}" -- $array && ret=0
-    fi
-    (( ret )) || break
-  done
+_arguments -C -A "-*" -s \
+  '(-d -e)-i[suppress error if command would do nothing]' \
+  '-u[unload module]' \
+  '(-i)-d[list or specify module dependencies]' \
+  '(-e)-a[autoload module]' \
+  '(-c -I -p -f)-b[autoload module for builtins]' \
+  '(-b -I -p -f)-c[autoload module for condition codes]' \
+  '(-b -c -p -f)-I[define infix condition names]' \
+  '(-b -c -I -f)-p[autoload module for parameters]' \
+  '(-b -c -I -p)-f[autoload module for math functions]' \
+  '(-i -u -d -a -b -c -p -f -L -A)-e[test if modules are loaded]' \
+  '(-e -u)-L[output in the form of calls to zmodload]' \
+  '(-i -u -d -a -b -c -I -p -f -e)-A[create module aliases]' \
+  '*:params:->params' && ret=0
+
+[[ $state = params ]] || return ret
+
+(( $+opt_args[-A] )) && compset -P '*=' || suf=( -S '=' )
+
+comp=( files aliases )
+if (( $+opt_args[-u] )); then
+  if (( $+opt_args[-b] || $+opt_args[-a] )); then
+    comp=( builtins )
+  else
+    comp=( loadedmodules aliases )
+  fi
 fi
+(( $+opt_args[-a] && CURRENT > 3 )) && comp=( builtins )
+
+_tags "$comp[@]"
+while _tags; do
+  _requested builtins expl 'builtin command' \
+    compadd "$@" -k builtins && ret=0
+  _requested loadedmodules expl 'loaded modules' \
+    compadd -k 'modules[(R)loaded]' && ret=0
+  _requested files expl 'module file' \
+    _files -W module_path -/g '*.(dll|s[ol])(:r)' && ret=0
+  _requested aliases expl 'module alias' \
+    compadd "$suf[@]" -k 'modules[(R)alias*]' && ret=0
+done

