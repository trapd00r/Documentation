From zsh-users-return-5997-mason-zsh=primenet.com.au@sunsite.dk Sat Mar 29 03:47:19 2003
Return-Path: <zsh-users-return-5997-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27007 invoked from network); 29 Mar 2003 03:47:16 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 29 Mar 2003 03:47:16 -0000
Received: (qmail 6023 invoked by alias); 29 Mar 2003 03:46:47 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 5997
Received: (qmail 6011 invoked from network); 29 Mar 2003 03:46:47 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 29 Mar 2003 03:46:47 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [4.64.233.231] by sunsite.dk (MessageWall 1.0.8) with SMTP; 29 Mar 2003 3:46:46 -0000
Received: (from schaefer@localhost)
	by candle.brasslantern.com (8.11.6/8.11.6) id h2T3ki628191
	for zsh-users@sunsite.dk; Fri, 28 Mar 2003 19:46:44 -0800
From: "Bart Schaefer" <schaefer@brasslantern.com>
Message-Id: <1030329034644.ZM28190@candle.brasslantern.com>
Date: Sat, 29 Mar 2003 03:46:44 +0000
In-Reply-To: <20030328201152.E116@pcchazelas.free.fr>
Comments: In reply to Stephane CHAZELAS <Stephane_CHAZELAS@yahoo.fr>
        "Re: copying files with shell built in functions?" (Mar 28,  8:11pm)
References: <20030328165928.GB14934@gmx.de>  <20030328180001.GB6040@fysh.org> 
	<1030328190347.ZM27599@candle.brasslantern.com> 
	<20030328201152.E116@pcchazelas.free.fr>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Zsh Users <zsh-users@sunsite.dk>
Subject: Re: copying files with shell built in functions?
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Mar 28,  8:11pm, Stephane CHAZELAS wrote:
} Subject: Re: copying files with shell built in functions?
}
} On Fri, Mar 28, 2003 at 07:03:47PM +0000, Bart Schaefer wrote:
} [...]
} > zsh% >newfile <oldfile
} > 
} > works just fine.
} 
} But uses more or cat that generally don't work when there's no
} libc.

True, I forgot about that.   (It is sort of silly when the multio code
already has a `while (read()) write()' loop.)  There's always:

zsh% print -nr -- "$(<oldfile)" >newfile

or (more fun, but not necessarily less memory intensive)

zsh% zmodload zsh/mapfile
zsh% mapfile[newfile]=$mapfile[oldfile]


