From zsh-workers-request@euclid.skiles.gatech.edu  Fri Dec  8 03:51:34 1995
Received: from euclid.skiles.gatech.edu (euclid.skiles.gatech.edu [130.207.146.50]) by werple.net.au (8.7/8.7.1) with ESMTP id DAA06557 for <mason@werple.mira.net.au>; Fri, 8 Dec 1995 03:51:28 +1100 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id LAA20400; Thu, 7 Dec 1995 11:27:07 -0500 (EST)
Resent-Date: Thu, 7 Dec 1995 11:27:07 -0500 (EST)
Message-Id: <199512071631.LAA01231@seven.ucs.indiana.edu>
X-Mailer: exmh version 1.6.2 7/18/95
To: zsh-workers@math.gatech.edu
Subject: couple of zsh features
Reply-To: mliggett@indiana.edu
X-Attribution: ML
X-Url: http://seven.ucs.indiana.edu/~mliggett/
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Thu, 07 Dec 1995 11:31:22 -0500
From: Matt Liggett <mliggett@seven.ucs.indiana.edu>
Resent-Message-ID: <"DHZ5j.0.g-4.QNnnm"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/677
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

Fellow zsh hackers,

I was talking to a friend about shells the other night when the 
discussion of a couple of neat features came up.  There are a couple 
of features which we both thought could be very valuable and I'd like 
to know if anyone is working or has worked on them so I don't 
re-invent the wheel if I decide to delve into the source.

1) Right-hand command prompting.

   I know about RPS*, but how about a right-hand command prompt like 
so:

213 19:22                                                  <seven:~
213 19:22                                                 l<seven:~
213 19:22                                                ls<seven:~
213 19:22                                               ls <seven:~
213 19:22                                              ls -<seven:~
213 19:22                                             ls -l<seven:~

This shows how the line would progress as each command was typed.  
The stuff on the left is what I tend to keep in my prompt (history 
number and time).  I think this sort of "right justifying" could be a 
good visual clue for some people and help them set commands off from 
output.

2) `oops'

    Any of you ever used Infocom games or other interactive fiction?  
The construct is simple:

> get sord

?- What's a sord?

> oops sword

Taken.


In this example, it doesn't save you much work, but it can many other 
times.  What oops does is takes the first word that failed to parse 
correctly in the previous line and replaces it with its argument.  
Maybe some kind of compctl-based matching could be used to determine 
which word in the previous command was a likely mismatch.

Thoughts?

--
http://seven.ucs.indiana.edu/~mliggett |||        Matt Liggett       |
$_="5673089a34120b12c048de12f\n"; ///  |||   <mliggett@indiana.edu>  |
@j=split//," erthJusanoPlck.";   ///   |||   '70 Midget '74 Bronco   |
s/./$j[hex $&]/ge;print         ///    |||       '78 Civic 1200      |


