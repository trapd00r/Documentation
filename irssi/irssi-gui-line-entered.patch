Add another signal for when the user presses Enter at the prompt.
This can be used by scripts that act as macro preprocessors for user input.

Index: src/fe-text/gui-readline.c
===================================================================
--- src/fe-text/gui-readline.c	(revision 5012)
+++ src/fe-text/gui-readline.c	(working copy)
@@ -538,7 +538,7 @@
 	history = command_history_current(active_win);
 
 	if (redir == NULL) {
-		signal_emit("send command", 3, str,
+		signal_emit("gui line entered", 3, str,
 			    active_win->active_server,
 			    active_win->active);
 	} else {
@@ -981,6 +981,11 @@
 	gui_entry_set_prompt(active_entry, entry);
 }
 
+static void sig_gui_line_entered(const char *line, SERVER_REC *server, void *item)
+{
+	signal_emit("send command", 3, line, server, item);
+}
+
 static void setup_changed(void)
 {
 	paste_detect_time = settings_get_time("paste_detect_time");
@@ -1163,6 +1168,7 @@
 	signal_add("window changed automatic", (SIGNAL_FUNC) sig_window_auto_changed);
 	signal_add("gui entry redirect", (SIGNAL_FUNC) sig_gui_entry_redirect);
 	signal_add("gui key pressed", (SIGNAL_FUNC) sig_gui_key_pressed);
+	signal_add("gui line entered", (SIGNAL_FUNC) sig_gui_line_entered);
 	signal_add("setup changed", (SIGNAL_FUNC) setup_changed);
 }
 
@@ -1235,5 +1241,6 @@
 	signal_remove("window changed automatic", (SIGNAL_FUNC) sig_window_auto_changed);
 	signal_remove("gui entry redirect", (SIGNAL_FUNC) sig_gui_entry_redirect);
 	signal_remove("gui key pressed", (SIGNAL_FUNC) sig_gui_key_pressed);
+	signal_remove("gui line entered", (SIGNAL_FUNC) sig_gui_line_entered);
 	signal_remove("setup changed", (SIGNAL_FUNC) setup_changed);
 }
Index: docs/signals.txt
===================================================================
--- docs/signals.txt	(revision 5012)
+++ docs/signals.txt	(working copy)
@@ -321,6 +324,7 @@
 
 gui-readline.c:
  "gui key pressed", int key
+ "gui line entered", char *command, SERVER_REC, WI_ITEM_REC
 
 gui-printtext.c:
  "beep"
