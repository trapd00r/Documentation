From zsh-users-return-2598-mason-zsh=primenet.com.au@sunsite.auc.dk Mon Sep 13 15:11:39 1999
Return-Path: <zsh-users-return-2598-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 9248 invoked from network); 13 Sep 1999 15:11:37 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 13 Sep 1999 15:11:37 -0000
Received: (qmail 26173 invoked by alias); 13 Sep 1999 15:11:14 -0000
Mailing-List: contact zsh-users-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.auc.dk
X-Seq: 2598
Received: (qmail 26166 invoked from network); 13 Sep 1999 15:11:13 -0000
Message-Id: <199909131511.RAA02540@paris.ifh.de>
X-Authentication-Warning: paris.ifh.de: pws owned process doing -bs
To: zsh-users@sunsite.auc.dk (Zsh users list)
Subject: Function to increment number on the command line
Date: Mon, 13 Sep 1999 17:11:00 +0200
From: Peter Stephenson <pws@ifh.de>

May you don't need this.  It increments a number on the command line under
or just before the cursor.  You can set $incarg or use the numeric argument
to have an increment other than 1.

It should work with an existing 3.1.x installation, which is why I'm
sending it to zsh-users, but if you're not patching you should send it through
  sed -n 's/^\+\([^+]\)/\1/p'
to extract it.

--- Functions/Zle/incarg.old	Mon Sep 13 16:27:24 1999
+++ Functions/Zle/incarg	Mon Sep 13 16:27:29 1999
@@ -0,0 +1,43 @@
+# Shell function to increment an integer either under the cursor or just
+# to the left of it.  Use
+#   autoload -U incarg
+#   zle -N incarg
+#   bindkey "..." incarg
+# to define it.  For example,
+#   echo 41
+#        ^^^ cursor anywhere here
+# with incarg gives
+#   echo 42
+# with the cursor in the same place.
+#
+# A numeric argument gives a number other than 1 to add (may be negative).
+# If you're going to do it a lot with one particular number, you can set
+# the parameter incarg to that number (a numeric argument still takes
+# precedence).
+
+emulate -L zsh
+setopt extendedglob
+
+local rrest lrest num
+
+rrest=${RBUFFER##[0-9]#}
+if [[ $RBUFFER = [0-9]* ]]; then
+  if [[ -z $rrest ]]; then
+    num=$RBUFFER
+  else
+    num=${RBUFFER[1,-$#rrest-1]}
+  fi
+fi
+
+lrest=${LBUFFER%%[0-9]#}
+if [[ $LBUFFER = *[0-9] ]]; then
+  if [[ -z $lrest ]]; then
+    num="$LBUFFER$num"
+  else
+    num="${LBUFFER[$#lrest+1,-1]}$num"
+  fi
+fi
+
+[[ -n $num ]] && (( num += ${NUMERIC:-${incarg:-1}} ))
+
+BUFFER="$lrest$num$rrest"

-- 
Peter Stephenson <pws@ifh.de>       Tel: +39 050 844536
WWW:  http://www.ifh.de/~pws/
Dipartimento di Fisica, Via Buonarroti 2, 56127 Pisa, Italy

