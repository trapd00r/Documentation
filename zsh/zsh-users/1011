From zsh-workers-request@math.gatech.edu Thu Sep 11 07:48:31 1997
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 13961 invoked from network); 11 Sep 1997 07:48:29 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 11 Sep 1997 07:48:29 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.8.5/8.8.5) id DAA03701;
	Thu, 11 Sep 1997 03:42:17 -0400 (EDT)
Resent-Date: Thu, 11 Sep 1997 03:38:17 -0400 (EDT)
Date: Thu, 11 Sep 1997 09:37:20 +0200 (MET DST)
From: Swen Thuemmler <swen@uni-paderborn.de>
To: zsh-users@math.gatech.edu
Subject: Re: hiding input text
Message-ID: <Pine.GSO.3.96.970911093215.15403A-100000@atm10.uni-paderborn.de>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Resent-Message-ID: <"5366D1.0.Yu.e_v5q"@math>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/1011
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu


What's wrong with stty -echo? Ok, it is not portable (works only on Unix),
perhaps someone has a portable solution... Here is a quick and dirty
getpass function. It should perhaps have a trap to restore the terminal
modes on exit. And I found no other way to get a newline in a string than
to use single quotes (I tried \n and echo but did not succeed).

Hope this helps

--Swen


#!/usr/bin/zsh

function getpass() {
  echo -n "Password: "
  stty -echo
  key=""
  end='
'
  while ( true ); do
    read -k key
    if [[ "$key" == "$end" ]]; then
      break
    fi
    echo -n .
    pass="$pass$key"
  done
  echo
  stty echo
}

getpass
echo "Password was $pass"


