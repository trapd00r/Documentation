From zsh-workers-return-8176-mason-zsh=primenet.com.au@sunsite.auc.dk Thu Oct 07 21:37:42 1999
Return-Path: <zsh-workers-return-8176-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1467 invoked from network); 7 Oct 1999 21:37:41 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 7 Oct 1999 21:37:41 -0000
Received: (qmail 22648 invoked by alias); 7 Oct 1999 21:37:34 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 8176
Received: (qmail 22621 invoked from network); 7 Oct 1999 21:37:21 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <991007213658.ZM27471@candle.brasslantern.com>
Date: Thu, 7 Oct 1999 21:36:58 +0000
In-Reply-To: <19991007133016.A4805@dman.com>
Comments: In reply to Clint Adams <schizo@debian.org>
        "Re: PATCH: 3.1.6-pws-6: $compstate[unambiguous] could be garbage" (Oct  7,  1:30pm)
References: <991007104018.ZM25846@candle.brasslantern.com> 
	<19991007133016.A4805@dman.com>
X-Mailer: Z-Mail Lite (5.0.0 30July97)
To: Clint Adams <schizo@debian.org>
Subject: Re: PATCH: 3.1.6-pws-6: $compstate[unambiguous] could be garbage
Cc: zsh-workers@sunsite.auc.dk
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Oct 7,  1:30pm, Clint Adams wrote:
> Subject: Re: PATCH: 3.1.6-pws-6: $compstate[unambiguous] could be garbage
> > -    } else {
> > +    } else if (mnum != unambig_mnum || !ainfo || !scache) {
> 
> Still getting things like
> 
> _main_complete: bad pattern: x['^H8T^V@ [92]

Well, that certainly does appear that it could be caused by this or a
similar problem.  `unambiguous' and `unambiguous_cursor' are the only keys
that have readonly computed values, and as it turns out they're both
computed by the same caching function, which is what caused the bug I saw
in the first place.

So if you get a debugger going and put a breakpoint in unambig_data() and
manage to see it free and reallocate the `scache' pointer twice, let us
know what `mnum', `unambig_mnum', and `ainfo' were when it happened.

One thing I tried while figuring out what was going on for the patch above
was inserting

noglob print -l x"${(@kv)^compstate}"x

immediately before line 92.  That would at least tell you which assoc key
has the bad value.

