From zsh-workers-return-28316-mason-zsh=primenet.com.au@zsh.org Tue Oct 05 15:18:13 2010
Return-Path: <zsh-workers-return-28316-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28265 invoked by alias); 5 Oct 2010 15:18:13 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 28316
Received: (qmail 11413 invoked from network); 5 Oct 2010 15:18:11 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,FREEMAIL_FROM,RCVD_IN_DNSWL_NONE autolearn=ham
	version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at _spf.google.com designates 209.85.215.43 as permitted sender)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:in-reply-to
         :references:date:message-id:subject:from:to:content-type;
        bh=dkkUN6JOXDlUxZnkkhN1Z4RfHEzjrgpFa7lxxPkYeEo=;
        b=E55RatY0MOS+cTheWKBpYEx3+cZR0YQHpBQRSeBdBztGt2cMxcFdkk3Cmg2eiYgIgY
         nX2/VGyjGGCwLPMvZjMisXNcStz/5ITWWydM+RNu6rtDZKVkcxmAKVn4kbMGoDBPRB5G
         aKlg1/FXf9AV4xw6LNcI8dCO/R+TzgIzKRw+0=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        b=Wz/xWd03LnMXgtJDTqxwiUtbWbNUo0TAmwz3yWH5WR8T2BWSHo3vDrIbbfuYScXeh8
         UbPs2ht89oLwz0dsi04H208u5GRe9FuVS70yEB/xTYEOKmGbx/gjBiylrqzT6rnfTBQ1
         BzuWy2T5/2CnXiXy/oSYvqPzFc4QeAr1dSSwo=
MIME-Version: 1.0
In-Reply-To: <101005080059.ZM4862@torch.brasslantern.com>
References: <AANLkTi=PxKX2x5M_oseccYWsSgztpWY_n8Lz9gTu=3vE@mail.gmail.com>
	<101005080059.ZM4862@torch.brasslantern.com>
Date: Tue, 5 Oct 2010 17:18:06 +0200
Message-ID: <AANLkTinyNWKax0n2z+XmoyFOuLOdWkLsujfw86Zw8EQK@mail.gmail.com>
Subject: Re: noclobber overzealous with multios and /dev/stdout
From: Mikael Magnusson <mikachu@gmail.com>
To: zsh workers <zsh-workers@zsh.org>
Content-Type: text/plain; charset=UTF-8

On 5 October 2010 17:00, Bart Schaefer <schaefer@brasslantern.com> wrote:
> On Oct 4, 11:32pm, Mikael Magnusson wrote:
> }
> } I can't really see the logic here, so I'm guessing it's a bug somewhere:
>
> This is not really a zsh issue; it depends on the implementation of the
> device special files that refer to existing descriptors.
>
> Internally zsh always does these steps:
> (1) Attempt to open the file for exclusive write.
>    [If this succeeds, we're done, the file didn't exist before.]
> (2) Open the file for write, but without truncation, then fstat the
>    descriptor and close/fail if a regular file.
>
> The special files /dev/stdout and /dev/fd/1 etc. are oddballs in that
> they may appear to be (or not) a regular file depending on how the
> related descriptors were previously opened.
>
> So in these two cases ...
>
> } % rm file
> } % echo test > file > /dev/stdout
> } zsh: file exists: /dev/stdout
> }
> } % rm file
> } % echo test > file > /dev/fd/1
> } zsh: file exists: /dev/fd/1
>
> ... what has happened is that zsh has opened "file" as the standard
> output (fd 1), which changes the meaning of /dev/stdout and /dev/fd/1
> to refer to the regular file "file".  This is in turn causes noclobber
> to refuse to truncate them; zsh has no way of knowing that the OS has
> magically created a new reference to a file that zsh itself created
> only a fraction of a second before, it knows only that it may not
> truncate an existing file.

Ah, this is sort of half magical stuff, thanks for explaining  :).

> } both 0 and 1 are symlinks to /dev/pts/33
>
> No, they aren't.  Left-to-right order is important with multios, as
> it is with descriptor duplication using >&DIGITS.

In case this was unclear, i was referring to /proc/<pid>/fd/0 and 1
there, they are both symlinks pointing to the same target
(/dev/pts/33). When i created a symlink in the current dir to the same
place, i also didn't get the error. Oh, i just realized now, does what
the symlink in /proc points to change during the evaluation of the
redirect operators? I guess they must, in that case i understand what
happens :). Ie after "> file", /proc/self/fd/1 points to "file", while
0 still points to the terminal...

What i was actually trying to do when i encountered this was use
multios to write both to the terminal and a file. I guess what i must
do in that case is first duplicate stdout to a new fd with {myfd}>&1
(i always forget the exact syntax for this), and then > file >&$myfd ?
This came up in the irc channel, someone wanted to redirect stdout to
one place, and stderr both to a file and stdout, or something like
that. (I can probably figure out the exact command on my own if he
returns).

-- 
Mikael Magnusson

