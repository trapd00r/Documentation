From zsh-users-return-12430-mason-zsh=primenet.com.au@sunsite.dk Mon Jan 14 17:57:41 2008
Return-Path: <zsh-users-return-12430-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 13 invoked from network); 14 Jan 2008 17:57:39 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.4 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 14 Jan 2008 17:57:39 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 84534 invoked from network); 14 Jan 2008 17:57:21 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 14 Jan 2008 17:57:21 -0000
Received: (qmail 3526 invoked by alias); 14 Jan 2008 17:57:12 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12430
Received: (qmail 3513 invoked from network); 14 Jan 2008 17:57:12 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 14 Jan 2008 17:57:12 -0000
Received: from virusfilter.dotsrc.org (bifrost [127.0.0.1])
	by spamfilter.dotsrc.org (Postfix) with ESMTP id A10658026E0C
	for <zsh-users@sunsite.dk>; Mon, 14 Jan 2008 18:57:07 +0100 (CET)
Received: from cluster-d.mailcontrol.com (cluster-d.mailcontrol.com [217.69.20.190])
	by bifrost.dotsrc.org (Postfix) with ESMTP
	for <zsh-users@sunsite.dk>; Mon, 14 Jan 2008 18:57:07 +0100 (CET)
Received: from cameurexb01.EUROPE.ROOT.PRI ([62.189.241.200])
	by rly06d.srv.mailcontrol.com (MailControl) with ESMTP id m0EHv2eh000710
	for <zsh-users@sunsite.dk>; Mon, 14 Jan 2008 17:57:03 GMT
Received: from news01.csr.com ([10.103.143.38]) by cameurexb01.EUROPE.ROOT.PRI with Microsoft SMTPSVC(6.0.3790.1830);
	 Mon, 14 Jan 2008 17:57:02 +0000
Received: from news01.csr.com (localhost.localdomain [127.0.0.1])
	by news01.csr.com (8.14.1/8.13.4) with ESMTP id m0EHv2xh018251
	for <zsh-users@sunsite.dk>; Mon, 14 Jan 2008 17:57:02 GMT
Received: from csr.com (pws@localhost)
	by news01.csr.com (8.14.1/8.14.1/Submit) with ESMTP id m0EHv2NF018248
	for <zsh-users@sunsite.dk>; Mon, 14 Jan 2008 17:57:02 GMT
Message-Id: <200801141757.m0EHv2NF018248@news01.csr.com>
X-Authentication-Warning: news01.csr.com: pws owned process doing -bs
To: zsh-users@sunsite.dk
Subject: Re: testing ports with ztcpsys
In-reply-to: <20080114173547.GA14208@localhost.localdomain>
References: <20080114173547.GA14208@localhost.localdomain>
Comments: In-reply-to antho.charles@gmail.com
   message dated "Mon, 14 Jan 2008 18:35:47 +0100."
Date: Mon, 14 Jan 2008 17:57:02 +0000
From: Peter Stephenson <pws@csr.com>
X-OriginalArrivalTime: 14 Jan 2008 17:57:02.0380 (UTC) FILETIME=[DDC626C0:01C856D6]
X-Scanned-By: MailControl A-06-00-00 (www.mailcontrol.com) on 10.68.0.116
X-Virus-Scanned: ClamAV using ClamSMTP

antho.charles@gmail.com wrote:
> I'm writing a script that gather some system informations on several
> computers, and I want to test if some ports are in use. I think netcat is
> good, but I remember that zsh have a tcp module so I try:
> 
> -- code --
> #!/bin/zsh
> autoload -U tcp_open
> 
> tcp_open "$1" "$2" &> /dev/null
> [[ $? -eq 1 ]] && exit 1 || tcp_close &>/dev/null && exit 0
> -- end code --
> 
> It works but when the host doesn't respond ( you can try tcp_open
> www.google.fr 8080 for example ), the timeout is really long and slow the s=
> cript.
> 
> So, I try with ztcp, checking $REPLY value but it doesn't work: $REPLY
> is set in the same shell than the ztcp command, so I should wait for
> the ztcp to return before I can check $REPLY.
> My question is: 
> is there a way to hack a timeout ?

It doesn't look like there's an easy way of doing this.  The best I can
come up with is to try it in a subshell and time this out in the parent
shell, along the lines of (I haven't actually tried this):

  (if ztcp www.google.fr 8080; then
     ztcp -c $REPLY
     print $REPLY
  fi) > /tmp/ztcp.$$ 2>&1 &

  # could loop checking, or something more sophisticated with
  # SIGALRM or pipes
  sleep 5
  if [[ -s /tmp/ztcp.$$ ]]; then
    print Connection succeeded
    # assume it will work again
  else
    print Connection failed
    kill $!
    # assume it's not there
  fi

Obviously this only gives an indication of whether the device is
alive, not a connection within a given timeout.

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070

