From zsh-workers-request@math.gatech.edu  Tue Nov  7 03:22:52 1995
Received: from math.gatech.edu (euclid.skiles.gatech.edu [130.207.146.50]) by werple.net.au (8.7/8.7.1) with SMTP id DAA07990 for <mason@werple.mira.net.au>; Tue, 7 Nov 1995 03:22:47 +1100 (EST)
Received: by math.gatech.edu (5.x/SMI-SVR4)
	id AA05466; Mon, 6 Nov 1995 11:08:02 -0500
Resent-Date: Mon, 6 Nov 1995 16:39:06 +0100 (MET)
Old-Return-Path: <hzoli@cs.elte.hu>
From: Zoltan Hidvegi <hzoli@cs.elte.hu>
Message-Id: <199511061539.QAA07497@bolyai.cs.elte.hu>
Subject: Re: Expansion/quoting quirks
To: zsh-workers@math.gatech.edu (zsh-workers)
Date: Mon, 6 Nov 1995 16:39:06 +0100 (MET)
In-Reply-To: <951105102637.ZM28524@zyrcon.z-code.com> from "Barton E. Schaefer" at Nov 5, 95 10:26:37 am
X-Mailer: ELM [version 2.4 PL24]
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Resent-Message-Id: <"HODAg2.0.KL1.XBZdm"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/536
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

> This one seems really strange to me.  Why is $(foo) different from `foo`
> in ksh?  I think I prefer zsh's behavior, even if it isn't compatible.
> 
>     $ echo $(echo '\$x')
>     \$x
>     $ echo `echo '\$x'`
>     $x
>     $
> 
> Look, ksh isn't even consistent about it!  Why should that $ cause a
> magically different behavior?
> 
>     $ echo $(echo '\x')
>     \x
>     $ echo `echo '\x'`
>     \x
>     $

Here is the relevant part from the ksh93 manual:

   Command Substitution.
       The standard output from a command enclosed in parentheses
       preceded  by  a  dollar  sign  (  $() ) or a pair of grave
       accents (``) may be used as part or all of a word;  trail-
       ing new-lines are removed.  In the second (obsolete) form,
       the string between the quotes  is  processed  for  special
       quoting  characters  before  the  command is executed (see
       Quoting below).  The command substitution $(cat file)  can
       be replaced by the equivalent but faster $(<file).

                                                ...  Inside grave
       quote marks (``), \ quotes the characters \, `, and $.  If
       the  grave  quotes occur within double quotes, then \ also
       quotes the character ".

The baseline zsh implement this behaviour.  However when it is invoked as sh
or ksh, it sets the glob_subst option which.  But glob_subst is buggy in the
baseline, since the result of the expansion is not only globbed but also
expanded using parameter expansion.

E.g. foo='$foo' ; echo $foo

causes an infinite loop when glob_subst is set.

Cheers,

   Zoltan

