From zsh-users-return-15674-mason-zsh=primenet.com.au@zsh.org Sat Dec 25 14:56:15 2010
Return-Path: <zsh-users-return-15674-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 7294 invoked by alias); 25 Dec 2010 14:56:15 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15674
Received: (qmail 14463 invoked from network); 25 Dec 2010 14:56:12 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at vinc17.org does not designate permitted sender hosts)
Date: Sat, 25 Dec 2010 15:43:15 +0100
From: Vincent Lefevre <vincent@vinc17.org>
To: zsh-users@zsh.org
Subject: Re: Absolute path of a path
Message-ID: <20101225144315.GA31836@xvii.vinc17.org>
Mail-Followup-To: zsh-users@zsh.org
References: <AANLkTikZN2Lk3zf2fWqD917TA-Wa5jCBQSZ-7VNWVOCj@mail.gmail.com>
 <AANLkTi=j_OtAziY1X=1qj=zk3P7=U6my1sd=bVshp69u@mail.gmail.com>
 <20101027164454.GA19471@prunille.vinc17.org>
 <AANLkTinLOXXBT=Wsu+gKLSEMgGGPg33c+_93CyS6xLsG@mail.gmail.com>
 <20101028104451.GB19471@prunille.vinc17.org>
 <20101028105250.GB7283@prunille.vinc17.org>
 <20101220102645.GA15278@prunille.vinc17.org>
 <20101220144434.0f7d4922@pwslap01u.europe.root.pri>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <20101220144434.0f7d4922@pwslap01u.europe.root.pri>
X-Mailer-Info: http://www.vinc17.net/mutt/
User-Agent: Mutt/1.5.21-6164-vl-r38670 (2010-10-13)

On 2010-12-20 14:44:34 +0000, Peter Stephenson wrote:
> I'm not convinced this is a bug.  It may be strange, but as it's an
> example manufactured to show strangeness, that's probably not
> too surprising.
> 
> Let's leave (:A) out of this to begin with.  We only need one fact about
> it: it's in a set of globbing flags, so that means it forces the
> expression to be treated as a glob, with 'no match' (or equivalent)
> behaviour:
> 
> % cd ~/tmp
> % ln -s . symlink
> % echo symlink/../tmp/symlink(N)
> symlink/../tmp/symlink
> % echo symlink/../tmp/symlink2(N)
> # empty
> 
> This behaviour I've shown so far is correct: symlink/../tmp/symlink is
> an entry in the file system (it's a symbolic link to nothing, but that's
> not a 'no match' condition), whereas symlink/../tmp/symlink2 isn't.
> Until *after* you applied :A, zsh just passes it as a string to the OS,
> which blindly follows it: down into symlink (doesn't change the physical
> directory), then up (does), then back down into tmp... oh look, there's
> a symlink entry here, so it exists.
> 
> It's only at this stage that the flags in globbing are applied.  So zsh
> follows the entirely different rules in this case:
> 
>   Note that resolution of ‘..’ occurs before resolution of symbolic links

This is confusing because the OS resolved symbolic links (during the
filename generation) before the :A rule was applied, thus before the
"resolution" of '..'. Moreover what zsh does with '..' is *not* the
standard resolution (which is to go to the parent directory). IMHO,
the documentation should say exactly what is done with '..' (this is
also true for :a) and there should be a note to say that this may not
be consistent to what has been done by the OS for filename generation
(if the result is applied of the result of filename generation).

> So we get (in my case, which is exactly parallel to yours)
> 
>   /home/pws/tmp/symlink/../tmp/symlink
> 
> becomes
> 
>   /home/pws/tmp/tmp/symlink
> 
> This is the key point.  This is a different rule from how the OS tracks
> a file name during globbing.  We do not want to mess about with the
> globbing rules just because the file name is going to be modified in
> some way after use; in particular, we don't know in general that a
> modifier is going to produce a real file name, consider :t.

OK, but then I think that the documentation is very unclear and is even
lying by using the word "resolve". It isn't a resolution because what
is done by zsh doesn't correspond to what is done by the OS. It's just
a string transformation, just like :t.

Regards,

-- 
Vincent Lefèvre <vincent@vinc17.net> - Web: <http://www.vinc17.net/>
100% accessible validated (X)HTML - Blog: <http://www.vinc17.net/blog/>
Work: CR INRIA - computer arithmetic / Arénaire project (LIP, ENS-Lyon)

