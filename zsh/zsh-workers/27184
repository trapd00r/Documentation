From zsh-workers-return-27184-mason-zsh=primenet.com.au@sunsite.dk Wed Jul 22 18:27:10 2009
Return-Path: <zsh-workers-return-27184-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1451 invoked from network); 22 Jul 2009 18:27:06 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-0.6 required=5.0 tests=BAYES_00,FAKE_REPLY_C
	autolearn=no version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 22 Jul 2009 18:27:06 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 12598 invoked from network); 22 Jul 2009 18:18:58 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 22 Jul 2009 18:18:58 -0000
Received: (qmail 14745 invoked by alias); 22 Jul 2009 18:18:49 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 27184
Received: (qmail 14722 invoked from network); 22 Jul 2009 18:18:48 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 22 Jul 2009 18:18:48 -0000
Received: from koef.zs64.net (koef.zs64.net [212.12.50.230])
	by bifrost.dotsrc.org (Postfix) with ESMTPS id C97868027106
	for <zsh-workers@sunsite.dk>; Wed, 22 Jul 2009 20:18:42 +0200 (CEST)
Received: from koef.zs64.net (koef.zs64.net [212.12.50.230])
	by koef.zs64.net (8.14.3/8.14.3) with ESMTP id n6MIIfef032045
	for <zsh-workers@sunsite.dk>; Wed, 22 Jul 2009 20:18:42 +0200 (CEST)
	(envelope-from cracauer@koef.zs64.net)
Received: (from cracauer@localhost)
	by koef.zs64.net (8.14.3/8.14.3/Submit) id n6MIIf3q032044
	for zsh-workers@sunsite.dk; Wed, 22 Jul 2009 14:18:41 -0400 (EDT)
	(envelope-from cracauer)
Date: Wed, 22 Jul 2009 14:18:41 -0400
From: Martin Cracauer <cracauer@cons.org>
To: zsh-workers@sunsite.dk
Subject: Re: zsh 4.3.10 terminates with SIGINT when one types Ctrl-G in emacs under Mac OS X
Message-ID: <20090722181841.GA30416@cons.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.4.2.3i
X-Virus-Scanned: ClamAV 0.94.2/9605/Wed Jul 22 17:08:14 2009 on bifrost
X-Virus-Status: Clean


Hi, a friend pointed me to this discussion and I took it as an
opportunity to fix some minor issues with my SIGINT page.

I'd like to comment on this one:

Bart Schaefer wrote:
> Further I think Cracauer is very wrong here:
> 
>   Do nothing special when SIGINT appears while you wait for a
>   child. You
>   don't even have to remember that one happened.
>   ...
>   Look at WIFSIGNALED(status) and WTERMSIG(status) to tell whether the
>   child says "I exited on SIGINT: in my opinion the user wants the
>   shellscript to be discontinued".
> 
> This is plain nonsense.
> 
> Not only does this potentially contradict a caller's explicit request
> to ignore SIGINT, but the script should not exit 130 every time any
> child exits 130.  It should exit only when SIGINT was received *by the
> script*.  "kill -INT ..." of the child should not cause the shell to
> behave as if it was interrupted.  Try it with bash.

You are correct (except that the numeric exit of 130 means nothing,
you have to use WIFSIGNALED but I assume you know that and just
shortcut it for the message).

There would be two ways of dealing with this:

1) when a child got killed with SIGINT, always abort the script
2) do that only when the shell itself also had received a SIGINT while
   that child was executing in the foreground

I have actually implemented 2) in FreeBSD's shell and bash also does
2).  However, I had skipped over that detail when writing the webpage.
The have has been corrected.

(let me know if you want credit on the page)

%%

More bits from the discussion:
>> BTW, I wonder why typing Ctrl-g in emacs sends SIGINT to the parent
>> under Mac OS X, but not under Linux.
>
> Some ancestry of BSD vs. SYSV tty process group semantics, I expect.

Looks like it's more complicated.

Both FreeBSD and Linux place both the shell and emacs in the same
progress group.

However, using strace on Linux you can see the SIGINT delivered to the
shell if you do

#! /bin/sh
cat
echo survived

And Control-C out of the cat.

And not when the callee is emacs.

On first sight it looks like the Linux kernel changes semantics based
on whether the terminal is in cooked mode or not.  Possibly in an
attempt to help a bit with the "what to do on SIGINT in interactive
programs" mess we are dealing with here.

If so, that explains why Linux users never flamed about the
wrong-exit-after-emacs problem.  If the kernel never tells the shell
anything about the SIGINT when the foreground program is in curses
mode the problem won't appear.

If so, that would be bad news for shellscripts calling programs that
do curses but just exit on SIGINT (lynx comes to mind).

Thanks
Martin
-- 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Martin Cracauer <cracauer@cons.org>   http://www.cons.org/cracauer/
FreeBSD - where you want to go, today.      http://www.freebsd.org/

