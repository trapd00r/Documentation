From zsh-users-return-11573-mason-zsh=primenet.com.au@sunsite.dk Sat Jun 16 17:14:38 2007
Return-Path: <zsh-users-return-11573-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 2136 invoked from network); 16 Jun 2007 17:14:36 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.1 (2007-05-02) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.1
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 16 Jun 2007 17:14:36 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 84458 invoked from network); 16 Jun 2007 17:14:29 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 16 Jun 2007 17:14:29 -0000
Received: (qmail 1691 invoked by alias); 16 Jun 2007 17:14:21 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 11573
Received: (qmail 1682 invoked from network); 16 Jun 2007 17:14:21 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 16 Jun 2007 17:14:21 -0000
Received: (qmail 83308 invoked from network); 16 Jun 2007 17:14:21 -0000
Received: from vms046pub.verizon.net (206.46.252.46)
  by a.mx.sunsite.dk with SMTP; 16 Jun 2007 17:14:17 -0000
Received: from torch.brasslantern.com ([71.116.90.58])
 by vms046.mailsrvcs.net (Sun Java System Messaging Server 6.2-6.01 (built Apr
 3 2006)) with ESMTPA id <0JJQ001ULNVEQZ57@vms046.mailsrvcs.net> for
 zsh-users@sunsite.dk; Sat, 16 Jun 2007 12:14:03 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id l5GHE19q013046	for
 <zsh-users@sunsite.dk>; Sat, 16 Jun 2007 10:14:02 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id l5GHE1q6013045	for zsh-users@sunsite.dk; Sat,
 16 Jun 2007 10:14:01 -0700
Date: Sat, 16 Jun 2007 10:14:01 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: how to customize _all_matches use?
In-reply-to: <4672f5ca.216f420a.0ac9.ffffac6fSMTPIN_ADDED@mx.google.com>
To: zsh-users@sunsite.dk
Message-id: <070616101401.ZM13044@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <4672f5ca.216f420a.0ac9.ffffac6fSMTPIN_ADDED@mx.google.com>
Comments: In reply to Vadim Zeitlin <vz-zsh@zeitlins.org>
 "how to customize _all_matches use?" (Jun 15, 10:25pm)

On Jun 15, 10:25pm, Vadim Zeitlin wrote:
} 
}  I'd like to have a key binding which would complete all matches which I
} would get by pressing TAB at once.
} 
} 	% zstyle ':completion:all-matches:*' completer _all_matches
} 
} However this doesn't seem to work

There's an important bit in the docs under _all_matches:

     Note that this does not generate completions by itself.  First use
     any of the standard ways of generating a list of completions, then
     use ^Xa to show all matches.

} I do get the behaviour I want if I do
} 
} 	% zstyle ':completion:all-matches:*' completer _all_matches _complete
} 
} but with one extremely annoying side-effect:
} 
} 	% ls ^Xa
} 	% ls bar baz foo # this is the same line completed by the shell
} 	bar baz foo
} 	bar  baz  foo
} 
} i.e. although I do get all the completions I also get *2* lists of them
} below.

Nope, that's only one list.  It's a list containing (1) the single match
that was built by _all_matches containing all the other strings at once,
and (2 through 4) the individual matches generated by _complete.

The reason you're getting the listing is because four matches are an
ambiguous situation: zsh doesn't know which of the four you wanted.  It
also inserts the first one because of MENU_COMPLETE (or at least that's
my best guess as to what's happening based on other things you wrote).

} Also, I'd like to not see anything at all if possible. So what am I
} doing wrong?

As far as I can tell, there's no simple way to get what you want, because
you must first generate matches before you can add another match that
consists of all the previous matches; which means you're guaranteed to
get an ambiguous completion (unless there's only one match from _complete
in the first place).  The tag-order style doesn't help here because it's
checked inside _tags and hence inside _complete where the all-matches
tag doesn't yet exist.

So you'll have to play a game like _approximate does, where compadd is
redefined as a function to capture all the matches that other completers
attempt to add, and then don't really add them until the end.  The idea
is to check for the -O/-A/-D options, and if none are present, then add
a -O option for your own array, and in eiher case call through to
"builtin compadd ...".  Finally, in a comppostfunc, remove the compadd
function and call the real compadd with the string resulting from a
join of your array.
 
} For example, it would be very useful to have for "cvs diff" [...]
} so that pressing TAB after "cvs di" normally completes only the
} modified files. But pressing ^Xa also completes the sub-directories --
} is there any way I could avoid this?

Unfortunately there you're stuck by _cvs_modified_entries which adds
all the entries and subdirectories under the single tag "files".  It has
nothing to do with _all_matches.

