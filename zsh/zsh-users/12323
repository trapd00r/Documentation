From zsh-users-return-12323-mason-zsh=primenet.com.au@sunsite.dk Wed Dec 12 14:32:32 2007
Return-Path: <zsh-users-return-12323-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15487 invoked from network); 12 Dec 2007 14:32:24 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.3 (2007-08-08) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.3
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 12 Dec 2007 14:32:24 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 66310 invoked from network); 12 Dec 2007 14:32:02 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 12 Dec 2007 14:32:02 -0000
Received: (qmail 8128 invoked by alias); 12 Dec 2007 14:31:52 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12323
Received: (qmail 8112 invoked from network); 12 Dec 2007 14:31:51 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 12 Dec 2007 14:31:51 -0000
Received: from virusfilter.dotsrc.org (bifrost [127.0.0.1])
	by spamfilter.dotsrc.org (Postfix) with ESMTP id B0EBD8058F51
	for <zsh-users@sunsite.dk>; Wed, 12 Dec 2007 15:29:11 +0100 (CET)
Received: from prunille.vinc17.org (vinc17.pck.nerim.net [213.41.242.187])
	by bifrost.dotsrc.org (Postfix) with ESMTP
	for <zsh-users@sunsite.dk>; Wed, 12 Dec 2007 15:29:11 +0100 (CET)
Received: by prunille.vinc17.org (Postfix, from userid 501)
	id B12F01C6AC4C; Wed, 12 Dec 2007 15:31:46 +0100 (CET)
Date: Wed, 12 Dec 2007 15:31:46 +0100
From: Vincent Lefevre <vincent@vinc17.org>
To: Zsh users list <zsh-users@sunsite.dk>
Subject: Re: 4.3.4-dev-4 and 4.2.6-dev-2 available
Message-ID: <20071212143146.GD28728@prunille.vinc17.org>
Mail-Followup-To: Zsh users list <zsh-users@sunsite.dk>
References: <22582.1197372038@csr.com> <20071212010837.GZ13079@prunille.vinc17.org> <20071212130703.5e6931dc@news01>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <20071212130703.5e6931dc@news01>
X-Mailer-Info: http://www.vinc17.org/mutt/
User-Agent: Mutt/1.5.17-vl-r19795 (2007-12-11)
X-Virus-Scanned: ClamAV using ClamSMTP

On 2007-12-12 13:07:03 +0000, Peter Stephenson wrote:
> which is that in the traditional "test" command (not [[, which is parsed
> properly),
>   ( ! -e )
> should be treated as
>   ( ! -n -e )
> which is horrible, but it's a horror we're already trying to work around so
> presumably we ought to go the extra mile.

No, this is not what POSIX says. See

  http://www.opengroup.org/onlinepubs/009695399/utilities/test.html

In particular:

  The algorithm for determining the precedence of the operators and
  the return value that shall be generated is based on the number of
  arguments presented to test.

Here, there are 4 arguments. Thus the parentheses have the precedence:

  4 arguments:
    * If $1 is '!', negate the three-argument test of $2, $3, and $4.
    * If $1 is '(' and $4 is ')', perform the two-argument test of $2
      and $3.

As a consequence, this is equivalent to 'test ! -e' (2-argument test),
which corresponds to:

  2 arguments:
    * If $1 is '!', exit true if $2 is null, false if $2 is not null.

> Furthermore, this change makes
>   ( ! -e ) )
> an error:

Hmm... I don't think so. POSIX is a bit unclear, but its rationale
is more detailed. If you use a greedy left-to-right algorithm and
the POSIX precedence rules, this is not an error. Otherwise I don't
see how you can determine which closing parenthesis you should take
(taking the first one doesn't seem to be more intuitive than taking
the last one). Now, I can see that GNU test regards this as an
error, but it may be wrong here.

However, I don't know how this should be parsed:

  -n OK -a ! ( = )

i.e. if this should be regarded as

  -n OK -a ! ( <expression> )

or as

  -n OK -a ! <string> = <string>

Or things like this: -n OK -a ! = = =

> Unfortunately,
>   ( -e ) )
> is parsed by GNU test as -e ")" in parentheses. This is rather
> inconsistent of it.

Well, this is what POSIX (with XSI) requires: the rules are different
whether you have up to 4 arguments or more than 4 arguments. Portable
script should follow POSIX anyway. Otherwise, users should rather use
[[ ... ]]. As you said, the 'test' builtin is for compatibility.

But try the following:

  /usr/bin/test -n OK -a \( -e \) \)

Here it returns the error:

  /usr/bin/test: extra argument `)'

This is consistent with its parsing of "\( \! -e \) \)". I still think
that both are wrong, though.

I think the rationale behind the specific rules for up to 4 arguments
is for compatibility with historical systems, to be able to support
the implicit "-n".

> What I don't have is a set of tests:  our test suite doesn't include many
> tests for test or [.  This is a real nuisance, since it's quite likely this
> changes something.  So I'll need to write something first (I presume no one
> else is going to).

Perhaps GNU test has a more complete test suite, at least for the
cases up to 4 arguments?

-- 
Vincent Lefèvre <vincent@vinc17.org> - Web: <http://www.vinc17.org/>
100% accessible validated (X)HTML - Blog: <http://www.vinc17.org/blog/>
Work: CR INRIA - computer arithmetic / Arenaire project (LIP, ENS-Lyon)

