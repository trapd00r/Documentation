From zsh-workers-return-27954-mason-zsh=primenet.com.au@zsh.org Fri May 14 07:42:50 2010
Return-Path: <zsh-workers-return-27954-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 28533 invoked by alias); 14 May 2010 07:42:50 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 27954
Received: (qmail 23080 invoked from network); 14 May 2010 07:42:48 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE,
	SPF_HELO_PASS autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at bewatermyfriend.org does not designate permitted sender hosts)
From: Frank Terbeck <ft@bewatermyfriend.org>
To: zsh-workers@zsh.org
Cc: Simon Ruderich <simon@ruderich.org>
Subject: PATCH: (1/2) vcs_info: more minor documentation fixes
Date: Fri, 14 May 2010 09:40:29 +0200
Message-Id: <1273822830-6840-2-git-send-email-ft@bewatermyfriend.org>
X-Mailer: git-send-email 1.7.1
In-Reply-To: <1273822830-6840-1-git-send-email-ft@bewatermyfriend.org>
References: <1273822830-6840-1-git-send-email-ft@bewatermyfriend.org>
X-Df-Sender: 430444

From: Simon Ruderich <simon@ruderich.org>

---
 Doc/Zsh/contrib.yo     |    4 ++--
 Misc/vcs_info-examples |   12 +++++-------
 2 files changed, 7 insertions(+), 9 deletions(-)

diff --git a/Doc/Zsh/contrib.yo b/Doc/Zsh/contrib.yo
index 10a45e8..2708625 100644
--- a/Doc/Zsh/contrib.yo
+++ b/Doc/Zsh/contrib.yo
@@ -360,9 +360,9 @@ subsect(Quickstart)
 To get this feature working quickly (including colors), you can do the
 following (assuming, you loaded var(vcs_info) properly - see above):
 
-example(zstyle ':vcs_info:*' actionformats \ 
+example(zstyle ':vcs_info:*' actionformats \
     '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
-zstyle ':vcs_info:*' formats       \ 
+zstyle ':vcs_info:*' formats       \
     '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
 zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
 precmd () { vcs_info }
diff --git a/Misc/vcs_info-examples b/Misc/vcs_info-examples
index 6060f23..e0f531b 100644
--- a/Misc/vcs_info-examples
+++ b/Misc/vcs_info-examples
@@ -2,7 +2,7 @@
 
 ### Running vcs_info #########################################################
 
-# As always, there's more than one way to skin a cat. Running vcs_info is
+# As always, there's more than one way to skin a cat. Running vcs_info is no
 # exception. Here is a rundown of three common ways to get it into action.
 #
 # All three ways need vcs_info to be marked for autoloading first, so you'd
@@ -140,7 +140,6 @@ zstyle ':vcs_info:hg:*' branchformat '%b'
 # Then add the hash to 'formats' as %i and truncate it to 12 chars:
 zstyle ':vcs_info:hg:*' formats ' (%s)-[%12.12i %b]-'
 
-
 ### Truncate long hash to 12-chars but also allow for multiple parents
 # Hashes are joined with a + to mirror the output of `hg id`.
 zstyle ':vcs_info:hg+set-hgrev-format:*' hooks hg-shorthash
@@ -162,7 +161,7 @@ function +vi-hg-shorthash() {
 zstyle ':vcs_info:hg+set-hgrev-format:*' hooks hg-storerev
 zstyle ':vcs_info:hg+set-message:*' hooks hg-branchhead
 
-# The hash is availabe in the hgrev-format hook, store a copy of it in the
+# The hash is available in the hgrev-format hook, store a copy of it in the
 # user_data array so we can access it in the second function
 function +vi-hg-storerev() {
     user_data[hash]=${hook_com[hash]}
@@ -189,7 +188,7 @@ function +vi-hg-branchhead() {
 }
 
 
-### Run vcs_info selectively to increase speed in large repos #################
+### Run vcs_info selectively to increase speed in large repos ################
 
 # The following example shows a possible setup for vcs_info which displays
 # staged and unstaged changes in the vcs_info prompt and prevents running
@@ -306,7 +305,7 @@ zstyle ':vcs_info:*' actionformats " (%s)-[%b%Q|%a]-"
 # or apply patches to a normal directory tree that's not under version
 # control. The debian project does this for a large number of packages,
 # during their automatic build process.
-# The `use-quilt' style only enables# addon-mode, because for standalone
+# The `use-quilt' style only enables addon-mode, because for standalone
 # mode we'd have to try to detect whether quilt is "active" in a directory.
 # You can fine-tune that "detection" using the `quilt-standalone' style.
 # If the value of that style is a function name, that function is executed
@@ -361,7 +360,7 @@ zstyle ':vcs_info:*' quiltformat '#%p [%n|%c]'
 # quilt-nopatch-format (default: "no patch applied")
 zstyle ':vcs_info:*' quilt-nopatch-format '#cleeaaaaan!1!!'
 
-# To retrieve inforamation about unapplied patches, vcs_info invokes `quilt'
+# To retrieve information about unapplied patches, vcs_info invokes `quilt'
 # itself. Even though that's pretty quick, it's not needed for the default
 # behaviour. If we want to have `%c' and `%u' to contain meaningful data,
 # we have to enable retrieval of unapplied data:
@@ -379,7 +378,6 @@ zstyle ':vcs_info:-quilt-.quilt-standalone:*:*' quilt-patch-dir debian/patches
 # want the default `patches' though but a dedicated place for them.
 # Say `~/patches/<repository-name>'. Now we'll use some evaluated-style
 # magic to achieve all that:
-
 zstyle -e ':vcs_info:*.quilt-addon:*:*' quilt-patch-dir 'my-patches-func'
 
 # That runs something called `my-patches-func', and the value of $reply is
-- 
1.7.1

