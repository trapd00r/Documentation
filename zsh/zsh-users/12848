From zsh-users-return-12848-mason-zsh=primenet.com.au@sunsite.dk Sun May 11 19:00:02 2008
Return-Path: <zsh-users-return-12848-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 4261 invoked from network); 11 May 2008 18:59:51 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 11 May 2008 18:59:51 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 46326 invoked from network); 11 May 2008 18:59:40 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 11 May 2008 18:59:40 -0000
Received: (qmail 22290 invoked by alias); 11 May 2008 18:59:31 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12848
Received: (qmail 22272 invoked from network); 11 May 2008 18:59:30 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 11 May 2008 18:59:30 -0000
Received: from mtaout02-winn.ispmail.ntl.com (mtaout02-winn.ispmail.ntl.com [81.103.221.48])
	by bifrost.dotsrc.org (Postfix) with ESMTP id C10D680ED172
	for <zsh-users@sunsite.dk>; Sun, 11 May 2008 20:59:26 +0200 (CEST)
Received: from aamtaout01-winn.ispmail.ntl.com ([81.103.221.35])
          by mtaout02-winn.ispmail.ntl.com with ESMTP
          id <20080511190311.UPNO58.mtaout02-winn.ispmail.ntl.com@aamtaout01-winn.ispmail.ntl.com>
          for <zsh-users@sunsite.dk>; Sun, 11 May 2008 20:03:11 +0100
Received: from pws-pc ([81.107.40.67]) by aamtaout01-winn.ispmail.ntl.com
          with ESMTP
          id <20080511190412.CCTK219.aamtaout01-winn.ispmail.ntl.com@pws-pc>
          for <zsh-users@sunsite.dk>; Sun, 11 May 2008 20:04:12 +0100
Date: Sun, 11 May 2008 19:58:14 +0100
From: Peter Stephenson <p.w.stephenson@ntlworld.com>
To: Zsh Users List <zsh-users@sunsite.dk>
Subject: Re: "return" is an always block
Message-ID: <20080511195814.52a05fae@pws-pc>
In-Reply-To: <20080511164119.GB4985@sc.homeunix.net>
References: <20080511164119.GB4985@sc.homeunix.net>
X-Mailer: Claws Mail 3.3.1 (GTK+ 2.12.5; x86_64-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: ClamAV 0.91.2/7090/Sun May 11 20:03:45 2008 on bifrost
X-Virus-Status: Clean

On Sun, 11 May 2008 17:41:19 +0100
Stephane Chazelas <Stephane_Chazelas@yahoo.fr> wrote:
> I noticed that
> 
> f() { {} always {return}; echo here }
> 
> did output "here", that is, the "return" statement doesn't
> return from the function. Is this the intended behavior?

Well, kind of.  The point is that the "always" block happens between a
return in the try block, i.e.

  f() { { return } always { echo there } }

prints "there" before returning.  So currently we keep the return, break
and continue status from the try block.

However, I don't see why we shouldn't allow a return or break in the
always part to override it, as long as we don't ignore what's in the try
block if there's nothing in the always block; that seems to be a natural
part of what the always block is there for.  Hence

f() {
  integer loops
  while true; do
    while true; do
     {
        break 2 
     } always {
        break 1
     }
    done
    loops=1
    break
  done
  if (( loops )); then
    print always won
  else
    print try won
  fi
}

now prints "always won".

The always block previously claimed not to be part of a loop anyway, so
break and continue failed.  That was sensible with the old code, but if
we're going to allow it to do that it should just leave the count of
surrounding loops alone.

Index: Src/loop.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/loop.c,v
retrieving revision 1.21
diff -u -r1.21 loop.c
--- Src/loop.c	27 Jun 2007 13:56:11 -0000	1.21
+++ Src/loop.c	11 May 2008 18:57:02 -0000
@@ -631,7 +631,7 @@
 {
     Wordcode end, always;
     int endval;
-    int save_retflag, save_breaks, save_loops, save_contflag;
+    int save_retflag, save_breaks, save_contflag;
     zlong save_try_errflag, save_try_tryflag;
 
     end = state->pc + WC_TRY_SKIP(state->pc[-1]);
@@ -664,8 +664,6 @@
     retflag = 0;
     save_breaks = breaks;
     breaks = 0;
-    save_loops = loops;
-    loops = 0;
     save_contflag = contflag;
     contflag = 0;
 
@@ -674,10 +672,12 @@
 
     errflag = try_errflag ? 1 : 0;
     try_errflag = save_try_errflag;
-    retflag = save_retflag;
-    breaks = save_breaks;
-    loops = save_loops;
-    contflag = save_contflag;
+    if (!retflag)
+	retflag = save_retflag;
+    if (!breaks)
+	breaks = save_breaks;
+    if (!contflag)
+	contflag = save_contflag;
 
     cmdpop();
     popheap();
Index: Test/A01grammar.ztst
===================================================================
RCS file: /cvsroot/zsh/zsh/Test/A01grammar.ztst,v
retrieving revision 1.16
diff -u -r1.16 A01grammar.ztst
--- Test/A01grammar.ztst	12 Dec 2007 13:46:37 -0000	1.16
+++ Test/A01grammar.ztst	11 May 2008 18:57:02 -0000
@@ -332,6 +332,14 @@
 >Status after always block is 1.
 ?(eval):3: bad substitution
 
+  fn() { { return } always { echo always 1 }; echo not executed }
+  fn
+  fn() { { echo try 2 } always { return }; echo not executed }
+  fn
+0:Always block interaction with return
+>always 1
+>try 2
+
 # Outputting of structures from the wordcode is distinctly non-trivial,
 # we probably ought to have more like the following...
   fn1() { { echo foo; } }


-- 
Peter Stephenson <p.w.stephenson@ntlworld.com>
Web page now at http://homepage.ntlworld.com/p.w.stephenson/

