From zsh-workers-return-17178-mason-zsh=primenet.com.au@sunsite.dk Fri May 17 18:36:43 2002
Return-Path: <zsh-workers-return-17178-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23405 invoked from network); 17 May 2002 18:36:42 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 17 May 2002 18:36:42 -0000
Received: (qmail 4987 invoked by alias); 17 May 2002 18:36:34 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 17178
Received: (qmail 4974 invoked from network); 17 May 2002 18:36:33 -0000
Date: Fri, 17 May 2002 11:36:25 -0700 (PDT)
From: Bart Schaefer <schaefer@brasslantern.com>
Sender: schaefer@ns1.sodaware.com
To: DervishD <raul@pleyades.net>
cc: Zsh <zsh-workers@sunsite.dk>
Subject: Re: Using the new completion system 'naked'
In-Reply-To: <3CE54512.mail1J611TGTR@viadomus.com>
Message-ID: <Pine.LNX.4.44.0205171123260.28884-100000@ns1.sodaware.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

On Fri, 17 May 2002, DervishD wrote:

>     - Will the old 'compctl' completion system disabled in the
> future? And if the answer is 'yes', when?

The answers are "maybe, but probably not" and "nobody knows."

>     - Can I use the new completion system without compinstall'ing it
> and without compinit'ing it, just by suitably calling compadd,
> compset and compcall (no compdef...)?

Yes, of course you can.  The `compinit' system is only one of many that
could be built on top of the compadd etc. builtins.  It just happens to
be the best one we've come up with so far.

>     Moreover, if the answer is not very large: what advantages gives
> the new completion mechanism over the old one?

Depends on what you mean by "the new completion mechanism."

If you mean "the `compinit' system" then the answer is very large but
mostly boils down to having more completions available out of the box,
with a way to customize them without rewriting them (zstyles), plus a
better-organized system for adding others as we go along.

If you mean the compadd/compset/etc. builtins only, plus `zle -C', then
the advantage is meant to be that the syntax is less baroque than that
of `compctl -x', and correspondingly that more of the processing can be
described by shell functions which are presumably more readable and more
easily debugged than are the cryptic strings used by `compctl'.

One might observe that `_arguments' has become nearly as cryptic as
`compctl', but on the other hand it's also doing a lot more work.

