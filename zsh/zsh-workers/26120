From zsh-workers-return-26120-mason-zsh=primenet.com.au@sunsite.dk Tue Dec 09 19:18:26 2008
Return-Path: <zsh-workers-return-26120-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5193 invoked from network); 9 Dec 2008 19:18:22 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 9 Dec 2008 19:18:22 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 82766 invoked from network); 9 Dec 2008 19:18:17 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 9 Dec 2008 19:18:17 -0000
Received: (qmail 10478 invoked by alias); 9 Dec 2008 19:18:13 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 26120
Received: (qmail 10461 invoked from network); 9 Dec 2008 19:18:12 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 9 Dec 2008 19:18:12 -0000
Received: from solo.fdn.fr (solo.fdn.fr [80.67.169.19])
	by bifrost.dotsrc.org (Postfix) with ESMTPS id D4B3D80524C3
	for <zsh-workers@sunsite.dk>; Tue,  9 Dec 2008 20:18:05 +0100 (CET)
Received: by solo.fdn.fr (Postfix, from userid 10)
	id A3A3744F25; Tue,  9 Dec 2008 20:18:04 +0100 (CET)
Received: by renevier.net (Postfix, from userid 1000)
	id 1336E4740F2; Tue,  9 Dec 2008 20:17:57 +0100 (CET)
Date: Tue, 9 Dec 2008 20:17:57 +0100
From: arno <arenevier@fdn.fr>
To: zsh-workers@sunsite.dk
Subject: PATCH: _cryptsetup
Message-ID: <20081209191757.GA16271@localhost>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha1;
	protocol="application/pgp-signature"; boundary="vkogqOf2sHV7VnPd"
Content-Disposition: inline
User-Agent: Mutt/1.5.18 (2008-05-17)
X-Virus-Scanned: ClamAV 0.92.1/8737/Tue Dec  9 17:59:48 2008 on bifrost
X-Virus-Status: Clean


--vkogqOf2sHV7VnPd
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

Hi,
here is a completion file for cryptsetup. As, I included luks (linux unifie=
d=20
key setup) command, I have put it in Linux directory.


Index: Completion/Linux/_cryptsetup
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: Completion/Linux/_cryptsetup
diff -N Completion/Linux/_cryptsetup
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ Completion/Linux/_cryptsetup	9 Dec 2008 18:46:05 -0000
@@ -0,0 +1,125 @@
+#compdef cryptsetup
+
+_cryptsetup () {
+    emulate -L zsh
+    setopt extendedglob
+
+    local -a arguments
+    local state cmds
+
+    # hardcode list of password hashes accepted by gcrypt
+    local -a gcrypthash
+    gcrypthash=3D("sha1" "md5" "sha256" "ripemd160" "rmd160" "sha384" "sha=
512" "sha224" "md2" "md4" "tiger" "haval")
+
+    # read /proc/crypto to detect available ciphers
+    local -a ciphers
+    local cryptolines currentname
+    cryptolines=3D("${(f)$(< /proc/crypto )}")
+    for i in {0..${#cryptolines}}; do
+        if [[ $cryptolines[$i] =3D=3D name[[:space:]]#*:[[:space:]]#(#b)(*=
) ]]; then
+            currentname=3D$match[1]
+        elif [[ $cryptolines[$i] =3D=3D type[[:space:]]#*:[[:space:]]#ciph=
er ]]; then
+            ciphers+=3D($currentname)
+        fi
+    done
+
+  _arguments \
+    '(--hash, -h)'{-h,--hash}'[hash for password hashing]:hash algorithm:(=
$gcrypthash)' \
+    '(--cipher, -c)'{-c,--cipher}'[cipher specification]:cipher:($ciphers)=
' \
+    '(--verify-passphrase, -y)'{-y,--verify-passphrase}'[query for passwor=
ds twice]' \
+    '(--key-file, -d)'{-d,--key-file}'[use file as key material]:key file:=
_files' \
+    '(--key-slot, -S)'{-S,--key-slot}'[specify key slot for the new key]:k=
ey slot:' \
+    '(--key-size, -s)'{-s,--key-size}'[set key size in bits]:key size:' \
+    '(--size, -b)'{-b,--size}'[force size of underlying device in sectors]=
:device size:' \
+    '(--offset, -o)'{-o,--offset}'[start offset in the backend device]:sta=
rt offset:' \
+    '(--skip, -p)'{-p,--skip}'[numbers of sectors of the encrypted data to=
 skip at the beginning]:sectors number:' \
+    '--readonly[set up a read-only mapping]' \
+    '(--iter-time, -i)'{-i,--iter-time}'[milliseconds to spend with PBKDF2=
 password processing]:milliseconds number:' \
+    '(--batch-mode, -q)'{-q,--batch-mode}'[do not ask for confirmation]' \
+    '(--timeout, -t)'{-t,--timeout}'[number of seconds to wait before time=
out]:seconds number:' \
+    '(--tries, -T)'{-T,--tries}'[How often the input of the passphrase sha=
ll be retried]:tries number:' \
+    '--align-payload=3D[Align payload at a boundary of value 512-byte sect=
ors]:payload value:' \
+    '--version[Show the version]' \
+    '1: :->cmds' \
+    '*: :->args'
+
+  case $state in=20
+    cmds)
+      cmds=3D(
+        'create:create a mapping'
+        'remove:remove an existing mapping'
+        'status:reports the status for a mapping'
+        'resize:resize an active mapping'
+        'luksFormat:initializes a LUKS partition'
+        'luksOpen:opens a LUKS partition'
+        'luksClose:closes a LUKS partition'
+        'luksAddKey:add a new key file/passphrase'
+        'luksRemoveKey:remove a key from LUKS devic'
+        'luksKillSlot:wipe a key from LUKS device'
+        'luksUUID:print UUID of device with LUKS header'
+        'isLuks:returns true if device has is LUKS partition. Otherwise, f=
alse'
+        'luksDump:dumps header infos of a LUKS partition'
+      )
+        _describe -t commands 'command' cmds
+      ;;
+      args)
+        args=3D()
+        case $line[1] in
+
+        create)
+         if [ ${#line} -eq 2 ]; then
+            _message 'name of mapping'
+        elif [ ${#line} -eq 3 ]; then
+            _arguments '*:device:_files'
+        fi
+        ;;
+
+        luksFormat)
+         if [ ${#line} -eq 2 ]; then
+            _arguments '*:device:_files'
+        elif [ ${#line} -eq 3 ]; then
+            _arguments '*:key file:_files'
+       fi
+        ;;
+
+        luksAddKey)
+         if [ ${#line} -eq 2 ]; then
+            _arguments '*:device:_files'
+        elif [ ${#line} -eq 3 ]; then
+            _arguments '*:new key file:_files'
+       fi
+        ;;
+
+        luksKillSlot)
+         if [ ${#line} -eq 2 ]; then
+            _arguments '*:device:_files'
+        elif [ ${#line} -eq 3 ]; then
+            _message 'key slot number'
+       fi
+        ;;
+
+        luksOpen)
+         if [ ${#line} -eq 2 ]; then
+            _arguments '*:device:_files'
+        elif [ ${#line} -eq 3 ]; then
+            _message 'name of mapping'
+        fi
+        ;;
+
+        luksUUID|isLuks|luksDump)
+            _arguments '*:device:_files'
+        ;;
+
+        remove|status|resize|luksClose)
+            local -a res
+            res=3D(/dev/mapper/*(:t))
+            _wanted name expl 'mapping name' compadd "$@" -a - res
+        ;;
+        esac
+    ;;
+  esac
+
+}
+
+
+_cryptsetup "$@"

--vkogqOf2sHV7VnPd
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: Digital signature
Content-Disposition: inline

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (GNU/Linux)

iEYEARECAAYFAkk+xGQACgkQiH9aBScBsrMTzgCfQOJXTh8jcPogsJrxRSFgN/wD
uP0AoJR/yr7Qdm4vlILg6gl8IaoDhwPh
=VWHy
-----END PGP SIGNATURE-----

--vkogqOf2sHV7VnPd--

