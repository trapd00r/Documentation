From zsh-workers-return-16101-mason-zsh=primenet.com.au@sunsite.dk Mon Oct 22 05:21:02 2001
Return-Path: <zsh-workers-return-16101-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 7463 invoked from network); 22 Oct 2001 05:21:01 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 22 Oct 2001 05:21:01 -0000
Received: (qmail 13248 invoked by alias); 22 Oct 2001 05:20:56 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 16101
Received: (qmail 13227 invoked from network); 22 Oct 2001 05:20:55 -0000
From: Borsenkow Andrej <Andrej.Borsenkow@mow.siemens.ru>
To: "'Geoff Wing'" <gcw@zsh.org>, "'Zsh Hackers'" <zsh-workers@sunsite.dk>
Subject: RE: multibyte backwarddeletechar
Date: Mon, 22 Oct 2001 09:20:37 +0400
Message-ID: <000001c15ab9$489f8cf0$21c9ca95@mow.siemens.ru>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook, Build 10.0.3311
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000
In-Reply-To: <20011022105702.A4297@primenet.com.au>
Importance: Normal

> 
> My first thought is whether it is meaningful to use multibyte glyphs
> on the command line.  And it may well be if, say, people name files
using
> multibyte glyphs and other programs (e.g. ls) display those names.

Yes. We may argue that it is non-portable but you cannot force people to
use ASCII only.

> My second is whether we truly want to handle multibyte glyphs.  I
don't
> think minihacks will work.  It may be a major overhaul.  Not just the
ZLE
> refresh code would need updating but other areas too.


Of course. The whole string handling in zsh must be rewritten. Even
globbing won't work properly any more (`?' is not expected to match more
than one byte and character classes stop working).

The problem is it does mean overhead. I am not sure about proper
implementation. Using wchar looks portable but the immediate problem is
that conventional str* functions stop working. Using UTF-8 is appealing
due to ASCII compatibility but then you get a problem converting from/to
external charset (that implies reimplementing iconv layer for systems
that do have it natively).



-andrej

