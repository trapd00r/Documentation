From zsh-users-return-15711-mason-zsh=primenet.com.au@zsh.org Fri Jan 14 14:47:41 2011
Return-Path: <zsh-users-return-15711-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5147 invoked by alias); 14 Jan 2011 14:47:40 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15711
Received: (qmail 12068 invoked from network); 14 Jan 2011 14:47:39 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at esperi.org.uk does not designate permitted sender hosts)
To: zsh-users@zsh.org
Subject: zsh 4.3.11 regexp-related crash
From: Nix <nix@esperi.org.uk>
Emacs: because extension languages should come with the editor built in.
Date: Fri, 14 Jan 2011 14:47:35 +0000
Message-ID: <877he7sfso.fsf@spindle.srvr.nix>
User-Agent: Gnus/5.1008 (Gnus v5.10.8) XEmacs/21.5-b29 (linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-DCC-STAT_FI_X86_64_VIRTUAL-Metrics: spindle 1245; Body=1 Fuz1=1 Fuz2=1

This is a regression in 4.3.11, not seen in 4.3.10.

The following script:

,----
| #!/bin/zsh
| 
| cat /etc/passwd | while read A; do
| 
|     if [[ $A =~ ":audio:" ]]; then
|         FBAR="foo"
|     fi
| done
`----

dumps core:

#0  0x00007fac8ee16b7f in __strlen_sse42 () from /lib/libc.so.6
#1  0x000000000046fcec in taddstr (s=0x7faca8049c40 <Address 0x7faca8049c40 out of bounds>) at text.c:115
#2  0x00000000004700e4 in taddlist (state=0x7fffe3a9a7e0, num=<value optimized out>) at text.c:141
#3  0x0000000000471134 in gettext2 (state=0x7fffe3a9a7e0) at text.c:520
#4  0x00000000004711e6 in getjobtext (prog=0x7fac8fb5f508, c=0x7fac8fb5f560) at text.c:223
#5  0x000000000042527a in execpline2 (state=0x7fffe3a9ab40, pcode=<value optimized out>, how=18, input=12, output=0, last1=0) at exec.c:1625
#6  0x00000000004251a8 in execpline2 (state=0x7fffe3a9ab40, pcode=<value optimized out>, how=18, input=0, output=0, last1=0) at exec.c:1687
#7  0x0000000000425565 in execpline (state=0x7fffe3a9ab40, slcode=<value optimized out>, how=18, last1=0) at exec.c:1416
#8  0x00000000004264a7 in execlist (state=0x7fffe3a9ab40, dont_change_job=<value optimized out>, exiting=<value optimized out>) at exec.c:1199
#9  0x00000000004267f6 in execode (p=0x7fac8fb5f508, dont_change_job=0, exiting=0, context=0x47ed45 "toplevel") at exec.c:1020
#10 0x0000000000437e01 in loop (toplevel=1, justonce=0) at init.c:185
#11 0x000000000043916e in zsh_main (argc=<value optimized out>, argv=<value optimized out>) at init.c:1508
#12 0x00007fac8ed2ed6d in __libc_start_main () from /lib/libc.so.6
#13 0x000000000040e419 in _start ()

It looks like getjobtext() is being handed an invalid string, but quite
how that gets there is beyond me right now.

Oddly, it is sensitive to the length of the FBAR variable name. FBAR
dumps core: BAR does not.

