From zsh-users-return-15639-mason-zsh=primenet.com.au@zsh.org Wed Dec 08 15:33:40 2010
Return-Path: <zsh-users-return-15639-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 9179 invoked by alias); 8 Dec 2010 15:33:40 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15639
Received: (qmail 29001 invoked from network); 8 Dec 2010 15:33:36 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,SPF_HELO_PASS
	autolearn=ham version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at myproxylists.com designates 217.119.39.74 as permitted sender)
X-Originating-IP: 127.0.0.1
Message-ID: <b2c158521f36836e06226f3b154d56d6.squirrel@gameframe.net>
In-Reply-To: <20101206140530.77fd46a5@pwslap01u.europe.root.pri>
References: <6741cd3f3c35661a5b89e0078c20a0f6.squirrel@gameframe.net>
    <AANLkTi=V_dGPK0FBN9FhEC8ZUYzUvi3-o720r9u_Muuu@mail.gmail.com>
    <20101206140530.77fd46a5@pwslap01u.europe.root.pri>
Date: Wed, 8 Dec 2010 17:33:29 +0200
Subject: Re: A strange function behaviour in random password generator
From: nix@myproxylists.com
To: "Peter Stephenson" <Peter.Stephenson@csr.com>
Cc: zsh-users@zsh.org
User-Agent: SquirrelMail/1.4.20
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
Importance: Normal

> On Mon, 6 Dec 2010 14:39:41 +0100
> Mikael Magnusson <mikachu@gmail.com> wrote:
>> On 6 December 2010 14:15,  <nix@myproxylists.com> wrote:
>> > Hi, I have just coded a random password generator. It works good
>> > but one might want to show me how to do it with rand48() as its
>> > output is strange.
>> >
>> > The problem:
>> >
>> > ./random_pass.sh
>> > iNkiuG
>> > iNkiuG6K
>> >
>> > 6 first chars are the same for both passwords.
>>
>> > [...]
>>
>> > pos=$((RANDOM%$seeds_count+1))
>> > MY_RCON=$(random 6)
>> > MY_PASS=$(random 8)
>>
>> If you access $RANDOM in a subshell, the parent shell doesn't know
>> about it, and next time it forks a subshell the state will be
>> identical.
>

Thanks Mikael for pointing it out.

> That's what the seed argument for rand48 is for.  Here's a function that
> creates a seed in a file and always uses that file.  The new random number
> is in $REPLY.  There are all sorts of possible improvements.
>
> rand48() {
>   local sfile=~/.zsh_rand48
>   zmodload -i zsh/mathfunc
>
>   if [[ ! -f $sfile ]]; then
>     touch $sfile
>     chmod 600 $sfile
>     # Warning: this is not very random.
>     # OK for pseudorandom statistics, bad for security.
>     printf "%.4x%.4x%.4x\n" $RANDOM $RANDOM $RANDOM >$sfile
>   fi
>
>   local seed="$(<$sfile)"
>
>   typeset -g REPLY=$(( rand48(seed) ))
>
>   print $seed >$sfile
> }
>
>

I think I could now write the same password generator using rand48() based
on your example but i am afraid I would have to use external commands for
sorting the output.

> --
> Peter Stephenson <pws@csr.com>            Software Engineer
> Tel: +44 (0)1223 692070                   Cambridge Silicon Radio Limited
> Churchill House, Cambridge Business Park, Cowley Road, Cambridge, CB4 0WZ,
> UK
>
>
> Member of the CSR plc group of companies. CSR plc registered in England
> and Wales, registered number 4187346, registered office Churchill House,
> Cambridge Business Park, Cowley Road, Cambridge, CB4 0WZ, United Kingdom
>


