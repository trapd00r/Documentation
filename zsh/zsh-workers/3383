From zsh-workers-request@euclid.skiles.gatech.edu Tue Jul 29 07:41:43 1997
Return-Path: <zsh-workers-request@euclid.skiles.gatech.edu>
Delivered-To: mason@primenet.com.au
Received: (qmail 20437 invoked from network); 29 Jul 1997 07:41:39 -0000
Received: from euclid.skiles.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 29 Jul 1997 07:41:39 -0000
Received: (from list@localhost)
	by euclid.skiles.gatech.edu (8.8.5/8.8.5) id DAA14579;
	Tue, 29 Jul 1997 03:31:26 -0400 (EDT)
Resent-Date: Tue, 29 Jul 1997 03:31:26 -0400 (EDT)
From: Zoltan Hidvegi <hzoli@frontiernet.net>
Message-Id: <199707290730.DAA03258@hzoli.home>
Subject: Re: 3.0.4 bug: wrong character in hungetc()
In-Reply-To: <199707290642.CAA02532@hzoli.home> from Zoltan Hidvegi at "Jul 29, 97 02:42:02 am"
To: hzoli@frontiernet.net (Zoltan Hidvegi)
Date: Tue, 29 Jul 1997 03:30:49 -0400 (EDT)
Cc: mason@primenet.com.au, zsh-workers@math.gatech.edu
X-Mailer: ELM [version 2.4ME+ PL31 (25)]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Resent-Message-ID: <"MscHh1.0.kZ3.EnPtp"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/3383
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

> > Heyla,
> > I might have missed this previously.  Has this bug been dealt with?
> > 
> > % while ( [[ $I bug 10 ]] ) ; do ; done
> > zsh: condition expected: bug
> > BUG: wrong character in hungetc() 
> > BUG: wrong character in hungetc() 
> > BUG: wrong character in hungetc() 
> 
> Here is the fix.

Well, this does not get the history right.  Forget this lex.c patch, and
try this one instead.

Zoltan


*** Src/parse.c	1997/06/05 04:44:57	3.1.3.0
--- Src/parse.c	1997/07/29 07:29:47
***************
*** 34,39 ****
--- 34,40 ----
  
  #define YYERROR  { tok = LEXERR; return NULL; }
  #define YYERRORV { tok = LEXERR; return; }
+ #define COND_ERROR(X,Y) do{zerr(X,Y,0);discard_input();YYERROR}while(0)
  
  #define make_list()     allocnode(N_LIST)
  #define make_sublist()  allocnode(N_SUBLIST)
***************
*** 104,121 ****
  	    return NULL;
  	}
  	yyerror();
! 	errflag = 0;
! 	if (isnewlin <= 0) {
! 	    /* Discard remaining stuff after a parse error. */
! 	    int c;
! 
! 	    hwbegin(0);
! 	    while ((c = hgetc()) != '\n' && !lexstop);
! 	    if (c == '\n')
! 		hungetc('\n');
! 	    hwend();
! 	}
! 	errflag = 1;
  	return NULL;
      } else {
  	l->right = par_event();
--- 105,111 ----
  	    return NULL;
  	}
  	yyerror();
! 	discard_input();
  	return NULL;
      } else {
  	l->right = par_event();
***************
*** 1268,1277 ****
  {
      Cond n = (Cond) make_cond();
  
!     if (a[0] != '-' || !a[1] || a[2]) {
! 	zerr("parse error: condition expected: %s", a, 0);
! 	return NULL;
!     }
      n->left = (void *) b;
      n->type = a[1];
      n->ntype = NT_SET(N_COND, 1, NT_STR, NT_STR, 0, 0);
--- 1258,1265 ----
  {
      Cond n = (Cond) make_cond();
  
!     if (a[0] != '-' || !a[1] || a[2])
! 	COND_ERROR("parse error: condition expected: %s", a);
      n->left = (void *) b;
      n->type = a[1];
      n->ntype = NT_SET(N_COND, 1, NT_STR, NT_STR, 0, 0);
***************
*** 1310,1322 ****
  	if ((t0 = get_cond_num(b + 1)) > -1)
  	    n->type = t0 + COND_NT;
  	else
! 	    zerr("unrecognized condition: %s", b, 0);
      } else
! 	zerr("condition expected: %s", b, 0);
      n->left = (void *) a;
      n->right = (void *) c;
      n->ntype = NT_SET(N_COND, 1, NT_STR, NT_STR, 0, 0);
      return n;
  }
  
  /**/
--- 1298,1328 ----
  	if ((t0 = get_cond_num(b + 1)) > -1)
  	    n->type = t0 + COND_NT;
  	else
! 	    COND_ERROR("unrecognized condition: %s", b);
      } else
! 	COND_ERROR("condition expected: %s", b);
      n->left = (void *) a;
      n->right = (void *) c;
      n->ntype = NT_SET(N_COND, 1, NT_STR, NT_STR, 0, 0);
      return n;
+ }
+ 
+ /**/
+ static void
+ discard_input(void)
+ {
+     errflag = 0;
+     if (isnewlin <= 0) {
+ 	/* Discard remaining stuff after a parse error. */
+ 	int c;
+ 
+ 	hwbegin(0);
+ 	while ((c = hgetc()) != '\n' && !lexstop);
+ 	if (c == '\n')
+ 	    hungetc('\n');
+ 	hwend();
+     }
+     errflag = 1;
  }
  
  /**/

