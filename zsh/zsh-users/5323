From zsh-users-return-5323-mason-zsh=primenet.com.au@sunsite.dk Sat Aug 31 07:07:32 2002
Return-Path: <zsh-users-return-5323-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 16162 invoked from network); 31 Aug 2002 07:07:31 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 31 Aug 2002 07:07:31 -0000
Received: (qmail 8235 invoked by alias); 31 Aug 2002 07:07:19 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 5323
Received: (qmail 8224 invoked from network); 31 Aug 2002 07:07:18 -0000
From: "Bart Schaefer" <schaefer@brasslantern.com>
Message-Id: <1020831070648.ZM11875@candle.brasslantern.com>
Date: Sat, 31 Aug 2002 07:06:48 +0000
In-Reply-To: <200208310543.g7V5hZe23399@panix3.panix.com>
Comments: In reply to Arthur Alinovi <aalinovi@panix.com>
        "Why zsh?" (Aug 31,  1:43am)
References: <200208310543.g7V5hZe23399@panix3.panix.com>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Arthur Alinovi <aalinovi@panix.com>, zsh-users@sunsite.dk
Subject: Re: Why zsh?
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Aug 31,  1:43am, Arthur Alinovi wrote:
} 
} So far, I'm very impressed by what I see. However, a friend of mine
} (who is a bit of a unix wizard) uses tcsh and is curious as to what
} zsh can do that tcsh couldn't do if he wrote a 500 line .cshrc file

* Execute standard /bin/sh scripts.

* Handle ANY signal, not just INT and HUP.

* Redirect stderr without redirecting stdout as well.

* Parse real semantic control structures (loops, functions, etc.) rather
  than syntactic sugar that sort of looks like a control structure. [%]

And those are just the features common to any Bourne-like shell, such as
bash or ksh as well as zsh.  How about:

* Do real multi-line editing of arbitrary text (not just command lines).

* Do floating point arithmetic.  (Ok, so you need zsh 4.x for that one.)

* Save that 500 line startup file in byte-compiled form so it doesn't
  need to be parsed again the next time.  (Yeah, that's 4.x as well.)

I could go on, but there's no way to explain things like multios and
process substitutions in two lines of text, and you should have the idea
by now.

> "zsh is better that tcsh, because..."

... no one has yet had any reason to write a document entitled "Zsh
Programming Considered Harmful."

	http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/

----------
[%] I quote from <http://www.tcsh.org/tcsh.html/Control_flow.html>:

    "If the shell's input is not seekable, the shell buffers up input
     whenever a loop is being read and performs seeks in this internal
     buffer to accomplish the rereading implied by the loop."

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

Zsh: http://www.zsh.org | PHPerl Project: http://phperl.sourceforge.net   

