From zsh-users-return-15418-mason-zsh=primenet.com.au@zsh.org Tue Sep 21 15:44:43 2010
Return-Path: <zsh-users-return-15418-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 16374 invoked by alias); 21 Sep 2010 15:44:42 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15418
Received: (qmail 7107 invoked from network); 21 Sep 2010 15:44:39 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,FREEMAIL_FROM,RCVD_IN_DNSWL_NONE,
	T_TO_NO_BRKTS_FREEMAIL autolearn=ham version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at _spf.google.com designates 209.85.212.171 as permitted sender)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from
         :user-agent:mime-version:to:subject:references:in-reply-to
         :content-type:content-transfer-encoding;
        bh=3y0o4+g1AVbxFsY+tnAhvbFr12W3id2WJ1gwm25/Y1s=;
        b=Xz344oVjCFpS1dJsKqi14FU7JoFd8BRfrusN3RbvmE/04g40ulm8ZKl77ZwTHd164+
         3WoP1qulpMf4YWTmkoFelZLI2hi/vk/R+AeHZGmIvNoZdTiWxAtgw1umt53J533UOvtR
         ng8CoYg1J9qVpwsWrVburZ8VOEEwrmkBGo0p0=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:user-agent:mime-version:to:subject:references
         :in-reply-to:content-type:content-transfer-encoding;
        b=aTNzfw4EhXRDeTcdsg1rMYno4CfByCDGUt27qm+CJtyy0GUsuvCXJyodgmF7gEEvgH
         hpmcxqWOEYWNi33SArx4guynQfX16+oTmyIyAjveaCgMT3waKR6Hlc15Vxc+ORbJlc/J
         5gdF/mMN91D5wCOWI/Jaky5ern8HO8+b4Tc9o=
Message-ID: <4C98D2D0.9030901@gmail.com>
Date: Tue, 21 Sep 2010 21:14:16 +0530
From: Anonymous bin Ich <ichbinanon@gmail.com>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1.12) Gecko/20100915 Thunderbird/3.0.8
MIME-Version: 1.0
To: zsh-users@zsh.org
Subject: Re: Waiting for a process without using pid
References: <AANLkTinyDC-OoGBzuisMKUg+OqeeqG=HKZrNDuJZL+sD@mail.gmail.com>	<100916072654.ZM29712@torch.brasslantern.com>	<4C950347.9060109@gmail.com>	<100918124147.ZM31152@torch.brasslantern.com>	<AANLkTimY1T1n9Nq7ePkNdSbJ9zhPobwzwM5SfNYb8qfB@mail.gmail.com>	<100920075521.ZM30584@torch.brasslantern.com> <AANLkTikpY9u90sfKn4Ew0jc4CTq=PQB3=VdJoGs2Bccf@mail.gmail.com>
In-Reply-To: <AANLkTikpY9u90sfKn4Ew0jc4CTq=PQB3=VdJoGs2Bccf@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

On 09/20/2010 10:20 PM, PJ Weisberg wrote:
> On Mon, Sep 20, 2010 at 7:55 AM, Bart Schaefer
> <schaefer@brasslantern.com>  wrote:
>
>> Perhaps I was trying to make my solution too general; i.e., I didn't
>> want to care how many children were started or whether their PIDs had
>> been remembered.  But if you always have exactly two children, why not
>> this?
>>
>>     coproc read -E
>>     trap "print -p" CHLD
>>
>>     ./child.sh&
>>     pid1=$!
>>     ./child.sh&
>>     pid2=$!
>>
>>     read -p
>>     kill $pid1>&/dev/null
>>     kill $pid2>&/dev/null
>
> You *can* rewrite that to not care how many children there are.
>
> for thing in $stuff; do
>      ./child.sh $thing
>      set -A pids $pids $!
> done
>
> for child in $pids; do
>      kill $child>&/dev/null
> done
Ok, I have modified child.sh as following:

#!/bin/sh
if [ $# -gt 0 ]; then
     gotsig=0
     deadchild=0
     trap "exitfunc" INT HUP TERM
     trap "exitdeadchildfunc" CHLD
     exitfunc () {
         echo $$: Got sig...
         gotsig=1
     }
     exitdeadchildfunc () {
         echo $$: SIG is CHLD...
         deadchild=1
     }
     echo $$: Sleeping for $1 seconds
     sleep $1 &
     wait
     if [ $gotsig -ne 0 ]; then
         if [ $deadchild -ne 0 ]; then
             echo $$: sleep in for $1 seconds already stopped (no $!)
         else
             echo $$: Stopping sleep for $1 seconds in $!
             kill $!
         fi
     else
         echo $$: Slept for $1 seconds
     fi
else
     echo No args
     exit 1;
fi


So, two normal cases are:

% ./parent.sh
6680: Launching 2 child processes
6682: Sleeping for 1 seconds
6683: Sleeping for 5 seconds
6682: SIG is CHLD...
6682: Slept for 1 seconds
6680: Waking coprocess
Woken
Finishing 6680
6680: got HUP
6680: Waking coprocess
6683: Got sig...
6683: Stopping sleep in 6685 for 5 seconds
% ./parent.sh
6686: Launching 2 child processes
6688: Sleeping for 1 seconds
6689: Sleeping for 5 seconds
6688: SIG is CHLD...
6688: Slept for 1 seconds
6686: Waking coprocess
Woken
Finishing 6686
6686: got HUP
6686: Waking coprocess
6689: Got sig...
6689: SIG is CHLD...
6689: sleep in 6691 for 5 seconds already stopped
%

And one abnormal case is:
% ./parent.sh
6620: Launching 2 child processes
6622: Sleeping for 1 seconds
6623: Sleeping for 5 seconds
6622: SIG is CHLD...
6622: Slept for 1 seconds
6620: Waking coprocess
6620: Waking coprocess
% 6623: SIG is CHLD...
6623: Slept for 5 seconds

%

Now what is happening? Also, anyway do debug it (set -x isn't very 
helpful since all processes write simultaneously)

