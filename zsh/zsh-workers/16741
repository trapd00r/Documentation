From zsh-workers-return-16741-mason-zsh=primenet.com.au@sunsite.dk Thu Feb 28 15:51:41 2002
Return-Path: <zsh-workers-return-16741-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 10616 invoked from network); 28 Feb 2002 15:51:41 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 28 Feb 2002 15:51:41 -0000
Received: (qmail 1854 invoked by alias); 28 Feb 2002 15:51:32 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 16741
Received: (qmail 1843 invoked from network); 28 Feb 2002 15:51:31 -0000
From: "Bart Schaefer" <schaefer@brasslantern.com>
Message-Id: <1020228155000.ZM17507@candle.brasslantern.com>
Date: Thu, 28 Feb 2002 15:50:00 +0000
In-Reply-To: <20020228004858.A13280@eskimo.eskimo.com>
Comments: In reply to Derek Peschel <dpeschel@eskimo.com>
        "Auto-maintaining the manual (modularity of zsh)?" (Feb 28, 12:48am)
References: <20020228004858.A13280@eskimo.eskimo.com>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Derek Peschel <dpeschel@eskimo.com>, zsh-workers@sunsite.dk
Subject: Re: Auto-maintaining the manual (modularity of zsh)?
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Feb 28, 12:48am, Derek Peschel wrote:
}
} If the documentation or code aren't very modular, or if the layout of the
} documentation doesn't match the layout of the code, then I'm not going
} to bother.

The documentation and the code are modularized differently.  In my opinion,
the kind of automated documentation you're describing only works well for
*technical* documentation; e.g. it may work for documenting a code library
where the indended audience is programmers making use of the library, but
(beyond very limited contexts such as describing the names and options of
builtin commands) I do not feel it can be effective where the audience is
potentially-nontechnical users of the whole system created from the code.

Perhaps I'm wrong, but I imagine that you envision something like Sun's
Java documentation.  If so, stop it.  I find the Java docs to be only
superficially complete, and they're also an example of how bad it can be
to have the documentation match the code structure even when documenting
a library for a technical audience.

} Also it looks like there are not many specs, invariants, assertions,
} etc. at the level of subsystems (history, parameter expansion,
} arithmetic, parsing, etc.) Is that true?

It's not entirely untrue.  The DPUTS() macro is typically used for this
sort of thing, because it compiles away entirely when --enable-zsh-debug
is not configured, but there could be more DPUTS() calls than there are.

} Who are the people that understand each subsystem at the general level?

The best source of this information is Etc/CONTRIBUTORS, though you have
to look back through it fairly far in some cases as each section describes
only the things that people have worked on since the last release (and in
some cases certains "subsystems" haven't changed much in many releases).

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

Zsh: http://www.zsh.org | PHPerl Project: http://phperl.sourceforge.net   

