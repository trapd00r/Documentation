From zsh-workers-return-27613-mason-zsh=primenet.com.au@zsh.org Wed Jan 20 18:28:50 2010
Return-Path: <zsh-workers-return-27613-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12894 invoked by alias); 20 Jan 2010 18:28:50 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 27613
Received: (qmail 13456 invoked from network); 20 Jan 2010 18:28:38 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <100120102814.ZM20349@torch.brasslantern.com>
Date: Wed, 20 Jan 2010 10:28:14 -0800
In-reply-to: <20100120164648.7c23769f@news01>
Comments: In reply to Peter Stephenson <pws@csr.com>
 "Re: subscript expanded twice in a[subcript]++ (Was: problem with RANDOM and
 arrays)" (Jan 20,  4:46pm)
References: <chaz20100111201312.GB3902@seebyte.com>
	<chaz20100120133218.GB3872@yahoo.fr>	<20100120164648.7c23769f@news01>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: Zsh hackers list <zsh-workers@zsh.org>
Subject: Re: subscript expanded twice in a[subcript]++ (Was: problem with
 RANDOM and arrays)
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Jan 20,  4:46pm, Peter Stephenson wrote:
}
} Had an idea...  the second level down in the parameter code contains the
} evaluated subscript, so we can cache that, and be as paranoid as we feel
} about the validity of the cached value.

Much better:

schaefer<503> x=0; a=(x+=3 x+=2 x+=1 x+=4 x+=5); ((++a[++x])); print $a $x
5 x+=2 x+=1 x+=4 x+=5 4

Still a little dicey, but probably not fixable:

schaefer<507> x=3; a=(x+=3 x+=2 x+=1 x+=4 x+=5); ((++a[++a[1]])); print $a $x
7 x+=2 x+=1 x+=4 x+=5 1 6

In that expression, we read a[1] and get (x+=3) so we increment a[1] as
(x+=3+1)=7 and then increment a[7] (which was previously unset) to get 1.

There's probably some really complicated side-effect threading you could
get going with this.

