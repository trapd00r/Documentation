From zsh-users-return-15299-mason-zsh=primenet.com.au@zsh.org Thu Aug 19 17:16:09 2010
Return-Path: <zsh-users-return-15299-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 6468 invoked by alias); 19 Aug 2010 17:16:09 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15299
Received: (qmail 8169 invoked from network); 19 Aug 2010 17:16:04 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_LOW,
	SPF_HELO_PASS autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at csr.com does not designate permitted sender hosts)
Date: Thu, 19 Aug 2010 18:15:56 +0100
From: Peter Stephenson <Peter.Stephenson@csr.com>
To: zsh-users@zsh.org
Subject: Re: process substitution and Ctrl-C
Message-ID: <20100819181556.4a3e6589@csr.com>
In-Reply-To: <20100819140730.70daeb3b@csr.com>
References: <20100819124142.GQ16075@prunille.vinc17.org>
	<20100819140730.70daeb3b@csr.com>
Organization: Cambridge Silicon Radio
X-Mailer: Claws Mail 3.7.6 (GTK+ 2.18.9; i686-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 19 Aug 2010 17:15:56.0610 (UTC) FILETIME=[2FAA8220:01CB3FC2]
X-Scanned-By: MailControl A_09_40_00 (www.mailcontrol.com) on 10.68.0.162

On Thu, 19 Aug 2010 14:07:30 +0100
Peter Stephenson <Peter.Stephenson@csr.com> wrote:
> On Thu, 19 Aug 2010 14:41:42 +0200
> Vincent Lefevre <vincent@vinc17.net> wrote:
> > In the following example:
> > 
> >   { repeat 10 { date >&2; /bin/sleep 1 } } 2>>(cat -n; loop)
> > 
> > where "loop" is a program that consumes CPU time, is it normal that
> > when one interrupts the command with Ctrl-C, the substituted process
> > isn't killed? (I can see "loop" taking CPU time.)
> 
> Without looking at the code, I wouldn't be at all surprised: unless
> we did something special, SIGINT would go only to foreground
> processes, which wouldn't include the process substitution.
> Logically, you might have thought that passing the SIGINT as received
> by the shell on to associated processes (which are recorded in a part
> of the job record) should be possible, but this sort of thing is
> fairly well down my personal list of priorities.

I managed to get to the point where I had zero time to spare.  That's up
significantly from the usual amount, so I looked at this.

In fact we're jumping through a fairly large and stable hoop not all that
far above the ground to behave as if "we" got SIGINT.  "We" here is just
the main shell.  You might think, logically, that any process attached to
any job marked as running in the current shell should also get the signal
passed, if we're going to maintain the fiction.  This is a slightly smaller
hoop held a little further over the ground, but I don't see any fundamental
reason why we shouldn't jump through it.  Anyway, the following seems to do
the trick here.

Index: Src/jobs.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/jobs.c,v
retrieving revision 1.78
diff -p -u -r1.78 jobs.c
--- Src/jobs.c	18 Aug 2010 21:21:17 -0000	1.78
+++ Src/jobs.c	19 Aug 2010 17:08:33 -0000
@@ -496,6 +496,27 @@ update_job(Job jn)
 		breaks = loops;
 		errflag = 1;
 	    }
+	    if (errflag) {
+		/*
+		 * As we're pretending we got the signal, we need to
+		 * pretend anything attached to a CURSH process
+		 * got it, too.
+		 */
+		int i, j;
+		for (i = 1; i <= maxjob; i++) {
+		    if ((jobtab[i].stat & (STAT_CURSH|STAT_DONE)) ==
+			STAT_CURSH) {
+			for (j = 0; j < 2; j++) {
+			    pn = j ? jobtab[i].auxprocs : jobtab[i].procs;
+			    for (; pn; pn = pn->next) {
+				if (pn->status == SP_RUNNING) {
+				    kill(pn->pid, sig);
+				}
+			    }
+			}
+		    }
+		}
+	    }
 	}
     }
 }


-- 
Peter Stephenson <pws@csr.com>            Software Engineer
Tel: +44 (0)1223 692070                   Cambridge Silicon Radio Limited
Churchill House, Cambridge Business Park, Cowley Road, Cambridge, CB4 0WZ, UK


Member of the CSR plc group of companies. CSR plc registered in England and Wales, registered number 4187346, registered office Churchill House, Cambridge Business Park, Cowley Road, Cambridge, CB4 0WZ, United Kingdom

