From zsh-users-return-14774-mason-zsh=primenet.com.au@zsh.org Tue Feb 02 19:04:18 2010
Return-Path: <zsh-users-return-14774-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 18535 invoked by alias); 2 Feb 2010 19:04:18 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14774
Received: (qmail 16921 invoked from network); 2 Feb 2010 19:04:16 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,SPF_HELO_PASS
	autolearn=ham version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at bewatermyfriend.org does not designate permitted sender hosts)
From: Frank Terbeck <ft@bewatermyfriend.org>
To: Joke de Buhr <joke@seiken.de>
Cc: zsh-users@zsh.org
Subject: Re: Want to replace bash w zsh as system shell on Ubuntu
In-Reply-To: <201002021928.20601.joke@seiken.de> (Joke de Buhr's message of
	"Tue, 2 Feb 2010 19:28:20 +0100")
References: <20100202081546.GA5930@panix.com>
	<201002021806.25016.joke@seiken.de>
	<87mxzrjzkv.fsf@ft.bewatermyfriend.org>
	<201002021928.20601.joke@seiken.de>
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/23.1 (gnu/linux)
Date: Tue, 02 Feb 2010 20:04:13 +0100
Message-ID: <87fx5jjw7m.fsf@ft.bewatermyfriend.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Df-Sender: 430444

Joke de Buhr wrote:
> On Tuesday 02 February 2010 18:51:28 Frank Terbeck wrote:
[...]
>> > matches=("$HOME"/((.*|*)/)#*(#q^u${SUDO_UID}u${UID},^g${SUDO_GID}g${GID})
>> >) [[ -n ${matches} ]] && chown $SUDO_UID:$SUDO_GID "${matches[@]}"
>> 
>> (( ${#matches} > 0 )) && ...
>> 
>
> [[ -n ${matches} ]] only needs to check if the array "matches" is not empty
> (( ${#matches} > 0 )) needs to calculate the length of the array and compare 
> if the result is > 0. I think [[ -n ${matches} ]] will be more efficient.

I wouldn't bet on that.

I'm not sure how arrays are implemented internally. But I could imagine
the number of elements is kept somewhere and therefore is available
without additional effort (can somebody confirm this?).

Also, I'm not sure what happens exactly, when you do [[ -n $array ]].

Say, $array is ( foo bar baz ). If you now do [[ -n $array ]], what
happens?

a) Does it get expanded to [[ -n "foo bar baz" ]]?
b) Does it get expanded to [[ -n "foo" "bar" "baz" ]]?

If a), zsh would have to create a string from the array in which case
looking at the number of elements is certainly quicker.

If b), what happens if the first entry of the array is an empty string?

Maybe it's even neither of the two and zsh does something smart when an
array is used in a [[ ... ]] style test.

Since I really don't know what it does, I just try:

[snip]
zsh% foo=( foo bar baz )
zsh% set -x; [[ -n $foo ]]; set +x
+/bin/zsh:234> [[ -n 'foo bar baz' ]]
+/bin/zsh:234> set +x
[snap]

Seems like it concatenates the elements into a string. So I think my
  (( ${#array} > 0 ))
approach would win in a benchmark. Unless I'm missing some smart trick
that zsh may use to optimise this.

Regards, Frank

