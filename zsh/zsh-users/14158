From zsh-users-return-14158-mason-zsh=primenet.com.au@sunsite.dk Fri May 22 01:18:08 2009
Return-Path: <zsh-users-return-14158-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5654 invoked from network); 22 May 2009 01:18:05 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 22 May 2009 01:18:05 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 26004 invoked from network); 22 May 2009 01:09:13 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 22 May 2009 01:09:13 -0000
Received: (qmail 9826 invoked by alias); 22 May 2009 01:08:56 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 14158
Received: (qmail 9815 invoked from network); 22 May 2009 01:08:56 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 22 May 2009 01:08:56 -0000
Received: from prunille.vinc17.org (vinc17.pck.nerim.net [213.41.242.187])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 79AB4801E289
	for <zsh-users@sunsite.dk>; Fri, 22 May 2009 03:08:51 +0200 (CEST)
Received: by prunille.vinc17.org (Postfix, from userid 501)
	id 1F38D3860136; Fri, 22 May 2009 03:08:51 +0200 (CEST)
Date: Fri, 22 May 2009 03:08:50 +0200
From: Vincent Lefevre <vincent@vinc17.org>
To: zsh-users@sunsite.dk
Subject: Re: prompt and ssh
Message-ID: <20090522010850.GU27141@prunille.vinc17.org>
Mail-Followup-To: zsh-users@sunsite.dk
References: <e7db6e960905190954j7be72739p6b521bca8e90fe7f@mail.gmail.com>
 <20090519200217.35368.qmail@smasher.org>
 <20090521074103.GN27141@prunille.vinc17.org>
 <090521092207.ZM14221@torch.brasslantern.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <090521092207.ZM14221@torch.brasslantern.com>
X-Mailer-Info: http://www.vinc17.org/mutt/
User-Agent: Mutt/1.5.19-5808-vl-r28634 (2009-05-15)
X-Virus-Scanned: ClamAV 0.94.2/9378/Thu May 21 20:49:42 2009 on bifrost
X-Virus-Status: Clean

On 2009-05-21 09:22:07 -0700, Bart Schaefer wrote:
> On May 21,  9:41am, Vincent Lefevre wrote:
> } Subject: Re: prompt and ssh
> }
> } On 2009-05-20 08:02:16 +1200, Atom Smasher wrote:
> } > you can test for SSH_CONNECTION, SSH_CLIENT, or SSH_TTY on the far side. 
> } > i would recommend SSH_CONNECTION.
> } 
> } But this will not work well if you use "screen".
> 
> Depending on the platform you're on ...
> 
> if grep -q $SSH_CONNECTION[(w)1]\:$SSH_CONNECTION[(w)2] =(netstat -na)
> then
>     print Using SSH_CONNECTION: $SSH_CONNECTION
> else
>     print Invalid SSH_CONNECTION
> fi
> 
> This "fails" only if you disconnect from screen but leave ssh connected.

This won't work in my case, because I sometimes do the following:
1. On my machine at home, start ssh connections to my machine at work.
2. Start screen remotely.
3. Detach the screen session.
4. Resume the screen session at work (but the ssh connections started
   in (1) are still there).

I also do the following:
1. Start screen remotely (via ssh).
2. Detach the screen session.
3. Resume the screen session from a different ssh connection (e.g.
   because the first one has died -- BTW, this is even one of the
   reasons of using screen).

> Figuring out what the correct values should be and passing them to the
> in-screen shell is another matter.  The suggestion of a wrapper for
> screen that writes a file, combined with checking the file contents in
> the precmd or preexec hooks, might do it.  E.g.:
> 
>     screen() {
> 	typeset -pm SSH_\* > ~/.screen_SSH
> 	screen "$@"
>     }
>     screen_ssh_precmd() {
> 	source ~/.screen_SSH
>     }
>     precmd_functions+=(screen_ssh_precmd)
> 
> That is probably a bit too simple -- you could check the file mod time
> to avoid sourcing it unnecessarily, and it'd probably be wise check that
> you own the file and no one else can write to it or to the directory
> it's in, etc.

One should also find a way to make it work with several screen
sessions (in screen, that can be identified by $STY, so that the
filename could be based on it). When starting a new screen, the
SSH_* environment variables are inherited, so that nothing special
needs to be done. When resuming a screen session, one should detect
which one, and use a filename corresponding to this session. When
screen terminates, one should check if the session still exists
(attached or detached), and if it isn't, remove the file.

-- 
Vincent Lefèvre <vincent@vinc17.org> - Web: <http://www.vinc17.org/>
100% accessible validated (X)HTML - Blog: <http://www.vinc17.org/blog/>
Work: CR INRIA - computer arithmetic / Arenaire project (LIP, ENS-Lyon)

