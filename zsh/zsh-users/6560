From zsh-users-return-6560-mason-zsh=primenet.com.au@sunsite.dk Wed Sep 10 14:32:17 2003
Return-Path: <zsh-users-return-6560-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 10607 invoked from network); 10 Sep 2003 14:32:16 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 10 Sep 2003 14:32:16 -0000
Received: (qmail 28491 invoked by alias); 10 Sep 2003 14:31:52 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 6560
Received: (qmail 28481 invoked from network); 10 Sep 2003 14:31:52 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 10 Sep 2003 14:31:52 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [4.64.232.255] by sunsite.dk (MessageWall 1.0.8) with SMTP; 10 Sep 2003 14:31:51 -0000
Received: (from schaefer@localhost)
	by candle.brasslantern.com (8.11.6/8.11.6) id h8AEVni02121
	for zsh-users@sunsite.dk; Wed, 10 Sep 2003 07:31:49 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Message-Id: <1030910143149.ZM2120@candle.brasslantern.com>
Date: Wed, 10 Sep 2003 14:31:49 +0000
In-Reply-To: <20030910132129.GE3743@puritan.pcp.ath.cx>
Comments: In reply to Nikolai Weibull <lone-star@home.se>
        "Substitution Cruft" (Sep 10,  3:21pm)
References: <20030910132129.GE3743@puritan.pcp.ath.cx>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Zsh Users <zsh-users@sunsite.dk>
Subject: Re: Substitution Cruft
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Sep 10,  3:21pm, Nikolai Weibull wrote:
}
} 	lprec ${(Q)${(zf)$(sed -n 's/["\$]/\\&/g;s/^\([A-Za-z]\+\)=\(.\+\)$/--\L\1\E "\2"/;/^--[a-z-]\+/p' < $tmp)}} &

} Is there a simpler way than using ${(Q)${(zf)...}}?

Without eliminating the $(sed ...) the best alternative is:

	eval lprec "$(sed ...)"

(Yes, the double quote in ["\$] is handled correctly even if you wrap the
whole $(...) in double quotes.)

The whole thing could be replaced (assuming default setopts shwordsplit
et al.) with:

	while read option value
	do arguments=( $arguments --${(L)option:s/://} $value )
	done < $tmp

	lprec $arguments &

which while it takes a few more lines is certainly less cryptic and does
not fork a process.  If for some reason you must write it as one line:

while read o v; do a=($a --${(L)o:s/://} $v); done < $tmp; lprec $a &

Even if you stick "local -a a; local o v;" on the front of that, it's
shorter than what you started with.

