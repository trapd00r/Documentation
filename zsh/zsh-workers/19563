From zsh-workers-return-19563-mason-zsh=primenet.com.au@sunsite.dk Mon Mar 08 16:35:43 2004
Return-Path: <zsh-workers-return-19563-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 13913 invoked from network); 8 Mar 2004 16:35:42 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 8 Mar 2004 16:35:42 -0000
Received: (qmail 20464 invoked by alias); 8 Mar 2004 16:35:30 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 19563
Received: (qmail 20451 invoked from network); 8 Mar 2004 16:35:29 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 8 Mar 2004 16:35:29 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [216.254.112.45] by sunsite.dk (MessageWall 1.0.8) with SMTP; 8 Mar 2004 16:35:29 -0000
Received: by acolyte.scowler.net (Postfix, from userid 1000)
	id 580777004A; Mon,  8 Mar 2004 11:35:28 -0500 (EST)
Date: Mon, 8 Mar 2004 11:35:28 -0500
From: Clint Adams <clint@zsh.org>
To: Peter Stephenson <pws@csr.com>
Cc: zsh-workers@sunsite.dk
Subject: Re: [frederik@ugcs.caltech.edu: Bug#236748: zsh: associative array documentation reference broken]
Message-ID: <20040308163528.GA18877@scowler.net>
References: <20040308152325.GB9385@scowler.net> <4411.1078761076@csr.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <4411.1078761076@csr.com>
User-Agent: Mutt/1.5.5.1+cvs20040105i

> Could someone produce a patch?  As I've been saying, I'm just snowed
> under at the moment.

Here it is almost verbatim; should I commit it?

Index: Doc/Zsh/params.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/params.yo,v
retrieving revision 1.19
diff -u -r1.19 params.yo
--- Doc/Zsh/params.yo	30 Aug 2003 19:06:10 -0000	1.19
+++ Doc/Zsh/params.yo	8 Mar 2004 16:26:17 -0000
@@ -108,7 +108,10 @@
 `tt("$foo[*]")' evaluates to `tt("$foo[1] $foo[2] )...tt(")', whereas
 `tt("$foo[@]")' evaluates to `tt("$foo[1]" "$foo[2]" )...'.  For
 associative arrays, `tt([*])' or `tt([@])' evaluate to all the values (not
-the keys, but see em(Subscript Flags) below), in no particular order.
+the keys, but see the documentation for the `tt(k)' flag under
+ifzman(em(Parameter Expansion Flags) in zmanref(zshexpn))\
+ifnzman(noderef(Parameter Expansion))
+for complete details.), in no particular order.
 When an array parameter is referenced as `tt($)var(name)' (with no
 subscript) it evaluates to `tt($)var(name)tt([*])', unless the tt(KSH_ARRAYS)
 option is set in which case it evaluates to `tt(${)var(name)tt([0]})' (for

