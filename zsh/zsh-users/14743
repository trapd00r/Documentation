From zsh-users-return-14743-mason-zsh=primenet.com.au@zsh.org Mon Jan 25 05:50:40 2010
Return-Path: <zsh-users-return-14743-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15447 invoked by alias); 25 Jan 2010 05:50:40 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14743
Received: (qmail 15668 invoked from network); 25 Jan 2010 05:50:28 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at benizi.com does not designate permitted sender hosts)
Date: Mon, 25 Jan 2010 00:50:30 -0500 (EST)
From: "Benjamin R. Haskell" <zsh@benizi.com>
To: Zsh Users <zsh-users@zsh.org>
Subject: Test for features?
Message-ID: <alpine.LNX.2.01.1001250001570.20648@hp.internal>
User-Agent: Alpine 2.01 (LNX 1266 2009-07-14)
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

I see this came up before [1], and since it was relatively recent, I 
assume the answer is the same, but:

Is there a good way to test for features in Zsh?

Specifically, I didn't realize that the ':a' and ':A' modifiers(sp?) 
were recent additions, while dropping my .zshrc onto an OpenSolaris box 
w/ SUNWzsh 4.3.9.  (Though it does make me feel less crazy for not 
having used them the whole time.)

The suggestion in the prior thread really only covered testing for 
functions by checking whether the associated autoload file would be 
found somewhere in the Zsh dir (/usr/share/zsh).  That doesn't work for 
this feature, correct?  (Mainly confirming that there's not some hidden 
'hook' into this functionality)  And for now, I assume I'm stuck testing 
for:

(( $+ZSH_PATCHLEVEL && $ZSH_PATCHLEVEL > 1.4618 ))

...which isn't sooo bad, I guess -- except that I had to determine that 
number via git logs.

I see that the man page suggests not using that number(-ish), though.  
And it'd be affected by --enable-local-patchlevel.  Argh.  So, I guess 
I'm stuck with testing against ZSH_VERSION.  But, as a multi-part 
version-string, what's the best way to do that?

My best estimation so far is something along the lines of:

function zsh_version_ge () {
    local zver cmp i
	zver=( ${(s:.:)ZSH_VERSION} )
	cmp=( ${(s:.:)1} )
	for (( i=1; i<=$#zver && i<=$#cmp; i++ )) do
		if (( $cmp[i] < $zver[i] )) then
			return 0
		elif (( $cmp[i] > $zver[i] )) then
			return 1
		fi
	done
	if (( $#cmp <= $#zver )) then
		return 0
	else
		return 1
	fi
}
# some tests
for v in 2 3.1 4.{3,4} 4.3.{8..12} 4.3.10.1 4.8 19 ; do
	test="zsh_version_ge $v"
	echo -e "$test? \c"
	eval $test && echo yes || echo no
done

[1] http://www.zsh.org/mla/users/2009/msg00983.html

