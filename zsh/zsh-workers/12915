From zsh-workers-return-12915-mason-zsh=primenet.com.au@sunsite.auc.dk Fri Oct 06 08:25:11 2000
Return-Path: <zsh-workers-return-12915-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 3043 invoked from network); 6 Oct 2000 08:25:09 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 6 Oct 2000 08:25:09 -0000
Received: (qmail 27326 invoked by alias); 6 Oct 2000 08:24:42 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 12915
Received: (qmail 27294 invoked from network); 6 Oct 2000 08:24:40 -0000
Date: Fri, 6 Oct 2000 10:24:27 +0200 (MET DST)
Message-Id: <200010060824.KAA14552@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
CC: sbeck@cise.ufl.edu
In-reply-to: "Sullivan N. Beck"'s message of Thu, 05 Oct 2000 14:11:21 -0400
Subject: Re: Bug report + feature request


Sullivan N. Beck wrote:

> ...
> 
> Now for the feature request.  Since I'd actually like to separate and
> pipe STDOUT and STDERR separately to different commands (all of the
> above came about from various attempts to get this working) without
> resorting to fifos, intermediate files, etc., what I'd _really_ like to
> do is to be able to pipe different file descriptors similar to how I can
> redirect them to a file.  For example, I'd like to replace the following
> lines:
> 
>   COMMAND > /tmp/stdout 2> /tmp/stderr
>   cat /tmp/stderr | STDERR_COMMAND
>   cat /tmp/stdout | STDOUT_COMMAND
> 
> with the single line:
> 
>   COMMAND >| STDOUT_COMMAND 2>| STDERR_COMMAND
> 
> If this syntax isn't acceptable, that's fine with me.  Any syntax is
> fine.  I'd just like the functionality.

How should it find out if, in your example, STDERR_COMMAND should be
used for COMMAND or STDOUT_COMMAND?

But anyway... have you seen the >>(cmd) process substitution?
You can do:

  COMMAND >>(STDOUT_COMMAND) 2>>(STDERR_COMMAND)

or

  COMAMND 2>>(STDERR_COMMAND) | STDOUT_COMMAND

if you prefer.


Note to workers: in the info file, >>(foo) is shown as `> >(foo)'. Urgh.


Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

