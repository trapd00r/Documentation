From zsh-users-return-6593-mason-zsh=primenet.com.au@sunsite.dk Wed Sep 17 12:42:15 2003
Return-Path: <zsh-users-return-6593-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 13236 invoked from network); 17 Sep 2003 12:42:14 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 17 Sep 2003 12:42:14 -0000
Received: (qmail 7751 invoked by alias); 17 Sep 2003 12:42:02 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 6593
Received: (qmail 7740 invoked from network); 17 Sep 2003 12:42:02 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 17 Sep 2003 12:42:02 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [195.64.83.12] by sunsite.dk (MessageWall 1.0.8) with SMTP; 17 Sep 2003 12:42:1 -0000
Received: by timix.globnix.org with local
	id 19zbdA-00064y-00; Wed, 17 Sep 2003 12:42:00 +0000
Date: Wed, 17 Sep 2003 12:42:00 +0000
From: Phil Pennock <phil.pennock@globnix.org>
To: Zsh Users <zsh-users@sunsite.dk>
Subject: Re: security risk in source builtin?
Message-ID: <20030917124200.GA8106@globnix.org>
Mail-Followup-To: Zsh Users <zsh-users@sunsite.dk>
References: <20030916145820.GC4583@gmx.de> <20030917065802.GA5374@picard.franken.de> <20030917073524.GC689@gmx.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20030917073524.GC689@gmx.de>

On 2003-09-17 at 09:35 +0200, Dominik Vogt wrote:
> I may have confused the test cases for bash and zsh.  Thanks for
> pointing that out.  However, that does not change my concern that
> "source" (as well as ".") is a security risk.

Could you please explain how it's a security risk?  I think I'm missing
something.

My viewpoint is based around the idea that when I type a command-name,
a process is started running from a program stored somewhere in $PATH,
and runs with all my access rights.  So if someone untrusted can write
to somewhere in $PATH then execlp()/execvp() become dangerous and most
of Unix suddenly has security holes.

Don't add directories to $PATH unless you absolutely trust everyone who
can write to that directory, or move it aside somewhere up the
filesystem tree, or can write to a file in that directory.

Hence the presence of "." as an element of $PATH (or the equivalent
empty element, indicated by double, leading or trailing colons) is a
very dubious practice.  And using "source" is dubious, unless you're
very sure of where you are.

I've trained myself to use ". ./filename" so that at least it's explicit
that I know that it's the current directory.

Now, if the modern ACL and MAC unices have a way for executables to
inherit privilege-dropping flags from a directory, so that a directory
can be flagged so that all executables within it automatically revoke
some set of privileges, _then_ having "source"/"." use the same $PATH
becomes an issue.  But AFAIK, none of the systems about support this
sort of inheritance of extended attributes (I could well be wrong).
-- 
2001: Blogging invented. Promises to change the way people bore strangers with
banal anecdotes about their pets. <http://www.thelemon.net/issues/timeline.php>

