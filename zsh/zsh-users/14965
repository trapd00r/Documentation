From zsh-users-return-14965-mason-zsh=primenet.com.au@zsh.org Wed Mar 24 12:05:40 2010
Return-Path: <zsh-users-return-14965-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 4936 invoked by alias); 24 Mar 2010 12:05:40 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14965
Received: (qmail 24769 invoked from network); 24 Mar 2010 12:05:39 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at math.technion.ac.il does not designate permitted sender hosts)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AvsEAJycqUuERHMG/2dsb2JhbACbIXO/GgKEfAQ
X-IronPort-AV: E=Sophos;i="4.51,300,1267394400"; 
   d="scan'208";a="230207180"
X-Authentication-Warning: fermat.math.technion.ac.il: nyh set sender to nyh@math.technion.ac.il using -f
Date: Wed, 24 Mar 2010 14:03:59 +0200
From: "Nadav Har'El" <nyh@math.technion.ac.il>
To: zzapper <david@tvis.co.uk>
Cc: zsh-users@zsh.org
Subject: Re: How much of it is zsh?
Message-ID: <20100324120359.GA29984@fermat.math.technion.ac.il>
References: <Xns9D456D0F33B88zzappergmailcom@80.91.229.10>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <Xns9D456D0F33B88zzappergmailcom@80.91.229.10>
User-Agent: Mutt/1.4.2.2i
Hebrew-Date: 9 Nisan 5770

On Wed, Mar 24, 2010, zzapper wrote about "How much of it is zsh?":
> Hi
> This is kind of a generic/dumb question I use zsh on cygwin.
> 
> So cygwin provides egrep now some of things grep can do are superceded by for 
> instance zsh's **/*.php recursion  but presumably I could still use egrep's -
> R. Am I right in thinking egrep knows nothing about the fact that its shell 
> is  zsh.?!
> 
> Where are the boundaries between a shell and the tools

Unlike MS-DOS where each command had to globbing (expansion of "*" etc.)
for its command-line arguments, traditionally shells on Unix (and therefore,
also cygwin) do this before calling the command. I.e., if the user types

	egrep something *.php

The shell (in our case, zsh) first does globbing. E.g., if you have the
files a.php, b.php and c.php, the command is changed by the shell to

	egrep something a.php b.php c.php

and only then egrep is run. egrep doesn't know anything about the reason
it got these 3 filenames, or that they were generated by globbing.

You're right that zsh added the very useful *recursive* globbing syntax
that didn't exist in previous shells. In this case, **/*.php matches
recursively files called *.php. But nothing in the way this works changes
from what I described above - i.e., zsh first expands **/*.php into a list
of file names, and then gives this list of filenames to egrep.

You're right that the two commands
	egrep -R something dir
	egrep something dir/**/*

basically end up doing the same thing, but I don't see why you should
consider this a problem. By the way, if you're curious, there's actually
a subtle difference between the way these two work. Like I said, the shell's
globbing is always done in advance. So if dir has a million files under it,
this will expand into a command with a million arguments - which on some
system can be a problem (too much memory used, or command too long).
On the other hand, egrep -R finds the files recursively one by one, and
never needs to hold the whole list of files in memory.

I hope this answers your question.

Nadav.

-- 
Nadav Har'El                        |     Wednesday, Mar 24 2010, 9 Nisan 5770
nyh@math.technion.ac.il             |-----------------------------------------
Phone +972-523-790466, ICQ 13349191 |I put a dollar in one of those change
http://nadav.harel.org.il           |machines. Nothing changed.

