From zsh-workers-return-10263-mason-zsh=primenet.com.au@sunsite.auc.dk Mon Mar 27 08:43:03 2000
Return-Path: <zsh-workers-return-10263-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1771 invoked from network); 27 Mar 2000 08:43:00 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 27 Mar 2000 08:43:00 -0000
Received: (qmail 16663 invoked by alias); 27 Mar 2000 08:42:54 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 10263
Received: (qmail 16595 invoked from network); 27 Mar 2000 08:42:47 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1000327084242.ZM6748@candle.brasslantern.com>
Date: Mon, 27 Mar 2000 08:42:41 +0000
X-Mailer: Z-Mail (5.0.0 30July97)
To: zsh-workers@sunsite.auc.dk
Subject: PATCH: 3.1.6-dev-20: Style and Tags Index
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

This patch does away with the (previously empty) "Keystroke Index" and uses
the kindex() macro to create an index of styles and tags (into which I also
entered completion context names, e.g. -math-).

I also fixed up what appeared to be some line-folding problems in a few of
the examples, and made the list of the parts of a full style context into
an itemized (bulleted) list -- the double blank lines between the items
were bugging me.

Once again this conflicts with 10230 (and also 10231, this time).  I'll
produce a separate patch to fix things up, unless Sven beats me to it.

Index: Doc/Zsh/compsys.yo
===================================================================
@@ -123,6 +123,7 @@
 the functions to be in the same format as in the tt(zsh) source
 distribution.
 
+cindex(compdef, use of by compinit)
 When tt(compinit) is run, it searches all such files accessible via
 tt(fpath/FPATH) and reads the first line of each of them.  This line should
 contain one of the tags described below. Files whose first line does not
@@ -278,19 +279,19 @@
 The context name always consists of the following fields, separated
 by colons:
 
-startitem()
-item()(
+startitemize()
+itemiz(\
 The literal string tt(completion), saying that this style is used by
 the completion system.
 )
-item()(
+itemiz(\
 The var(function); in many cases this field will be blank, but when
 the completion system is called from other functions, like
 tt(predict-on) or one of the functions in the tt(Command) directory of 
 the distribution, this field contains the (probably abbreviated) name
 of that function.
 )
-item()(
+itemiz(\
 The var(completer) currently active, i.e. the name of the completer
 function without the leading underscore. Such a completer is in
 overall control of how completion is to be performed; `tt(complete)'
@@ -301,7 +302,7 @@
 ifnzman(noderef(Control Functions)) 
 for more information).  
 )
-item()(
+itemiz(\
 The var(context) or var(command). This is either one of the special
 context names such as tt(-condition-) as explained for the
 tt(_complete) completer below, or the name of the command we are
@@ -311,27 +312,29 @@
 completion function for the tt(cvs) command sets this field to strings
 such as tt(cvs-add) when completing for the tt(add) sub-command).
 )
-item()(
+itemiz(\
 The var(argument), describing which argument we are
 completing. Normally this is either a string of the form
 tt(argument-)var(n), where var(n) is the number of the argument or it
 is a string of the form tt(-)var(opt)tt(-)var(n) when completing the
 var(n)'th argument of the option var(opt).
 )
-item()(
+itemiz(\
 The var(tag). Tags are used for two purposes:  to describe the types
 of matches a completion function can generate for a certain context
 and to simplify the definition of styles that are tested.
 )
-enditem()
+enditemize()
 
 As an example, the context name
-`tt(:completion::complete:dvips:-o-1:files)' says that normal
-completion was attempted on an argument of the tt(dvips)
-command (more precisely: completion was attempted on the first
-argument after the tt(-o) option) and the completion function will
-generate filenames for this context.
 
+example(tt(:completion::complete:dvips:-o-1:files))
+
+says that normal completion was attempted on an argument of the tt(dvips)
+command (more precisely: completion was attempted on the first argument
+after the tt(-o) option) and the completion function will generate
+filenames for this context.
+
 In many of the possible contexts the completion system can generate
 matches, often multiple types of matches.  These types are represented as
 simple names called `tags'.  The completion system will decide internally
@@ -353,9 +356,8 @@
 for a particular context.
 
 Completion behaviour can be modified by various other
-styles defined with the tt(zstyle) builtin command
-(see
-ifzman(zmanref(zshmodules))\
+styles defined with the tt(zstyle) builtin command (\
+ifzman(see zmanref(zshmodules))\
 ifnzman(noderef(The zsh/zutil Module))).
 When looking up styles the completion system uses full context names,
 including the tag.
@@ -417,239 +419,312 @@
 styles.
 
 startitem()
+kindex(accounts, completion tag)
 item(tt(accounts))(
 used to look up the tt(users-hosts) style
 )
+kindex(all-files, completion tag)
 item(tt(all-files))(
 for the names of all files
 )
+kindex(all-expansions, completion tag)
 item(tt(all-expansions))(
 used by the tt(_expand) completer when adding the string containing
 all expansions
 )
+kindex(arguments, completion tag)
 item(tt(arguments))(
 when an argument of a command may be completed
 )
+kindex(arrays, completion tag)
 item(tt(arrays))(
 for names of array parameters
 )
+kindex(association-keys, completion tag)
 item(tt(association-keys))(
 for keys of associative arrays (e.g. when completing inside a
 subscript of such a parameter)
 )
+kindex(bookmarks, completion tag)
 item(tt(bookmarks))(
 when completing bookmarks (e.g. for URLs and the tt(zftp) function suite)
 )
+kindex(builtins, completion tag)
 item(tt(builtins))(
 for names of builtin commands
 )
+kindex(characters, completion tag)
 item(tt(characters))(
 used for commands like tt(stty) when completing characters; also used
 when completing character classes after a opening bracket
 )
+kindex(colors, completion tag)
 item(tt(colors))(
 for color names
 )
+kindex(commands, completion tag)
 item(tt(commands))(
 for names of external commands and names of sub-commands (used by some 
 commands like tt(cvs))
 )
+kindex(corrections, completion tag)
 item(tt(corrections))(
 used by the tt(_approximate) and tt(_correct) completers for the possible
 corrections
 )
+kindex(cursors, completion tag)
 item(tt(cursors))(
 for cursor names used by X programs
 )
+kindex(default, completion tag)
 item(tt(default))(
 used to look up default values for various styles that may also be set 
 for tags that are used when generating matches
 )
+kindex(descriptions, completion tag)
 item(tt(descriptions))(
 used when looking up the value of the tt(format) style for
 descriptions
 )
+kindex(devices, completion tag)
 item(tt(devices))(
 for names of device special files
 )
+kindex(directories, completion tag)
 item(tt(directories))(
 for names of directories
 )
+kindex(directory-stack, completion tag)
 item(tt(directory-stack))(
 for entries in the directory stack
 )
+kindex(displays, completion tag)
 item(tt(displays))(
 for X display names
 )
+kindex(domains, completion tag)
 item(tt(domains))(
 for network domains
 )
+kindex(expansions, completion tag)
 item(tt(expansions))(
 used by the tt(_expand) completer for possible expansions
 )
+kindex(extensions, completion tag)
 item(tt(extensions))(
 for X server extensions
 )
+kindex(files, completion tag)
 item(tt(files))(
 used by completion functions that can complete some kind of filenames
 and different types of matches
 )
+kindex(fonts, completion tag)
 item(tt(fonts))(
 used for X font names
 )
+kindex(functions, completion tag)
 item(tt(functions))(
 names of functions (shell functions or other kinds of functions for
 some commands)
 )
+kindex(globbed-files, completion tag)
 item(tt(globbed-files))(
 for names of files matching the glob pattern used by completion
 functions that expect a certain type of file
 )
+kindex(groups, completion tag)
 item(tt(groups))(
 used when completing names of user groups
 )
+kindex(history-words, completion tag)
 item(tt(history-words))(
 for words from the history
 )
+kindex(hosts, completion tag)
 item(tt(hosts))(
 for hostnames
 )
+kindex(indexes, completion tag)
 item(tt(indexes))(
 used for array indexes
 )
+kindex(jobs, completion tag)
 item(tt(jobs))(
 used for jobs
 )
+kindex(keymaps, completion tag)
 item(tt(keymaps))(
 for names of zsh keymaps
 )
+kindex(keysyms, completion tag)
 item(tt(keysyms))(
 for names of X keysyms
 )
+kindex(local-directories, completion tag)
 item(tt(local-directories))(
 for names of directories in the current working directory when
 completing for the tt(cd) builtin command
 )
+kindex(libraries, completion tag)
 item(tt(libraries))(
 for names of system libraries
 )
+kindex(limits, completion tag)
 item(tt(limits))(
 for system limits
 )
+kindex(manuals, completion tag)
 item(tt(manuals))(
 for names of manual pages
 )
+kindex(maps, completion tag)
 item(tt(maps))(
 for map names (e.g. YP maps)
 )
+kindex(messages, completion tag)
 item(tt(messages))(
 used to look up the tt(format) style for messages
 )
+kindex(modifiers, completion tag)
 item(tt(modifiers))(
 for names of X modifiers
 )
+kindex(modules, completion tag)
 item(tt(modules))(
 for modules (e.g. tt(zsh) modules)
 )
+kindex(my-accounts, completion tag)
 item(tt(my-accounts))(
 used to look up the tt(users-hosts) style
 )
+kindex(named-directories, completion tag)
 item(tt(named-directories))(
 for named directories (you wouldn't have guessed that, would you?)
 )
+kindex(names, completion tag)
 item(tt(names))(
 for all kinds of names
 )
+kindex(nicknames, completion tag)
 item(tt(nicknames))(
 for nicknames of YP maps
 )
+kindex(options, completion tag)
 item(tt(options))(
 for command options
 )
+kindex(original, completion tag)
 item(tt(original))(
 used by the tt(_approximate), tt(_correct) and tt(_expand) completers when
 adding the original string
 )
+kindex(other-accounts, completion tag)
 item(tt(other-accounts))(
 used to look up the tt(users-hosts) style
 )
+kindex(packages, completion tag)
 item(tt(packages))(
 for packages (e.g. tt(rpm) or installed tt(Debian) packages)
 )
+kindex(parameters, completion tag)
 item(tt(parameters))(
 for names of parameters
 )
+kindex(path-directories, completion tag)
 item(tt(path-directories))(
 for names of directories in directories from the tt(cdpath) array when
 completing for the tt(cd) builtin command
 )
+kindex(paths, completion tag)
 item(tt(paths))(
 used to look up the values of the tt(expand), tt(cursor) and
 tt(special-dirs) styles
 )
+kindex(pids, completion tag)
 item(tt(pids))(
 for process identifiers
 )
+kindex(pids-list, completion tag)
 item(tt(pids-list))(
 used to look up the tt(command) style when generating the list to
 display for process identifiers
 )
+kindex(pods, completion tag)
 item(tt(pods))(
 for perl pods
 )
+kindex(ports, completion tag)
 item(tt(ports))(
 for communication ports
 )
+kindex(prefixes, completion tag)
 item(tt(prefixes))(
 for prefixes (like those of an URL)
 )
+kindex(printers, completion tag)
 item(tt(printers))(
 for printer names
 )
+kindex(processes, completion tag)
 item(tt(processes))(
 for process identifiers
 )
+kindex(sequences, completion tag)
 item(tt(sequences))(
 for sequences (e.g. tt(mh) sequences)
 )
+kindex(sessions, completion tag)
 item(tt(sessions))(
 for sessions in the tt(zftp) function suite
 )
+kindex(signals, completion tag)
 item(tt(signals))(
 for signal names
 )
+kindex(strings, completion tag)
 item(tt(strings))(
 for strings (e.g. the replacement strings for the tt(cd) builtin
 command)
 )
+kindex(tags, completion tag)
 item(tt(tags))(
 for tags (e.g. tt(rpm) tags)
 )
+kindex(targets, completion tag)
 item(tt(targets))(
 for makefile targets
 )
+kindex(types, completion tag)
 item(tt(types))(
 for types of whatever (e.g. adress types for the tt(xhost) command)
 )
+kindex(urls, completion tag)
 item(tt(urls))(
 used to look up the tt(path) and tt(local) styles when completing URLs
 )
+kindex(users, completion tag)
 item(tt(users))(
 for usernames
 )
+kindex(values, completion tag)
 item(tt(values))(
 when completing a value out of a set of values (or a list of such
 values)
 )
+kindex(warnings, completion tag)
 item(tt(warnings))(
 used to look up the tt(format) style for warnings
 )
+kindex(widgets, completion tag)
 item(tt(widgets))(
 for zsh widget names
 )
+kindex(windows, completion tag)
 item(tt(windows))(
 for IDs of X windows
 )
+kindex(zsh-options, completion tag)
 item(tt(zsh-options))(
 for shell options
 )
@@ -668,16 +743,19 @@
 possible values.
 
 startitem()
+kindex(accept-exact, completion style)
 item(tt(accept-exact))(
 This is tested for the default tag and the tags used when generating
 matches. If it is set to `true' for at least one match which is the
 same as the string on the line, this match will immediately be
 accepted.
 )
+kindex(add-space, completion style)
 item(tt(add-space))(
 This style is used by the tt(_prefix) completer to decide if a space
 should be inserted before the suffix.
 )
+kindex(auto-description, completion style)
 item(tt(auto-description))(
 If set, this style's value will be used as the description for options which
 are not described by the completion functions, but that have exactly
@@ -686,6 +764,7 @@
 it may be useful to set this style to something like `tt(specify: %d)'. 
 Note that this may not work for some commands.
 )
+kindex(break, completion style)
 item(tt(break))(
 This style is used by the tt(incremental-complete-word) widget (found
 in the tt(Functions/Zle) directory of the distribution). Its value
@@ -693,6 +772,7 @@
 widget to stop incremental completion without the key having any
 further effect.
 )
+kindex(command, completion style)
 item(tt(command))(
 This style can be used to override the defaults in several completion
 functions for how commands are called to generate information about
@@ -712,6 +792,7 @@
 different values for these two tags one should ensure that the process
 IDs appear in the same order in both lists.
 )
+kindex(completer, completion style)
 item(tt(completer))(
 The strings given as the value of this style give the names of the
 completer functions to use. The available completer functions are
@@ -736,6 +817,7 @@
 The default value for this style is tt(_complete), i.e. normally only
 completion will be done.
 )
+kindex(completions, completion style)
 item(tt(completions))(
 This style is used by the tt(_expand) completer function.
 
@@ -746,6 +828,7 @@
 generated as normal and all of them will be inserted into the command
 line.
 )
+kindex(condition, completion style)
 item(tt(condition))(
 This style is used by the tt(_list) completer function.
 
@@ -760,6 +843,7 @@
 delaying will be done only if given an explicit numeric argument
 other than `tt(1)'.
 )
+kindex(cursor, completion style)
 item(tt(cursor))(
 This is used together with the tt(paths) tag by the function
 generating filenames as matches to find out if the cursor should be left
@@ -781,16 +865,19 @@
 unconditionally leaves the cursor at the position where the completion
 code left it.
 )
+kindex(disable-stat, completion style)
 item(tt(disable-stat))(
 This is used with the an empty tag by the function completing for the
 tt(cvs) command to decide if the tt(zsh/stat) module should be used to
 generate only names of modified files in the appropriate places.
 )
+kindex(domains, completion style)
 item(tt(domains))(
 If set, gives the names of network domains that should be
 completed. If this is not set by the user domain names mentioned in
 tt(/etc/resolv.conf) will be used.
 )
+kindex(expand, completion style)
 item(tt(expand))(
 This style is used when completing strings consisting of multiple
 parts, such as path names. If its
@@ -805,6 +892,7 @@
 this will also cycle through the names of the files in pathname
 components after the first ambiguous one.
 )
+kindex(file-patterns, completion style)
 item(tt(file-patterns))(
 In most places where filenames are completed, the function tt(_files)
 is used which can be configured with this style. If the style is
@@ -836,13 +924,14 @@
 object files and the names of all files if no object file matches
 the string on the line, one would do:
 
-example(zstyle ':completion:*:*:rm:*' file-patterns \
+example(zstyle ':completion:*:*:rm:*' file-patterns \ 
   '*.o:object-files' ':all-files')
 
 Note also that during the execution of completion functions, the
 tt(EXTENDED_GLOB) option is in effect, so the characters `tt(#)',
 `tt(~)' and `tt(^)' have special meanings in the patterns.
 )
+kindex(format, completion style)
 item(tt(format))(
 If this is set for the tt(descriptions) tag, its value is used as a
 string to display above matches in completion lists. The sequence
@@ -880,6 +969,7 @@
 ifnzman(noderef(The zsh/zutil Module))\
 .
 )
+kindex(glob, completion style)
 item(tt(glob))(
 Like tt(completions), this is used by the tt(_expand) completer.
 
@@ -888,6 +978,7 @@
 substitution (see the tt(substitute) style) or the original string
 from the line.
 )
+kindex(group-name, completion style)
 item(tt(group-name))(
 The completion system can put different types of matches in different
 groups which are then displayed separately in the list of possible
@@ -914,6 +1005,7 @@
 All matches for which no group name is defined will be put in a group
 named tt(-default-).
 )
+kindex(group-order, completion style)
 item(tt(group-order))(
 This style is to be used together with the tt(group-name) style. Once
 different types of matches are put into different groups, this style
@@ -928,13 +1020,16 @@
 external commands appear in this order when completing in command
 position one would set:
 
-example(zstyle ':completion:*:*:-command-:*' group-order builtins functions commands)
+example(zstyle ':completion:*:*:-command-:*' group-order \ 
+       builtins functions commands)
 )
+kindex(groups, completion style)
 item(tt(groups))(
 A style holding the names of the groups that should be completed. If
 this is not set by the user, the group names from the YP database or
 the file `tt(/etc/group)' will be used.
 )
+kindex(hidden, completion style)
 item(tt(hidden))(
 If this is set to one of the `true' values, the matches for the tags
 for which this is set will not appear in the list; only the
@@ -947,10 +1042,12 @@
 completions at all the tt(tag-order) style can be modified as described
 below.
 )
+kindex(hosts, completion style)
 item(tt(hosts))(
 A style holding the names of hosts that should be completed. If this
 is not set by the user the hostnames in `tt(/etc/hosts)' will be used.
 )
+kindex(hosts-ports, completion style)
 item(tt(hosts-ports))(
 This style is used by commands that need or accept hostnames and
 ports. The strings in the value should be of the form
@@ -959,6 +1056,7 @@
 example, the hostname is already typed, only those ports will be
 completed for which pairs with the hostname from the line exist.
 )
+kindex(ignore-parents, completion style)
 item(tt(ignore-parents))(
 When completing files it is possible to make names of directories
 already mentioned on the line or the current working directory be
@@ -982,6 +1080,7 @@
 will be placed in the alternate set of completions so that they will
 be completed if there are no other possible completions.
 )
+kindex(ignored-patterns, completion style)
 item(tt(ignored-patterns))(
 This style is used with the tags used when adding matches and defines a
 couple of patterns. All matches that are matched by any of these
@@ -993,6 +1092,7 @@
 tt(EXTENDED_GLOB) option is in effect, so the characters `tt(#)',
 `tt(~)' and `tt(^)' have special meanings in the patterns.
 )
+kindex(insert-unambiguous, completion style)
 item(tt(insert-unambiguous))(
 This is used by the tt(_match) and tt(_approximate) completer
 functions. If it is set to `true', the completer will start menu
@@ -1003,6 +1103,7 @@
 tt(approximate-)var(num), where var(num) is the number of errors that
 were accepted.
 )
+kindex(last-prompt, completion style)
 item(tt(last-prompt))(
 This is used to determine if the completion code should try to put the
 cursor back onto the previous command line after showing a completion
@@ -1013,6 +1114,7 @@
 this is independent of the numeric argument -- unlike the
 tt(ALWAYS_LAST_PROMPT) option.
 )
+kindex(list, completion style)
 item(tt(list))(
 This is used by the tt(_history_complete_word) bindable command
 (context `tt(:completion:history-words)') and by the
@@ -1029,6 +1131,7 @@
 should be shown even if there is only one possible completion. This is 
 done if the value of this style is the string tt(always).
 )
+kindex(list-colors, completion style)
 item(tt(list-colors))(
 If the tt(zsh/complist) module is used, this style can be used to set
 color specifications as with the tt(ZLS_COLORS) and tt(ZLS_COLOURS)
@@ -1056,6 +1159,7 @@
 And to get the default colors (which are the same as for the GNU
 tt(ls) command) one should set the style to an empty value.
 )
+kindex(list-packed, completion style)
 item(tt(list-packed))(
 Like the tt(list-colors) style, this is tested with the tt(default)
 tag and all tags used when generating matches. If it is set to `true'
@@ -1063,11 +1167,13 @@
 tt(LIST_PACKED) option were set for them. If it is set to `false',
 they are listed normally.
 )
+kindex(list-rows-first, completion style)
 item(tt(list-rows-first))(
 This style is tested like the tt(list-packed) style and determines if
 matches are to be listed in a rows-first fashion, as for the
 tt(LIST_ROWS_FIRST) option.
 )
+kindex(local, completion style)
 item(tt(local))(
 This style is used by completion functions which generate URLs as
 possible matches to add suitable matches when a URL points to a
@@ -1076,6 +1182,7 @@
 directory name used by a user placing web pages within their home
 area.
 )
+kindex(match-original, completion style)
 item(tt(match-original))(
 This is used by the tt(_match) completer.  If it is set to
 tt(only), tt(_match) will try to generate matches without inserting a
@@ -1084,6 +1191,7 @@
 and if that yields no matches, it will try again with the `tt(*)'
 inserted.
 )
+kindex(matcher, completion style)
 item(tt(matcher))(
 This style is tested for tags used when generating matches. Its value
 is used as an additional match specification to use when adding the
@@ -1092,6 +1200,7 @@
 ifnzman(noderef(Matching Control))\
 .
 )
+kindex(matcher-list, completion style)
 item(tt(matcher-list))(
 This style is used by the main completion function to retrieve match
 specifications that are to be used everywhere. Its value should be a
@@ -1124,8 +1233,9 @@
 match specifications for them, as in:
 
 example(zstyle ':completion:*' completer _complete _correct _complete
-zstyle ':completion:*:complete-1:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
-zstyle ':completion:*:complete-2:*' matcher-list \
+zstyle ':completion:*:complete-1:*' matcher-list \ 
+    '' 'm:{a-zA-Z}={A-Za-z}'
+zstyle ':completion:*:complete-2:*' matcher-list \ 
     'm:{a-zA-Z}={A-Za-z} r:|[-_./]=* r:|=*')
 
 Note that in any case an unset style makes the completion code use no
@@ -1136,6 +1246,7 @@
 that they are executed only once even if multiple match specifications 
 have been given.
 )
+kindex(max-errors, completion style)
 item(tt(max-errors))(
 This is used by the tt(_approximate) and tt(_correct) completer functions
 to determine the maximum number of errors to accept. The completer will try
@@ -1164,6 +1275,7 @@
 
 The default value for this style is `tt(2 numeric)'.
 )
+kindex(menu, completion style)
 item(tt(menu))(
 This style is tested for the tt(default) tag and the tags used when
 adding matches. The value should be one of the `true' values (tt(yes), 
@@ -1190,6 +1302,7 @@
 turned off by defining a value containing the string
 tt(no-select).
 )
+kindex(numbers, completion style)
 item(tt(numbers))(
 This is used with the tt(jobs) tag. If it is `true', the completions
 will use the job numbers instead of the shortest unambiguous strings
@@ -1199,6 +1312,7 @@
 unambiguous. E.g. if it is set to `tt(1)', strings will only be used
 if all jobs differ in the first word on their command lines.
 )
+kindex(old-list, completion style)
 item(tt(old-list))(
 This is used by the tt(_oldlist) completer.  If this is set to tt(always),
 then standard widgets which perform listing will retain the current list of
@@ -1227,6 +1341,7 @@
 tt(_oldlist) completer and setting this style to tt(_match), the list of 
 matches generated on the first attempt will be used again.
 )
+kindex(old-menu, completion style)
 item(tt(old-menu))(
 This is used by the tt(_oldlist) completer. Here it controls how menu
 completion behaves when a completion has already been inserted and the
@@ -1243,6 +1358,7 @@
 appears.  With tt(_oldlist), it will instead continue to cycle through the
 list of completions.
 )
+kindex(original, completion style)
 item(tt(original))(
 This is used by the tt(_approximate) and tt(_correct)
 completers to decide if the original string should be added as
@@ -1253,6 +1369,7 @@
 tt(correct-)var(num) or tt(approximate-)var(num), where var(num) is
 the number of errors that were accepted.
 )
+kindex(packageset, completion style)
 item(tt(packageset))(
 A style containing an override for the default package set
 for that context.  For example,
@@ -1262,6 +1379,7 @@
 will cause available packages, rather than only installed packages,
 to be completed for `dpkg --status'.
 )
+kindex(path, completion style)
 item(tt(path))(
 This is used together with the the tt(urls) tag by completion
 functions that generate URLs as possible matches. It should be set to
@@ -1278,11 +1396,13 @@
 file (if it can be found) will be used as the default if the style is
 not set.
 )
+kindex(ports, completion style)
 item(tt(ports))(
 A style holding the service names of ports to complete. If this is
 not set by the user, the service names from `tt(/etc/services)' will
 be used.
 )
+kindex(prefer-ignored, completion style)
 item(tt(prefer-ignored))(
 This style is tested by the main completion function before calling a
 completer. The context name is formed in the same way as for the
@@ -1303,6 +1423,7 @@
 example(zstyle ':completion:*:complete-2:*' prefer-ignored yes
 zstyle ':completion:*:(correct|approximate)-1:*' prefer-ignored yes)
 )
+kindex(prefix-hidden, completion style)
 item(tt(prefix-hidden))(
 This is used when matches with a common prefix are added (e.g. option
 names). If it is `true', this prefix will not be shown in the list of
@@ -1310,6 +1431,7 @@
 
 The default value for this style is `false'.
 )
+kindex(prefix-needed, completion style)
 item(tt(prefix-needed))(
 This, too, is used for matches with a common prefix. If it is set to
 `true' this common prefix has to be typed by the user to generate the
@@ -1319,6 +1441,7 @@
 
 The default style for this style is `true'.
 )
+kindex(prompt, completion style)
 item(tt(prompt))(
 The tt(incremental-complete-word) widget shows the value of this
 style in the status line during incremental completion. The sequence
@@ -1339,11 +1462,13 @@
 screen and with an empty string otherwise. If the tt(list) style is
 `false', `tt(%l)' will always be removed.
 )
+kindex(remove-all-dups, completion style)
 item(tt(remove-all-dups))(
 The tt(_history_complete_word) bindable command uses this to decide if 
 all duplicate matches should be removed, rather than just consecutive
 duplicates.
 )
+kindex(single-ignored, completion style)
 item(tt(single-ignored))(
 Using styles like tt(ignored-patterns) allows one to put some matches
 in the alternate set of matches which is only used if there are no
@@ -1355,6 +1480,7 @@
 original string are both added as matches and menucompletion is
 started so that one can easily select either of them.
 )
+kindex(sort, completion style)
 item(tt(sort))(
 If set to `true', completion functions that generate words from the
 history as possible matches sort these words alphabetically instead of
@@ -1379,16 +1505,19 @@
 as single strings (not in the string containing all possible
 expansions).
 )
+kindex(special-dirs, completion style)
 item(tt(special-dirs))(
 Normally, the completion code will not produce the directory names
 tt(.) and tt(..) as possible completions. If this style is set to
 `true', it will add both `tt(.)' and `tt(..)' as possible completions,
 if it is set to tt(..), only `tt(..)' will be added.
 )
+kindex(squeeze-slashes, completion style)
 item(tt(squeeze-slashes))(
 If set to `true', sequences of slashes (like in `tt(foo//bar)') will be
 treated as if they were only one slash when completing pathnames.
 )
+kindex(stop, completion style)
 item(tt(stop))(
 If set to `true', the tt(_history_complete_word) bindable
 command will always insert matches as if menucompletion were started
@@ -1400,6 +1529,7 @@
 style. But all keys matching the pattern given as its value will stop
 incremental completion and will then execute their usual function.
 )
+kindex(substitute, completion style)
 item(tt(substitute))(
 If this is unset or set to the empty string, the tt(_expand) completer
 will first try to expand all substitutions in the string (such as
@@ -1413,6 +1543,7 @@
 substitution will be performed only if given an explicit numeric
 argument other than `tt(1)', as by typing `tt(ESC 2 TAB)'.
 )
+kindex(tag-order, completion style)
 item(tt(tag-order))(
 This provides a mechanism for sorting how the tags available in a
 particular context will be used.
@@ -1499,6 +1630,7 @@
 that the different patterns represented by them will be tried one
 after another.
 )
+kindex(use-compctl, completion style)
 item(tt(use-compctl))(
 If this style is set to a string not equal to tt(false), tt(0),
 tt(no), and tt(off), the completion system will use any completion
@@ -1516,12 +1648,14 @@
 there is no special completion function for the command completion is
 done upon.
 )
+kindex(users, completion style)
 item(tt(users))(
 This may be set to a list of names that should be completed whenever 
 a username is needed. If it is not set or the string on the line
 doesn't match any of the strings in this list, all usernames will be
 completed.
 )
+kindex(users-hosts, completion style)
 item(tt(users-hosts))(
 The values of this style should be of the form
 `var(user)tt(@)var(host)' or `var(user)tt(:)var(host)'. It is used for
@@ -1537,10 +1671,12 @@
 people's accounts. Finally, this may also be used by some commands with
 the tt(accounts) tag.
 )
+kindex(users-hosts-ports, completion style)
 item(tt(users-hosts-ports))(
 Like tt(users-hosts) but used for commands like tt(telnet) and
 containing strings of the form `var(user)tt(@)var(host)tt(:)var(port)'.
 )
+kindex(verbose, completion style)
 item(tt(verbose))(
 This is used in several contexts to decide if only a simple or a
 verbose list of matches should be generated. For example some commands 
@@ -1548,6 +1684,7 @@
 
 The default value for this style is `true'.
 )
+kindex(word, completion style)
 item(tt(word))(
 To find out if listing should be performed on its own, the tt(_list)
 completer normally compares the contents of the line with the contents
@@ -1599,40 +1736,51 @@
 handled specially.  These are:
 
 startitem()
+kindex(-equal-, completion context)
 item(tt(-equal-))(
 for completion after an equal sign, other than one occurring in a
 shell-variable assignment.
 )
+kindex(-tilde-, completion context)
 item(tt(-tilde-))(
 for completion after a tilde (`tt(~)') character, but before a slash.
 )
+kindex(-redirect-, completion context)
 item(tt(-redirect-))(
 for completion after a redirection operator.
 )
+kindex(-math-, completion context)
 item(tt(-math-))(
 for completion inside mathematical contexts, such as
 `tt(LPAR()LPAR())...tt(RPAR()RPAR())'.
 )
+kindex(-subscript-, completion context)
 item(tt(-subscript-))(
 for completion inside subscripts.
 )
+kindex(-value-, completion context)
 item(tt(-value-))(
 for completion on the right hand side of an assignment.
 )
+kindex(-array-value-, completion context)
 item(tt(-array-value-))(
 for completion on the right hand side of an array-assignment
 (`tt(foo=LPAR()...RPAR())').
 )
+kindex(-condition-, completion context)
 item(tt(-condition-))(
 for completion inside conditions (`tt([[...]])').
 )
+kindex(-parameter-, completion context)
 item(tt(-parameter-))(
 for completing the name of a parameter expansion (`tt($...)').
 )
+kindex(-brace-parameter-, completion context)
 item(tt(-brace-parameter-))(
 for completing the name of a parameter expansion within braces
 (`tt(${...})').
 )
+kindex(-first-, completion context)
 item(tt(-first-))(
 for adding completions before any other completion functions are
 tried; if this
@@ -1643,9 +1791,11 @@
 the function for the `tt(-default-)' context will not be called, but
 functions defined for commands will.
 )
+kindex(-default-, completion context)
 item(tt(-default-))(
 for generating completions when no special completion function is used.
 )
+kindex(-command-, completion context)
 item(tt(-command-))(
 for completing in a command position.
 )
@@ -2207,7 +2357,7 @@
 example(local expl ret=1
 _tags foo bar baz
 while _tags; do
-  _requested foo expl 'description' \
+  _requested foo expl 'description' \ 
       compadd foobar foobaz && ret=0
   ...
   (( ret )) || break
@@ -2225,7 +2375,7 @@
 if you want to offer only one tag and immediatly want to use the
 description built, you can just do:
 
-example(_wanted tag expl 'description' \
+example(_wanted tag expl 'description' \ 
     compadd matches...)
 )
 findex(_alternative)
@@ -2245,8 +2395,8 @@
 For example, the var(action) may be a simple function call. With that
 one could do:
 
-example(_alternative \
-    'users:user:_users' \
+example(_alternative \ 
+    'users:user:_users' \ 
     'hosts:host:_hosts')
 
 to offer usernames and hostnames as possible matches (which are
@@ -2712,7 +2862,7 @@
 Example:
 
 example(_values -s , 'description' \ 
-        '*foo[bar]' \
+        '*foo[bar]' \ 
         '(two)*one[number]:first count:' \ 
         'two[another number]::second count:(1 2 3)')
 
Index: Doc/Zsh/index.yo
===================================================================
@@ -16,9 +16,9 @@
 texinode(Functions Index)(Editor Functions Index)(Options Index)(Top)
 printindex(Functions Index)(fn)
 
-texinode(Editor Functions Index)(Keystroke Index)(Functions Index)(Top)
+texinode(Editor Functions Index)(Style and Tag Index)(Functions Index)(Top)
 printindex(Editor Functions Index)(tp)
 
-texinode(Keystroke Index)()(Editor Functions Index)(Top)
-printindex(Keystroke Index)(ky)
+texinode(Style and Tag Index)()(Editor Functions Index)(Top)
+printindex(Style and Tag Index)(ky)
 )\
Index: Doc/Zsh/manual.yo
===================================================================
@@ -41,7 +41,7 @@
 menu(Options Index)
 menu(Functions Index)
 menu(Editor Functions Index)
-menu(Keystroke Index)
+menu(Style and Tag Index)
 
  --- The Detailed Node Listing ---
 
Index: Doc/Zsh/zftpsys.yo
===================================================================
@@ -533,6 +533,7 @@
 called from.  The following styles are understood:
 
 startitem()
+kindex(progress, zftp style)
 item(tt(progress))(
 Controls the way that tt(zftp_progress) reports on the progress of a
 transfer.  If empty, unset, or `tt(none)', no progress report is made; if
@@ -547,6 +548,7 @@
 When tt(zfinit) is run, if this style is not defined for the context
 tt(:zftp:*), it will be set to `bar'.
 )
+kindex(update, zftp style)
 item(tt(update))(
 Specifies the minimum time interval between updates of the progress meter
 in seconds.  No update is made unless new data has been received, so the
@@ -554,10 +556,12 @@
 
 As described for tt(progress), tt(zfinit) will force this to default to 1.
 )
+kindex(remote-glob, zftp style)
 item(tt(remote-glob))(
 If set to `1', `yes' or `true', filename generation (globbing) is
 performed on the remote machine instead of by zsh itself; see below.
 )
+kindex(titlebar, zftp style)
 item(tt(titlebar))(
 If set to `1', `yes' or `true', tt(zftp_chpwd) will put the remote host and
 remote directory into the titlebar of terminal emulators such as xterm or
@@ -565,6 +569,7 @@
 
 As described for tt(progress), tt(zfinit) will force this to default to 1.
 )
+kindex(chpwd, zftp style)
 item(tt(chpwd))(
 If set to `1' `yes' or `true', tt(zftp_chpwd) will call the function
 tt(chpwd) when a connection is closed.  This is useful if the remote host

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

