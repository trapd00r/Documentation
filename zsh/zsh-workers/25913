From zsh-workers-return-25913-mason-zsh=primenet.com.au@sunsite.dk Sat Oct 18 20:46:25 2008
Return-Path: <zsh-workers-return-25913-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 3406 invoked from network); 18 Oct 2008 20:46:11 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 18 Oct 2008 20:46:11 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 91169 invoked from network); 18 Oct 2008 20:45:47 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 18 Oct 2008 20:45:47 -0000
Received: (qmail 53 invoked by alias); 18 Oct 2008 20:45:35 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 25913
Received: (qmail 34 invoked from network); 18 Oct 2008 20:45:32 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 18 Oct 2008 20:45:32 -0000
Received: from mx.spodhuis.org (redoubt.spodhuis.org [193.202.115.177])
	by bifrost.dotsrc.org (Postfix) with ESMTPS id 565C680524C0
	for <zsh-workers@sunsite.dk>; Sat, 18 Oct 2008 22:45:17 +0200 (CEST)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws; s=d200807; d=spodhuis.org;
	h=Received:Date:From:To:Subject:Message-ID:Mail-Followup-To:MIME-Version:Content-Type:Content-Disposition;
	b=Lt0YCgFBdDwTpMjOTJ+TeRrPkqccSuB9AdLvav1F5RCcfhRra1rvjFwJwvNk2o5l9A2IxOcLSC4lJ7ece1aeQx/C3WB0HCH032QE/yb3uYu5FzSBU5ddrW7V2uutZEfqlfdjrG/rhUov1HlnUcQgzYEANIbfiBQjJrHBLXEy2DQ=;
Received: by smtp.spodhuis.org with local 
	id 1KrIfj-0007sz-Hr; Sat, 18 Oct 2008 20:45:15 +0000
Date: Sat, 18 Oct 2008 13:45:15 -0700
From: Phil Pennock <zsh-workers+phil.pennock@spodhuis.org>
To: zsh-workers@sunsite.dk
Subject: Notes on zsh, zsh/files and recovery
Message-ID: <20081018204515.GA1642@redoubt.spodhuis.org>
Mail-Followup-To: zsh-workers@sunsite.dk
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
X-Virus-Scanned: ClamAV 0.92.1/8443/Sat Oct 18 08:08:31 2008 on bifrost
X-Virus-Status: Clean

Managed to hose my box by trying to be too clever while rebuilding.
Luckily, had zsh as root at the time.  In the end, didn't help fix it;
once you've hosed /libexec/ld-elf.so.1 with a version that's for a
different architecture to the kernel, you're hosed.  But it's an
interesting exercise, trying to recover without making use of exec() (as
opposed to the more usual fork() limitation).

zsh/files needs zf_chmod.  I'll do that.  Not today, but when I've had
some sleep.  Does anyone have objections to platform-dependent commands
conditionally available in existing modules?  I'm tempted to add
chflags(1) too, since another time it might be a need to nuke an
immutable flag that's the problem.

I now see the use for zf_cp.  zmodload zsh/mapfile and using:
  print -nr -- ${mapfile[srcname]} > $destname
is a close approximation for a straight cat, at least.  Thankfully, zsh
handles embedded NULs fine.  Without chmod, copying an executable
cross-filesystem was trickier.  Luckily, for some reason, /bin/rmail is
still supplied on the root file-system in FreeBSD and that's
unimportant, so I could sacrifice it with zf_mv and then print mapfile
on top of it.  Alas, the only version I had available to recover with
was not helpful and there was no backup of the original and no way to
invoke an embedded C compiler from zsh.  *sigh*  Hrm, on reflection, if
I'd had another box to build on, I could have used zsh's built-in FTP
handling to retrieve the file that way.

Seem reasonable to implement zf_cp and make zf_mv call that for
cross-filesystem cases?

There does not appear to be a zls() ?  I hacked one together using
zsh/stat and ... it's rather slow.  I'm tempted to build up a closer
emulation of ls(1) with a few useful options and contribute it as a
standard function.  It will be truly slow, but occasionally useful.

If the ACL situation weren't such a complete mess across platforms, I
might do something there.  Anyone have any thoughts against
zsh/acl_posix1003.2c ?  Anyone have a better name?  ;)  I just want to
be able to use getfacl/setfacl and probably with the nice Linux
behaviour of automatically supplying a calculated mask for default
entries for setfacl, since the FreeBSD behaviour regularly bites me.
I've hit it often enough and use ACLs frequently enough now that I
think I remember quickly.  I can't think of a decent way to structure
the data of getfacl to have appropriate key/value for putting the
results into a hash, so it would only implement the regular support.

If I'm going to scratch this bunch of itches, anyone have any feature
requests or anti-feature requests?  No guarantees.

-Phil

