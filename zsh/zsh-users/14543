From zsh-users-return-14543-mason-zsh=primenet.com.au@zsh.org Wed Nov 11 06:18:14 2009
Return-Path: <zsh-users-return-14543-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24481 invoked by alias); 11 Nov 2009 06:18:13 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14543
Received: (qmail 17900 invoked from network); 11 Nov 2009 06:18:03 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received-SPF: pass (ns1.primenet.com.au: SPF record at _spf.google.com designates 209.85.219.209 as permitted sender)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:cc:content-type
         :content-transfer-encoding;
        bh=GAiADK8M2hgy5ZXV0mOanR2PmUJ1o+uJy+B11jx8rKA=;
        b=nbZ1OenpIIeTUPmPV23aiyvclXViybJt5YeGoi11XRqS3JkYWel6mUpZ92g3R09xYC
         GAv7ZY2oki68/Gsv1aXl5hq76tyaZY4fxc70kJxfrYQVu/BQqX9UmPNQlWq0TVGkDHF9
         lUfIjPJ8MNFwgHoFUxYEHcNZEauvaHWTw1KkE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :cc:content-type:content-transfer-encoding;
        b=abloGDUGcR7KYqGg82UDbY7az7v0N+RvB7jGMDdj7D9kgVYB4TeTAmGhtSVlYh8i5E
         gwpKSadZUlRLHG3s5IqvvwGPGDcRZkQiaGrmncFYHAYshFRzoKFNtT90cNAhTaaYEPmr
         zeupTVR1+J7NAzWbcj916j3RFN7eQOrFa/k4c=
MIME-Version: 1.0
In-Reply-To: <091110204748.ZM28704@torch.brasslantern.com>
References: <10081257897632@webmail89.yandex.ru>
	 <237967ef0911101822g5bfcf4fao25fc33ba0a2e8604@mail.gmail.com>
	 <091110204748.ZM28704@torch.brasslantern.com>
Date: Wed, 11 Nov 2009 07:17:58 +0100
Message-ID: <237967ef0911102217m1325dc59y8d7388e9f6f21c7b@mail.gmail.com>
Subject: Re: the function to show a digit argument while it is being typed
From: Mikael Magnusson <mikachu@gmail.com>
To: Bart Schaefer <schaefer@brasslantern.com>
Cc: zsh-users@zsh.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

2009/11/11 Bart Schaefer <schaefer@brasslantern.com>:
> On Nov 11, =C2=A03:22am, Mikael Magnusson wrote:
> }
> } I have a similar function, it doesn't work well for negative arguments
> } though:
> }
> } function _digit_argument () {
> } =C2=A0 zle -M "$NUMERIC$KEYS[-1]"
> } =C2=A0 zle .digit-argument
> } }
>
> Hmm, that suggests yet another possible improvement to my function. =C2=
=A0I
> assumed $NUMERIC was updated too late to use it in PREDISPLAY, but it
> is updated in time to be used in place of my __digit_arg global.
>
> =C2=A0 =C2=A0function digit-argument-show {
> =C2=A0 =C2=A0 =C2=A0if [[ $LASTWIDGET =3D=3D neg-argument ]]
> =C2=A0 =C2=A0 =C2=A0then PREDISPLAY=3D"(arg: $((NUMERIC*$KEYS[-1]))) "
> =C2=A0 =C2=A0 =C2=A0else PREDISPLAY=3D"(arg: $NUMERIC$KEYS[-1]) "
> =C2=A0 =C2=A0 =C2=A0fi
> =C2=A0 =C2=A0 =C2=A0zle -R
> =C2=A0 =C2=A0 =C2=A0zle .digit-argument
> =C2=A0 =C2=A0 =C2=A0zle read-command
> =C2=A0 =C2=A0 =C2=A0[[ $REPLY !=3D digit-argument ]] && PREDISPLAY=3D""
> =C2=A0 =C2=A0 =C2=A0zle -U $KEYS
> =C2=A0 =C2=A0}
>
> With this, you don't need the neg-argument-show function at all, and
> assignments to PREDISPLAY can be replaced with zle -M if you like.

With $LASTWIDGET, I can make my function work pretty well too. It only
messes up when you do a neg-argument when there are already some
digits in numeric. Apparently that only clears numeric, rather than
starting over with a new -1. Pressing alt-5 alt-- alt-5 shows arg: 0,
but pressing a key at this point inserts 5 characters. Pressing alt-5
again correctly shows arg: 55. I tried to work around it by running
zle .neg-argument twice, but it has no apparent effect. Aha, this
works:
  elif [[ $LASTWIDGET =3D neg-argument ]]; then
    zle -M - "$((NUMERIC * $KEYS[-1] ? NUMERIC * $KEYS[-1] : $KEYS[-1]))"


I also noticed ctrl-c gives this message for your function:
_digit_argument:zle:9: not enough arguments for -U
and doesn't reset numeric.

I also noticed zle -M -5 complains about 5 not being an option, zle -M
- -5 does work but I pretty much had to guess that.

Here's my whole working (as far as I can tell) function, bound both to
digit-argument and neg-argument:

function _digit_argument () {
  if [[ $WIDGET =3D neg-argument ]]; then
    if [[ -n $NUMERIC ]]; then
      zle -M - ""
    else
      zle -M - -
    fi
  elif [[ $LASTWIDGET =3D neg-argument ]]; then
    zle -M - "$((NUMERIC * $KEYS[-1] ? NUMERIC * $KEYS[-1] : $KEYS[-1]))"
  else
    zle -M - "$NUMERIC$KEYS[-1]"
  fi
  zle .$WIDGET
}

(It does not clear the display when something else is pressed).

--=20
Mikael Magnusson

