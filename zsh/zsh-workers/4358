From zsh-workers-request@math.gatech.edu Wed Aug 26 14:37:48 1998
Return-Path: <zsh-workers-request@math.gatech.edu>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 2864 invoked from network); 26 Aug 1998 14:37:47 -0000
Received: from math.gatech.edu (list@130.207.146.50)
  by ns1.primenet.com.au with SMTP; 26 Aug 1998 14:37:47 -0000
Received: (from list@localhost)
	by math.gatech.edu (8.9.1/8.9.1) id KAA06764;
	Wed, 26 Aug 1998 10:31:56 -0400 (EDT)
Resent-Date: Wed, 26 Aug 1998 10:31:56 -0400 (EDT)
Date: Wed, 26 Aug 1998 16:34:21 +0200 (MET DST)
Message-Id: <199808261434.QAA02290@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@math.gatech.edu
In-reply-to: "Bart Schaefer"'s message of Tue, 25 Aug 1998 13:04:14 -0700
Subject: Re: EZ-compctl (was Re: ideas: free-search-complete, noexpand)
Resent-Message-ID: <"DaL0a.0.af1.Rn1vr"@math>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/4358
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu


Bart Schaefer wrote:

> 
> ...
> 
> I suggest that we provide a builtin (or a collection of them) to apply
> the collection of tests to the current input line, plus a collection of
> what amount to zle widgets to permit the user to explicitly direct the
> changes to the input line that take place when the tests succeed.
> 

Ok, I'll try to collect the suggestions you made, combine with a few
additions from me, and come up with a description for that.

We have a new builtin that allows us to use (parts of) the completion
code. The builtin allows us to create, change, and destroy completion
contexts. Changing them means to add matches, to remove matches, or to 
change matches.

What we currently know as key functions that do completion would be
implemented as widgets. The completion functions we have now are
builtin widgets but others can be defined by the user.

Such a widget for completion would select a shell function that
produces the matches. I.e., no more compctls but shell functions that
use the builtin to produce matches and that use `if...then' and other
things for things we now do with `-x' (which will become obsolete).
The builtin may offer some support for selecting a shell function
appropriate for the current command line (of course, this wouldn't
depend on the command line itself, but would somehow allow us to
quickly select a (few) function(s) for certain command names or
whatever).

After all selected completion-producing shell functions have been
executed, the widget uses the builtin to say what should be presented
to the user (e.g. show a list of matches, change the command line, or
both, or...).

Using compltion contexts makes it possible to implement menu
completion easily (there might be an option to the builtin that says:
use the next match from context ...). It would also allow us to define 
widgets that do menu-completion while allowing other editing commands
between menu-completion commands. Of course, lots of other interesting 
things should be possible with that, too.

Hm, I think all this sounds good, and even not too hard to implement
(my last changes to zle_tricky.c might even help with this since they
make the completion code in question cleaner).

Some questions are:

- Are shell functions much bigger?
- Would this be too slow?
- Are there any problems I didn't see right now?

Anyway, did I understand you correctly (enough)? And what do the
others think about all this?

Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

