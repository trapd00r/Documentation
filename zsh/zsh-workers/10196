From zsh-workers-return-10196-mason-zsh=primenet.com.au@sunsite.auc.dk Wed Mar 22 13:32:48 2000
Return-Path: <zsh-workers-return-10196-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 18269 invoked from network); 22 Mar 2000 13:32:47 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 22 Mar 2000 13:32:47 -0000
Received: (qmail 17411 invoked by alias); 22 Mar 2000 13:32:37 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 10196
Received: (qmail 17400 invoked from network); 22 Mar 2000 13:32:36 -0000
Date: Wed, 22 Mar 2000 14:32:28 +0100 (MET)
Message-Id: <200003221332.OAA16839@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: "Bart Schaefer"'s message of Tue, 21 Mar 2000 16:46:09 +0000
Subject: Re: ignored-patterns giving correction a go


Bart Schaefer wrote:

> On Mar 21,  5:10pm, Sven Wischnowsky wrote:
> } Subject: Re: ignored-patterns giving correction a go
> }
> } > }   zstyle ... tag-order --foo=files --bar=files
> } > }   zstyle '*-foo' ignored-patterns '*.ps'
> } > 
> } > Tags right now are pretty much predetermined by the completion functions
> } > that use them, e.g. the way _files uses globbed-files.  Hmm ... is that
> } > changed by what you're working on now?
> } 
> } Yes, and that's what the original example above was about -- the
> } `user' `invented' the tag names `foo' and `bar', linking them to the
> } `method' `files'. And before that I made the suggestion to allow the
> } file-patterns style to contain invented tag names.
> 
> So where do the method names come from?  I don't think we want this to
> be so configurable that, for example, the file-patterns style could be
> caused to generate parameter names.  Do we?

Should be answered by the message I just sent...

> } > 		    shift "i > $# ? $# : i"  # Stupid shift error on i > $#
> } 
> } Yes! It's annoying, isn't it? I was tempted more than one to change it.
> 
> Bash gives the same error.  Sigh.

So does ksh (`shift: bad number'). Damn. Does that make `argv=( $argv[2,-1] )'
more efficient in some cases? (Assignments are one of those things
that get optimised by the execution code, avoiding the call to
execpline*() and execcmd().)

Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

