From schaefer@candle.brasslantern.com Sun Jun 23 09:05:54 1996
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by melb.werple.net.au (8.7.5/8.7.3/2) with ESMTP id JAA21077 for <mason@werple.mira.net.au>; Sun, 23 Jun 1996 09:05:52 +1000 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id SAA19331; Sat, 22 Jun 1996 18:42:43 -0400 (EDT)
Resent-Date: Sat, 22 Jun 1996 18:42:43 -0400 (EDT)
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <960622154340.ZM9978@candle.brasslantern.com>
Date: Sat, 22 Jun 1996 15:43:37 -0700
Reply-To: schaefer@nbn.com
X-Mailer: Z-Mail (4.0b.607 07jun96)
To: zsh-workers@math.gatech.edu
Subject: Using array subscript flags with @ and *
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Resent-Message-ID: <"V4x2A1.0.zj4.ZR7pn"@euclid>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/1426
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu
Content-Length: 619
Status: O

Seems to me that this *should* work, though it doesn't:

zsh% : "$foo[(f)@]"
zsh: bad math expression: unbalanced stack

What I want to do is treat the string value of foo as an array of lines,
and quote each line as a separate "word".  There's no other subscripting
construction that duplicates this effect; $foo[(f)1,(f)-1] is equivalent
to $foo[*], not $foo[@].

-- 
Bart Schaefer                             Brass Lantern Enterprises
http://www.well.com/user/barts            http://www.nbn.com/people/lantern

New male in /home/schaefer:
>N  2 Justin William Schaefer  Sat May 11 03:43  53/4040  "Happy Birthday"


