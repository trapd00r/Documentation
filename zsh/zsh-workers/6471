From zsh-workers-return-6471-mason-zsh=primenet.com.au@sunsite.auc.dk Fri Jun 04 16:48:14 1999
Return-Path: <zsh-workers-return-6471-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5455 invoked from network); 4 Jun 1999 16:48:11 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 4 Jun 1999 16:48:11 -0000
Received: (qmail 16242 invoked by alias); 4 Jun 1999 16:47:56 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 6471
Received: (qmail 16234 invoked from network); 4 Jun 1999 16:47:55 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <990604164737.ZM5692@candle.brasslantern.com>
Date: Fri, 4 Jun 1999 16:47:37 +0000
In-Reply-To: <199906040933.LAA03117@beta.informatik.hu-berlin.de>
Comments: In reply to Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
        "Re: Better completion in quotes" (Jun  4, 11:33am)
References: <199906040933.LAA03117@beta.informatik.hu-berlin.de>
X-Mailer: Z-Mail (5.0.0 30July97)
To: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>,
        zsh-workers@sunsite.auc.dk
Subject: Re: Better completion in quotes
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Jun 4, 11:33am, Sven Wischnowsky wrote:
} Subject: Re: Better completion in quotes
}
} 1) We make get_comp_string() always return quoted strings as a whole,
}    in the form the lexer returns them. We could then look if the word
}    begins with a quote, remember that and use this information to
}    offer automatically inserted ending-quotes. But [...]
}    This means that we would have to keep information about quotes in
}    the word and we have to re-insert them the way we do it for braces
}    already.  [...]
}    So, as a much simpler solution I suggest to make the completion
}    code turn strings with quotes into a generic quoted form, using
}    backslashes. But it is a bit ugly that
} 
}      % ls 'foo b<TAB>
} 
}    would be turned into foo\ bar.

How about this:  We turn the string into whatever is the simplest generic
quoted form for the completion code to handle, which I take it is using
backslashes, and remember that the original was quoted.  After generating
the list of matches, we rewrite those to "beautified quote form" which
puts the entire word in some kind of outer quote marks, and use that for
the strings that get inserted on the command line.

So starting from
	'foo b
the completion system would work on
	foo\ b
and then the matches would get rewritten as
	'foo bar' 'foo blat'
before insertion.  This does mean that if you actually started with
	"foo b
you'd still get
	'foo bar'
on the command line, but that's not too bad (unless what you planned
to type was "foo bar $ding" -- but you can't have everything).

For "beautified form" I suggest starting with the assumption that single
quotes will work, and if you encounter a String token or a Qtick, simply
close the single quote and start again with double quote.  So something
like
	"this is a $parameter
becomes
	'this is a '"$parameter
which is IMO better than
	this\ is\ a\ $parameter
because for one thing that last is wrong when SH_WORD_SPLIT is set.

(Z-Mail uses an algorithm much like this for generating quoted strings
in its supposedly-human-readable saved-options files.)

} 2) I still like the option Bart suggested and would like to make it
}    work.

I don't know how what I just said about (1) might mess up what you've
said about (2).  As with most of the new completion stuff, I've have
to actually see some of it written down to judge how baroque it is, but
it sounds OK in theory.

-- 
Bart Schaefer                                 Brass Lantern Enterprises
http://www.well.com/user/barts              http://www.brasslantern.com

