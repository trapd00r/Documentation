From zsh-users-return-13294-mason-zsh=primenet.com.au@sunsite.dk Sun Sep 28 19:20:34 2008
Return-Path: <zsh-users-return-13294-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 1304 invoked from network); 28 Sep 2008 19:20:22 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,WEIRD_PORT
	autolearn=no version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 28 Sep 2008 19:20:22 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 41087 invoked from network); 28 Sep 2008 19:20:08 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 28 Sep 2008 19:20:08 -0000
Received: (qmail 16288 invoked by alias); 28 Sep 2008 19:19:46 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13294
Received: (qmail 16271 invoked from network); 28 Sep 2008 19:19:45 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 28 Sep 2008 19:19:45 -0000
Received: from wa-out-1112.google.com (wa-out-1112.google.com [209.85.146.183])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 8841E8030847
	for <zsh-users@sunsite.dk>; Sun, 28 Sep 2008 21:19:39 +0200 (CEST)
Received: by wa-out-1112.google.com with SMTP id m28so936040wag.29
        for <zsh-users@sunsite.dk>; Sun, 28 Sep 2008 12:19:38 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to
         :subject:mime-version:content-type:content-transfer-encoding
         :content-disposition;
        bh=UMzqy1Aq5EHDfKdQy9XQkky3PmAsdWmjPJfUFAk8YAI=;
        b=UNAZbRgiG6E4j4mpSp0WSRLFxJx4Kc0vvB/OTrYJI5iU100edZnXpGe0y4vOgfbMOe
         tGkRPGbOP3Wzurpoy55zmA1qBHOLS922ZuVbxLw2nT/LaX1gciApwNsIaj2W0qlw0Seq
         T+6pKZcFXDqGFG6JklblTZckcXlJcK0A1Tui8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:mime-version:content-type
         :content-transfer-encoding:content-disposition;
        b=UABqZn5eymLo/0qVJP99vUHEN8IRvyXGniw5/0noYavldS4RBJ3q/JSR/3CIF8uSY7
         PZkVW00oZwad+Un8VmYd0J2g+t7zvfRDzaz2m5gvnV5vUBmCSPpJnJmEMEA4LrAR7kQt
         opslmk8m72/7u1K4t2SHwAPhmUEP68iHv1Xxw=
Received: by 10.114.25.19 with SMTP id 19mr4558025way.225.1222629577903;
        Sun, 28 Sep 2008 12:19:37 -0700 (PDT)
Received: by 10.114.159.2 with HTTP; Sun, 28 Sep 2008 12:19:37 -0700 (PDT)
Message-ID: <6cd6de210809281219i4bf1ed18mefa45b967fa835a6@mail.gmail.com>
Date: Sun, 28 Sep 2008 15:19:37 -0400
From: "Rocky Bernstein" <rocky.bernstein@gmail.com>
To: "zsh users mailing list" <zsh-users@sunsite.dk>
Subject: Help me track down a tough bug? (probably funcfiletrace, subshells and possibly I/O redirection)
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
X-Virus-Scanned: ClamAV 0.92.1/8347/Sun Sep 28 01:35:46 2008 on bifrost
X-Virus-Status: Clean

There is what looks to me a bug in the recent funcfiletrace that I've
been trying to isolate. I've spent the weekend on this and have made
some progress but have to stop now. Perhaps there's someone out there
who can help further pinpoint this bug.

You'll need the most recent zsh in CVS. If you have zshdb installed
(and chances are you don't) you can see the bug by
running this program under the debugger

#!/usr/local/bin/zsh
# Test debugger handling of subshells
(
    x=$(print 5; print 6)
)

Below I'll show output from a sample session using the debugger. I've
put comments to the side (in #) to try to explain what's going on.

$ zshdb -q /tmp/zshdb/testing.sh   # run testing.sh
(/tmp/zshdb/testing.sh:3):         # file and line number
( x=$(print 5; print 6) )          # What's going to get run next
zshdb<4> s                         # 's' issues a "step" command

(/tmp/zshdb/testing.sh:4):
x=$(print 5; print 6)              # Note we are in a subshell
zshdb<(5)> s                       # the () indicates this

(/tmp/zshdb/testing.sh:1):
print 5                            # In a 2nd subshell, backtick
zshdb<((7))> where                 # ((..)) indicates this.

->0 in file `/tmp/zshdb/testing.sh' at line 1
##1 /tmp/zshdb/testing.sh called from file `/usr/local/bin/zshdb' at line 106

As suggested in the comments above, you know you've gotten to the
problem point when you see the double parenthesis in the zshdb prompt
which means you are nested inside two subshells. The first is a ()
kind of subshell and the second, a backtick or $() kind of subshell.

What's wrong is that we aren't on line 1 of testing.sh. This
information is coming from funcfiletrace. We can use the debugger to
show this via a "print" command

zshdb<((8))> p ${funcfiletrace[@]}

/usr/local/share/zshdb/command/eval.sh:29
/usr/local/share/zshdb/command/eval.sh:59
/usr/local/share/zshdb/lib/processor.sh:118
/usr/local/share/zshdb/lib/processor.sh:50
/usr/local/share/zshdb/lib/hook.sh:164
/usr/local/share/zshdb/lib/hook.sh:29 /tmp/zshdb/testing.sh:1
/usr/local/bin/zshdb:106
zshdb<((9))>

In the above the /usr/local/bin/zshdb:106 is kind of bogus, so ignore
it. That's just the way zsh currently works.

Alas, zshdb is alas a large and (too) complex program. However my
attempts to start with a small program to show the problem elude me.

So I have started working the other direction and started stripping
down zshdb.  You can get a copy of a drastically reduced version of
zshdb at http://bashdb.sf.net/zshdb-0.01bug.tar.gz

If you untar this and run ./configure, zshdb2.sh should get created.
This mini-debugger "debugs" a script in the same directory called
testing.sh.  This is a copy of what I showed above. It also has some
debug output in thrown in. Again we run the program and step until we
are two subshells deep.

Here's the same thing using zshdb2.sh

$ ./zshdb2.sh
./zshdb2.sh
---------------
./zshdb2.sh:39 ./zshdb2.sh:34   # functrace output
===============
(./zshdb2.sh:34):
. ./testing.sh
./zshdb2.sh:39 ./zshdb2.sh:34
zshdb<1> s

---------------
./zshdb2.sh:8 ./testing.sh:3 ./zshdb2.sh:34
===============
(./testing.sh:3):
( x=$(print 5; print 6) )
./zshdb2.sh:8 ./testing.sh:3 ./zshdb2.sh:34
zshdb<2> s

---------------
./zshdb2.sh:9 ./testing.sh:4 ./zshdb2.sh:34
===============
(./testing.sh:4):
x=$(print 5; print 6)
./zshdb2.sh:9 ./testing.sh:4 ./zshdb2.sh:34
zshdb<(3)> s
                                     # Note functrace output
disappears. Something up with output?
zshdb<((4))> p ${funcfiletrace[@]}

./command/eval.sh:5 ./command/eval.sh:23 ./lib/processor.sh:67
./lib/processor.sh:16 ./zshdb2.sh:6 ./testing.sh:1 ./zshdb2.sh:34
zshdb<((5))>

Above ./testing.sh:1 should be ./testing.sh:6 and we see 6 in
zshdb.sh:6 the next entry.

Any help in narrowing or fixing this problem is appreciated. One could
try to start with a new program that works sort of like this
stripped-down code. Or one could just try to simplify and remove more
stuff.

Thanks!

