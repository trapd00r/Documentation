From zsh-workers-return-12788-mason-zsh=primenet.com.au@sunsite.auc.dk Sun Sep 10 21:16:59 2000
Return-Path: <zsh-workers-return-12788-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 25286 invoked from network); 10 Sep 2000 21:16:58 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 10 Sep 2000 21:16:58 -0000
Received: (qmail 27412 invoked by alias); 10 Sep 2000 21:16:28 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 12788
Received: (qmail 27405 invoked from network); 10 Sep 2000 21:16:28 -0000
To: zsh-workers@sunsite.auc.dk
Subject: Re: Module hierarchies, aliasing, and dependencies 
In-reply-to: ""Bart Schaefer""'s message of "Sat, 09 Sep 2000 17:20:16 -0000."
             <1000909172016.ZM3792@candle.brasslantern.com> 
Date: Sun, 10 Sep 2000 22:16:14 +0100
From: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Message-Id: <E13YESW-00031m-00.2000-09-10-22-16-16@mail1.svr.pol.co.uk>

"Bart Schaefer" wrote:
> Wouldn't it be better to rely on a symbol that's defined *inside* the
> module to determine whether a module has been loaded?  Similar to the way
> (provides 'name) works in emacs libraries?

Yes, this sounds better.  That would have fixed [some of] Will's
difficulties.  Also, I've been wondering for a while how to provide a test
version of a module under a different name.  This would be a good solution.

> One way to approach this would be to add another function, like the boot
> and cleanup functions that already exist, which is called when searching
> the list of modules.  We could define this function to return a string
> that is compared to the module being searched for; or we could pass the
> string being searched for into the function and let it return a truth
> value.  If the function isn't defined by a given module, then compare the
> name strings as is done now.

Given the way modules work, a function-based system is presumably the right
one.

-- 
Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Work: pws@csr.com
Web: http://www.pwstephenson.fsnet.co.uk

