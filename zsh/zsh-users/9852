From zsh-users-return-9852-mason-zsh=primenet.com.au@sunsite.dk Thu Jan 26 09:19:29 2006
Return-Path: <zsh-users-return-9852-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23365 invoked from network); 26 Jan 2006 09:19:27 -0000
X-Spam-Checker-Version: SpamAssassin 3.1.0 (2005-09-13) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=BAYES_00,FORGED_RCVD_HELO 
	autolearn=ham version=3.1.0
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 26 Jan 2006 09:19:27 -0000
Received: (qmail 8058 invoked from network); 26 Jan 2006 09:19:19 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 26 Jan 2006 09:19:19 -0000
Received: (qmail 26064 invoked by alias); 26 Jan 2006 09:19:09 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 9852
Received: (qmail 26046 invoked from network); 26 Jan 2006 09:19:08 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 26 Jan 2006 09:19:08 -0000
Received: (qmail 6939 invoked from network); 26 Jan 2006 09:19:08 -0000
Received: from smtp2.cc.ksu.edu (129.130.7.16)
  by a.mx.sunsite.dk with SMTP; 26 Jan 2006 09:19:06 -0000
Received: from koopa (ip68-102-201-46.ks.ok.cox.net [68.102.201.46])
	(authenticated bits=0)
	by smtp2.cc.ksu.edu (8.13.4/8.13.4) with ESMTP id k0Q9J5FQ023072
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO)
	for <zsh-users@sunsite.dk>; Thu, 26 Jan 2006 03:19:05 -0600 (CST)
Date: Thu, 26 Jan 2006 03:18:52 -0600
From: Andrew Ruder <aeruder@ksu.edu>
To: zsh-users@sunsite.dk
Subject: Subversion tab completion module
Message-ID: <20060126091852.GB6236@localdomain>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="gKMricLos+KVdGMg"
Content-Disposition: inline
User-Agent: Mutt/1.5.9i


--gKMricLos+KVdGMg
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

Hello all,

I just thought I'd throw this out to anyone else who might be
interested.  It is a simple (well, not so simple when its the first time
you've seen a completion module) hack on the _subversion completion
module that adds tab completion into a svn repository.

Example:

andy@looper ~ $ svn co http://aeruder.ath.cx:7777/svn/TalkSoup/<TAB>
branches/    historical/  packaging/   tags/        trunk/

And just in case you don't know how to use this, this is what I did.
Before the lines that look like:

autoload -U compinit
compinit

somewhere you should have a:

fpath=(~/.zshfunc $fpath)
autoload -U ~/.zshfunc/_*(:t)

Then just make a directory ~/.zshfunc and put the file in there.

I'm sure if there is anybody using subversion out there you'll find it
very handy, I know I have.  Get back to me if you find any bugs. :)

Cheers,
Andrew Ruder

-- 
Andrew Ruder
http://www.aeruder.net

--gKMricLos+KVdGMg
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename=_subversion

#compdef svn svnadmin svnadmin-static=svnadmin

_remote_files () {
  # There should be coloring based on all the different ls -F classifiers.
  local expl remfiles remdispf remdispd args suf ret=1

  if zstyle -T ":completion:${curcontext}:files" remote-access; then
    remfiles=(${(M)${(f)"$(_call_program files svn list "${(Q)PREFIX%%[^./][^/]#}" 2>/dev/null)"}%%[^/]#(|/)})
    compset -P '*/'
    compset -S '/*' || suf='remote file'

    remdispf=(${remfiles:#*/})
    remdispd=(${(M)remfiles:#*/})

    _tags files
    while _tags; do
      while _next_label files expl ${suf:-remote directory}; do
        [[ -n $suf ]] && compadd "$@" "$expl[@]" -d remdispf \
	    ${(q)remdispf%[*=@|]} && ret=0 
	compadd ${suf:+-S/} "$@" "$expl[@]" -d remdispd \
	    ${(q)remdispd%/} && ret=0
      done
      (( ret )) || return 0
    done
  else
    _message -e remote-files 'remote file'
  fi
}

_svn () {

  _arguments -s \
    '(-)--help[print help information]' \
    '(- *)--version[print client version information]' \
    '*::svn command:_svn_command'
}

_svnadmin () {

  _arguments -s \
    '(-)--help[print help information]' \
    '(- *)--version[print client version information]' \
    '*::svnadmin command:_svnadmin_command'
}

(( $+functions[_svn_controlled] )) ||
_svn_controlled() {
  [[ -f ${(M)REPLY##*/}.svn/text-base/${REPLY##*/}.svn-base ]]
}

(( $+functions[_svn_deletedfiles] )) ||
_svn_deletedfiles() {
  # Typical usage would be _files -g '.svn(/e:_svn_deletedfiles:)' 
  local cont controlled
  reply=( )
  [[ $REPLY = (*/|).svn ]] || return
  controlled=( $REPLY/text-base/*.svn-base(N:r:t) )
  for cont in ${controlled}; do
    [[ -e $REPLY:h/$cont ]] || reply+=( ${REPLY%.svn}$cont )
  done
}

(( $+functions[_svn_status] )) ||
_svn_status() {
  local dir=$REPLY:h
  local pat="${1:-([ADMR]|?M)}"

  if (( ! $+_cache_svn_status[$dir] )); then
    _cache_svn_status[$dir]="$(_call_program files svn status -N $dir)"
  fi

  (( ${(M)#${(f)_cache_svn_status[$dir]}:#(#s)${~pat}*$REPLY} ))
}

(( $+functions[_svn_urls] )) ||
_svn_urls() {
  local expl
  local myprefix

  if [[ -prefix file:/// ]]; then
    myprefix="${PREFIX#file://}"
    myprefix="${(Q)myprefix%%[^./][^/]#}"
    #  Directory doesn't exist? prolly a repos
    if ! [[ -d "$myprefix" ]]; then
      _remote_files
    # Take a wild guess that this is prolly a svn repos
    elif [[ -e "$myprefix"/README.txt ]] && 
         [[ -d "$myprefix"/hooks ]] && 
         [[ -d "$myprefix"/locks ]]; then
      _remote_files
    # Ok, looks to be not a svn repos (yet)
    else
      _urls
    fi
  elif [[ -prefix *: ]]; then
    _remote_files
  else
    compset -S '[^:]*'
    _wanted url-schemas expl 'URL schema' compadd -S '' - \
        file:// http:// https:// svn:// svn+ssh:// 
  fi    
}

(( $+functions[_svn_command] )) ||
_svn_command () {
  local cmd

  if (( ! $+_svn_cmds )); then
    typeset -gA _svn_cmds
    _svn_cmds=(
      ${=${(f)${${"$(LC_MESSAGES=C _call_program commands svn help)"#l#*Available subcommands:}%%Subversion is a tool*}}/(#s)[[:space:]]#(#b)([a-z]##)[[:space:]]#(\([a-z, ?]##\))#/$match[1] :$match[1]${match[2]:+:${${match[2]//[(),]}// /:}}:}
    )
  fi

  if (( CURRENT == 1 )); then
    _tags commands && { compadd "$@" -k _svn_cmds || compadd "$@" ${(s.:.)_svn_cmds} }
  else
    local curcontext="$curcontext"

    cmd="${${(k)_svn_cmds[(R)*:$words[1]:*]}:-${(k)_svn_cmds[(i):$words[1]:]}}"
    if (( $#cmd )); then
      curcontext="${curcontext%:*:*}:svn-${cmd}:"
      _svn_subcommand $cmd
    else
      _message "unknown svn command: $words[1]"
    fi
  fi
}

(( $+functions[_svn_subcommand] )) ||
_svn_subcommand () {
  local subcmd _svn_subcmds _svn_subcmd_usage
  typeset -A _cache_svn_status

  _svn_subcmd_usage=${${(M)${(f)"$(LC_MESSAGES=C _call_program options svn help $1)"}:#usage:*}#usage: $1 }

  _svn_subcmds=(
    ${${=${${${(M)${(f)"$(LC_MESSAGES=C _call_program options svn help $1)"##*Valid options:}:#* :*}%% #:*}/ arg/:arg:}/(#b)-([[:alpha:]]) \[--([a-z-]##)\](:arg:)#/(--$match[2])-$match[1]$match[3] (-$match[1])--$match[2]$match[3]}[2,-1]}
  )

  case $1 in;
    add)
      _svn_subcmds+=(
        '*:file:_files -g "*(^e:_svn_controlled:)"'
      )
    ;;
    log)
      _svn_subcmds+=(
        '1: : _alternative "files:file:_files -g \*\(e:_svn_controlled:\)" "urls:URL:_svn_urls"'
	'*:file:_files -g "*(e:_svn_controlled:)"'
      )
    ;;
    delete)
      _svn_subcmds+=(
        '*:file:_files -g ".svn(/e:_svn_deletedfiles:)"'
      )
    ;;
    revert|commit)
      _svn_subcmds+=(
        '*:file:_files -g "(.svn|*)(/e:_svn_deletedfiles:,e:_svn_status:)"'
      )
    ;;
    *)
      case $_svn_subcmd_usage in
        *(SRC|DST|TARGET|URL*PATH)*)
          _svn_subcmds+=( 
	    '*: : _alternative "files:file:_files" "urls:URL:_svn_urls"'
	  )
	;;
        *URL*) _svn_subcmds+=( ':URL:_svn_urls' ) ;;
        *PATH*) _svn_subcmds+=( '*:file:_files' ) ;;
      esac
    ;;
  esac

  _arguments "$_svn_subcmds[@]" && ret=0

  return ret
}


(( $+functions[_svnadmin_command] )) ||
_svnadmin_command () {
  local cmd

  if (( ! $+_svnadmin_cmds )); then
    typeset -gA _svnadmin_cmds
    _svnadmin_cmds=(
      ${=${(f)${${"$(LC_MESSAGES=C _call_program commands svnadmin help)"#l#*Available subcommands:}}}/(#s)[[:space:]]#(#b)([a-z]##)[[:space:]]#(\([a-z, ?]##\))#/$match[1] :$match[1]${match[2]:+:${${match[2]//[(),]}// /:}}:}
    )
  fi

  if (( CURRENT == 1 )); then
    _tags commands && { compadd "$@" -k _svnadmin_cmds || compadd "$@" ${(s.:.)_svnadmin_cmds}  }
  else
    local curcontext="$curcontext"

    cmd="${${(k)_svnadmin_cmds[(R)*:$words[1]:*]}:-${(k)_svnadmin_cmds[(i):$words[1]:]}}"
    if (( $#cmd )); then
      curcontext="${curcontext%:*:*}:svnadmin-${cmd}:"
      _svnadmin_subcommand $cmd
    else
      _message "unknown svnadmin command: $words[1]"
    fi
  fi
}

(( $+functions[_svnadmin_subcommand] )) ||
_svnadmin_subcommand () {
  local subcmd _svnadmin_subcmds _svnadmin_subcmd_usage

  _svnadmin_subcmd_usage=${${(M)${(f)"$(LC_MESSAGES=C _call_program options svnadmin help $1)"}:#$1: usage:*}#$1: usage: svnadmin $1 }

  _svnadmin_subcmds=(
    ${${=${${${(M)${(f)"$(LC_MESSAGES=C _call_program options svnadmin help $1)"##*Valid options:}:#*:*}%% #:*}/ arg/:arg:}/(#b)-([[:alpha:]]) \[--([a-z-]##)\](:arg:)#/(--$match[2])-$match[1]$match[3] (-$match[1])--$match[2]$match[3]}[2,-1]}
  )

  [[ "$_svnadmin_subcmd_usage" == *REPOS_PATH* ]] &&
  _svnadmin_subcmds=($_svnadmin_subcmds ":path:_files -/")

  _arguments "$_svnadmin_subcmds[@]" && ret=0

  return ret

}


_subversion () {
  case $service in
    (svn) _svn "$@" ;;
    (svnadmin) _svnadmin "$@" ;;
  esac
}

_subversion "$@"

--gKMricLos+KVdGMg--

