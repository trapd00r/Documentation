From zsh-workers-return-28564-mason-zsh=primenet.com.au@zsh.org Fri Dec 31 23:23:39 2010
Return-Path: <zsh-workers-return-28564-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 18622 invoked by alias); 31 Dec 2010 23:23:39 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 28564
Received: (qmail 1947 invoked from network); 31 Dec 2010 23:23:24 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,HTML_MESSAGE,RCVD_IN_DNSWL_LOW autolearn=ham version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at _spf.google.com designates 74.125.82.171 as permitted sender)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:sender:received
         :in-reply-to:references:date:x-google-sender-auth:message-id:subject
         :from:to:cc:content-type;
        bh=y9jmsJWL5vsed11ue7kLYnBQYNco7AnzR5un6e4Q/Eo=;
        b=FyvEia5fU6p5sjGiuY3SC+8Sq6dufnYMaEQRNezjyk/hsF6NZbsV0zyuh2bswEVc/4
         mx9yzsQ8u7IIhZ52tQHt4pud+qR9ie8Ij+27K6Mzs+yXGXPyfggNjq3TwmStbFWWsWU+
         J86WGum85bmsGDR7N0tIeKjaguNbniemP7lHw=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:sender:in-reply-to:references:date
         :x-google-sender-auth:message-id:subject:from:to:cc:content-type;
        b=dooxlU8pj2OyL06fpSrb68DlUpgVo9TcvkBcIvD4W8fC44+/VSjvF1UhmMPOeFmjye
         xrUbsFpqjqXXtAfzA8kPPaeSdHcXhGHak3vyQT29yWA2lN9DyO/PvyfycIYVICpHV4F3
         NxzrO5EUFyARtCUyqzuf0wsASozsy774s6DjY=
MIME-Version: 1.0
Sender: 4wayned@gmail.com
In-Reply-To: <101231002820.ZM7583@torch.brasslantern.com>
References: <AANLkTikgELYV5WuDOD9XEPRX7mUiGhtObx6Q5v=DzB2S@mail.gmail.com>
	<101231002820.ZM7583@torch.brasslantern.com>
Date: Fri, 31 Dec 2010 15:23:19 -0800
X-Google-Sender-Auth: B3jYxbh5Pi_KTQAVgQxBm6rNOl0
Message-ID: <AANLkTinNwsFcoMU=iuSdcS69k3=M9XxTxjHfjvR2vKW3@mail.gmail.com>
Subject: Re: Overriding a yank* widget in zle
From: Wayne Davison <wayned@users.sourceforge.net>
To: Bart Schaefer <schaefer@brasslantern.com>
Cc: zsh-workers@zsh.org
Content-Type: multipart/alternative; boundary=0016e659ffa26c5ddd0498bd1613

--0016e659ffa26c5ddd0498bd1613
Content-Type: text/plain; charset=UTF-8

On Fri, Dec 31, 2010 at 12:28 AM, Bart Schaefer
<schaefer@brasslantern.com>wrote:

> Perhaps a general solution would be that for *any* widget, not just a
> completion one, it should be possible to name a "prototype" widget whose
> behavior the new widget is intended to simulate or replace.
>

That seems like a great solution to me.

The only other solution to this that I've thought of would be to follow the
> example of the auto-suffix-remove and auto-suffix-retain widgets, that is,
> have a special widget whose only effect is to have the side-effect of
> enabling yank-pop on the next interaction: yank-pop-enable perhaps (is
> yank-pop-disable ever needed?).
>

Something like that would work if done right.  I tried something along those
lines (it was named "yank-noop"), but hadn't worked out the right bits to
make the flags stick around long enough before I changed direction.  I like
the prototype idiom best, though.

..wayne..

--0016e659ffa26c5ddd0498bd1613--

