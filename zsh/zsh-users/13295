From zsh-users-return-13295-mason-zsh=primenet.com.au@sunsite.dk Sun Sep 28 21:18:41 2008
Return-Path: <zsh-users-return-13295-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 14716 invoked from network); 28 Sep 2008 21:18:38 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,WEIRD_PORT
	autolearn=no version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 28 Sep 2008 21:18:38 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 73652 invoked from network); 28 Sep 2008 21:17:52 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 28 Sep 2008 21:17:52 -0000
Received: (qmail 24234 invoked by alias); 28 Sep 2008 21:17:05 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 13295
Received: (qmail 24224 invoked from network); 28 Sep 2008 21:17:03 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 28 Sep 2008 21:17:03 -0000
Received: from mtaout01-winn.ispmail.ntl.com (mtaout01-winn.ispmail.ntl.com [81.103.221.47])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 9EEB18030847
	for <zsh-users@sunsite.dk>; Sun, 28 Sep 2008 23:16:59 +0200 (CEST)
Received: from aamtaout02-winn.ispmail.ntl.com ([81.103.221.35])
          by mtaout01-winn.ispmail.ntl.com with ESMTP
          id <20080928211658.SFOK2285.mtaout01-winn.ispmail.ntl.com@aamtaout02-winn.ispmail.ntl.com>
          for <zsh-users@sunsite.dk>; Sun, 28 Sep 2008 22:16:58 +0100
Received: from pws-pc ([81.107.43.40]) by aamtaout02-winn.ispmail.ntl.com
          with ESMTP
          id <20080928211658.UHMG19289.aamtaout02-winn.ispmail.ntl.com@pws-pc>
          for <zsh-users@sunsite.dk>; Sun, 28 Sep 2008 22:16:58 +0100
Date: Sun, 28 Sep 2008 22:16:51 +0100
From: Peter Stephenson <p.w.stephenson@ntlworld.com>
To: "zsh users mailing list" <zsh-users@sunsite.dk>
Subject: Re: Help me track down a tough bug? (probably funcfiletrace,
 subshells and possibly I/O redirection)
Message-ID: <20080928221651.6ee7f671@pws-pc>
In-Reply-To: <6cd6de210809281219i4bf1ed18mefa45b967fa835a6@mail.gmail.com>
References: <6cd6de210809281219i4bf1ed18mefa45b967fa835a6@mail.gmail.com>
X-Mailer: Claws Mail 3.5.0 (GTK+ 2.12.12; x86_64-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Cloudmark-Analysis: v=1.0 c=1 a=h2OHtlqgnr0A:10 a=gRCb2yQRoPMA:10 a=NLZqzBF-AAAA:8 a=KI5chCjTilUhCIAdNc4A:9 a=ORrGIzSNFCm2iKxNmBsA:7 a=9CiyrmIXCfE8CukewAYsK5vBnjgA:4 a=MSl-tDqOz04A:10 a=_dQi-Dcv4p4A:10 a=LY0hPdMaydYA:10
X-Virus-Scanned: ClamAV 0.92.1/8349/Sun Sep 28 22:04:32 2008 on bifrost
X-Virus-Status: Clean

On Sun, 28 Sep 2008 15:19:37 -0400
"Rocky Bernstein" <rocky.bernstein@gmail.com> wrote:
> There is what looks to me a bug in the recent funcfiletrace that I've
> been trying to isolate.
> 
> #!/usr/local/bin/zsh
> # Test debugger handling of subshells
> (
>     x=$(print 5; print 6)
> )
> (/tmp/zshdb/testing.sh:1):
> print 5                            # In a 2nd subshell, backtick
> zshdb<((7))> where                 # ((..)) indicates this.
>
> What's wrong is that we aren't on line 1 of testing.sh.

exec.c:parse_string() resets the line number for every invocation.
That's fine for eval, where we've fixed this up explicitly, but doesn't
work in the call from exec.c:getoutput() which is the case here.
Obviously that's not consistent with the fact that it doesn't have its
own file; we don't do the special eval handling of reconstructing the
file location in this case.

The reason (...) is different is it's parsed straight away when the
shell reads it in; it's not stored as a string argument to be looked at
again later.

It's possible we can simply get away with not resetting the line number
in any case without its own entry on the function stack.  That's about
the simplest fix, but changes the meaning of line numbers in all string
evaluations apart from eval, trap and functions, where we have the
special handling.  I'm coming round to the view that this is nonetheless
the best way of salvaging consistency of the debugging environment.
Have a go at this and see if it looks sensible.

Index: Src/builtin.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/builtin.c,v
retrieving revision 1.209
diff -u -r1.209 builtin.c
--- Src/builtin.c	27 Sep 2008 19:57:33 -0000	1.209
+++ Src/builtin.c	28 Sep 2008 21:11:21 -0000
@@ -4781,7 +4781,7 @@
     } else
 	fpushed = 0;
 
-    prog = parse_string(zjoin(argv, ' ', 1));
+    prog = parse_string(zjoin(argv, ' ', 1), 1);
     if (prog) {
 	if (wc_code(*prog->prog) != WC_LIST) {
 	    /* No code to execute */
@@ -5781,7 +5781,7 @@
     arg = *argv++;
     if (!*arg)
 	prog = &dummy_eprog;
-    else if (!(prog = parse_string(arg))) {
+    else if (!(prog = parse_string(arg, 1))) {
 	zwarnnam(name, "couldn't parse trap command");
 	return 1;
     }
Index: Src/exec.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/exec.c,v
retrieving revision 1.156
diff -u -r1.156 exec.c
--- Src/exec.c	26 Sep 2008 09:11:29 -0000	1.156
+++ Src/exec.c	28 Sep 2008 21:11:22 -0000
@@ -188,17 +188,21 @@
 
 /**/
 mod_export Eprog
-parse_string(char *s)
+parse_string(char *s, int reset_lineno)
 {
     Eprog p;
-    zlong oldlineno = lineno;
+    zlong oldlineno;
 
     lexsave();
     inpush(s, INP_LINENO, NULL);
     strinbeg(0);
-    lineno = 1;
+    if (reset_lineno) {
+	oldlineno = lineno;
+	lineno = 1;
+    }
     p = parse_list();
-    lineno = oldlineno;
+    if (reset_lineno)
+	lineno = oldlineno;
     if (tok == LEXERR && !lastval)
 	lastval = 1;
     strinend();
@@ -954,7 +958,7 @@
     Eprog prog;
 
     pushheap();
-    if ((prog = parse_string(s)))
+    if ((prog = parse_string(s, 0)))
 	execode(prog, dont_change_job, exiting);
     popheap();
 }
@@ -3445,7 +3449,7 @@
     pid_t pid;
     char *s;
 
-    if (!(prog = parse_string(cmd)))
+    if (!(prog = parse_string(cmd, 0)))
 	return NULL;
 
     if ((s = simple_redir_name(prog, REDIR_READ))) {
@@ -3566,7 +3570,7 @@
 	return NULL;
     }
     *str = '\0';
-    if (str[1] || !(prog = parse_string(cmd + 2))) {
+    if (str[1] || !(prog = parse_string(cmd + 2, 0))) {
 	zerr("parse error in process substitution");
 	return NULL;
     }
@@ -4453,7 +4457,7 @@
 		    d = metafy(d, rlen, META_REALLOC);
 
 		    scriptname = dupstring(s);
-		    r = parse_string(d);
+		    r = parse_string(d, 1);
 		    scriptname = oldscriptname;
 
 		    if (fname)
Index: Src/glob.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/glob.c,v
retrieving revision 1.65
diff -u -r1.65 glob.c
--- Src/glob.c	11 May 2008 19:55:21 -0000	1.65
+++ Src/glob.c	28 Sep 2008 21:11:23 -0000
@@ -3329,7 +3329,7 @@
 {
     Eprog prog;
 
-    if ((prog = parse_string(str))) {
+    if ((prog = parse_string(str, 0))) {
 	int ef = errflag, lv = lastval, ret;
 
 	unsetparam("reply");
Index: Src/parse.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/parse.c,v
retrieving revision 1.75
diff -u -r1.75 parse.c
--- Src/parse.c	24 Sep 2008 19:19:56 -0000	1.75
+++ Src/parse.c	28 Sep 2008 21:11:24 -0000
@@ -2831,7 +2831,7 @@
 	close(fd);
 	file = metafy(file, flen, META_REALLOC);
 
-	if (!(prog = parse_string(file)) || errflag) {
+	if (!(prog = parse_string(file, 1)) || errflag) {
 	    errflag = 0;
 	    close(dfd);
 	    zfree(file, flen);
Index: Src/Modules/parameter.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Modules/parameter.c,v
retrieving revision 1.49
diff -u -r1.49 parameter.c
--- Src/Modules/parameter.c	11 Sep 2008 17:14:39 -0000	1.49
+++ Src/Modules/parameter.c	28 Sep 2008 21:11:24 -0000
@@ -279,7 +279,7 @@
 
     val = metafy(val, strlen(val), META_REALLOC);
 
-    prog = parse_string(val);
+    prog = parse_string(val, 1);
 
     if (!prog || prog == &dummy_eprog) {
 	zwarn("invalid function definition", value);
Index: Src/Modules/zpty.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Modules/zpty.c,v
retrieving revision 1.38
diff -u -r1.38 zpty.c
--- Src/Modules/zpty.c	15 May 2008 15:51:01 -0000	1.38
+++ Src/Modules/zpty.c	28 Sep 2008 21:11:24 -0000
@@ -299,7 +299,7 @@
     if (!ineval)
 	scriptname = "(zpty)";
 
-    prog = parse_string(zjoin(args, ' ', 1));
+    prog = parse_string(zjoin(args, ' ', 1), 0);
     if (!prog) {
 	errflag = 0;
 	scriptname = oscriptname;
Index: Src/Modules/zutil.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Modules/zutil.c,v
retrieving revision 1.23
diff -u -r1.23 zutil.c
--- Src/Modules/zutil.c	6 Jul 2007 21:52:40 -0000	1.23
+++ Src/Modules/zutil.c	28 Sep 2008 21:11:25 -0000
@@ -251,7 +251,7 @@
     if (eval) {
 	int ef = errflag;
 
-	eprog = parse_string(zjoin(vals, ' ', 1));
+	eprog = parse_string(zjoin(vals, ' ', 1), 0);
 	errflag = ef;
 
 	if (!eprog)


-- 
Peter Stephenson <p.w.stephenson@ntlworld.com>
Web page now at http://homepage.ntlworld.com/p.w.stephenson/

