From zsh-users-return-14971-mason-zsh=primenet.com.au@zsh.org Fri Mar 26 14:42:14 2010
Return-Path: <zsh-users-return-14971-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 25176 invoked by alias); 26 Mar 2010 14:42:14 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14971
Received: (qmail 3758 invoked from network); 26 Mar 2010 14:42:12 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <100326074148.ZM29047@torch.brasslantern.com>
Date: Fri, 26 Mar 2010 07:41:48 -0700
In-reply-to: <alpine.LN8.2.00.1003260202111.10812@ckhb06.ckhb.org>
Comments: In reply to "S. Cowles" <scowles@ckhb.org>
 "array element subsetting" (Mar 26,  2:24am)
References: <Xns9D456D0F33B88zzappergmailcom@80.91.229.10>
	<20100324120359.GA29984@fermat.math.technion.ac.il>
	<Xns9D45D21E0B19Azzappergmailcom@80.91.229.10>
	<alpine.LN8.2.00.1003260202111.10812@ckhb06.ckhb.org>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: "S. Cowles" <scowles@ckhb.org>, zsh-users@zsh.org
Subject: Re: array element subsetting
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Mar 26,  2:24am, S. Cowles wrote:
} 
} I am trying to figure out the correct syntax for constructing two 
} one-liner subsetting operations on arrays.  I have two objectives: 1) 
} select nth character from each array element, and 2) select nth element 
} within each array element.
} 
} The array these methods operate upon is something simple such as:
} a=(
}      "satu two trio"
}      "sah funf seis"
}      "boundarycase"
}      "revert to pattern"
} )

(1) can be done with the (M) parameter flag and simple head/tail:

	print ${(M)a#?}

To generalize to the Nth element, ${(M)${(M)a#?(#c$N)}%?} (requires
extendedglob, of course).

(2) is more difficult to do without looping, because zsh doesn't
support multidimensional arrays, so you have to force an eval step
via the (e) flag:

	print ${(e):-'${${=:-'${^a}'}[2]}'}

However, this yields the second character of arrays that contain
only one word, because ${=...} reduces singular arrays to scalars.
A simple workaround is to insert an empty dummy element at the tail:

	print ${(e):-'${${=:-'${^a}' ""}[2]}'}

In the event there are special characters in the strings in $a, an
extra level of quoting can be added and then removed:

	print ${(e):-'${${=${(Q):-'${(q)^a}' ""}}[2]}'}

However, this removes again the empty element inserted by the double
quotes, i.e., it returns nothing for the short array rather than an
empty second element (use "print -l" in those examples to see the
difference more clearly).  Remove the (e) if you want to see what's
going on with the ${(q)^a} business.

