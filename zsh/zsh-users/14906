From zsh-users-return-14906-mason-zsh=primenet.com.au@zsh.org Sat Mar 06 19:14:55 2010
Return-Path: <zsh-users-return-14906-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24219 invoked by alias); 6 Mar 2010 19:14:55 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 14906
Received: (qmail 16807 invoked from network); 6 Mar 2010 19:14:53 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,SPF_HELO_PASS
	autolearn=ham version=3.2.5
Received-SPF: none (ns1.primenet.com.au: domain at bewatermyfriend.org does not designate permitted sender hosts)
From: Frank Terbeck <ft@bewatermyfriend.org>
To: zsh-users@zsh.org
Subject: "${(s.:.)foo} and rc_expand_param
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/23.1 (gnu/linux)
Date: Sat, 06 Mar 2010 20:13:45 +0100
Message-ID: <87y6i5b6vq.fsf@ft.bewatermyfriend.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-Df-Sender: 430444

Hey list,

Here is another thing I can't quite understand.

First, two excerpts from the manual:

  RC_EXPAND_PARAM (-P)
      Array expansions of the form =E2=80=98foo${xx}bar=E2=80=99, where the=
 parameter xx
      is set to (a b c), are substituted with =E2=80=98fooabar foobbar fooc=
bar=E2=80=99
      instead of the default =E2=80=98fooa b cbar=E2=80=99.
[...]

  s:string:
      Force field splitting at the separator string.  Note that a string
      of two or more characters means that all of them must match in
      sequence; this differs from the treatment of two or more
      characters in the IFS parameter.  See also the =3D flag and the
      SH_WORD_SPLIT option.

      For historical reasons, the usual behaviour that empty array
      elements are retained inside double quotes is disabled for arrays
      generated by splitting; hence the following:

             line=3D"one::three"
             print -l "${(s.:.)line}"

      produces two lines of output for one and three and elides the
      empty field.  To override this behaviour, supply the "(@)" flag as
      well, i.e.  "${(@s.:.)line}".

Now, let's see what's happening:

zsh% foo=3D"bar::baz"
zsh% print -l "${(s.:.)foo}"
bar
baz

Okay, this I expected, but now:

zsh% setopt rc_expand_param
zsh% print -l "${(s.:.)foo}"
bar

baz

This I did not; from the manual I'd expect to only see (@s.:.) pick up
the empty field in $foo.

Am I missing something here or is this a bug?

Regards, Frank

--=20
In protocol design, perfection has been reached not when there is
nothing left to add, but when there is nothing left to take away.
                                                  -- RFC 1925

