# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet mainv
	int main(void)
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define ${1}
snippet ifdef
	#ifdef ${1}
	#endif
snippet #if
	#if ${1}
	#endif
# Header Include-Guard
snippet guard
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${2}

	#endif /* $1 */
# If Condition
snippet if
	if (${1}) {${2}}
snippet el
	else {${1}}
# Ternary conditional
snippet ?
	${1} ? ${2} : ${3}
# Do While Loop
snippet do
	do {
		${2}
	} while (${1});
# While Loop
snippet wh
	while (${1}) {${2}}
snippet sw
	switch (${1}) {
	case ${2}:
		break;
	default:
	}
snippet case
	case ${1}:
		${2}
		break;
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {${4}}
# Function
snippet f
	${1:type} ${2:function}(${3})
	{
		${4}
	}
# Function Declaration
snippet fund
	${1:type} ${2:function}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet r
	return ${1};
snippet un
	unsigned ${1}
snippet c
	char ${1:*}
snippet i
	int${1:8}_t ${2}
snippet u
	uint${1:8}_t ${2}
snippet s
	sizeof(${1})${2}
snippet l
	printf("${1:var}: %${2:s}\n", $1);${3}
snippet .
	->${1}
# x86 only, and needs compiler flag `-fasm-blocks'
snippet deb
	asm { int 3 }
