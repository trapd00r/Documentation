From zsh-workers-return-12177-mason-zsh=primenet.com.au@sunsite.auc.dk Wed Jul 05 20:59:26 2000
Return-Path: <zsh-workers-return-12177-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24977 invoked from network); 5 Jul 2000 20:59:25 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 5 Jul 2000 20:59:25 -0000
Received: (qmail 23274 invoked by alias); 5 Jul 2000 20:59:11 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 12177
Received: (qmail 23267 invoked from network); 5 Jul 2000 20:59:10 -0000
Sender: opk
Message-ID: <39639336.3A1B5320@u.genie.co.uk>
Date: Wed, 05 Jul 2000 20:57:42 +0100
From: Oliver Kiddle <opk@u.genie.co.uk>
X-Mailer: Mozilla 4.73 [en] (X11; I; Linux 2.2.16 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: Zsh workers <zsh-workers@sunsite.auc.dk>
Subject: PATCH: small changes to documentation
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

I've fixed a few typos in the documentation and added contexts, styles,
colormapids and file-descriptors to the list of standard tags. I've also
modified _unhash because I had been inconsistent in the name of the tag
used for named directories.

Oliver

Index: Completion/Builtins/_unhash
===================================================================
RCS file: /cvsroot/zsh/zsh/Completion/Builtins/_unhash,v
retrieving revision 1.3
diff -u -r1.3 _unhash
--- Completion/Builtins/_unhash	2000/05/31 09:38:26	1.3
+++ Completion/Builtins/_unhash	2000/07/05 20:55:44
@@ -7,8 +7,7 @@
   '(-d -f *)-a[remove aliases]:*:aliases:_aliases' \
   '(-d -a *)-f[remove functions]:*:functions:_functions' \
   '-m[treat arguments as patterns]' \
-  '*:commands: _command_names -e'  && return 0
+  '*:commands: _command_names -e' && return 0
 
-if [[ "$state" = nameddir ]]; then
-  _wanted nameddir expl 'named directory' compadd -k nameddirs
-fi
+[[ "$state" = nameddir ]] &&
+  _wanted named-directories expl 'named directory' compadd -k nameddirs
Index: Doc/Zsh/compsys.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/compsys.yo,v
retrieving revision 1.82
diff -u -r1.82 compsys.yo
--- Doc/Zsh/compsys.yo	2000/07/03 14:00:56	1.82
+++ Doc/Zsh/compsys.yo	2000/07/05 20:56:10
@@ -516,6 +516,10 @@
 used for commands like tt(stty) when completing characters; also used
 when completing character classes after a opening bracket
 )
+kindex(colormapids, completion tag)
+item(tt(colormapids))(
+for X colormap ids
+)
 kindex(colors, completion tag)
 item(tt(colors))(
 for color names
@@ -525,6 +529,10 @@
 for names of external commands and names of sub-commands (used by some 
 commands like tt(cvs))
 )
+kindex(contexts, completion tag)
+item(tt(contexts))(
+for contexts used by the zstyle builtin command
+)
 kindex(corrections, completion tag)
 item(tt(corrections))(
 used by the tt(_approximate) and tt(_correct) completers for the possible
@@ -574,6 +582,10 @@
 item(tt(extensions))(
 for X server extensions
 )
+kindex(file-descriptors, completion tag)
+item(tt(file-descriptors))(
+for the numbers of open file descriptors
+)
 kindex(files, completion tag)
 item(tt(files))(
 the generic file-matching tag used by completion functions that can
@@ -748,6 +760,10 @@
 for strings (e.g. the replacement strings for the tt(cd) builtin
 command)
 )
+kindex(styles, completion tag)
+item(tt(styles))(
+for styles used by the zstyle builtin command
+)
 kindex(tags, completion tag)
 item(tt(tags))(
 for tags (e.g. tt(rpm) tags)
@@ -848,7 +864,7 @@
 only to names of existing files.  Finally, the `true' values and
 `tt(file)' may be combined with `tt(subst)' to keep the completer from 
 adding a space when the resulting words were generated by expanding a
-substitution such as `tt($LPAR()...RPAR())' and `tt(${...})'.
+substitution of the form `tt($LPAR()...RPAR())' or `tt(${...})'.
 
 It is also used by the tt(_prefix) completer as a simple boolean value
 to decide if a space should be inserted before the suffix.
Index: Doc/Zsh/compwid.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/compwid.yo,v
retrieving revision 1.20
diff -u -r1.20 compwid.yo
--- Doc/Zsh/compwid.yo	2000/06/25 20:17:33	1.20
+++ Doc/Zsh/compwid.yo	2000/07/05 20:56:16
@@ -58,8 +58,8 @@
 texinode(Special Parameters)(Builtin Commands)()(Completion Widgets)
 sect(Special Parameters)
 
-Inside completion widgets, and any functions called from those, some
-parameters have special meaning; outside these function they are not
+Inside completion widgets, and any functions called from them, some
+parameters have special meaning; outside these functions they are not
 special to the shell in any way.  These parameters are used to pass
 information between the completion code and the completion widget. Some of
 the builtin commands and the condition codes use or change the current
Index: Doc/Zsh/expn.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/expn.yo,v
retrieving revision 1.19
diff -u -r1.19 expn.yo
--- Doc/Zsh/expn.yo	2000/06/06 08:35:54	1.19
+++ Doc/Zsh/expn.yo	2000/07/05 20:56:24
@@ -918,7 +918,7 @@
 picks the first character. 
 )
 item(tt("${${(@)foo}[1]}"))(
-The produces the result `tt(bar)'.  In this case, the inner substitution
+This produces the result `tt(bar)'.  In this case, the inner substitution
 tt("${(@)foo}") produces the array `tt(LPAR()bar baz)tt(RPAR())'.  The outer
 substitution tt("${...[1]}") detects that this is an array and picks the
 first word.  This is similar to the simple case tt("${foo[1]}").
Index: Doc/Zsh/mod_zutil.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/mod_zutil.yo,v
retrieving revision 1.11
diff -u -r1.11 mod_zutil.yo
--- Doc/Zsh/mod_zutil.yo	2000/06/25 20:17:33	1.11
+++ Doc/Zsh/mod_zutil.yo	2000/07/05 20:56:25
@@ -123,7 +123,7 @@
 have been processed, the resulting string is stored in the parameter
 var(param).
 
-The second form, using the tt(-a) option, can be used for alignin
+The second form, using the tt(-a) option, can be used for aligning
 strings.  Here, the var(specs) are of the form
 `var(left)tt(:)var(right)' where `var(left)' and `var(right)' are
 arbitrary strings.  These strings are modified by replacing the colons

