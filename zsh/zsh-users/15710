From zsh-users-return-15710-mason-zsh=primenet.com.au@zsh.org Tue Jan 11 16:27:53 2011
Return-Path: <zsh-users-return-15710-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 11215 invoked by alias); 11 Jan 2011 16:27:53 -0000
Mailing-List: contact zsh-users-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Users List <zsh-users.zsh.org>
List-Post: <mailto:zsh-users@zsh.org>
List-Help: <mailto:zsh-users-help@zsh.org>
Delivered-To: mailing list zsh-users@zsh.org
X-Seq: 15710
Received: (qmail 27642 invoked from network); 11 Jan 2011 16:27:50 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <110111082730.ZM1884@torch.brasslantern.com>
Date: Tue, 11 Jan 2011 08:27:30 -0800
In-reply-to: <1101112125580.1967@smasher>
Comments: In reply to Atom Smasher <atom@smasher.org>
 "Re: creating user defined special parameters?" (Jan 11,  9:36pm)
References: <1101090127100.1967@smasher>
	<110108115519.ZM1895@torch.brasslantern.com>	<1101112125580.1967@smasher>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh-users@zsh.org
Subject: Re: creating user defined special parameters?
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Jan 11,  9:36pm, Atom Smasher wrote:
}
} it's not my desire to emulate ksh's discipline functions or compound 
} variables, i just want a way to define a "simple" variable as a function.

Yes, I understand.  I was explaining why a simple implementation has
not been pursued:  because there's already an example of a more
thoughtfully designed feature that it would be preferable to emulate,
rather than have yet another case of several incompatible ways to
do the same thing.

Ksh discipline functions solve several problems, not the least of
which is the question of how, inside the discipline function, to
refer to the variable associated with the function without causing
either namespace collisions or an infinite recursion.  The compound
variable syntax is central to that solution.

