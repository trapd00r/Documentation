From zsh-workers-return-10912-mason-zsh=primenet.com.au@sunsite.auc.dk Tue Apr 25 11:16:09 2000
Return-Path: <zsh-workers-return-10912-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23529 invoked from network); 25 Apr 2000 11:16:07 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 25 Apr 2000 11:16:07 -0000
Received: (qmail 8439 invoked by alias); 25 Apr 2000 11:16:00 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 10912
Received: (qmail 8391 invoked from network); 25 Apr 2000 11:15:54 -0000
Date: Tue, 25 Apr 2000 13:15:46 +0200 (MET DST)
Message-Id: <200004251115.NAA04127@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: Tanaka Akira's message of 25 Apr 2000 00:18:06 +0900
Subject: PATCH: Re: completion with a directory which contains a backslash


Tanaka Akira wrote:

> I found that completion has a problem when a directory contains a
> backslash.
> 
> Z(4):akr@serein% Src/zsh -f
> serein% bindkey -e; fpath=($PWD/Completion/*(/)); autoload -U compinit; compinit -D
> serein% mkdir -p \\a/b/c
> serein% ls \\a/<TAB>
> ->
> serein% ls \\a/b
> 
> This should be following.
> 
> serein% ls \\a/b/

Indeed. It reported the unquoted path to compadd with the -W option
which should be correct. But then do_single() used ztat() to ignore
the backslash.

Bye
 Sven

Index: Src/Zle/compresult.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Zle/compresult.c,v
retrieving revision 1.9
diff -u -r1.9 compresult.c
--- Src/Zle/compresult.c	2000/04/25 10:28:11	1.9
+++ Src/Zle/compresult.c	2000/04/25 11:14:50
@@ -705,6 +705,9 @@
 {
     char b[PATH_MAX], *p;
 
+    if (!(ls ? lstat(nam, buf) : stat(nam, buf)))
+	return 0;
+
     for (p = b; p < b + sizeof(b) - 1 && *nam; nam++)
 	if (*nam == '\\' && nam[1])
 	    *p++ = *++nam;

--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

