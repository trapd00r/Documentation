From zsh-workers-return-9118-mason-zsh=primenet.com.au@sunsite.auc.dk Mon Dec 20 11:20:11 1999
Return-Path: <zsh-workers-return-9118-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5648 invoked from network); 20 Dec 1999 11:20:09 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 20 Dec 1999 11:20:09 -0000
Received: (qmail 11038 invoked by alias); 20 Dec 1999 11:19:55 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 9118
Received: (qmail 11031 invoked from network); 20 Dec 1999 11:19:51 -0000
Date: Mon, 20 Dec 1999 11:20:35 GMT
Message-Id: <199912201120.LAA10522@mango.dublin.iona.ie>
To: zsh-workers@sunsite.auc.dk
Subject: PATCH: Re: Docs damaged
From: zefram@fysh.org

>Doc/Makefile.in creates the txinodes() for modules automatically, but
>it doesn't prepend the `zsh/' to the next/previous-node fields

Oops.

>Andrew: is this really the right way to do it?

No.  This is.

diff -cr ../zsh-/Doc/Makefile.in ./Doc/Makefile.in
*** ../zsh-/Doc/Makefile.in	Thu Dec 16 15:10:41 1999
--- ./Doc/Makefile.in	Mon Dec 20 10:54:21 1999
***************
*** 169,199 ****
  
  Zsh/modlist.yo: $(MODDOCSRC)
  	( \
- 	    modules=`echo '' $(MODDOCSRC) '' | sed 's| Zsh/mod_| |g;s|\.yo | |g'`; \
  	    echo "startitem()"; \
! 	    for mod in $$modules; do \
! 		echo "item(tt(zsh/$$mod))("; \
! 		sed -n '1d;/^!MOD!)$$/q;p' < $(sdir)/Zsh/mod_$${mod}.yo; \
  		echo ")"; \
  	    done; \
  	    echo "enditem()"; \
  	    echo "startmenu()"; \
  	    echo "includefile(Zsh/modmenu.yo)"; \
  	    echo "endmenu()"; \
! 	    set '' $$modules; \
  	    while test ".$$2" != .; do \
! 		echo "texinode(The zsh/$$2 Module)($${3+The $$3 Module})($${1:+The $$1 Module})(Zsh Modules)"; \
! 		echo "sect(The zsh/$$2 Module)"; \
! 		echo "includefile(Zsh/mod_$${2}.yo)"; \
  		shift; \
  	    done \
  	) > $(sdir)/Zsh/modlist.yo
  
  Zsh/modmenu.yo: $(MODDOCSRC)
  	( \
! 	    modules=`echo '' $(MODDOCSRC) '' | sed 's| Zsh/mod_| |g;s|\.yo | |g'`; \
! 	    for mod in $$modules; do \
! 		echo "menu(The zsh/$$mod Module)"; \
  	    done \
  	) > $(sdir)/Zsh/modmenu.yo
  
--- 169,206 ----
  
  Zsh/modlist.yo: $(MODDOCSRC)
  	( \
  	    echo "startitem()"; \
! 	    for modfile in $(MODDOCSRC); do \
! 		sed -n '1{s|^COMMENT(!MOD!\(.*\)$$|item(tt(\1))(|;p;d;};/^!MOD!)$$/q;p' \
! 		    < $(sdir)/$$modfile; \
  		echo ")"; \
  	    done; \
  	    echo "enditem()"; \
  	    echo "startmenu()"; \
  	    echo "includefile(Zsh/modmenu.yo)"; \
  	    echo "endmenu()"; \
! 	    set '' $(MODDOCSRC); \
! 	    unset mod1 mod2 mod3; \
! 	    test ".$$2" != . && \
! 		mod2=`sed -n '1{s|^COMMENT(!MOD!||;p;q;}' < $(sdir)/$$2`; \
  	    while test ".$$2" != .; do \
! 		unset mod3; \
! 		test ".$$3" != . && \
! 		    mod3=`sed -n '1{s|^COMMENT(!MOD!||;p;q;}' < $(sdir)/$$3`; \
! 		echo "texinode(The $$mod2 Module)($${mod3+The $$mod3 Module})($${mod1:+The $$mod1 Module})(Zsh Modules)"; \
! 		echo "sect(The $$mod2 Module)"; \
! 		echo "includefile($${2})"; \
  		shift; \
+ 		mod1=$$mod2; \
+ 		mod2=$$mod3; \
  	    done \
  	) > $(sdir)/Zsh/modlist.yo
  
  Zsh/modmenu.yo: $(MODDOCSRC)
  	( \
! 	    for modfile in $(MODDOCSRC); do \
! 		sed -n '1{s|^COMMENT(!MOD!\(.*\)$$|menu(The \1 Module)|;p;q;}' \
! 		    < $(sdir)/$$modfile; \
  	    done \
  	) > $(sdir)/Zsh/modmenu.yo
  
diff -cr ../zsh-/Doc/Zsh/builtins.yo ./Doc/Zsh/builtins.yo
*** ../zsh-/Doc/Zsh/builtins.yo	Thu Dec 16 14:26:25 1999
--- ./Doc/Zsh/builtins.yo	Mon Dec 20 11:00:35 1999
***************
*** 613,619 ****
  Recognize all the escape sequences defined for the tt(bindkey) command,
  see 
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zle Module))\
  .
  )
  item(tt(-m))(
--- 613,619 ----
  Recognize all the escape sequences defined for the tt(bindkey) command,
  see 
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zsh/zle Module))\
  .
  )
  item(tt(-m))(
diff -cr ../zsh-/Doc/Zsh/compsys.yo ./Doc/Zsh/compsys.yo
*** ../zsh-/Doc/Zsh/compsys.yo	Fri Dec 17 13:48:39 1999
--- ./Doc/Zsh/compsys.yo	Mon Dec 20 11:16:17 1999
***************
*** 166,172 ****
  tt(menu-expand-or-complete), or tt(reverse-menu-complete). If the
  tt(complist) module is loaded (see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The complist Module))\
  ), the tt(menu-select) widget can be used, too.  Note that the
  bindings will not be used if the key is already bound (that
  is, is bound to something other than tt(undefined-key)).
--- 166,172 ----
  tt(menu-expand-or-complete), or tt(reverse-menu-complete). If the
  tt(complist) module is loaded (see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zsh/complist Module))\
  ), the tt(menu-select) widget can be used, too.  Note that the
  bindings will not be used if the key is already bound (that
  is, is bound to something other than tt(undefined-key)).
***************
*** 244,250 ****
  tt(complete-word), tt(delete-char-or-list), tt(expand-or-complete),
  tt(expand-or-complete-prefix), tt(list-choices), tt(menu-complete),
  tt(menu-expand-or-complete), and tt(reverse-menu-complete), as well as
! tt(menu-select) if the tt(complist) module is loaded.  The option tt(-n)
  prevents the key being bound if it is already to bound to something other
  than tt(undefined-key).
  
--- 244,250 ----
  tt(complete-word), tt(delete-char-or-list), tt(expand-or-complete),
  tt(expand-or-complete-prefix), tt(list-choices), tt(menu-complete),
  tt(menu-expand-or-complete), and tt(reverse-menu-complete), as well as
! tt(menu-select) if the tt(zsh/complist) module is loaded.  The option tt(-n)
  prevents the key being bound if it is already to bound to something other
  than tt(undefined-key).
  
***************
*** 324,330 ****
  `styles' defined with the tt(zstyle) builtin command
  (see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zutil Module))).
  The full context used in looking up styles is the prefix `tt(:completion)'
  followed by the context as described above, followed by another colon and
  the name of the tag currently being tried for completion.
--- 324,330 ----
  `styles' defined with the tt(zstyle) builtin command
  (see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zsh/zutil Module))).
  The full context used in looking up styles is the prefix `tt(:completion)'
  followed by the context as described above, followed by another colon and
  the name of the tag currently being tried for completion.
***************
*** 711,717 ****
  )
  item(tt(disable-stat))(
  This is used with the tt(cvs) tag by the function completing for the
! tt(cvs) command to decide if the tt(stat) module should be used to
  generate only names of modified files in the appropriate places.
  )
  item(tt(expand))(
--- 711,717 ----
  )
  item(tt(disable-stat))(
  This is used with the tt(cvs) tag by the function completing for the
! tt(cvs) command to decide if the tt(zsh/stat) module should be used to
  generate only names of modified files in the appropriate places.
  )
  item(tt(expand))(
***************
*** 756,762 ****
  described for the tt(zformat) builtin command from the tt(zutil)
  module, see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zutil Module))\
  .
  )
  item(tt(glob))(
--- 756,762 ----
  described for the tt(zformat) builtin command from the tt(zutil)
  module, see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zsh/zutil Module))\
  .
  )
  item(tt(glob))(
***************
*** 909,919 ****
  to generate the list to display.
  )
  item(tt(list-colors))(
! If the tt(complist) module is used, this style can be used to set
  color specifications as with the tt(ZLS_COLORS) and tt(ZLS_COLOURS)
  parameters (see
! ifzman(the section `The complist Module' in zmanref(zshmodules))\
! ifnzman(noderef(The complist Module))\
  ).
  
  If this style is set for the tt(default) tag, the strings in the value 
--- 909,919 ----
  to generate the list to display.
  )
  item(tt(list-colors))(
! If the tt(zsh/complist) module is used, this style can be used to set
  color specifications as with the tt(ZLS_COLORS) and tt(ZLS_COLOURS)
  parameters (see
! ifzman(the section `The zsh/complist Module' in zmanref(zshmodules))\
! ifnzman(noderef(The zsh/complist Module))\
  ).
  
  If this style is set for the tt(default) tag, the strings in the value 
***************
*** 992,998 ****
  Either instead of or in addition to one of the values above, the value
  for this style may also contain the string tt(select), optionally
  followed by an equal sign and a number. In this case menuselection
! (as defined by the tt(computil) module) will be started. Without the
  optional number, it will be started unconditionally and with a number
  it will be started only if at least that many matches are generated
  (if the values for more than one tag defines such a number, the
--- 992,998 ----
  Either instead of or in addition to one of the values above, the value
  for this style may also contain the string tt(select), optionally
  followed by an equal sign and a number. In this case menuselection
! (as defined by the tt(zsh/computil) module) will be started. Without the
  optional number, it will be started unconditionally and with a number
  it will be started only if at least that many matches are generated
  (if the values for more than one tag defines such a number, the
***************
*** 2355,2361 ****
  })
  
  Every call to the tt(comptry) function (actually a builtin
! command defined by the tt(computil) module) gives a
  set of tags to use; as soon as tt(comptry) produces some matches,
  subsequent calls have no effect.  Hence in the example
  this means that for the tt(dvips) command on the first attempt the
--- 2355,2361 ----
  })
  
  Every call to the tt(comptry) function (actually a builtin
! command defined by the tt(zsh/computil) module) gives a
  set of tags to use; as soon as tt(comptry) produces some matches,
  subsequent calls have no effect.  Hence in the example
  this means that for the tt(dvips) command on the first attempt the
diff -cr ../zsh-/Doc/Zsh/compwid.yo ./Doc/Zsh/compwid.yo
*** ../zsh-/Doc/Zsh/compwid.yo	Mon Dec  6 11:39:18 1999
--- ./Doc/Zsh/compwid.yo	Mon Dec 20 11:16:28 1999
***************
*** 5,19 ****
  cindex(completion, controlling)
  sect(Description)
  Completion widgets are defined by the tt(-C) option to the tt(zle)
! builtin command provided by the tt(zle) module (see
  ifzman(zmanref(zshzle))\
! ifnzman(noderef(The zle Module))\
  ). For example,
  
  example(zle -C complete expand-or-complete completer)
  
  defines a widget named tt(complete). When this widget is bound to a key
! using the tt(bindkey) builtin command defined in the tt(zle) module
  (see 
  ifzman(zmanref(zshzle))\
  ifnzman(noderef(Zsh Line Editor))\
--- 5,19 ----
  cindex(completion, controlling)
  sect(Description)
  Completion widgets are defined by the tt(-C) option to the tt(zle)
! builtin command provided by the tt(zsh/zle) module (see
  ifzman(zmanref(zshzle))\
! ifnzman(noderef(The zsh/zle Module))\
  ). For example,
  
  example(zle -C complete expand-or-complete completer)
  
  defines a widget named tt(complete). When this widget is bound to a key
! using the tt(bindkey) builtin command defined in the tt(zsh/zle) module
  (see 
  ifzman(zmanref(zshzle))\
  ifnzman(noderef(Zsh Line Editor))\
***************
*** 706,712 ****
  definition was found. It is non-zero if a tt(compctl) was found and
  zero otherwise.
  
! Note that this builtin is defined by the tt(compctl) module.
  )
  enditem()
  
--- 706,712 ----
  definition was found. It is non-zero if a tt(compctl) was found and
  zero otherwise.
  
! Note that this builtin is defined by the tt(zsh/compctl) module.
  )
  enditem()
  
diff -cr ../zsh-/Doc/Zsh/mod_cap.yo ./Doc/Zsh/mod_cap.yo
*** ../zsh-/Doc/Zsh/mod_cap.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_cap.yo	Mon Dec 20 10:52:00 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  Builtins for manipulating POSIX.1e (POSIX.6) capability (privilege) sets.
  !MOD!)
  The tt(zsh/cap) module is used for manipulating POSIX.1e (POSIX.6) capability
--- 1,4 ----
! COMMENT(!MOD!zsh/cap
  Builtins for manipulating POSIX.1e (POSIX.6) capability (privilege) sets.
  !MOD!)
  The tt(zsh/cap) module is used for manipulating POSIX.1e (POSIX.6) capability
diff -cr ../zsh-/Doc/Zsh/mod_clone.yo ./Doc/Zsh/mod_clone.yo
*** ../zsh-/Doc/Zsh/mod_clone.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_clone.yo	Mon Dec 20 10:30:55 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  A builtin that can clone a running shell onto another terminal.
  !MOD!)
  The tt(zsh/clone) module makes available one builtin command:
--- 1,4 ----
! COMMENT(!MOD!zsh/clone
  A builtin that can clone a running shell onto another terminal.
  !MOD!)
  The tt(zsh/clone) module makes available one builtin command:
diff -cr ../zsh-/Doc/Zsh/mod_compctl.yo ./Doc/Zsh/mod_compctl.yo
*** ../zsh-/Doc/Zsh/mod_compctl.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_compctl.yo	Mon Dec 20 10:31:02 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  The tt(compctl) builtin for controlling completion.
  !MOD!)
  The tt(zsh/compctl) module makes available two builtin commands. tt(compctl),
--- 1,4 ----
! COMMENT(!MOD!zsh/compctl
  The tt(compctl) builtin for controlling completion.
  !MOD!)
  The tt(zsh/compctl) module makes available two builtin commands. tt(compctl),
diff -cr ../zsh-/Doc/Zsh/mod_complete.yo ./Doc/Zsh/mod_complete.yo
*** ../zsh-/Doc/Zsh/mod_complete.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_complete.yo	Mon Dec 20 10:31:08 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  The basic completion code.
  !MOD!)
  The tt(zsh/complete) module makes available several builtin commands which
--- 1,4 ----
! COMMENT(!MOD!zsh/complete
  The basic completion code.
  !MOD!)
  The tt(zsh/complete) module makes available several builtin commands which
diff -cr ../zsh-/Doc/Zsh/mod_complist.yo ./Doc/Zsh/mod_complist.yo
*** ../zsh-/Doc/Zsh/mod_complist.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_complist.yo	Mon Dec 20 11:01:49 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  Completion listing extensions.
  !MOD!)
  cindex(completion, listing)
--- 1,4 ----
! COMMENT(!MOD!zsh/complist
  Completion listing extensions.
  !MOD!)
  cindex(completion, listing)
***************
*** 205,211 ****
  keys in the the tt(menuselect) keymap can be modified directly using the
  tt(bindkey) builtin command (see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zle Module))\
  ). For example, to make the return key leave menu-selection and
  continue with normal menu-completion one can call
  
--- 205,211 ----
  keys in the the tt(menuselect) keymap can be modified directly using the
  tt(bindkey) builtin command (see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zsh/zle Module))\
  ). For example, to make the return key leave menu-selection and
  continue with normal menu-completion one can call
  
diff -cr ../zsh-/Doc/Zsh/mod_computil.yo ./Doc/Zsh/mod_computil.yo
*** ../zsh-/Doc/Zsh/mod_computil.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_computil.yo	Mon Dec 20 10:31:22 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  A module with utility builtins needed for the shell function based
  completion system.
  !MOD!)
--- 1,4 ----
! COMMENT(!MOD!zsh/computil
  A module with utility builtins needed for the shell function based
  completion system.
  !MOD!)
diff -cr ../zsh-/Doc/Zsh/mod_deltochar.yo ./Doc/Zsh/mod_deltochar.yo
*** ../zsh-/Doc/Zsh/mod_deltochar.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_deltochar.yo	Mon Dec 20 10:31:28 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  A ZLE function duplicating EMACS' tt(zap-to-char).
  !MOD!)
  The tt(zsh/deltochar) module makes available two ZLE functions:
--- 1,4 ----
! COMMENT(!MOD!zsh/deltochar
  A ZLE function duplicating EMACS' tt(zap-to-char).
  !MOD!)
  The tt(zsh/deltochar) module makes available two ZLE functions:
diff -cr ../zsh-/Doc/Zsh/mod_example.yo ./Doc/Zsh/mod_example.yo
*** ../zsh-/Doc/Zsh/mod_example.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_example.yo	Mon Dec 20 10:31:33 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  An example of how to write a module.
  !MOD!)
  The tt(zsh/example) module makes available one builtin command:
--- 1,4 ----
! COMMENT(!MOD!zsh/example
  An example of how to write a module.
  !MOD!)
  The tt(zsh/example) module makes available one builtin command:
diff -cr ../zsh-/Doc/Zsh/mod_files.yo ./Doc/Zsh/mod_files.yo
*** ../zsh-/Doc/Zsh/mod_files.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_files.yo	Mon Dec 20 10:31:38 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  Some basic file manipulation commands as builtins.
  !MOD!)
  cindex(files, manipulating)
--- 1,4 ----
! COMMENT(!MOD!zsh/files
  Some basic file manipulation commands as builtins.
  !MOD!)
  cindex(files, manipulating)
diff -cr ../zsh-/Doc/Zsh/mod_mapfile.yo ./Doc/Zsh/mod_mapfile.yo
*** ../zsh-/Doc/Zsh/mod_mapfile.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_mapfile.yo	Mon Dec 20 10:31:43 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  Access to external files via a special associative array.
  !MOD!)
  cindex(parameter, file access via)
--- 1,4 ----
! COMMENT(!MOD!zsh/mapfile
  Access to external files via a special associative array.
  !MOD!)
  cindex(parameter, file access via)
diff -cr ../zsh-/Doc/Zsh/mod_mathfunc.yo ./Doc/Zsh/mod_mathfunc.yo
*** ../zsh-/Doc/Zsh/mod_mathfunc.yo	Thu Dec 16 14:26:27 1999
--- ./Doc/Zsh/mod_mathfunc.yo	Mon Dec 20 10:31:48 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  Standard scientific functions for use in mathematical evaluations.
  !MOD!)
  cindex(functions, mathematical)
--- 1,4 ----
! COMMENT(!MOD!zsh/mathfunc
  Standard scientific functions for use in mathematical evaluations.
  !MOD!)
  cindex(functions, mathematical)
diff -cr ../zsh-/Doc/Zsh/mod_parameter.yo ./Doc/Zsh/mod_parameter.yo
*** ../zsh-/Doc/Zsh/mod_parameter.yo	Thu Dec 16 14:26:27 1999
--- ./Doc/Zsh/mod_parameter.yo	Mon Dec 20 10:31:53 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  Access to internal hash tables via special associative arrays.
  !MOD!)
  cindex(parameters, special)
--- 1,4 ----
! COMMENT(!MOD!zsh/parameter
  Access to internal hash tables via special associative arrays.
  !MOD!)
  cindex(parameters, special)
diff -cr ../zsh-/Doc/Zsh/mod_sched.yo ./Doc/Zsh/mod_sched.yo
*** ../zsh-/Doc/Zsh/mod_sched.yo	Thu Dec 16 14:26:27 1999
--- ./Doc/Zsh/mod_sched.yo	Mon Dec 20 10:31:59 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  A builtin that provides a timed execution facility within the shell.
  !MOD!)
  The tt(zsh/sched) module makes available one builtin command:
--- 1,4 ----
! COMMENT(!MOD!zsh/sched
  A builtin that provides a timed execution facility within the shell.
  !MOD!)
  The tt(zsh/sched) module makes available one builtin command:
diff -cr ../zsh-/Doc/Zsh/mod_stat.yo ./Doc/Zsh/mod_stat.yo
*** ../zsh-/Doc/Zsh/mod_stat.yo	Thu Dec 16 14:26:26 1999
--- ./Doc/Zsh/mod_stat.yo	Mon Dec 20 10:32:04 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  A builtin command interface to the tt(stat) system call.
  !MOD!)
  The tt(zsh/stat) module makes available one builtin command:
--- 1,4 ----
! COMMENT(!MOD!zsh/stat
  A builtin command interface to the tt(stat) system call.
  !MOD!)
  The tt(zsh/stat) module makes available one builtin command:
diff -cr ../zsh-/Doc/Zsh/mod_zftp.yo ./Doc/Zsh/mod_zftp.yo
*** ../zsh-/Doc/Zsh/mod_zftp.yo	Thu Dec 16 14:26:27 1999
--- ./Doc/Zsh/mod_zftp.yo	Mon Dec 20 10:32:09 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  A builtin FTP client.
  !MOD!)
  The tt(zsh/zftp) module makes available one builtin command:
--- 1,4 ----
! COMMENT(!MOD!zsh/zftp
  A builtin FTP client.
  !MOD!)
  The tt(zsh/zftp) module makes available one builtin command:
diff -cr ../zsh-/Doc/Zsh/mod_zle.yo ./Doc/Zsh/mod_zle.yo
*** ../zsh-/Doc/Zsh/mod_zle.yo	Thu Dec 16 14:26:27 1999
--- ./Doc/Zsh/mod_zle.yo	Mon Dec 20 10:32:12 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  The Zsh Line Editor, including the tt(bindkey) and tt(vared) builtins.
  !MOD!)
  The tt(zsh/zle) module contains the Zsh Line Editor.  See
--- 1,4 ----
! COMMENT(!MOD!zsh/zle
  The Zsh Line Editor, including the tt(bindkey) and tt(vared) builtins.
  !MOD!)
  The tt(zsh/zle) module contains the Zsh Line Editor.  See
diff -cr ../zsh-/Doc/Zsh/mod_zleparameter.yo ./Doc/Zsh/mod_zleparameter.yo
*** ../zsh-/Doc/Zsh/mod_zleparameter.yo	Thu Dec 16 14:26:27 1999
--- ./Doc/Zsh/mod_zleparameter.yo	Mon Dec 20 10:32:18 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  Access to internals of the Zsh Line Editor via parameters.
  !MOD!)
  cindex(parameters, special)
--- 1,4 ----
! COMMENT(!MOD!zsh/zleparameter
  Access to internals of the Zsh Line Editor via parameters.
  !MOD!)
  cindex(parameters, special)
diff -cr ../zsh-/Doc/Zsh/mod_zprof.yo ./Doc/Zsh/mod_zprof.yo
*** ../zsh-/Doc/Zsh/mod_zprof.yo	Thu Dec 16 15:10:44 1999
--- ./Doc/Zsh/mod_zprof.yo	Mon Dec 20 11:17:42 1999
***************
*** 1,8 ****
! COMMENT(!MOD!
  A module allowing profiling for shell functions.
  !MOD!)
  cindex(functions, profiling)
! When loaded, the tt(zprof) module makes shell functions be
  profiled. The profiling results can be obtained with the tt(zprof)
  builtin command made available by this module. There is no way to turn 
  profiling off other than unloading this module.
--- 1,8 ----
! COMMENT(!MOD!zsh/zprof
  A module allowing profiling for shell functions.
  !MOD!)
  cindex(functions, profiling)
! When loaded, the tt(zsh/zprof) module makes shell functions be
  profiled. The profiling results can be obtained with the tt(zprof)
  builtin command made available by this module. There is no way to turn 
  profiling off other than unloading this module.
***************
*** 53,59 ****
  number of calls to a function also show the total number of
  invocations made to the called function after a slash.
  
! As long as the tt(zprof) module is loaded, profiling will be done and
  multiple invocations of the tt(zprof) builtin command will show the
  times and numbers of calls since the module was loaded. With the
  tt(-c) option, the tt(zprof) builtin command will reset its internal
--- 53,59 ----
  number of calls to a function also show the total number of
  invocations made to the called function after a slash.
  
! As long as the tt(zsh/zprof) module is loaded, profiling will be done and
  multiple invocations of the tt(zprof) builtin command will show the
  times and numbers of calls since the module was loaded. With the
  tt(-c) option, the tt(zprof) builtin command will reset its internal
diff -cr ../zsh-/Doc/Zsh/mod_zutil.yo ./Doc/Zsh/mod_zutil.yo
*** ../zsh-/Doc/Zsh/mod_zutil.yo	Thu Dec 16 14:26:27 1999
--- ./Doc/Zsh/mod_zutil.yo	Mon Dec 20 10:32:30 1999
***************
*** 1,4 ****
! COMMENT(!MOD!
  Some utility builtins, e.g. the one for supporting configuration via 
  styles.
  !MOD!)
--- 1,4 ----
! COMMENT(!MOD!zsh/zutil
  Some utility builtins, e.g. the one for supporting configuration via 
  styles.
  !MOD!)
diff -cr ../zsh-/Doc/Zsh/params.yo ./Doc/Zsh/params.yo
*** ../zsh-/Doc/Zsh/params.yo	Mon Dec  6 11:39:20 1999
--- ./Doc/Zsh/params.yo	Mon Dec 20 11:11:08 1999
***************
*** 910,917 ****
  item(tt(ZBEEP))(
  If set, this gives a string of characters, which can use all the same codes
  as the tt(bindkey) command as described in
! ifzman(the zle module entry in zmanref(zshmodules))\
! ifnzman(noderef(The zle Module))\
  , that will be output to the terminal
  instead of beeping.  This may have a visible instead of an audible effect;
  for example, the string `tt(\e[?5h\e[?5l)' on a vt100 or xterm will have
--- 910,917 ----
  item(tt(ZBEEP))(
  If set, this gives a string of characters, which can use all the same codes
  as the tt(bindkey) command as described in
! ifzman(the zsh/zle module entry in zmanref(zshmodules))\
! ifnzman(noderef(The zsh/zle Module))\
  , that will be output to the terminal
  instead of beeping.  This may have a visible instead of an audible effect;
  for example, the string `tt(\e[?5h\e[?5l)' on a vt100 or xterm will have
diff -cr ../zsh-/Doc/Zsh/zftpsys.yo ./Doc/Zsh/zftpsys.yo
*** ../zsh-/Doc/Zsh/zftpsys.yo	Thu Dec 16 14:26:27 1999
--- ./Doc/Zsh/zftpsys.yo	Mon Dec 20 11:11:31 1999
***************
*** 18,24 ****
  zmanref(zshmodules)
  )\
  ifnzman(\
! noderef(The zftp Module)
  ), must be available in the
  version of tt(zsh) installed at your site.  If the shell is configured to
  load new commands at run time, it probably is: typing `tt(zmodload zsh/zftp)'
--- 18,24 ----
  zmanref(zshmodules)
  )\
  ifnzman(\
! noderef(The zsh/zftp Module)
  ), must be available in the
  version of tt(zsh) installed at your site.  If the shell is configured to
  load new commands at run time, it probably is: typing `tt(zmodload zsh/zftp)'
***************
*** 515,521 ****
  Various styles are available using the standard shell style mechanism,
  described in
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zutil Module)). Briefly, the
  command `tt(zstyle ':zftp:*') var(style) var(value) ...'.
  defines the var(style) to have value var(value) (more than one may be
  given, although that is not useful in the cases described here).  These
--- 515,521 ----
  Various styles are available using the standard shell style mechanism,
  described in
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(The zsh/zutil Module)). Briefly, the
  command `tt(zstyle ':zftp:*') var(style) var(value) ...'.
  defines the var(style) to have value var(value) (more than one may be
  given, although that is not useful in the cases described here).  These
diff -cr ../zsh-/Doc/Zsh/zle.yo ./Doc/Zsh/zle.yo
*** ../zsh-/Doc/Zsh/zle.yo	Mon Nov  1 09:37:14 1999
--- ./Doc/Zsh/zle.yo	Mon Dec 20 11:11:36 1999
***************
*** 87,93 ****
  The standard widgets built in to ZLE are listed in Standard Widgets below.
  Other built-in widgets can be defined by other modules (see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(Zsh Modules))\
  ).  Each built-in widget has two names: its normal canonical name, and the
  same name preceded by a `tt(.)'.  The `tt(.)' name is special: it can't be
  rebound to a different widget.  This makes the widget available even when
--- 87,93 ----
  The standard widgets built in to ZLE are listed in Standard Widgets below.
  Other built-in widgets can be defined by other modules (see
  ifzman(zmanref(zshmodules))\
! ifnzman(noderef(Zsh zsh/Modules))\
  ).  Each built-in widget has two names: its normal canonical name, and the
  same name preceded by a `tt(.)'.  The `tt(.)' name is special: it can't be
  rebound to a different widget.  This makes the widget available even when
END

