From zsh-workers-return-11557-mason-zsh=primenet.com.au@sunsite.auc.dk Wed May 24 12:16:51 2000
Return-Path: <zsh-workers-return-11557-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 190 invoked from network); 24 May 2000 12:16:46 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 24 May 2000 12:16:46 -0000
Received: (qmail 938 invoked by alias); 24 May 2000 12:16:37 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 11557
Received: (qmail 931 invoked from network); 24 May 2000 12:16:37 -0000
X-Envelope-Sender-Is: Andrej.Borsenkow@mow.siemens.ru (at relayer goliath.siemens.de)
From: "Andrej Borsenkow" <Andrej.Borsenkow@mow.siemens.ru>
To: "Peter Stephenson" <pws@cambridgesiliconradio.com>,
   "Zsh hackers list" <zsh-workers@sunsite.auc.dk>
Subject: RE: FIFOs again
Date: Wed, 24 May 2000 16:16:29 +0400
Message-ID: <000001bfc579$e40a53e0$21c9ca95@mow.siemens.ru>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="koi8-r"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
In-Reply-To: <0FT0004DUNHOXH@la-la.cambridgesiliconradio.com>
Importance: Normal
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6700

As you intend to release 3.1.7, can we try to sort this out before?

First, current docs are a bit incorrect. Shell passes FIFO or /dev/fd/n,
which is in reality pipe (if I understand implementation correctly). So,
both are not seekable, while docs imply, that only FIFO case is not.

And more about FIFO case.
>
> % echo <(echo foo)
>
> Here the parent shell can, with the wind in the right
> direction, get back
> and delete the file named by the <(...) before the child has
> had a chance
> to open it (let alone call the code to fill it).
....
>
> One good reason not to worry about this is that if the
> process actually
> opens the fifo, that's guaranteed not to happen, i.e.
>
> % cat <(echo foo)
>
> always works.
>

Yes, I agree. This should not be an issue.

>
> The second thing is a killer, at least without a rethink.  In the case
> first shown, where the fifo is never opened, but this time does still
> exist, the zsh just hangs on for ever waiting for it and sits around
> uselessly in the process table.


Yes, I got the same. Real nasty. One possibility is "dummy open" in
parent. The child hangs because it tries to open FIFO without
counterpart. Parent can simply open it and then close when child exits
or we're done with current commmand (it currently have to delete FIFO
anyway).

-andrej

