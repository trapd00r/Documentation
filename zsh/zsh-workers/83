From zsh-workers-request@math.gatech.edu  Thu Jun  8 01:39:24 1995
Received: from gatech.edu (gatech.edu [130.207.244.244]) by werple.mira.net.au (8.6.12/8.6.9) with SMTP id BAA09540 for <mason@werple.mira.net.au>; Thu, 8 Jun 1995 01:39:22 +1000
Received: from math (math.skiles.gatech.edu) by gatech.edu with SMTP id AA13445
  (5.65c/Gatech-10.0-IDA for <mason@werple.mira.net.au>); Wed, 7 Jun 1995 11:36:02 -0400
Received: by math (5.x/SMI-SVR4)
	id AA04036; Wed, 7 Jun 1995 11:29:34 -0400
Resent-Date: Wed, 7 Jun 1995 17:28:41 +0100 (MET DST)
Old-Return-Path: <hzoli@cs.elte.hu>
From: hzoli@cs.elte.hu (Zoltan Hidvegi)
Message-Id: <9506071528.AA20863@turan.elte.hu>
Subject: Re: math code optimisation
To: zsh-workers@math.gatech.edu (zsh-workers)
Date: Wed, 7 Jun 1995 17:28:41 +0100 (MET DST)
In-Reply-To: <6979.9505301439@pyro.swan.ac.uk> from "P.Stephenson@swansea.ac.uk" at May 30, 95 03:39:05 pm
X-Mailer: ELM [version 2.4 PL21]
Content-Type: text
Resent-Message-Id: <"p3GMe1.0.--.TNSrl"@math>
Resent-From: zsh-workers@math.gatech.edu
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/83
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

Peter Stephenson <P.Stephenson@swansea.ac.uk> wrote:
> I just happened to look at mathevall() and noticed it was doing a lot
> of unncecessary memory moving, as well as keeping some stack space
> around when it wasn't using it.  Actual, tidying this up seems to make
> the code (OSF/1 3.0, using `size') 170 bytes larger, though there's
> less in data/bss, and it looked like it made about 8k difference
> (using `ps') at run time (which I don't understand since it should be
> about 1.5k, even with 64-bit longs; perhaps it's getting rounded up
> somewhere).

I'm quite busy recently and I had no time to response to mails. I hope it is
still not too late.

I'm not really sure that this optimisation Peter made in the quoted letter and
which is now part of beta9 is much better that the former code. While the
original code used the stack and memcpy, the current version uses
malloc/free. I agree that it should be a little faster than memcpy, but each
malloc may increase memory fragmentation and this way it may consume more
memory than necessary.

Probably that's the problem in other parts of the code, like in

% zsh -f
ktud% foo=( a{,}{,}{,}{,}{,}{,}{,}{,}{,}{,} )
ktud% ps aux $$
USER       PID %CPU %MEM SIZE  RSS TTY STAT START   TIME COMMAND
hzoli     2237  3.6  3.6  460  556 pp0 S    17:03   0:00 zsh -f
ktud% echo ${foo%?}
 
ktud% ps aux $$    
USER       PID %CPU %MEM SIZE  RSS TTY STAT START   TIME COMMAND
hzoli     2237  4.7 21.6 3168 3268 pp0 S    17:03   0:01 zsh -f
ktud% 

as you see, ${foo%?} above increases the resident size with about 2.7M the
first time it is executed (the exact reason for that is still unknown). This
happens on Linux with or wothout ZSH_MEM.

Because of this, I do not really like adding new malloc's. I think the math
code can use halloc if necessary which is safer and also does not requires
explicit free but it's probably better to use the stack and memcpy.

Zoltan

