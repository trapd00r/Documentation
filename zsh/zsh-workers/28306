From zsh-workers-return-28306-mason-zsh=primenet.com.au@zsh.org Tue Sep 28 22:52:08 2010
Return-Path: <zsh-workers-return-28306-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 19177 invoked by alias); 28 Sep 2010 22:52:07 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 28306
Received: (qmail 27937 invoked from network); 28 Sep 2010 22:52:05 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
	DKIM_VALID,DKIM_VALID_AU,FREEMAIL_FROM,RCVD_IN_DNSWL_NONE autolearn=ham
	version=3.3.1
Received-SPF: pass (ns1.primenet.com.au: SPF record at _spf.google.com designates 209.85.216.178 as permitted sender)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:received:date:message-id
         :subject:from:to:content-type:content-transfer-encoding;
        bh=dNiLw91itZ3yoLQRG7m6rEp5CEIaKM1oparL3RdfwYQ=;
        b=LfdwApM+jJtCb5dkZvagnRup3+MT7PMA7C8oa39KAH9YAXEIAEd7mvVO4w4mHEDvlq
         Q2ZRB+gpbgp6+pCzzsnxzM1K3u8b3UgRQFJEj8umZw749m2rWvh2dSsRqFmNSJ7Pww/q
         +7LQNxUjw5lkp7lDzd2Q7JZkwTxQtHc5fdUD4=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:date:message-id:subject:from:to:content-type
         :content-transfer-encoding;
        b=f/MUwUn42E+N6tNO6QnEsu+NYlNvksLVzI/xWDznhxSNOBQznd+uF+4HBbe4DVZ1Vd
         ibKbxb408oPtPRHWFi+ZiqTSYYUBh96VP3xF5i/MxnXijOgzj2bT6FuUYbllV1QvyxTl
         hXXgJxQVgbBOgBLAS7VdIbfKQe08RUDwmo/do=
MIME-Version: 1.0
Date: Wed, 29 Sep 2010 00:51:58 +0200
Message-ID: <AANLkTikohC-rVB5Cif2HrdoQjbkSwkksEOeRATdDW4LZ@mail.gmail.com>
Subject: Infinite loop in dopadding() with doublewidth chars, probably since (mm)
From: Mikael Magnusson <mikachu@gmail.com>
To: zsh workers <zsh-workers@zsh.org>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Trying to pad a string to a width with a double-width character that
can't be done results in an infinite loop, where old versions just
left it one character too narrow. For example:
echo ${(ml:10::=E3=81=BE:):-hello}

dopadding() seems to consist mostly of special cases, but i ended up
around line 990,

 986 if ((m =3D f % lpremul)) {
here f is 5 "hello", lpremul is 2 "=E3=81=BE", so m is 1
 987     /*
 988      * Some fraction of the repeated string needed.
 989      */
 990     /* Need this much... */
 991     c =3D m;
 992     /* ...skipping this much first. */
 993     m =3D lpremul - m;
m is still 1 here
 994     MB_METACHARINIT();
 995     for (t =3D premul; m > 0; ) {
 996         t +=3D MB_METACHARLENCONV(t, &cchar);
this advances t 3 bytes, pointing directly at the null after the =E3=81=BE
 997         m -=3D WCPADWIDTH(cchar, multi_width);
this subtracts 2 from m, leaving -1
 998     }
 999     /* Now the rest of the repeated string. */
1000     while (c > 0) {
c is still 1 here
1001         cl =3D MB_METACHARLENCONV(t, &cchar);
this is 0, remember t is ""
1002         while (cl--)
1003             *r++ =3D *t++;
1004         c -=3D WCPADWIDTH(cchar, multi_width);
which means c is decremented by 0 here
1005     }
1006 }

I didn't get much further than this. I didn't even dare look in how
many places some similar code exists in the function. :)

--=20
Mikael Magnusson

