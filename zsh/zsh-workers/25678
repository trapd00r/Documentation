From zsh-workers-return-25678-mason-zsh=primenet.com.au@sunsite.dk Tue Sep 16 16:18:28 2008
Return-Path: <zsh-workers-return-25678-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 19994 invoked from network); 16 Sep 2008 16:18:13 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,HTML_MESSAGE
	autolearn=ham version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 16 Sep 2008 16:18:13 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 74316 invoked from network); 16 Sep 2008 16:17:56 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 16 Sep 2008 16:17:56 -0000
Received: (qmail 24223 invoked by alias); 16 Sep 2008 16:17:48 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 25678
Received: (qmail 24213 invoked from network); 16 Sep 2008 16:17:47 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 16 Sep 2008 16:17:47 -0000
Received: from mail-gx0-f19.google.com (mail-gx0-f19.google.com [209.85.217.19])
	by bifrost.dotsrc.org (Postfix) with ESMTP id DFBA6802710B
	for <zsh-workers@sunsite.dk>; Tue, 16 Sep 2008 18:17:28 +0200 (CEST)
Received: by gxk12 with SMTP id 12so25805912gxk.21
        for <zsh-workers@sunsite.dk>; Tue, 16 Sep 2008 09:17:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:received:received:message-id:date:from:to
         :subject:cc:in-reply-to:mime-version:content-type:references;
        bh=Ahf7pePKvJ+Op6+0k2iMZJRpNR4O6hF8YS+wN6BspTw=;
        b=PQL2RaPeBqsLoOxuzU0vJr8RmW8zBFPk2VLE50NgHdrmTlcYOl3542J0Ug8wxksF8W
         MkfCUG4qssNSQgR/x5WxImcbpk5IBAgdypz9i/o0bGoy9mSpbJ2hXc39tcm0PRsBSLIV
         1Va5Tf97LFaA2K/5RxjnAjuirF6eED+YVyBUk=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=message-id:date:from:to:subject:cc:in-reply-to:mime-version
         :content-type:references;
        b=pwT4CsZYikIufJtRos6iLqLSCFoF1yB9eXagVMFjcnh/EOkSMaQm8XT8Lei/Z45GnK
         8X0mF9JYz0F/uGUo+C3jBcE17mHDrbnmZ959JsNhCu8JOa9lUezzgAUSia5mPeoz2msE
         W3AeIDcYncIKKwgZf0By3G9qeG1Nd/cw5wOEY=
Received: by 10.114.208.20 with SMTP id f20mr991917wag.147.1221581845900;
        Tue, 16 Sep 2008 09:17:25 -0700 (PDT)
Received: by 10.114.159.2 with HTTP; Tue, 16 Sep 2008 09:17:25 -0700 (PDT)
Message-ID: <6cd6de210809160917u49f75828g6633df9469640f2b@mail.gmail.com>
Date: Tue, 16 Sep 2008 12:17:25 -0400
From: "Rocky Bernstein" <rocky.bernstein@gmail.com>
To: "Peter Stephenson" <pws@csr.com>
Subject: Re: PATCH: source file info from PS4
Cc: "Zsh hackers list" <zsh-workers@sunsite.dk>
In-Reply-To: <6005.1221576641@csr.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_13897_32854962.1221581845894"
References: <6005.1221576641@csr.com>
X-Virus-Scanned: ClamAV 0.92.1/8259/Tue Sep 16 15:05:37 2008 on bifrost
X-Virus-Status: Clean

------=_Part_13897_32854962.1221581845894
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Thanks!

This is certainly something I've wanted ever since funcstack was improved
but had been holding back on.

The fretting about what letter to use after % would be reduced and if the
promptsubst option also applied to PS4. In my opinion not only is it more
readable and requires less memory on a users part, but is also more
flexible.


On Tue, Sep 16, 2008 at 10:50 AM, Peter Stephenson <pws@csr.com> wrote:

> Now we have logic for finding the source file and corresponding line
> number of executed code, this adds the prompt escapes %x and %I which
> are like %N and %i but for the file where the code was defined.  %x isn't
> ideal but upper and lower case %s, %f and %n are all used.  It stands
> for "execution file", or something.  The idea is that you set
> PS4='+%x:%I>'
>
> While doing this, I spotted that we could improve the information
> available to funcstack and the interface to doshfunc() by passing in a
> Shfunc instead of an Eprog.  This is a *much* cleaner interface.  Now
> the funcstack entry is guaranteed to get the details of the shell
> function correct.
>
> Index: Doc/Zsh/prompt.yo
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Doc/Zsh/prompt.yo,v
> retrieving revision 1.15
> diff -u -r1.15 prompt.yo
> --- Doc/Zsh/prompt.yo   24 Jun 2008 08:44:16 -0000      1.15
> +++ Doc/Zsh/prompt.yo   16 Sep 2008 14:41:10 -0000
> @@ -113,6 +113,11 @@
>  shell function given by tt(%N).  This is most useful for debugging as part
>  of tt($PS4).
>  )
> +item(tt(%I))(
> +The line number currently being executed in the file tt(%x).  This is
> +similar to tt(%i), but the line number is always a line number in the
> +file where the code was defined, even if the code is a shell function.
> +)
>  item(tt(%j))(
>  The number of jobs.
>  )
> @@ -126,6 +131,11 @@
>  the `tt(%)' to specify a number of trailing path components to show; zero
>  means the full path.  A negative integer specifies leading components.
>  )
> +item(tt(%x))(
> +The name of the file containing the source code currently being
> +executed.  This behaves as tt(%N) except that function and eval command
> +names are not shown, instead the file where they were defined.
> +)
>  xitem(tt(%c))
>  xitem(tt(%.))
>  item(tt(%C))(
> Index: Src/exec.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/exec.c,v
> retrieving revision 1.151
> diff -u -r1.151 exec.c
> --- Src/exec.c  11 Sep 2008 17:14:39 -0000      1.151
> +++ Src/exec.c  16 Sep 2008 14:41:10 -0000
> @@ -518,7 +518,7 @@
>        return 127;
>
>     pushnode(args, arg0);
> -    return doshfunc(shf->node.nam, shf->funcdef, args, shf->node.flags,
> 1);
> +    return doshfunc(shf, args, shf->node.flags, 1);
>  }
>
>  /* execute an external command */
> @@ -4064,7 +4064,7 @@
>     cmdsp = 0;
>     if ((osfc = sfcontext) == SFC_NONE)
>        sfcontext = SFC_DIRECT;
> -    doshfunc(shf->node.nam, shf->funcdef, args, shf->node.flags, 0);
> +    doshfunc(shf, args, shf->node.flags, 0);
>     sfcontext = osfc;
>     free(cmdstack);
>     cmdstack = ocs;
> @@ -4200,18 +4200,20 @@
>
>  /**/
>  mod_export int
> -doshfunc(char *name, Eprog prog, LinkList doshargs, int flags, int
> noreturnval)
> +doshfunc(Shfunc shfunc, LinkList doshargs, int flags, int noreturnval)
>  {
>     char **tab, **x, *oargv0;
>     int oldzoptind, oldlastval, oldoptcind, oldnumpipestats, ret;
>     int *oldpipestats = NULL;
> -    char saveopts[OPT_SIZE], *oldscriptname = scriptname, *fname =
> dupstring(name);
> +    char saveopts[OPT_SIZE], *oldscriptname = scriptname;
> +    char *name = shfunc->node.nam;
> +    char *fname = dupstring(name);
>     int obreaks, saveemulation ;
> +    Eprog prog;
>     struct funcstack fstack;
>  #ifdef MAX_FUNCTION_DEPTH
>     static int funcdepth;
>  #endif
> -    Shfunc shf;
>
>     pushheap();
>
> @@ -4291,14 +4293,10 @@
>     fstack.tp = FS_FUNC;
>     funcstack = &fstack;
>
> -    if ((shf = (Shfunc) shfunctab->getnode(shfunctab, name))) {
> -       fstack.flineno = shf->lineno;
> -       fstack.filename = dupstring(shf->filename);
> -    } else {
> -       fstack.flineno = 0;
> -       fstack.filename = dupstring(fstack.caller);
> -    }
> +    fstack.flineno = shfunc->lineno;
> +    fstack.filename = dupstring(shfunc->filename);
>
> +    prog = shfunc->funcdef;
>     if (prog->flags & EF_RUN) {
>        Shfunc shf;
>
> Index: Src/init.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/init.c,v
> retrieving revision 1.96
> diff -u -r1.96 init.c
> --- Src/init.c  11 Sep 2008 17:14:39 -0000      1.96
> +++ Src/init.c  16 Sep 2008 14:41:10 -0000
> @@ -149,7 +149,7 @@
>            int toksav = tok;
>
>            if (toplevel &&
> -               (getshfunc("preexec") != &dummy_eprog ||
> +               (getshfunc("preexec") ||
>                 paramtab->getnode(paramtab, "preexec_functions"))) {
>                LinkList args;
>                char *cmdstr;
> Index: Src/math.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/math.c,v
> retrieving revision 1.33
> diff -u -r1.33 math.c
> --- Src/math.c  12 Jun 2008 13:45:06 -0000      1.33
> +++ Src/math.c  16 Sep 2008 14:41:10 -0000
> @@ -868,11 +868,11 @@
>                                           argc <= f->maxargs)) {
>                    if (f->flags & MFF_USERFUNC) {
>                        char *shfnam = f->module ? f->module : n;
> -                       Eprog prog = getshfunc(shfnam);
> -                       if (prog == &dummy_eprog)
> +                       Shfunc shfunc = getshfunc(shfnam);
> +                       if (!shfunc)
>                            zerr("no such function: %s", shfnam);
>                        else {
> -                           doshfunc(n, prog, l, 0, 1);
> +                           doshfunc(shfunc, l, 0, 1);
>                            return lastmathval;
>                        }
>                    } else {
> Index: Src/prompt.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/prompt.c,v
> retrieving revision 1.53
> diff -u -r1.53 prompt.c
> --- Src/prompt.c        15 Sep 2008 16:18:06 -0000      1.53
> +++ Src/prompt.c        16 Sep 2008 14:41:11 -0000
> @@ -725,11 +725,37 @@
>                if(Rstring)
>                    stradd(Rstring);
>                break;
> +           case 'I':
> +               if (funcstack && funcstack->tp != FS_SOURCE) {
> +                   /*
> +                    * We're in a function or an eval with
> +                    * EVALLINENO.  Calculate the line number in
> +                    * the file.
> +                    */
> +                   zlong flineno = lineno + funcstack->flineno;
> +                   /* take account of eval line nos. starting at 1 */
> +                   if (funcstack->tp == FS_EVAL)
> +                       lineno--;
> +                   addbufspc(DIGBUFSIZE);
> +                   sprintf(bp, "%ld", (long)flineno);
> +                   bp += strlen(bp);
> +                   break;
> +               }
> +               /* else we're in a file and lineno is already correct */
> +               /* FALLTHROUGH */
>            case 'i':
>                addbufspc(DIGBUFSIZE);
>                sprintf(bp, "%ld", (long)lineno);
>                bp += strlen(bp);
>                break;
> +           case 'x':
> +               if (funcstack && funcstack->tp != FS_SOURCE)
> +                   promptpath(funcstack->filename ? funcstack->filename :
> "",
> +                              arg, 0);
> +               else
> +                   promptpath(scriptfilename ? scriptfilename : argzero,
> +                              arg, 0);
> +               break;
>            case '\0':
>                return 0;
>            case Meta:
> Index: Src/signals.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/signals.c,v
> retrieving revision 1.50
> diff -u -r1.50 signals.c
> --- Src/signals.c       11 Aug 2008 19:22:54 -0000      1.50
> +++ Src/signals.c       16 Sep 2008 14:41:11 -0000
> @@ -963,8 +963,7 @@
>     }
>
>     if (exittr) {
> -       dotrapargs(SIGEXIT, &exittr, (exittr & ZSIG_FUNC) ?
> -                  ((Shfunc)exitfn)->funcdef : (Eprog) exitfn);
> +       dotrapargs(SIGEXIT, &exittr, exitfn);
>        if (exittr & ZSIG_FUNC)
>            shfunctab->freenode((HashNode)exitfn);
>        else
> @@ -1077,8 +1076,16 @@
>  /**/
>  int trapisfunc;
>
> +/*
> + * sig is the signal number.
> + * *sigtr is the value to be taken as the field in sigtrapped (since
> + *   that may have changed by this point if we are exiting).
> + * sigfn is an Eprog with a non-function eval list, or a Shfunc
> + *   with a function trap.  It may be NULL with an ignored signal.
> + */
> +
>  /**/
> -void
> +static void
>  dotrapargs(int sig, int *sigtr, void *sigfn)
>  {
>     LinkList args;
> @@ -1153,7 +1160,7 @@
>        trapisfunc = isfunc = 1;
>
>        sfcontext = SFC_SIGNAL;
> -       doshfunc(name, sigfn, args, 0, 1);
> +       doshfunc((Shfunc)sigfn, args, 0, 1);
>        sfcontext = osc;
>        freelinklist(args, (FreeFunc) NULL);
>        zsfree(name);
> @@ -1162,7 +1169,7 @@
>        trap_state = TRAP_STATE_PRIMED;
>        trapisfunc = isfunc = 0;
>
> -       execode(sigfn, 1, 0);
> +       execode((Eprog)sigfn, 1, 0);
>     }
>     runhookdef(AFTERTRAPHOOK, NULL);
>
> @@ -1215,12 +1222,12 @@
>  void
>  dotrap(int sig)
>  {
> -    Eprog funcprog;
> +    void *funcprog;
>
>     if (sigtrapped[sig] & ZSIG_FUNC) {
>        HashNode hn = gettrapnode(sig, 0);
>        if (hn)
> -           funcprog = ((Shfunc)hn)->funcdef;
> +           funcprog = hn;
>        else {
>  #ifdef DEBUG
>            dputs("BUG: running function trap which has escaped.");
> @@ -1230,7 +1237,11 @@
>     } else
>        funcprog = siglists[sig];
>
> -    /* Copied from dotrapargs(). */
> +    /*
> +     * Copied from dotrapargs().
> +     * (In fact, the gain from duplicating this appears to be virtually
> +     * zero.  Not sure why it's here.)
> +     */
>     if ((sigtrapped[sig] & ZSIG_IGNORED) || !funcprog || errflag)
>        return;
>
> Index: Src/utils.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/utils.c,v
> retrieving revision 1.199
> diff -u -r1.199 utils.c
> --- Src/utils.c 11 Aug 2008 19:22:54 -0000      1.199
> +++ Src/utils.c 16 Sep 2008 14:41:11 -0000
> @@ -35,6 +35,8 @@
>  /**/
>  mod_export char *scriptname;     /* is sometimes a function name */
>
> +/* filename of script or other file containing code source e.g. autoload
> */
> +
>  /**/
>  mod_export char *scriptfilename;
>
> @@ -1134,7 +1136,7 @@
>  mod_export int
>  callhookfunc(char *name, LinkList lnklst, int arrayp, int *retval)
>  {
> -    Eprog prog;
> +    Shfunc shfunc;
>        /*
>         * Save stopmsg, since user doesn't get a chance to respond
>         * to a list of jobs generated in a hook.
> @@ -1143,8 +1145,8 @@
>
>     sfcontext = SFC_HOOK;
>
> -    if ((prog = getshfunc(name)) != &dummy_eprog) {
> -       ret = doshfunc(name, prog, lnklst, 0, 1);
> +    if ((shfunc = getshfunc(name))) {
> +       ret = doshfunc(shfunc, lnklst, 0, 1);
>        stat = 0;
>     }
>
> @@ -1159,8 +1161,8 @@
>
>        if ((arrptr = getaparam(arrnam))) {
>            for (; *arrptr; arrptr++) {
> -               if ((prog = getshfunc(*arrptr)) != &dummy_eprog) {
> -                   int newret = doshfunc(arrnam, prog, lnklst, 0, 1);
> +               if ((shfunc = getshfunc(*arrptr))) {
> +                   int newret = doshfunc(shfunc, lnklst, 0, 1);
>                    if (!ret)
>                        ret = newret;
>                    stat = 0;
> @@ -2893,15 +2895,10 @@
>  /* Get the definition of a shell function */
>
>  /**/
> -mod_export Eprog
> +mod_export Shfunc
>  getshfunc(char *nam)
>  {
> -    Shfunc shf;
> -
> -    if (!(shf = (Shfunc) shfunctab->getnode(shfunctab, nam)))
> -       return &dummy_eprog;
> -
> -    return shf->funcdef;
> +    return (Shfunc) shfunctab->getnode(shfunctab, nam);
>  }
>
>  /**/
> Index: Src/Modules/zftp.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/Modules/zftp.c,v
> retrieving revision 1.48
> diff -u -r1.48 zftp.c
> --- Src/Modules/zftp.c  4 Sep 2008 22:23:52 -0000       1.48
> +++ Src/Modules/zftp.c  16 Sep 2008 14:41:11 -0000
> @@ -1469,9 +1469,9 @@
>     char lsbuf[ZF_BUFSIZE], *ascbuf = NULL, *optr;
>     off_t sofar = 0, last_sofar = 0;
>     readwrite_t read_ptr = zfread, write_ptr = zfwrite;
> -    Eprog prog;
> +    Shfunc shfunc;
>
> -    if (progress && (prog = getshfunc("zftp_progress")) != &dummy_eprog) {
> +    if (progress && (shfunc = getshfunc("zftp_progress"))) {
>        /*
>         * progress to set up:  ZFTP_COUNT is zero.
>         * We do this here in case we needed to wait for a RETR
> @@ -1480,7 +1480,7 @@
>        int osc = sfcontext;
>
>        sfcontext = SFC_HOOK;
> -       doshfunc("zftp_progress", prog, NULL, 0, 1);
> +       doshfunc(shfunc, NULL, 0, 1);
>        sfcontext = osc;
>        /* Now add in the bit of the file we've got/sent already */
>        sofar = last_sofar = startat;
> @@ -1608,12 +1608,12 @@
>        } else
>            break;
>        if (!ret && sofar != last_sofar && progress &&
> -           (prog = getshfunc("zftp_progress")) != &dummy_eprog) {
> +           (shfunc = getshfunc("zftp_progress"))) {
>            int osc = sfcontext;
>
>            zfsetparam("ZFTP_COUNT", &sofar, ZFPM_READONLY|ZFPM_INTEGER);
>            sfcontext = SFC_HOOK;
> -           doshfunc("zftp_progress", prog, NULL, 0, 1);
> +           doshfunc(shfunc, NULL, 0, 1);
>            sfcontext = osc;
>            last_sofar = sofar;
>        }
> @@ -2364,7 +2364,7 @@
>  {
>     char *ptr, *eptr;
>     int endc;
> -    Eprog prog;
> +    Shfunc shfunc;
>
>     if (zfprefs & ZFPF_DUMB)
>        return 1;
> @@ -2391,11 +2391,11 @@
>      * front end.  By putting it here, and in close when ZFTP_PWD is unset,
>      * we at least cover the bases.
>      */
> -    if ((prog = getshfunc("zftp_chpwd")) != &dummy_eprog) {
> +    if ((shfunc = getshfunc("zftp_chpwd"))) {
>        int osc = sfcontext;
>
>        sfcontext = SFC_HOOK;
> -       doshfunc("zftp_chpwd", prog, NULL, 0, 1);
> +       doshfunc(shfunc, NULL, 0, 1);
>        sfcontext = osc;
>     }
>     return 0;
> @@ -2549,7 +2549,7 @@
>  {
>     int ret = 0, recv = (flags & ZFTP_RECV), getsize = 0, progress = 1;
>     char *cmd = recv ? "RETR " : (flags & ZFTP_APPE) ? "APPE " : "STOR ";
> -    Eprog prog;
> +    Shfunc shfunc;
>
>     /*
>      * At this point I'd like to set progress to 0 if we're
> @@ -2567,7 +2567,7 @@
>     for (; *args; args++) {
>        char *ln, *rest = NULL;
>        off_t startat = 0;
> -       if (progress && (prog = getshfunc("zftp_progress")) !=
> &dummy_eprog) {
> +       if (progress && (shfunc = getshfunc("zftp_progress"))) {
>            off_t sz = -1;
>            /*
>             * This calls the SIZE command to get the size for remote
> @@ -2608,14 +2608,14 @@
>         * if and only if we called zfsenddata();
>         */
>        if (progress && ret != 2 &&
> -           (prog = getshfunc("zftp_progress")) != &dummy_eprog) {
> +           (shfunc = getshfunc("zftp_progress"))) {
>            /* progress to finish: ZFTP_TRANSFER set to GF or PF */
>            int osc = sfcontext;
>
>            zfsetparam("ZFTP_TRANSFER", ztrdup(recv ? "GF" : "PF"),
>                       ZFPM_READONLY);
>            sfcontext = SFC_HOOK;
> -           doshfunc("zftp_progress", prog, NULL, 0, 1);
> +           doshfunc(shfunc, NULL, 0, 1);
>            sfcontext = osc;
>        }
>        if (rest) {
> @@ -2715,7 +2715,7 @@
>  zfclose(int leaveparams)
>  {
>     char **aptr;
> -    Eprog prog;
> +    Shfunc shfunc;
>
>     if (!zfsess->control)
>        return;
> @@ -2766,11 +2766,11 @@
>            zfunsetparam(*aptr);
>
>        /* Now ZFTP_PWD is unset.  It's up to zftp_chpwd to notice. */
> -       if ((prog = getshfunc("zftp_chpwd")) != &dummy_eprog) {
> +       if ((shfunc = getshfunc("zftp_chpwd"))) {
>            int osc = sfcontext;
>
>            sfcontext = SFC_HOOK;
> -           doshfunc("zftp_chpwd", prog, NULL, 0, 1);
> +           doshfunc(shfunc, NULL, 0, 1);
>            sfcontext = osc;
>        }
>     }
> Index: Src/Zle/compcore.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/Zle/compcore.c,v
> retrieving revision 1.96
> diff -u -r1.96 compcore.c
> --- Src/Zle/compcore.c  7 Jul 2008 08:33:28 -0000       1.96
> +++ Src/Zle/compcore.c  16 Sep 2008 14:41:12 -0000
> @@ -540,13 +540,13 @@
>  static void
>  callcompfunc(char *s, char *fn)
>  {
> -    Eprog prog;
> +    Shfunc shfunc;
>     int lv = lastval;
>     char buf[20];
>
>     METACHECK();
>
> -    if ((prog = getshfunc(fn)) != &dummy_eprog) {
> +    if ((shfunc = getshfunc(fn))) {
>        char **p, *tmp;
>        int aadd = 0, usea = 1, icf = incompfunc, osc = sfcontext;
>        unsigned int rset, kset;
> @@ -814,7 +814,7 @@
>                while (*p)
>                    addlinknode(largs, dupstring(*p++));
>            }
> -           doshfunc(fn, prog, largs, 0, 0);
> +           doshfunc(shfunc, largs, 0, 0);
>            cfret = lastval;
>            lastval = olv;
>        } OLDHEAPS;
> Index: Src/Zle/compctl.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/Zle/compctl.c,v
> retrieving revision 1.35
> diff -u -r1.35 compctl.c
> --- Src/Zle/compctl.c   3 Oct 2007 16:18:38 -0000       1.35
> +++ Src/Zle/compctl.c   16 Sep 2008 14:41:12 -0000
> @@ -3635,12 +3635,12 @@
>     }
>     if (cc->func) {
>        /* This handles the compctl -K flag. */
> -       Eprog prog;
> +       Shfunc shfunc;
>        char **r;
>        int lv = lastval;
>
>        /* Get the function. */
> -       if ((prog = getshfunc(cc->func)) != &dummy_eprog) {
> +       if ((shfunc = getshfunc(cc->func))) {
>            /* We have it, so build a argument list. */
>            LinkList args = newlinklist();
>            int osc = sfcontext;
> @@ -3664,7 +3664,7 @@
>                incompctlfunc = 1;
>            sfcontext = SFC_COMPLETE;
>            /* Call the function. */
> -           doshfunc(cc->func, prog, args, 0, 1);
> +           doshfunc(shfunc, args, 0, 1);
>            sfcontext = osc;
>            incompctlfunc = 0;
>            /* And get the result from the reply parameter. */
> @@ -3809,12 +3809,12 @@
>        /* generate the user-defined display list: if anything fails, *
>         * we silently allow the normal completion list to be used.   */
>        char **yaptr = NULL, *uv = NULL;
> -       Eprog prog;
> +       Shfunc shfunc;
>
>        if (cc->ylist[0] == '$' || cc->ylist[0] == '(') {
>            /* from variable */
>            uv = cc->ylist + (cc->ylist[0] == '$');
> -       } else if ((prog = getshfunc(cc->ylist)) != &dummy_eprog) {
> +       } else if ((shfunc = getshfunc(cc->ylist))) {
>            /* from function:  pass completions as arg list */
>            LinkList args = newlinklist();
>            LinkNode ln;
> @@ -3839,7 +3839,7 @@
>            if (incompfunc != 1)
>                incompctlfunc = 1;
>            sfcontext = SFC_COMPLETE;
> -           doshfunc(cc->ylist, prog, args, 0, 1);
> +           doshfunc(shfunc, args, 0, 1);
>            sfcontext = osc;
>            incompctlfunc = 0;
>            uv = "reply";
> Index: Src/Zle/zle_main.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/Zle/zle_main.c,v
> retrieving revision 1.115
> diff -u -r1.115 zle_main.c
> --- Src/Zle/zle_main.c  8 Sep 2008 06:24:23 -0000       1.115
> +++ Src/Zle/zle_main.c  16 Sep 2008 14:41:12 -0000
> @@ -1304,9 +1304,8 @@
>        r = 1;
>     } else {
>        Shfunc shf = (Shfunc) shfunctab->getnode(shfunctab, w->u.fnnam);
> -       Eprog prog = (shf ? shf->funcdef : &dummy_eprog);
>
> -       if(prog == &dummy_eprog) {
> +       if (!shf) {
>            /* the shell function doesn't exist */
>            char *nm = nicedup(w->u.fnnam, 0);
>            char *msg = tricat("No such shell function `", nm, "'");
> @@ -1330,7 +1329,7 @@
>            makezleparams(0);
>            sfcontext = SFC_WIDGET;
>            opts[XTRACE] = 0;
> -           ret = doshfunc(w->u.fnnam, prog, largs, shf->node.flags, 1);
> +           ret = doshfunc(shf, largs, shf->node.flags, 1);
>            opts[XTRACE] = oxt;
>            sfcontext = osc;
>            endparamscope();
> Index: Src/Zle/zle_misc.c
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Src/Zle/zle_misc.c,v
> retrieving revision 1.54
> diff -u -r1.54 zle_misc.c
> --- Src/Zle/zle_misc.c  4 May 2008 18:30:04 -0000       1.54
> +++ Src/Zle/zle_misc.c  16 Sep 2008 14:41:12 -0000
> @@ -1358,9 +1358,9 @@
>  iremovesuffix(ZLE_INT_T c, int keep)
>  {
>     if (suffixfunc) {
> -       Eprog prog = getshfunc(suffixfunc);
> +       Shfunc shfunc = getshfunc(suffixfunc);
>
> -       if (prog != &dummy_eprog) {
> +       if (shfunc) {
>            LinkList args = newlinklist();
>            char buf[20];
>            int osc = sfcontext;
> @@ -1384,7 +1384,7 @@
>            startparamscope();
>            makezleparams(0);
>            sfcontext = SFC_COMPLETE;
> -           doshfunc(suffixfunc, prog, args, 0, 1);
> +           doshfunc(shfunc, args, 0, 1);
>            sfcontext = osc;
>            endparamscope();
>
> Index: Test/E02xtrace.ztst
> ===================================================================
> RCS file: /cvsroot/zsh/zsh/Test/E02xtrace.ztst,v
> retrieving revision 1.7
> diff -u -r1.7 E02xtrace.ztst
> --- Test/E02xtrace.ztst 11 Aug 2008 08:40:58 -0000      1.7
> +++ Test/E02xtrace.ztst 16 Sep 2008 14:41:12 -0000
> @@ -90,3 +90,18 @@
>  >Tracing: function
>  ?+xtf:1> local regression_test_dummy_variable
>  ?+xtf:2> print 'Tracing: function'
> +
> + echo 'PS4="+%x:%I> "
> + fn() {
> +   print This is fn.
> + }
> + :
> + fn
> + ' >fnfile
> + $ZTST_testdir/../Src/zsh -fx ./fnfile
> +0:Trace output with sourcefile and line number.
> +>This is fn.
> +?+./fnfile:1> PS4='+%x:%I> '
> +?+./fnfile:5> :
> +?+./fnfile:6> fn
> +?+./fnfile:3> print This is fn.
>
>
> --
> Peter Stephenson <pws@csr.com>                  Software Engineer
> CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
> Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070
>

------=_Part_13897_32854962.1221581845894
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

<div dir="ltr">Thanks! <br><br>This is certainly something I&#39;ve wanted ever since funcstack was improved but had been holding back on.<br><br>The fretting about what letter to use after % would be reduced and if the promptsubst option also applied to PS4. In my opinion not only is it more readable and requires less memory on a users part, but is also more flexible.<br>
<br><br><div class="gmail_quote">On Tue, Sep 16, 2008 at 10:50 AM, Peter Stephenson <span dir="ltr">&lt;<a href="mailto:pws@csr.com">pws@csr.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
Now we have logic for finding the source file and corresponding line<br>
number of executed code, this adds the prompt escapes %x and %I which<br>
are like %N and %i but for the file where the code was defined. &nbsp;%x isn&#39;t<br>
ideal but upper and lower case %s, %f and %n are all used. &nbsp;It stands<br>
for &quot;execution file&quot;, or something. &nbsp;The idea is that you set<br>
PS4=&#39;+%x:%I&gt;&#39;<br>
<br>
While doing this, I spotted that we could improve the information<br>
available to funcstack and the interface to doshfunc() by passing in a<br>
Shfunc instead of an Eprog. &nbsp;This is a *much* cleaner interface. &nbsp;Now<br>
the funcstack entry is guaranteed to get the details of the shell<br>
function correct.<br>
<br>
Index: Doc/Zsh/prompt.yo<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/prompt.yo,v<br>
retrieving revision 1.15<br>
diff -u -r1.15 prompt.yo<br>
--- Doc/Zsh/prompt.yo &nbsp; 24 Jun 2008 08:44:16 -0000 &nbsp; &nbsp; &nbsp;1.15<br>
+++ Doc/Zsh/prompt.yo &nbsp; 16 Sep 2008 14:41:10 -0000<br>
@@ -113,6 +113,11 @@<br>
&nbsp;shell function given by tt(%N). &nbsp;This is most useful for debugging as part<br>
&nbsp;of tt($PS4).<br>
&nbsp;)<br>
+item(tt(%I))(<br>
+The line number currently being executed in the file tt(%x). &nbsp;This is<br>
+similar to tt(%i), but the line number is always a line number in the<br>
+file where the code was defined, even if the code is a shell function.<br>
+)<br>
&nbsp;item(tt(%j))(<br>
&nbsp;The number of jobs.<br>
&nbsp;)<br>
@@ -126,6 +131,11 @@<br>
&nbsp;the `tt(%)&#39; to specify a number of trailing path components to show; zero<br>
&nbsp;means the full path. &nbsp;A negative integer specifies leading components.<br>
&nbsp;)<br>
+item(tt(%x))(<br>
+The name of the file containing the source code currently being<br>
+executed. &nbsp;This behaves as tt(%N) except that function and eval command<br>
+names are not shown, instead the file where they were defined.<br>
+)<br>
&nbsp;xitem(tt(%c))<br>
&nbsp;xitem(tt(%.))<br>
&nbsp;item(tt(%C))(<br>
Index: Src/exec.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/exec.c,v<br>
retrieving revision 1.151<br>
diff -u -r1.151 exec.c<br>
--- Src/exec.c &nbsp;11 Sep 2008 17:14:39 -0000 &nbsp; &nbsp; &nbsp;1.151<br>
+++ Src/exec.c &nbsp;16 Sep 2008 14:41:10 -0000<br>
@@ -518,7 +518,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp;return 127;<br>
<br>
 &nbsp; &nbsp; pushnode(args, arg0);<br>
- &nbsp; &nbsp;return doshfunc(shf-&gt;node.nam, shf-&gt;funcdef, args, shf-&gt;node.flags, 1);<br>
+ &nbsp; &nbsp;return doshfunc(shf, args, shf-&gt;node.flags, 1);<br>
&nbsp;}<br>
<br>
&nbsp;/* execute an external command */<br>
@@ -4064,7 +4064,7 @@<br>
 &nbsp; &nbsp; cmdsp = 0;<br>
 &nbsp; &nbsp; if ((osfc = sfcontext) == SFC_NONE)<br>
 &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_DIRECT;<br>
- &nbsp; &nbsp;doshfunc(shf-&gt;node.nam, shf-&gt;funcdef, args, shf-&gt;node.flags, 0);<br>
+ &nbsp; &nbsp;doshfunc(shf, args, shf-&gt;node.flags, 0);<br>
 &nbsp; &nbsp; sfcontext = osfc;<br>
 &nbsp; &nbsp; free(cmdstack);<br>
 &nbsp; &nbsp; cmdstack = ocs;<br>
@@ -4200,18 +4200,20 @@<br>
<br>
&nbsp;/**/<br>
&nbsp;mod_export int<br>
-doshfunc(char *name, Eprog prog, LinkList doshargs, int flags, int noreturnval)<br>
+doshfunc(Shfunc shfunc, LinkList doshargs, int flags, int noreturnval)<br>
&nbsp;{<br>
 &nbsp; &nbsp; char **tab, **x, *oargv0;<br>
 &nbsp; &nbsp; int oldzoptind, oldlastval, oldoptcind, oldnumpipestats, ret;<br>
 &nbsp; &nbsp; int *oldpipestats = NULL;<br>
- &nbsp; &nbsp;char saveopts[OPT_SIZE], *oldscriptname = scriptname, *fname = dupstring(name);<br>
+ &nbsp; &nbsp;char saveopts[OPT_SIZE], *oldscriptname = scriptname;<br>
+ &nbsp; &nbsp;char *name = shfunc-&gt;node.nam;<br>
+ &nbsp; &nbsp;char *fname = dupstring(name);<br>
 &nbsp; &nbsp; int obreaks, saveemulation ;<br>
+ &nbsp; &nbsp;Eprog prog;<br>
 &nbsp; &nbsp; struct funcstack fstack;<br>
&nbsp;#ifdef MAX_FUNCTION_DEPTH<br>
 &nbsp; &nbsp; static int funcdepth;<br>
&nbsp;#endif<br>
- &nbsp; &nbsp;Shfunc shf;<br>
<br>
 &nbsp; &nbsp; pushheap();<br>
<br>
@@ -4291,14 +4293,10 @@<br>
 &nbsp; &nbsp; <a href="http://fstack.tp" target="_blank">fstack.tp</a> = FS_FUNC;<br>
 &nbsp; &nbsp; funcstack = &amp;fstack;<br>
<br>
- &nbsp; &nbsp;if ((shf = (Shfunc) shfunctab-&gt;getnode(shfunctab, name))) {<br>
- &nbsp; &nbsp; &nbsp; fstack.flineno = shf-&gt;lineno;<br>
- &nbsp; &nbsp; &nbsp; fstack.filename = dupstring(shf-&gt;filename);<br>
- &nbsp; &nbsp;} else {<br>
- &nbsp; &nbsp; &nbsp; fstack.flineno = 0;<br>
- &nbsp; &nbsp; &nbsp; fstack.filename = dupstring(fstack.caller);<br>
- &nbsp; &nbsp;}<br>
+ &nbsp; &nbsp;fstack.flineno = shfunc-&gt;lineno;<br>
+ &nbsp; &nbsp;fstack.filename = dupstring(shfunc-&gt;filename);<br>
<br>
+ &nbsp; &nbsp;prog = shfunc-&gt;funcdef;<br>
 &nbsp; &nbsp; if (prog-&gt;flags &amp; EF_RUN) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp;Shfunc shf;<br>
<br>
Index: Src/init.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/init.c,v<br>
retrieving revision 1.96<br>
diff -u -r1.96 init.c<br>
--- Src/init.c &nbsp;11 Sep 2008 17:14:39 -0000 &nbsp; &nbsp; &nbsp;1.96<br>
+++ Src/init.c &nbsp;16 Sep 2008 14:41:10 -0000<br>
@@ -149,7 +149,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int toksav = tok;<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (toplevel &amp;&amp;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (getshfunc(&quot;preexec&quot;) != &amp;dummy_eprog ||<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (getshfunc(&quot;preexec&quot;) ||<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; paramtab-&gt;getnode(paramtab, &quot;preexec_functions&quot;))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LinkList args;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;char *cmdstr;<br>
Index: Src/math.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/math.c,v<br>
retrieving revision 1.33<br>
diff -u -r1.33 math.c<br>
--- Src/math.c &nbsp;12 Jun 2008 13:45:06 -0000 &nbsp; &nbsp; &nbsp;1.33<br>
+++ Src/math.c &nbsp;16 Sep 2008 14:41:10 -0000<br>
@@ -868,11 +868,11 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; argc &lt;= f-&gt;maxargs)) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (f-&gt;flags &amp; MFF_USERFUNC) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;char *shfnam = f-&gt;module ? f-&gt;module : n;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Eprog prog = getshfunc(shfnam);<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (prog == &amp;dummy_eprog)<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Shfunc shfunc = getshfunc(shfnam);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!shfunc)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;zerr(&quot;no such function: %s&quot;, shfnam);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else {<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(n, prog, l, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(shfunc, l, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return lastmathval;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;} else {<br>
Index: Src/prompt.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/prompt.c,v<br>
retrieving revision 1.53<br>
diff -u -r1.53 prompt.c<br>
--- Src/prompt.c &nbsp; &nbsp; &nbsp; &nbsp;15 Sep 2008 16:18:06 -0000 &nbsp; &nbsp; &nbsp;1.53<br>
+++ Src/prompt.c &nbsp; &nbsp; &nbsp; &nbsp;16 Sep 2008 14:41:11 -0000<br>
@@ -725,11 +725,37 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(Rstring)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stradd(Rstring);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case &#39;I&#39;:<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (funcstack &amp;&amp; funcstack-&gt;tp != FS_SOURCE) {<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /*<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* We&#39;re in a function or an eval with<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* EVALLINENO. &nbsp;Calculate the line number in<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* the file.<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; zlong flineno = lineno + funcstack-&gt;flineno;<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* take account of eval line nos. starting at 1 */<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (funcstack-&gt;tp == FS_EVAL)<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lineno--;<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; addbufspc(DIGBUFSIZE);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sprintf(bp, &quot;%ld&quot;, (long)flineno);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bp += strlen(bp);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* else we&#39;re in a file and lineno is already correct */<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* FALLTHROUGH */<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case &#39;i&#39;:<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addbufspc(DIGBUFSIZE);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sprintf(bp, &quot;%ld&quot;, (long)lineno);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bp += strlen(bp);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case &#39;x&#39;:<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (funcstack &amp;&amp; funcstack-&gt;tp != FS_SOURCE)<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; promptpath(funcstack-&gt;filename ? funcstack-&gt;filename : &quot;&quot;,<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;arg, 0);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; promptpath(scriptfilename ? scriptfilename : argzero,<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;arg, 0);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case &#39;\0&#39;:<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return 0;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;case Meta:<br>
Index: Src/signals.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/signals.c,v<br>
retrieving revision 1.50<br>
diff -u -r1.50 signals.c<br>
--- Src/signals.c &nbsp; &nbsp; &nbsp; 11 Aug 2008 19:22:54 -0000 &nbsp; &nbsp; &nbsp;1.50<br>
+++ Src/signals.c &nbsp; &nbsp; &nbsp; 16 Sep 2008 14:41:11 -0000<br>
@@ -963,8 +963,7 @@<br>
 &nbsp; &nbsp; }<br>
<br>
 &nbsp; &nbsp; if (exittr) {<br>
- &nbsp; &nbsp; &nbsp; dotrapargs(SIGEXIT, &amp;exittr, (exittr &amp; ZSIG_FUNC) ?<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;((Shfunc)exitfn)-&gt;funcdef : (Eprog) exitfn);<br>
+ &nbsp; &nbsp; &nbsp; dotrapargs(SIGEXIT, &amp;exittr, exitfn);<br>
 &nbsp; &nbsp; &nbsp; &nbsp;if (exittr &amp; ZSIG_FUNC)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;shfunctab-&gt;freenode((HashNode)exitfn);<br>
 &nbsp; &nbsp; &nbsp; &nbsp;else<br>
@@ -1077,8 +1076,16 @@<br>
&nbsp;/**/<br>
&nbsp;int trapisfunc;<br>
<br>
+/*<br>
+ * sig is the signal number.<br>
+ * *sigtr is the value to be taken as the field in sigtrapped (since<br>
+ * &nbsp; that may have changed by this point if we are exiting).<br>
+ * sigfn is an Eprog with a non-function eval list, or a Shfunc<br>
+ * &nbsp; with a function trap. &nbsp;It may be NULL with an ignored signal.<br>
+ */<br>
+<br>
&nbsp;/**/<br>
-void<br>
+static void<br>
&nbsp;dotrapargs(int sig, int *sigtr, void *sigfn)<br>
&nbsp;{<br>
 &nbsp; &nbsp; LinkList args;<br>
@@ -1153,7 +1160,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp;trapisfunc = isfunc = 1;<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_SIGNAL;<br>
- &nbsp; &nbsp; &nbsp; doshfunc(name, sigfn, args, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; doshfunc((Shfunc)sigfn, args, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;freelinklist(args, (FreeFunc) NULL);<br>
 &nbsp; &nbsp; &nbsp; &nbsp;zsfree(name);<br>
@@ -1162,7 +1169,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp;trap_state = TRAP_STATE_PRIMED;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;trapisfunc = isfunc = 0;<br>
<br>
- &nbsp; &nbsp; &nbsp; execode(sigfn, 1, 0);<br>
+ &nbsp; &nbsp; &nbsp; execode((Eprog)sigfn, 1, 0);<br>
 &nbsp; &nbsp; }<br>
 &nbsp; &nbsp; runhookdef(AFTERTRAPHOOK, NULL);<br>
<br>
@@ -1215,12 +1222,12 @@<br>
&nbsp;void<br>
&nbsp;dotrap(int sig)<br>
&nbsp;{<br>
- &nbsp; &nbsp;Eprog funcprog;<br>
+ &nbsp; &nbsp;void *funcprog;<br>
<br>
 &nbsp; &nbsp; if (sigtrapped[sig] &amp; ZSIG_FUNC) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp;HashNode hn = gettrapnode(sig, 0);<br>
 &nbsp; &nbsp; &nbsp; &nbsp;if (hn)<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; funcprog = ((Shfunc)hn)-&gt;funcdef;<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; funcprog = hn;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;else {<br>
&nbsp;#ifdef DEBUG<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dputs(&quot;BUG: running function trap which has escaped.&quot;);<br>
@@ -1230,7 +1237,11 @@<br>
 &nbsp; &nbsp; } else<br>
 &nbsp; &nbsp; &nbsp; &nbsp;funcprog = siglists[sig];<br>
<br>
- &nbsp; &nbsp;/* Copied from dotrapargs(). */<br>
+ &nbsp; &nbsp;/*<br>
+ &nbsp; &nbsp; * Copied from dotrapargs().<br>
+ &nbsp; &nbsp; * (In fact, the gain from duplicating this appears to be virtually<br>
+ &nbsp; &nbsp; * zero. &nbsp;Not sure why it&#39;s here.)<br>
+ &nbsp; &nbsp; */<br>
 &nbsp; &nbsp; if ((sigtrapped[sig] &amp; ZSIG_IGNORED) || !funcprog || errflag)<br>
 &nbsp; &nbsp; &nbsp; &nbsp;return;<br>
<br>
Index: Src/utils.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/utils.c,v<br>
retrieving revision 1.199<br>
diff -u -r1.199 utils.c<br>
--- Src/utils.c 11 Aug 2008 19:22:54 -0000 &nbsp; &nbsp; &nbsp;1.199<br>
+++ Src/utils.c 16 Sep 2008 14:41:11 -0000<br>
@@ -35,6 +35,8 @@<br>
&nbsp;/**/<br>
&nbsp;mod_export char *scriptname; &nbsp; &nbsp; /* is sometimes a function name */<br>
<br>
+/* filename of script or other file containing code source e.g. autoload */<br>
+<br>
&nbsp;/**/<br>
&nbsp;mod_export char *scriptfilename;<br>
<br>
@@ -1134,7 +1136,7 @@<br>
&nbsp;mod_export int<br>
&nbsp;callhookfunc(char *name, LinkList lnklst, int arrayp, int *retval)<br>
&nbsp;{<br>
- &nbsp; &nbsp;Eprog prog;<br>
+ &nbsp; &nbsp;Shfunc shfunc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;/*<br>
 &nbsp; &nbsp; &nbsp; &nbsp; * Save stopmsg, since user doesn&#39;t get a chance to respond<br>
 &nbsp; &nbsp; &nbsp; &nbsp; * to a list of jobs generated in a hook.<br>
@@ -1143,8 +1145,8 @@<br>
<br>
 &nbsp; &nbsp; sfcontext = SFC_HOOK;<br>
<br>
- &nbsp; &nbsp;if ((prog = getshfunc(name)) != &amp;dummy_eprog) {<br>
- &nbsp; &nbsp; &nbsp; ret = doshfunc(name, prog, lnklst, 0, 1);<br>
+ &nbsp; &nbsp;if ((shfunc = getshfunc(name))) {<br>
+ &nbsp; &nbsp; &nbsp; ret = doshfunc(shfunc, lnklst, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp;stat = 0;<br>
 &nbsp; &nbsp; }<br>
<br>
@@ -1159,8 +1161,8 @@<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp;if ((arrptr = getaparam(arrnam))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for (; *arrptr; arrptr++) {<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((prog = getshfunc(*arrptr)) != &amp;dummy_eprog) {<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int newret = doshfunc(arrnam, prog, lnklst, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ((shfunc = getshfunc(*arrptr))) {<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int newret = doshfunc(shfunc, lnklst, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (!ret)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret = newret;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;stat = 0;<br>
@@ -2893,15 +2895,10 @@<br>
&nbsp;/* Get the definition of a shell function */<br>
<br>
&nbsp;/**/<br>
-mod_export Eprog<br>
+mod_export Shfunc<br>
&nbsp;getshfunc(char *nam)<br>
&nbsp;{<br>
- &nbsp; &nbsp;Shfunc shf;<br>
-<br>
- &nbsp; &nbsp;if (!(shf = (Shfunc) shfunctab-&gt;getnode(shfunctab, nam)))<br>
- &nbsp; &nbsp; &nbsp; return &amp;dummy_eprog;<br>
-<br>
- &nbsp; &nbsp;return shf-&gt;funcdef;<br>
+ &nbsp; &nbsp;return (Shfunc) shfunctab-&gt;getnode(shfunctab, nam);<br>
&nbsp;}<br>
<br>
&nbsp;/**/<br>
Index: Src/Modules/zftp.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/Modules/zftp.c,v<br>
retrieving revision 1.48<br>
diff -u -r1.48 zftp.c<br>
--- Src/Modules/zftp.c &nbsp;4 Sep 2008 22:23:52 -0000 &nbsp; &nbsp; &nbsp; 1.48<br>
+++ Src/Modules/zftp.c &nbsp;16 Sep 2008 14:41:11 -0000<br>
@@ -1469,9 +1469,9 @@<br>
 &nbsp; &nbsp; char lsbuf[ZF_BUFSIZE], *ascbuf = NULL, *optr;<br>
 &nbsp; &nbsp; off_t sofar = 0, last_sofar = 0;<br>
 &nbsp; &nbsp; readwrite_t read_ptr = zfread, write_ptr = zfwrite;<br>
- &nbsp; &nbsp;Eprog prog;<br>
+ &nbsp; &nbsp;Shfunc shfunc;<br>
<br>
- &nbsp; &nbsp;if (progress &amp;&amp; (prog = getshfunc(&quot;zftp_progress&quot;)) != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp;if (progress &amp;&amp; (shfunc = getshfunc(&quot;zftp_progress&quot;))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp;/*<br>
 &nbsp; &nbsp; &nbsp; &nbsp; * progress to set up: &nbsp;ZFTP_COUNT is zero.<br>
 &nbsp; &nbsp; &nbsp; &nbsp; * We do this here in case we needed to wait for a RETR<br>
@@ -1480,7 +1480,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp;int osc = sfcontext;<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_HOOK;<br>
- &nbsp; &nbsp; &nbsp; doshfunc(&quot;zftp_progress&quot;, prog, NULL, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; doshfunc(shfunc, NULL, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;/* Now add in the bit of the file we&#39;ve got/sent already */<br>
 &nbsp; &nbsp; &nbsp; &nbsp;sofar = last_sofar = startat;<br>
@@ -1608,12 +1608,12 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp;} else<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;if (!ret &amp;&amp; sofar != last_sofar &amp;&amp; progress &amp;&amp;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (prog = getshfunc(&quot;zftp_progress&quot;)) != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (shfunc = getshfunc(&quot;zftp_progress&quot;))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int osc = sfcontext;<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;zfsetparam(&quot;ZFTP_COUNT&quot;, &amp;sofar, ZFPM_READONLY|ZFPM_INTEGER);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_HOOK;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(&quot;zftp_progress&quot;, prog, NULL, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(shfunc, NULL, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;last_sofar = sofar;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;}<br>
@@ -2364,7 +2364,7 @@<br>
&nbsp;{<br>
 &nbsp; &nbsp; char *ptr, *eptr;<br>
 &nbsp; &nbsp; int endc;<br>
- &nbsp; &nbsp;Eprog prog;<br>
+ &nbsp; &nbsp;Shfunc shfunc;<br>
<br>
 &nbsp; &nbsp; if (zfprefs &amp; ZFPF_DUMB)<br>
 &nbsp; &nbsp; &nbsp; &nbsp;return 1;<br>
@@ -2391,11 +2391,11 @@<br>
 &nbsp; &nbsp; &nbsp;* front end. &nbsp;By putting it here, and in close when ZFTP_PWD is unset,<br>
 &nbsp; &nbsp; &nbsp;* we at least cover the bases.<br>
 &nbsp; &nbsp; &nbsp;*/<br>
- &nbsp; &nbsp;if ((prog = getshfunc(&quot;zftp_chpwd&quot;)) != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp;if ((shfunc = getshfunc(&quot;zftp_chpwd&quot;))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp;int osc = sfcontext;<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_HOOK;<br>
- &nbsp; &nbsp; &nbsp; doshfunc(&quot;zftp_chpwd&quot;, prog, NULL, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; doshfunc(shfunc, NULL, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; }<br>
 &nbsp; &nbsp; return 0;<br>
@@ -2549,7 +2549,7 @@<br>
&nbsp;{<br>
 &nbsp; &nbsp; int ret = 0, recv = (flags &amp; ZFTP_RECV), getsize = 0, progress = 1;<br>
 &nbsp; &nbsp; char *cmd = recv ? &quot;RETR &quot; : (flags &amp; ZFTP_APPE) ? &quot;APPE &quot; : &quot;STOR &quot;;<br>
- &nbsp; &nbsp;Eprog prog;<br>
+ &nbsp; &nbsp;Shfunc shfunc;<br>
<br>
 &nbsp; &nbsp; /*<br>
 &nbsp; &nbsp; &nbsp;* At this point I&#39;d like to set progress to 0 if we&#39;re<br>
@@ -2567,7 +2567,7 @@<br>
 &nbsp; &nbsp; for (; *args; args++) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp;char *ln, *rest = NULL;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;off_t startat = 0;<br>
- &nbsp; &nbsp; &nbsp; if (progress &amp;&amp; (prog = getshfunc(&quot;zftp_progress&quot;)) != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp; &nbsp; if (progress &amp;&amp; (shfunc = getshfunc(&quot;zftp_progress&quot;))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;off_t sz = -1;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/*<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * This calls the SIZE command to get the size for remote<br>
@@ -2608,14 +2608,14 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; * if and only if we called zfsenddata();<br>
 &nbsp; &nbsp; &nbsp; &nbsp; */<br>
 &nbsp; &nbsp; &nbsp; &nbsp;if (progress &amp;&amp; ret != 2 &amp;&amp;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (prog = getshfunc(&quot;zftp_progress&quot;)) != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (shfunc = getshfunc(&quot;zftp_progress&quot;))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* progress to finish: ZFTP_TRANSFER set to GF or PF */<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int osc = sfcontext;<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;zfsetparam(&quot;ZFTP_TRANSFER&quot;, ztrdup(recv ? &quot;GF&quot; : &quot;PF&quot;),<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ZFPM_READONLY);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_HOOK;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(&quot;zftp_progress&quot;, prog, NULL, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(shfunc, NULL, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;}<br>
 &nbsp; &nbsp; &nbsp; &nbsp;if (rest) {<br>
@@ -2715,7 +2715,7 @@<br>
&nbsp;zfclose(int leaveparams)<br>
&nbsp;{<br>
 &nbsp; &nbsp; char **aptr;<br>
- &nbsp; &nbsp;Eprog prog;<br>
+ &nbsp; &nbsp;Shfunc shfunc;<br>
<br>
 &nbsp; &nbsp; if (!zfsess-&gt;control)<br>
 &nbsp; &nbsp; &nbsp; &nbsp;return;<br>
@@ -2766,11 +2766,11 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;zfunsetparam(*aptr);<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp;/* Now ZFTP_PWD is unset. &nbsp;It&#39;s up to zftp_chpwd to notice. */<br>
- &nbsp; &nbsp; &nbsp; if ((prog = getshfunc(&quot;zftp_chpwd&quot;)) != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp; &nbsp; if ((shfunc = getshfunc(&quot;zftp_chpwd&quot;))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int osc = sfcontext;<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_HOOK;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(&quot;zftp_chpwd&quot;, prog, NULL, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(shfunc, NULL, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;}<br>
 &nbsp; &nbsp; }<br>
Index: Src/Zle/compcore.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/Zle/compcore.c,v<br>
retrieving revision 1.96<br>
diff -u -r1.96 compcore.c<br>
--- Src/Zle/compcore.c &nbsp;7 Jul 2008 08:33:28 -0000 &nbsp; &nbsp; &nbsp; 1.96<br>
+++ Src/Zle/compcore.c &nbsp;16 Sep 2008 14:41:12 -0000<br>
@@ -540,13 +540,13 @@<br>
&nbsp;static void<br>
&nbsp;callcompfunc(char *s, char *fn)<br>
&nbsp;{<br>
- &nbsp; &nbsp;Eprog prog;<br>
+ &nbsp; &nbsp;Shfunc shfunc;<br>
 &nbsp; &nbsp; int lv = lastval;<br>
 &nbsp; &nbsp; char buf[20];<br>
<br>
 &nbsp; &nbsp; METACHECK();<br>
<br>
- &nbsp; &nbsp;if ((prog = getshfunc(fn)) != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp;if ((shfunc = getshfunc(fn))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp;char **p, *tmp;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;int aadd = 0, usea = 1, icf = incompfunc, osc = sfcontext;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;unsigned int rset, kset;<br>
@@ -814,7 +814,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while (*p)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addlinknode(largs, dupstring(*p++));<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(fn, prog, largs, 0, 0);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(shfunc, largs, 0, 0);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;cfret = lastval;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lastval = olv;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;} OLDHEAPS;<br>
Index: Src/Zle/compctl.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/Zle/compctl.c,v<br>
retrieving revision 1.35<br>
diff -u -r1.35 compctl.c<br>
--- Src/Zle/compctl.c &nbsp; 3 Oct 2007 16:18:38 -0000 &nbsp; &nbsp; &nbsp; 1.35<br>
+++ Src/Zle/compctl.c &nbsp; 16 Sep 2008 14:41:12 -0000<br>
@@ -3635,12 +3635,12 @@<br>
 &nbsp; &nbsp; }<br>
 &nbsp; &nbsp; if (cc-&gt;func) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp;/* This handles the compctl -K flag. */<br>
- &nbsp; &nbsp; &nbsp; Eprog prog;<br>
+ &nbsp; &nbsp; &nbsp; Shfunc shfunc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;char **r;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;int lv = lastval;<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp;/* Get the function. */<br>
- &nbsp; &nbsp; &nbsp; if ((prog = getshfunc(cc-&gt;func)) != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp; &nbsp; if ((shfunc = getshfunc(cc-&gt;func))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* We have it, so build a argument list. */<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LinkList args = newlinklist();<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int osc = sfcontext;<br>
@@ -3664,7 +3664,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;incompctlfunc = 1;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_COMPLETE;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* Call the function. */<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(cc-&gt;func, prog, args, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(shfunc, args, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;incompctlfunc = 0;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* And get the result from the reply parameter. */<br>
@@ -3809,12 +3809,12 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp;/* generate the user-defined display list: if anything fails, *<br>
 &nbsp; &nbsp; &nbsp; &nbsp; * we silently allow the normal completion list to be used. &nbsp; */<br>
 &nbsp; &nbsp; &nbsp; &nbsp;char **yaptr = NULL, *uv = NULL;<br>
- &nbsp; &nbsp; &nbsp; Eprog prog;<br>
+ &nbsp; &nbsp; &nbsp; Shfunc shfunc;<br>
<br>
 &nbsp; &nbsp; &nbsp; &nbsp;if (cc-&gt;ylist[0] == &#39;$&#39; || cc-&gt;ylist[0] == &#39;(&#39;) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* from variable */<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;uv = cc-&gt;ylist + (cc-&gt;ylist[0] == &#39;$&#39;);<br>
- &nbsp; &nbsp; &nbsp; } else if ((prog = getshfunc(cc-&gt;ylist)) != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp; &nbsp; } else if ((shfunc = getshfunc(cc-&gt;ylist))) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* from function: &nbsp;pass completions as arg list */<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LinkList args = newlinklist();<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LinkNode ln;<br>
@@ -3839,7 +3839,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (incompfunc != 1)<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;incompctlfunc = 1;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_COMPLETE;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(cc-&gt;ylist, prog, args, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(shfunc, args, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;incompctlfunc = 0;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;uv = &quot;reply&quot;;<br>
Index: Src/Zle/zle_main.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/Zle/zle_main.c,v<br>
retrieving revision 1.115<br>
diff -u -r1.115 zle_main.c<br>
--- Src/Zle/zle_main.c &nbsp;8 Sep 2008 06:24:23 -0000 &nbsp; &nbsp; &nbsp; 1.115<br>
+++ Src/Zle/zle_main.c &nbsp;16 Sep 2008 14:41:12 -0000<br>
@@ -1304,9 +1304,8 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp;r = 1;<br>
 &nbsp; &nbsp; } else {<br>
 &nbsp; &nbsp; &nbsp; &nbsp;Shfunc shf = (Shfunc) shfunctab-&gt;getnode(shfunctab, w-&gt;u.fnnam);<br>
- &nbsp; &nbsp; &nbsp; Eprog prog = (shf ? shf-&gt;funcdef : &amp;dummy_eprog);<br>
<br>
- &nbsp; &nbsp; &nbsp; if(prog == &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp; &nbsp; if (!shf) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/* the shell function doesn&#39;t exist */<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;char *nm = nicedup(w-&gt;u.fnnam, 0);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;char *msg = tricat(&quot;No such shell function `&quot;, nm, &quot;&#39;&quot;);<br>
@@ -1330,7 +1329,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;makezleparams(0);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_WIDGET;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;opts[XTRACE] = 0;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret = doshfunc(w-&gt;u.fnnam, prog, largs, shf-&gt;node.flags, 1);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret = doshfunc(shf, largs, shf-&gt;node.flags, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;opts[XTRACE] = oxt;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;endparamscope();<br>
Index: Src/Zle/zle_misc.c<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Src/Zle/zle_misc.c,v<br>
retrieving revision 1.54<br>
diff -u -r1.54 zle_misc.c<br>
--- Src/Zle/zle_misc.c &nbsp;4 May 2008 18:30:04 -0000 &nbsp; &nbsp; &nbsp; 1.54<br>
+++ Src/Zle/zle_misc.c &nbsp;16 Sep 2008 14:41:12 -0000<br>
@@ -1358,9 +1358,9 @@<br>
&nbsp;iremovesuffix(ZLE_INT_T c, int keep)<br>
&nbsp;{<br>
 &nbsp; &nbsp; if (suffixfunc) {<br>
- &nbsp; &nbsp; &nbsp; Eprog prog = getshfunc(suffixfunc);<br>
+ &nbsp; &nbsp; &nbsp; Shfunc shfunc = getshfunc(suffixfunc);<br>
<br>
- &nbsp; &nbsp; &nbsp; if (prog != &amp;dummy_eprog) {<br>
+ &nbsp; &nbsp; &nbsp; if (shfunc) {<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LinkList args = newlinklist();<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;char buf[20];<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int osc = sfcontext;<br>
@@ -1384,7 +1384,7 @@<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;startparamscope();<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;makezleparams(0);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = SFC_COMPLETE;<br>
- &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(suffixfunc, prog, args, 0, 1);<br>
+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doshfunc(shfunc, args, 0, 1);<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sfcontext = osc;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;endparamscope();<br>
<br>
Index: Test/E02xtrace.ztst<br>
===================================================================<br>
RCS file: /cvsroot/zsh/zsh/Test/E02xtrace.ztst,v<br>
retrieving revision 1.7<br>
diff -u -r1.7 E02xtrace.ztst<br>
--- Test/E02xtrace.ztst 11 Aug 2008 08:40:58 -0000 &nbsp; &nbsp; &nbsp;1.7<br>
+++ Test/E02xtrace.ztst 16 Sep 2008 14:41:12 -0000<br>
@@ -90,3 +90,18 @@<br>
&nbsp;&gt;Tracing: function<br>
&nbsp;?+xtf:1&gt; local regression_test_dummy_variable<br>
&nbsp;?+xtf:2&gt; print &#39;Tracing: function&#39;<br>
+<br>
+ echo &#39;PS4=&quot;+%x:%I&gt; &quot;<br>
+ fn() {<br>
+ &nbsp; print This is fn.<br>
+ }<br>
+ :<br>
+ fn<br>
+ &#39; &gt;fnfile<br>
+ $ZTST_testdir/../Src/zsh -fx ./fnfile<br>
+0:Trace output with sourcefile and line number.<br>
+&gt;This is fn.<br>
+?+./fnfile:1&gt; PS4=&#39;+%x:%I&gt; &#39;<br>
+?+./fnfile:5&gt; :<br>
+?+./fnfile:6&gt; fn<br>
+?+./fnfile:3&gt; print This is fn.<br>
<font color="#888888"><br>
<br>
--<br>
Peter Stephenson &lt;<a href="mailto:pws@csr.com">pws@csr.com</a>&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Software Engineer<br>
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road<br>
Cambridge, CB4 0WZ, UK &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Tel: +44 (0)1223 692070<br>
</font></blockquote></div><br></div>

------=_Part_13897_32854962.1221581845894--

