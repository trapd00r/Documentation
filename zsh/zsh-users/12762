From zsh-users-return-12762-mason-zsh=primenet.com.au@sunsite.dk Fri Apr 04 22:48:08 2008
Return-Path: <zsh-users-return-12762-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23359 invoked from network); 4 Apr 2008 22:48:06 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 4 Apr 2008 22:48:06 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 45160 invoked from network); 4 Apr 2008 22:47:52 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 4 Apr 2008 22:47:52 -0000
Received: (qmail 23484 invoked by alias); 4 Apr 2008 22:47:43 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12762
Received: (qmail 23466 invoked from network); 4 Apr 2008 22:47:42 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 4 Apr 2008 22:47:42 -0000
Received: from mtaout02-winn.ispmail.ntl.com (mtaout02-winn.ispmail.ntl.com [81.103.221.48])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 8D71D82DC37C
	for <zsh-users@sunsite.dk>; Sat,  5 Apr 2008 00:47:37 +0200 (CEST)
Received: from aamtaout01-winn.ispmail.ntl.com ([81.103.221.35])
          by mtaout02-winn.ispmail.ntl.com with ESMTP
          id <20080404225035.IKDD23436.mtaout02-winn.ispmail.ntl.com@aamtaout01-winn.ispmail.ntl.com>
          for <zsh-users@sunsite.dk>; Fri, 4 Apr 2008 23:50:35 +0100
Received: from pws-pc.ntlworld.com ([81.107.40.67])
          by aamtaout01-winn.ispmail.ntl.com with ESMTP
          id <20080404225124.ZHTC219.aamtaout01-winn.ispmail.ntl.com@pws-pc.ntlworld.com>
          for <zsh-users@sunsite.dk>; Fri, 4 Apr 2008 23:51:24 +0100
Received: from pws-pc (pws-pc [127.0.0.1])
	by pws-pc.ntlworld.com (8.14.2/8.14.2) with ESMTP id m34MlQqs023917
	for <zsh-users@sunsite.dk>; Fri, 4 Apr 2008 23:47:26 +0100
Message-Id: <200804042247.m34MlQqs023917@pws-pc.ntlworld.com>
From: Peter Stephenson <p.w.stephenson@ntlworld.com>
To: zsh-users ml <zsh-users@sunsite.dk>
Subject: Re: trying to understand scalar subscripting
In-Reply-To: Message from Sebastian Stark <seb-zsh@biskalar.de>
   of "Fri, 04 Apr 2008 23:03:30 +0200." <56DB95A0-5998-48ED-BAEC-02420B632CB8@biskalar.de>
Date: Fri, 04 Apr 2008 23:47:26 +0100
X-Virus-Scanned: ClamAV 0.91.2/6599/Sat Apr  5 00:11:10 2008 on bifrost
X-Virus-Status: Clean

Sebastian Stark wrote:
> Fist I set aaa to some scalar value and print it:
> 
> 	% aaa="fasdf gaag sdlkfjh dsfsags"
> 	% print -l $aaa
> 	fasdf gaag sdlkfjh dsfsags
> 
> That was expected. Now I expand all elements of the parameters:
> 
> 	% print -l $aaa[*]
> 	fasdf gaag sdlkfjh dsfsags
> 
> Okay, not quite expected. I thought this would print all the  
> characters in aaa in a separate line each. But this still does not  
> confuse me enough. So I try a subscript range:
> 
> 	% print -l $aaa[1,3]
> 	fas
> 
> This was kind of expected.

This is the same function as the previous one, except [*] is like
[1,-1].  Subscripting doesn't imply splitting; it's basically a
substring operation.  You can split into individual characters, as a
special case, with a flag to the whole parameter, ${(s::)aaa}.
${(s::)aaa[1,3]} also works.

> Now I try to use the w and s:: subscript  
> flags. zshparam(1) says they should work with scalars:
> 
> 	% print -l $aaa[(ws:a:)1,3]
> 	fas
> 
> Hm. I thought that would do word splitting because of (w) and also  
> use ,a` as the separator instead of , `.

The key thing to remember is the flags *only* apply to the subscript,
not the parameter as a whole, which is why this notation is different
from the parameter flag notation.

Here, it's using "a" as the separator just to find array index 1.
That's at the start of the string, so you get the same as if you hadn't
used (ws:a:).  Then the 3 is normal (the flags don't apply to it,
they're applied to each subscript separately).

Suppose you'd picked (let's skip the -l, I've already explained the
parameter itself isn't being split):

% print $aaa[(ws:a:)2,(ws:a:)3]
sdf gaag sdlkfjh dsfs

What you've got here is the parameter from the position where the start
of the second array element would have been (if the scalar was split on
a) to the position where the end of the third array element would have
been.  (The "aa" produces a null element which is ignored, so acts the
same as "a".)

> But what really confuses me  
> is this:
> 
> 	% print -l $aaa[(ws:a:)*]
> 	zsh: bad math expression: operand expected at `*'
> 
> Huh? One could say what I am doing is completely silly, but when I try  
> to do this with a real array I get the same error message:
> 
> 	% bbb=(fasdf gaag sdlkfjh dsfsags)
> 	% print -l $bbb[(ws:a:)*]
> 	zsh: bad math expression: operand expected at `*'

Again, the operation (splitting) you're doing is simply for the purpose
of finding the subscript.

For this reason, only a numeric subscript is useful.  The example
$aaa[(ws:a:)*] says something like "split into words on 'a' to find the
subscript and then give me the position you get from subscript... er,
hang on a minute, I've changed my mind, give me the entire parameter".
This naturally confuses it.

Trying to do it on an array doesn't change matters:  the flag operates
only on a scalar, so it will (I think) concatenate the array then do the
same thing, but again only for the purpose of finding the subscript.  (I
haven't actually been moved to check this, the point is it *still*
doesn't do what you originally thought any more than it did before.)

If what you want to do is split the string, then as Mikael said you need
to use the parameter flag ${(s:a:)aaa}.  This now splits into real live
words.  You'll find

print -l ${(s:a:)aaa}

does what you expect.  You've now got a real array expression and the
nested syntax Mikael referred to works on it.

The flags for handling subscripts in this way have a fairly limited use.
I can't offhand think of a reason for using them.  Almost certainly
splitting into a proper array and indexing that is more useful and less
confusing.

-- 
Peter Stephenson <p.w.stephenson@ntlworld.com>
Web page now at http://homepage.ntlworld.com/p.w.stephenson/

