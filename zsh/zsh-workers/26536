From zsh-workers-return-26536-mason-zsh=primenet.com.au@sunsite.dk Sun Feb 08 17:46:55 2009
Return-Path: <zsh-workers-return-26536-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24583 invoked from network); 8 Feb 2009 17:46:34 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 8 Feb 2009 17:46:34 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 21596 invoked from network); 8 Feb 2009 17:46:24 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 8 Feb 2009 17:46:24 -0000
Received: (qmail 24794 invoked by alias); 8 Feb 2009 17:46:14 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 26536
Received: (qmail 24784 invoked from network); 8 Feb 2009 17:46:13 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 8 Feb 2009 17:46:13 -0000
Received: from fg-out-1718.google.com (fg-out-1718.google.com [72.14.220.152])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 9BFD080271F0
	for <zsh-workers@sunsite.dk>; Sun,  8 Feb 2009 18:45:59 +0100 (CET)
Received: by fg-out-1718.google.com with SMTP id l26so854020fgb.37
        for <zsh-workers@sunsite.dk>; Sun, 08 Feb 2009 09:45:59 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type;
        bh=2DrKikS2spnayDzBrV6JXudeH9AwRPoGKFJN6WQ5Rgg=;
        b=Q/xNSSPk8c7RNc4O1DZvWHD9dQ/D74zbg0HfALCo+T6atR0B8iovmKUVvQ+oW9i2MQ
         A4aJu+NEjVlD43uJLNknZRE4RZh/p3Bnsxz5oxwYuvR99tIfQV+4MVpMw365kPn/aWlu
         GevIdwsPkTWaBl3ucrcnjAJI32fy+8GnEZCR8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type;
        b=VyIJFD4LgmWTYuKzCXiTCb8t6w3cnEcEdn1mHBQpTOFF0FnxZ+TVUaIIUtZdpjklQI
         9dLJFGHLBMLSTfoAGTDeYNDkVHemwmtKtKd1n9a25ovdznGZpMev6uRx6H0THOd5kYj6
         Q/vZ7P01jQISsui64AHXKbSX6Y5vUbnU8PZGo=
MIME-Version: 1.0
Received: by 10.86.92.7 with SMTP id p7mr2234050fgb.54.1234115159105; Sun, 08 
	Feb 2009 09:45:59 -0800 (PST)
In-Reply-To: <2d460de70902080734h3b8c6982sb4a070b5a42c3de9@mail.gmail.com>
References: <20090207214557.GA9174@linux.vnet>
	 <2d460de70902080734h3b8c6982sb4a070b5a42c3de9@mail.gmail.com>
Date: Sun, 8 Feb 2009 18:45:58 +0100
Message-ID: <2d460de70902080945h45ea9046p2988186d34c54979@mail.gmail.com>
Subject: Re: [PATCH] Add a pindex for each of the shell options without 
	underscores.
From: Richard Hartmann <richih.mailinglist@gmail.com>
To: zsh-workers@sunsite.dk
Content-Type: multipart/mixed; boundary=000e0cd25578aba2ae04626bd344
X-Virus-Scanned: ClamAV 0.92.1/8965/Sun Feb  8 15:42:44 2009 on bifrost
X-Virus-Status: Clean

--000e0cd25578aba2ae04626bd344
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

While I am in there..

NO_NO_MATCH etc are no problem. Thanks to the clean
design of zsh, I don't even need to handle special cases.

You can argue if this is really needed, but it's not going
to hurt anyone to have it, either.


Richard

>From dc8733e3019f5a5f5666adbc4960dd1849fe5da8 Mon Sep 17 00:00:00 2001
From: Richard Hartmann <richih@net.in.tum.de>
Date: Sun, 8 Feb 2009 18:38:27 +0100
Subject: [PATCH] Even more pindex() entries

pindex(FOO_OPTION)
pindex(NO_FOO_OPTION)
pindex(FOOOPTION)
pindex(NOFOOPTION)
---
 Doc/Zsh/options.yo |  313 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 313 insertions(+), 0 deletions(-)

diff --git a/Doc/Zsh/options.yo b/Doc/Zsh/options.yo
index a888034..3698826 100644
--- a/Doc/Zsh/options.yo
+++ b/Doc/Zsh/options.yo
@@ -55,7 +55,9 @@ are changed from the default.
 subsect(Changing Directories)
 startitem()
 pindex(AUTO_CD)
+pindex(NO_AUTO_CD)
 pindex(AUTOCD)
+pindex(NOAUTOCD)
 cindex(cd, automatic)
 item(tt(AUTO_CD) (tt(-J)))(
 If a command is issued that can't be executed as a normal command,
@@ -63,14 +65,18 @@ and the command is the name of a directory,
perform the tt(cd)
 command to that directory.
 )
 pindex(AUTO_PUSHD)
+pindex(NO_AUTO_PUSHD)
 pindex(AUTOPUSHD)
+pindex(NOAUTOPUSHD)
 cindex(cd, behaving like pushd)
 cindex(pushd, making cd behave like)
 item(tt(AUTO_PUSHD) (tt(-N)))(
 Make tt(cd) push the old directory onto the directory stack.
 )
 pindex(CDABLE_VARS)
+pindex(NO_CDABLE_VARS)
 pindex(CDABLEVARS)
+pindex(NOCDABLEVARS)
 cindex(cd, to parameter)
 item(tt(CDABLE_VARS) (tt(-T)))(
 If the argument to a tt(cd) command (or an implied tt(cd) with the
@@ -79,7 +85,9 @@ slash, try to expand the expression as if it were
preceded by a `tt(~)' (see
 noderef(Filename Expansion)).
 )
 pindex(CHASE_DOTS)
+pindex(NO_CHASE_DOTS)
 pindex(CHASEDOTS)
+pindex(NOCHASEDOTS)
 cindex(cd, with .. in argument)
 item(tt(CHASE_DOTS))(
 When changing to a directory containing a path segment `tt(..)' which
would
@@ -96,7 +104,9 @@ is tt(/foo/bar) and `tt(cd ..)' is used.  Note that
all other symbolic
 links in the path will also be resolved.
 )
 pindex(CHASE_LINKS)
+pindex(NO_CHASE_LINKS)
 pindex(CHASELINKS)
+pindex(NOCHASELINKS)
 cindex(links, symbolic)
 cindex(symbolic links)
 item(tt(CHASE_LINKS) (tt(-w)))(
@@ -106,26 +116,34 @@ will be treated as referring to the physical
parent, even if the preceding
 path segment is a symbolic link.
 )
 pindex(PUSHD_IGNORE_DUPS)
+pindex(NO_PUSHD_IGNORE_DUPS)
 pindex(PUSHDIGNOREDUPS)
+pindex(NOPUSHDIGNOREDUPS)
 cindex(directory stack, ignoring duplicates)
 item(tt(PUSHD_IGNORE_DUPS))(
 Don't push multiple copies of the same directory onto the directory
stack.
 )
 pindex(PUSHD_MINUS)
+pindex(NO_PUSHD_MINUS)
 pindex(PUSHDMINUS)
+pindex(NOPUSHDMINUS)
 cindex(directory stack, controlling syntax)
 item(tt(PUSHD_MINUS))(
 Exchanges the meanings of `tt(PLUS())' and `tt(-)'
 when used with a number to specify a directory in the stack.
 )
 pindex(PUSHD_SILENT)
+pindex(NO_PUSHD_SILENT)
 pindex(PUSHDSILENT)
+pindex(NOPUSHDSILENT)
 cindex(directory stack, silencing)
 item(tt(PUSHD_SILENT) (tt(-E)))(
 Do not print the directory stack after tt(pushd) or tt(popd).
 )
 pindex(PUSHD_TO_HOME)
+pindex(NO_PUSHD_TO_HOME)
 pindex(PUSHDTOHOME)
+pindex(NOPUSHDTOHOME)
 cindex(pushd, to home)
 item(tt(PUSHD_TO_HOME) (tt(-D)))(
 Have tt(pushd) with no arguments act like `tt(pushd $HOME)'.
@@ -135,14 +153,18 @@ enditem()
 subsect(Completion)
 startitem()
 pindex(ALWAYS_LAST_PROMPT)
+pindex(NO_ALWAYS_LAST_PROMPT)
 pindex(ALWAYSLASTPROMPT)
+pindex(NOALWAYSLASTPROMPT)
 item(tt(ALWAYS_LAST_PROMPT) <D>)(
 If unset, key functions that list completions try to return to the
last
 prompt if given a numeric argument. If set these functions try to
 return to the last prompt if given em(no) numeric argument.
 )
 pindex(ALWAYS_TO_END)
+pindex(NO_ALWAYS_TO_END)
 pindex(ALWAYSTOEND)
+pindex(NOALWAYSTOEND)
 item(tt(ALWAYS_TO_END))(
 If a completion is performed with the cursor within a word, and a
 full completion is inserted, the cursor is moved to the end of the
@@ -150,13 +172,17 @@ word.  That is, the cursor is moved to the end
of the word if either
 a single match is inserted or menu completion is performed.
 )
 pindex(AUTO_LIST)
+pindex(NO_AUTO_LIST)
 pindex(AUTOLIST)
+pindex(NOAUTOLIST)
 cindex(completion, listing choices)
 item(tt(AUTO_LIST) (tt(-9)) <D>)(
 Automatically list choices on an ambiguous completion.
 )
 pindex(AUTO_MENU)
+pindex(NO_AUTO_MENU)
 pindex(AUTOMENU)
+pindex(NOAUTOMENU)
 cindex(completion, menu)
 item(tt(AUTO_MENU) <D>)(
 Automatically use menu completion after the second consecutive
request for
@@ -164,7 +190,9 @@ completion, for example by pressing the tab key
repeatedly. This option
 is overridden by tt(MENU_COMPLETE).
 )
 pindex(AUTO_NAME_DIRS)
+pindex(NO_AUTO_NAME_DIRS)
 pindex(AUTONAMEDIRS)
+pindex(NOAUTONAMEDIRS)
 cindex(directories, named)
 item(tt(AUTO_NAME_DIRS))(
 Any parameter that is set to the absolute name of a directory
@@ -175,7 +203,9 @@ is performed on a word starting with `tt(~)'.
 (Otherwise, the parameter must be used in the form `tt(~)var(param)'
first.)
 )
 pindex(AUTO_PARAM_KEYS)
+pindex(NO_AUTO_PARAM_KEYS)
 pindex(AUTOPARAMKEYS)
+pindex(NOAUTOPARAMKEYS)
 item(tt(AUTO_PARAM_KEYS) <D>)(
 If a parameter name was completed and a following character
 (normally a space) automatically
@@ -187,13 +217,17 @@ Completion in a brace expansion is affected
similarly: the added character
 is a `tt(,)', which will be removed if `tt(})' is typed next.
 )
 pindex(AUTO_PARAM_SLASH)
+pindex(NO_AUTO_PARAM_SLASH)
 pindex(AUTOPARAMSLASH)
+pindex(NOAUTOPARAMSLASH)
 item(tt(AUTO_PARAM_SLASH) <D>)(
 If a parameter is completed whose content is the name of a directory,
 then add a trailing slash instead of a space.
 )
 pindex(AUTO_REMOVE_SLASH)
+pindex(NO_AUTO_REMOVE_SLASH)
 pindex(AUTOREMOVESLASH)
+pindex(NOAUTOREMOVESLASH)
 cindex(slash, removing trailing)
 item(tt(AUTO_REMOVE_SLASH) <D>)(
 When the last character resulting from a completion is a slash and
the next
@@ -201,7 +235,9 @@ character typed is a word delimiter, a slash, or a
character that ends
 a command (such as a semicolon or an ampersand), remove the slash.
 )
 pindex(BASH_AUTO_LIST)
+pindex(NO_BASH_AUTO_LIST)
 pindex(BASHAUTOLIST)
+pindex(NOBASHAUTOLIST)
 cindex(completion, listing choices, bash style)
 item(tt(BASH_AUTO_LIST))(
 On an ambiguous completion, automatically list choices when the
@@ -213,7 +249,9 @@ tt(MENU_COMPLETE), since repeated completion calls
immediately cycle
 through the list in that case.
 )
 pindex(COMPLETE_ALIASES)
+pindex(NO_COMPLETE_ALIASES)
 pindex(COMPLETEALIASES)
+pindex(NOCOMPLETEALIASES)
 cindex(aliases, completion of)
 item(tt(COMPLETE_ALIASES))(
 Prevents aliases on the command line from being internally
substituted
@@ -221,13 +259,17 @@ before completion is attempted.  The effect is
to make the alias a
 distinct command for completion purposes.
 )
 pindex(COMPLETE_IN_WORD)
+pindex(NO_COMPLETE_IN_WORD)
 pindex(COMPLETEINWORD)
+pindex(NOCOMPLETEINWORD)
 item(tt(COMPLETE_IN_WORD))(
 If unset, the cursor is set to the end of the word if completion is
 started. Otherwise it stays there and completion is done from both
ends.
 )
 pindex(GLOB_COMPLETE)
+pindex(NO_GLOB_COMPLETE)
 pindex(GLOBCOMPLETE)
+pindex(NOGLOBCOMPLETE)
 item(tt(GLOB_COMPLETE))(
 When the current word has a glob pattern, do not insert all the words
 resulting from the expansion but generate matches as for completion
and
@@ -243,13 +285,17 @@ only applies when the current word contains a
pattern; simply turning
 on the tt(GLOB_COMPLETE) option does not have this effect.
 )
 pindex(HASH_LIST_ALL)
+pindex(NO_HASH_LIST_ALL)
 pindex(HASHLISTALL)
+pindex(NOHASHLISTALL)
 item(tt(HASH_LIST_ALL) <D>)(
 Whenever a command completion is attempted, make sure the entire
 command path is hashed first.  This makes the first completion
slower.
 )
 pindex(LIST_AMBIGUOUS)
+pindex(NO_LIST_AMBIGUOUS)
 pindex(LISTAMBIGUOUS)
+pindex(NOLISTAMBIGUOUS)
 cindex(ambiguous completion)
 cindex(completion, ambiguous)
 item(tt(LIST_AMBIGUOUS) <D>)(
@@ -261,7 +307,9 @@ inserted.  In the case of tt(BASH_AUTO_LIST), this
means that the list
 will be delayed to the third call of the function.
 )
 pindex(LIST_BEEP)
+pindex(NO_LIST_BEEP)
 pindex(LISTBEEP)
+pindex(NOLISTBEEP)
 cindex(beep, ambiguous completion)
 cindex(completion, beep on ambiguous)
 item(tt(LIST_BEEP) <D>)(
@@ -271,14 +319,18 @@ causes the shell to beep if the option tt(BEEP)
is also set; this may
 be modified if completion is called from a user-defined widget.
 )
 pindex(LIST_PACKED)
+pindex(NO_LIST_PACKED)
 pindex(LISTPACKED)
+pindex(NOLISTPACKED)
 cindex(completion, listing)
 item(tt(LIST_PACKED))(
 Try to make the completion list smaller (occupying less lines) by
 printing the matches in columns with different widths.
 )
 pindex(LIST_ROWS_FIRST)
+pindex(NO_LIST_ROWS_FIRST)
 pindex(LISTROWSFIRST)
+pindex(NOLISTROWSFIRST)
 cindex(completion, listing order)
 item(tt(LIST_ROWS_FIRST))(
 Lay out the matches in completion lists sorted horizontally, that is,
@@ -286,7 +338,9 @@ the second match is to the right of the first one,
not under it as
 usual.
 )
 pindex(LIST_TYPES)
+pindex(NO_LIST_TYPES)
 pindex(LISTTYPES)
+pindex(NOLISTTYPES)
 cindex(marking file types)
 cindex(files, marking type of)
 item(tt(LIST_TYPES) (tt(-X)) <D>)(
@@ -294,7 +348,9 @@ When listing files that are possible completions,
show the
 type of each file with a trailing identifying mark.
 )
 pindex(MENU_COMPLETE)
+pindex(NO_MENU_COMPLETE)
 pindex(MENUCOMPLETE)
+pindex(NOMENUCOMPLETE)
 cindex(completion, menu)
 item(tt(MENU_COMPLETE) (tt(-Y)))(
 On an ambiguous completion, instead of listing possibilities or
beeping,
@@ -305,7 +361,9 @@ tt(reverse-menu-complete) may be used to loop
through the list
 in the other direction. This option overrides tt(AUTO_MENU).
 )
 pindex(REC_EXACT)
+pindex(NO_REC_EXACT)
 pindex(RECEXACT)
+pindex(NORECEXACT)
 cindex(completion, exact matches)
 item(tt(REC_EXACT) (tt(-S)))(
 In completion, recognize exact matches even
@@ -316,7 +374,9 @@ enditem()
 subsect(Expansion and Globbing)
 startitem()
 pindex(BAD_PATTERN)
+pindex(NO_BAD_PATTERN)
 pindex(BADPATTERN)
+pindex(NOBADPATTERN)
 cindex(globbing, bad pattern)
 cindex(filename generation, bad pattern)
 item(tt(BAD_PATTERN) (tt(PLUS()2)) <C> <Z>)(
@@ -324,7 +384,9 @@ If a pattern for filename generation is badly
formed, print an error message.
 (If this option is unset, the pattern will be left unchanged.)
 )
 pindex(BARE_GLOB_QUAL)
+pindex(NO_BARE_GLOB_QUAL)
 pindex(BAREGLOBQUAL)
+pindex(NOBAREGLOBQUAL)
 cindex(globbing qualifiers, enable)
 cindex(enable globbing qualifiers)
 item(tt(BARE_GLOB_QUAL) <Z>)(
@@ -333,7 +395,9 @@ list, if it contains no `tt(|)', `tt(LPAR())' or
(if special) `tt(~)'
 characters.  See noderef(Filename Generation).
 )
 pindex(BRACE_CCL)
+pindex(NO_BRACE_CCL)
 pindex(BRACECCL)
+pindex(NOBRACECCL)
 cindex(brace expansion, extending)
 cindex(expansion, brace, extending)
 item(tt(BRACE_CCL))(
@@ -342,7 +406,9 @@ expansion to a lexically ordered list of all the
characters.  See
 noderef(Brace Expansion).
 )
 pindex(CASE_GLOB)
+pindex(NO_CASE_GLOB)
 pindex(CASEGLOB)
+pindex(NOCASEGLOB)
 cindex(case-insensitive globbing, option)
 item(tt(CASE_GLOB) <D>)(
 Make globbing (filename generation) sensitive to case.  Note that
other
@@ -353,7 +419,9 @@ can match the directory tt(CVS) owing to the
presence of the globbing flag
 (unless the option tt(BARE_GLOB_QUAL) is unset).
 )
 pindex(CASE_MATCH)
+pindex(NO_CASE_MATCH)
 pindex(CASEMATCH)
+pindex(NOCASEMATCH)
 cindex(case-insensitive regular expression matches, option)
 cindex(regular expressions, case-insensitive matching, option)
 item(tt(CASE_MATCH) <D>)(
@@ -361,7 +429,9 @@ Make regular expressions using the tt(zsh/regex)
module (including
 matches with tt(=~)) sensitive to case.
 )
 pindex(CSH_NULL_GLOB)
+pindex(NO_CSH_NULL_GLOB)
 pindex(CSHNULLGLOB)
+pindex(NOCSHNULLGLOB)
 cindex(csh, null globbing style)
 cindex(null globbing style, csh)
 cindex(globbing, null, style, csh)
@@ -373,13 +443,16 @@ in a command have no matches.
 Overrides tt(NOMATCH).
 )
 pindex(EQUALS)
+pindex(NO_EQUALS)
 cindex(filename expansion, =)
 item(tt(EQUALS) <Z>)(
 Perform tt(=) filename expansion.
 (See noderef(Filename Expansion).)
 )
 pindex(EXTENDED_GLOB)
+pindex(NO_EXTENDED_GLOB)
 pindex(EXTENDEDGLOB)
+pindex(NOEXTENDEDGLOB)
 cindex(globbing, extended)
 item(tt(EXTENDED_GLOB))(
 Treat the `tt(#)', `tt(~)' and `tt(^)' characters as part of patterns
@@ -387,6 +460,7 @@ for filename generation, etc.  (An initial
unquoted `tt(~)'
 always produces named directory expansion.)
 )
 pindex(GLOB)
+pindex(NO_GLOB)
 cindex(globbing, enabling)
 cindex(enabling globbing)
 item(tt(GLOB) (tt(PLUS()F), ksh: tt(PLUS()f)) <D>)(
@@ -394,7 +468,9 @@ Perform filename generation (globbing).
 (See noderef(Filename Generation).)
 )
 pindex(GLOB_ASSIGN)
+pindex(NO_GLOB_ASSIGN)
 pindex(GLOBASSIGN)
+pindex(NOGLOBASSIGN)
 item(tt(GLOB_ASSIGN) <C>)(
 If this option is set, filename generation (globbing) is
 performed on the right hand side of scalar parameter assignments of
@@ -408,13 +484,17 @@ with this option set, it is not possible to
predict whether the result
 will be an array or a scalar.
 )
 pindex(GLOB_DOTS)
+pindex(NO_GLOB_DOTS)
 pindex(GLOBDOTS)
+pindex(NOGLOBDOTS)
 cindex(globbing, of . files)
 item(tt(GLOB_DOTS) (tt(-4)))(
 Do not require a leading `tt(.)' in a filename to be matched
explicitly.
 )
 pindex(GLOB_SUBST)
+pindex(NO_GLOB_SUBST)
 pindex(GLOBSUBST)
+pindex(NOGLOBSUBST)
 item(tt(GLOB_SUBST) <C> <K> <S>)(
 Treat any characters resulting from parameter expansion as being
 eligible for file expansion and filename generation, and any
@@ -423,7 +503,9 @@ filename generation.  Braces (and commas in
between) do not become eligible
 for expansion.
 )
 pindex(HIST_SUBST_PATTERN)
+pindex(NO_HIST_SUBST_PATTERN)
 pindex(HISTSUBSTPATTERN)
+pindex(NOHISTSUBSTPATTERN)
 item(tt(HIST_SUBST_PATTERN))(
 Substitutions using the tt(:s) and tt(:&) history modifiers are
performed
 with pattern matching instead of string matching.  This occurs
wherever
@@ -433,7 +515,9 @@ ifzman(the section Modifiers in zmanref(zshexp))\
 ifnzman(noderef(Modifiers)).
 )
 pindex(IGNORE_BRACES)
+pindex(NO_IGNORE_BRACES)
 pindex(IGNOREBRACES)
+pindex(NOIGNOREBRACES)
 cindex(disabling brace expansion)
 cindex(brace expansion, disabling)
 cindex(expansion, brace, disabling)
@@ -441,14 +525,18 @@ item(tt(IGNORE_BRACES) (tt(-I)) <S>)(
 Do not perform brace expansion.
 )
 pindex(KSH_GLOB)
+pindex(NO_KSH_GLOB)
 pindex(KSHGLOB)
+pindex(NOKSHGLOB)
 item(tt(KSH_GLOB) <K>)(
 In pattern matching, the interpretation of parentheses is affected by
 a preceding `tt(@)', `tt(*)', `tt(+)', `tt(?)' or `tt(!)'.
 See noderef(Filename Generation).
 )
 pindex(MAGIC_EQUAL_SUBST)
+pindex(NO_MAGIC_EQUAL_SUBST)
 pindex(MAGICEQUALSUBST)
+pindex(NOMAGICEQUALSUBST)
 item(tt(MAGIC_EQUAL_SUBST))(
 All unquoted arguments of the form
`var(anything)tt(=)var(expression)'
 appearing after the command name have filename expansion (that is,
@@ -464,7 +552,9 @@ words, if both options are in effect, arguments
looking like
 assignments will not undergo word splitting.
 )
 pindex(MARK_DIRS)
+pindex(NO_MARK_DIRS)
 pindex(MARKDIRS)
+pindex(NOMARKDIRS)
 cindex(directories, marking)
 cindex(marking directories)
 item(tt(MARK_DIRS) (tt(-8), ksh: tt(-X)))(
@@ -472,6 +562,7 @@ Append a trailing `tt(/)' to all directory
 names resulting from filename generation (globbing).
 )
 pindex(MULTIBYTE)
+pindex(NO_MULTIBYTE)
 cindex(characters, multibyte, in expansion and globbing)
 cindex(multibyte characters, in expansion and globbing)
 item(tt(MULTIBYTE) <C> <K> <Z>)(
@@ -500,6 +591,7 @@ the character set displayed by the terminal
emulator is independent of
 shell settings.
 )
 pindex(NOMATCH)
+pindex(NO_NOMATCH)
 cindex(globbing, no matches)
 item(tt(NOMATCH) (tt(PLUS()3)) <C> <Z>)(
 If a pattern for filename generation has no matches,
@@ -509,7 +601,9 @@ This also applies to file expansion
 of an initial `tt(~)' or `tt(=)'.
 )
 pindex(NULL_GLOB)
+pindex(NO_NULL_GLOB)
 pindex(NULLGLOB)
+pindex(NONULLGLOB)
 cindex(globbing, no matches)
 item(tt(NULL_GLOB) (tt(-G)))(
 If a pattern for filename generation has no matches,
@@ -517,14 +611,18 @@ delete the pattern from the argument list
instead
 of reporting an error.  Overrides tt(NOMATCH).
 )
 pindex(NUMERIC_GLOB_SORT)
+pindex(NO_NUMERIC_GLOB_SORT)
 pindex(NUMERICGLOBSORT)
+pindex(NONUMERICGLOBSORT)
 cindex(globbing, sorting numerically)
 item(tt(NUMERIC_GLOB_SORT))(
 If numeric filenames are matched by a filename generation pattern,
 sort the filenames numerically rather than lexicographically.
 )
 pindex(RC_EXPAND_PARAM)
+pindex(NO_RC_EXPAND_PARAM)
 pindex(RCEXPANDPARAM)
+pindex(NORCEXPANDPARAM)
 cindex(rc, parameter expansion style)
 cindex(parameter expansion style, rc)
 item(tt(RC_EXPAND_PARAM) (tt(-P)))(
@@ -536,7 +634,9 @@ var(xx) is set to tt(LPAR())var(a b c)tt(RPAR()),
are substituted with
 all arguments to be removed.
 )
 pindex(REMATCH_PCRE)
+pindex(NO_REMATCH_PCRE)
 pindex(REMATCHPCRE)
+pindex(NOREMATCHPCRE)
 cindex(regexp, PCRE)
 cindex(PCRE, regexp)
 item(tt(REMATCH_PCRE) <Z>)(
@@ -546,7 +646,9 @@ If not set, regular expressions will use the
extended regexp syntax
 provided by the system libraries.
 )
 pindex(SH_GLOB)
+pindex(NO_SH_GLOB)
 pindex(SHGLOB)
+pindex(NOSHGLOB)
 cindex(sh, globbing style)
 cindex(globbing style, sh)
 item(tt(SH_GLOB) <K> <S>)(
@@ -557,6 +659,7 @@ the shell accepts patterns.  This option is set by
default if zsh is
 invoked as tt(sh) or tt(ksh).
 )
 pindex(UNSET)
+pindex(NO_UNSET)
 cindex(parameters, substituting unset)
 cindex(unset parameters, substituting)
 item(tt(UNSET) (tt(PLUS()u), ksh: tt(PLUS()u)) <K> <S> <Z>)(
@@ -564,7 +667,9 @@ Treat unset parameters as if they were empty when
substituting.
 Otherwise they are treated as an error.
 )
 pindex(WARN_CREATE_GLOBAL)
+pindex(NO_WARN_CREATE_GLOBAL)
 pindex(WARNCREATEGLOBAL)
+pindex(NOWARNCREATEGLOBAL)
 cindex(parameters, warning when created globally)
 item(tt(WARN_CREATE_GLOBAL))(
 Print a warning message when a global parameter is created in a
function
@@ -579,7 +684,9 @@ enditem()
 subsect(History)
 startitem()
 pindex(APPEND_HISTORY)
+pindex(NO_APPEND_HISTORY)
 pindex(APPENDHISTORY)
+pindex(NOAPPENDHISTORY)
 cindex(history, appending to a file)
 item(tt(APPEND_HISTORY) <D>)(
 If this is set, zsh sessions will append their history list to
@@ -591,7 +698,9 @@ number of lines grows 20% beyond the value
specified by
 tt($SAVEHIST) (see also the HIST_SAVE_BY_COPY option).
 )
 pindex(BANG_HIST)
+pindex(NO_BANG_HIST)
 pindex(BANGHIST)
+pindex(NOBANGHIST)
 cindex(history, enable substitution)
 cindex(enable history substitution)
 item(tt(BANG_HIST) (tt(PLUS()K)) <C> <Z>)(
@@ -599,7 +708,9 @@ Perform textual history expansion, bf(csh)-style,
 treating the character `tt(!)' specially.
 )
 pindex(EXTENDED_HISTORY)
+pindex(NO_EXTENDED_HISTORY)
 pindex(EXTENDEDHISTORY)
+pindex(NOEXTENDEDHISTORY)
 cindex(history, timestamping)
 item(tt(EXTENDED_HISTORY) <C>)(
 Save each command's beginning timestamp (in seconds since the epoch)
@@ -609,13 +720,17 @@ this prefixed data is:
 `tt(:)var(<beginning time>)tt(:)var(<elapsed
seconds>)tt(:)var(<command>)'.
 )
 pindex(HIST_ALLOW_CLOBBER)
+pindex(NO_HIST_ALLOW_CLOBBER)
 pindex(HISTALLOWCLOBBER)
+pindex(NOHISTALLOWCLOBBER)
 item(tt(HIST_ALLOW_CLOBBER))(
 Add `tt(|)' to output redirections in the history.  This allows
history
 references to clobber files even when tt(CLOBBER) is unset.
 )
 pindex(HIST_BEEP)
+pindex(NO_HIST_BEEP)
 pindex(HISTBEEP)
+pindex(NOHISTBEEP)
 cindex(history beeping)
 cindex(beep, history)
 item(tt(HIST_BEEP) <D>)(
@@ -623,7 +738,9 @@ Beep when an attempt is made to access a history
entry which
 isn't there.
 )
 pindex(HIST_EXPIRE_DUPS_FIRST)
+pindex(NO_HIST_EXPIRE_DUPS_FIRST)
 pindex(HISTEXPIREDUPSFIRST)
+pindex(NOHISTEXPIREDUPSFIRST)
 cindex(history, expiring duplicates)
 item(tt(HIST_EXPIRE_DUPS_FIRST))(
 If the internal history needs to be trimmed to add the current
command line,
@@ -635,7 +752,9 @@ events, otherwise this option will behave just
like
 tt(HIST_IGNORE_ALL_DUPS) once the history fills up with unique
events.
 )
 pindex(HIST_FCNTL_LOCK)
+pindex(NO_HIST_FCNTL_LOCK)
 pindex(HISTFCNTLLOCK)
+pindex(NOHISTFCNTLLOCK)
 item(tt(HIST_FCNTL_LOCK))(
 When writing out the history file, by default zsh uses ad-hoc file
locking
 to avoid known problems with locking on some operating systems.  With
this
@@ -645,7 +764,9 @@ provide better performance, in particular avoiding
history corruption when
 files are stored on NFS.
 )
 pindex(HIST_FIND_NO_DUPS)
+pindex(NO_HIST_FIND_NO_DUPS)
 pindex(HISTFINDNODUPS)
+pindex(NOHISTFINDNODUPS)
 cindex(history, ignoring duplicates in search)
 item(tt(HIST_FIND_NO_DUPS))(
 When searching for history entries in the line editor, do not display
@@ -653,7 +774,9 @@ duplicates of a line previously found, even if the
duplicates are not
 contiguous.
 )
 pindex(HIST_IGNORE_ALL_DUPS)
+pindex(NO_HIST_IGNORE_ALL_DUPS)
 pindex(HISTIGNOREALLDUPS)
+pindex(NOHISTIGNOREALLDUPS)
 cindex(history, ignoring all duplicates)
 item(tt(HIST_IGNORE_ALL_DUPS))(
 If a new command line being added to the history list duplicates an
@@ -661,14 +784,18 @@ older one, the older command is removed from the
list (even if it is
 not the previous event).
 )
 pindex(HIST_IGNORE_DUPS)
+pindex(NO_HIST_IGNORE_DUPS)
 pindex(HISTIGNOREDUPS)
+pindex(NOHISTIGNOREDUPS)
 cindex(history, ignoring duplicates)
 item(tt(HIST_IGNORE_DUPS) (tt(-h)))(
 Do not enter command lines into the history list
 if they are duplicates of the previous event.
 )
 pindex(HIST_IGNORE_SPACE)
+pindex(NO_HIST_IGNORE_SPACE)
 pindex(HISTIGNORESPACE)
+pindex(NOHISTIGNORESPACE)
 cindex(history, ignoring spaces)
 item(tt(HIST_IGNORE_SPACE) (tt(-g)))(
 Remove command lines from the history list when the first character
on
@@ -680,7 +807,9 @@ or edit the line.  If you want to make it vanish
right away without
 entering another command, type a space and press return.
 )
 pindex(HIST_NO_FUNCTIONS)
+pindex(NO_HIST_NO_FUNCTIONS)
 pindex(HISTNOFUNCTIONS)
+pindex(NOHISTNOFUNCTIONS)
 item(tt(HIST_NO_FUNCTIONS))(
 Remove function definitions from the history list.
 Note that the function lingers in the internal history until the next
@@ -688,7 +817,9 @@ command is entered before it vanishes, allowing
you to briefly reuse
 or edit the definition.
 )
 pindex(HIST_NO_STORE)
+pindex(NO_HIST_NO_STORE)
 pindex(HISTNOSTORE)
+pindex(NOHISTNOSTORE)
 item(tt(HIST_NO_STORE))(
 Remove the tt(history) (tt(fc -l)) command from the history list
 when invoked.
@@ -697,13 +828,17 @@ command is entered before it vanishes, allowing
you to briefly reuse
 or edit the line.
 )
 pindex(HIST_REDUCE_BLANKS)
+pindex(NO_HIST_REDUCE_BLANKS)
 pindex(HISTREDUCEBLANKS)
+pindex(NOHISTREDUCEBLANKS)
 item(tt(HIST_REDUCE_BLANKS))(
 Remove superfluous blanks from each command line
 being added to the history list.
 )
 pindex(HIST_SAVE_BY_COPY)
+pindex(NO_HIST_SAVE_BY_COPY)
 pindex(HISTSAVEBYCOPY)
+pindex(NOHISTSAVEBYCOPY)
 item(tt(HIST_SAVE_BY_COPY) <D>)(
 When the history file is re-written, we normally write out a copy of
 the file named $HISTFILE.new and then rename it over the old one.
@@ -720,13 +855,17 @@ file's permissions and group information, but
will refuse to write
 out a new file if it would change the history file's owner.
 )
 pindex(HIST_SAVE_NO_DUPS)
+pindex(NO_HIST_SAVE_NO_DUPS)
 pindex(HISTSAVENODUPS)
+pindex(NOHISTSAVENODUPS)
 item(tt(HIST_SAVE_NO_DUPS))(
 When writing out the history file, older commands that duplicate
 newer ones are omitted.
 )
 pindex(HIST_VERIFY)
+pindex(NO_HIST_VERIFY)
 pindex(HISTVERIFY)
+pindex(NOHISTVERIFY)
 cindex(history, verifying substitution)
 item(tt(HIST_VERIFY))(
 Whenever the user enters a line with history expansion,
@@ -734,7 +873,9 @@ don't execute the line directly; instead, perform
 history expansion and reload the line into the editing buffer.
 )
 pindex(INC_APPEND_HISTORY)
+pindex(NO_INC_APPEND_HISTORY)
 pindex(INCAPPENDHISTORY)
+pindex(NOINCAPPENDHISTORY)
 cindex(history, incremental appending to a file)
 item(tt(INC_APPEND_HISTORY))(
 This options works like tt(APPEND_HISTORY) except that new history
lines
@@ -745,7 +886,9 @@ number of lines grows 20% beyond the value
specified by
 tt($SAVEHIST) (see also the HIST_SAVE_BY_COPY option).
 )
 pindex(SHARE_HISTORY)
+pindex(NO_SHARE_HISTORY)
 pindex(SHAREHISTORY)
+pindex(NOSHAREHISTORY)
 cindex(share history)
 cindex(history, sharing)
 item(tt(SHARE_HISTORY) <K>)(
@@ -773,13 +916,17 @@ enditem()
 subsect(Initialisation)
 startitem()
 pindex(ALL_EXPORT)
+pindex(NO_ALL_EXPORT)
 pindex(ALLEXPORT)
+pindex(NOALLEXPORT)
 cindex(export, automatic)
 item(tt(ALL_EXPORT) (tt(-a), ksh: tt(-a)))(
 All parameters subsequently defined are automatically exported.
 )
 pindex(GLOBAL_EXPORT)
+pindex(NO_GLOBAL_EXPORT)
 pindex(GLOBALEXPORT)
+pindex(NOGLOBALEXPORT)
 cindex(environment, and local parameters)
 item(tt(GLOBAL_EXPORT) (tt(<Z>)))(
 If this option is set, passing the tt(-x) flag to the builtins
tt(declare),
@@ -798,7 +945,9 @@ most portable way to achieve this behaviour.
 )
 cindex(exporting, and local parameters)
 pindex(GLOBAL_RCS)
+pindex(NO_GLOBAL_RCS)
 pindex(GLOBALRCS)
+pindex(NOGLOBALRCS)
 cindex(startup files, global, inhibiting)
 cindex(files, global startup, inhibiting)
 item(tt(GLOBAL_RCS) (tt(-d)) <D>)(
@@ -808,6 +957,7 @@ can be disabled and re-enabled at any time,
including inside local startup
 files (tt(.zshrc), etc.).
 )
 pindex(RCS)
+pindex(NO_RCS)
 cindex(startup files, sourcing)
 item(tt(RCS) (tt(PLUS()f)) <D>)(
 After tt(zshenv()) is sourced on startup, source the
@@ -824,11 +974,13 @@ enditem()
 subsect(Input/Output)
 startitem()
 pindex(ALIASES)
+pindex(NO_ALIASES)
 cindex(aliases, expansion)
 item(tt(ALIASES) <D>)(
 Expand aliases.
 )
 pindex(CLOBBER)
+pindex(NO_CLOBBER)
 cindex(clobbering, of files)
 cindex(file clobbering, allowing)
 item(tt(CLOBBER) (tt(PLUS()C), ksh: tt(PLUS()C)) <D>)(
@@ -838,6 +990,7 @@ Otherwise `tt(>!)' or `tt(>|)' must be used to
truncate a file,
 and `tt(>>!)' or `tt(>>|)' to create a file.
 )
 pindex(CORRECT)
+pindex(NO_CORRECT)
 cindex(correction, spelling)
 cindex(spelling correction)
 item(tt(CORRECT) (tt(-0)))(
@@ -847,18 +1000,23 @@ directories in the path are not readable, this
may falsely report spelling
 errors the first time some commands are used.
 )
 pindex(CORRECT_ALL)
+pindex(NO_CORRECT_ALL)
 pindex(CORRECTALL)
+pindex(NOCORRECTALL)
 item(tt(CORRECT_ALL) (tt(-O)))(
 Try to correct the spelling of all arguments in a line.
 )
 pindex(DVORAK)
+pindex(NO_DVORAK)
 item(tt(DVORAK))(
 Use the Dvorak keyboard instead of the standard qwerty keyboard as a
basis
 for examining spelling mistakes for the tt(CORRECT) and
tt(CORRECT_ALL)
 options and the tt(spell-word) editor command.
 )
 pindex(FLOW_CONTROL)
+pindex(NO_FLOW_CONTROL)
 pindex(FLOWCONTROL)
+pindex(NOFLOWCONTROL)
 cindex(flow control)
 item(tt(FLOW_CONTROL) <D>)(
 If this option is unset,
@@ -866,7 +1024,9 @@ output flow control via start/stop characters
(usually assigned to
 ^S/^Q) is disabled in the shell's editor.
 )
 pindex(IGNORE_EOF)
+pindex(NO_IGNORE_EOF)
 pindex(IGNOREEOF)
+pindex(NOIGNOREEOF)
 cindex(EOF, ignoring)
 item(tt(IGNORE_EOF) (tt(-7)))(
 Do not exit on end-of-file.  Require the use
@@ -880,13 +1040,17 @@ Control-D) without printing the normal warning
message.  This works
 only for normal widgets, not for completion widgets.
 )
 pindex(INTERACTIVE_COMMENTS)
+pindex(NO_INTERACTIVE_COMMENTS)
 pindex(INTERACTIVECOMMENTS)
+pindex(NOINTERACTIVECOMMENTS)
 cindex(comments, in interactive shells)
 item(tt(INTERACTIVE_COMMENTS) (tt(-k)) <K> <S>)(
 Allow comments even in interactive shells.
 )
 pindex(HASH_CMDS)
+pindex(NO_HASH_CMDS)
 pindex(HASHCMDS)
+pindex(NOHASHCMDS)
 cindex(hashing, of commands)
 cindex(command hashing)
 item(tt(HASH_CMDS) <D>)(
@@ -899,7 +1063,9 @@ the functions or aliases hash tables are hashed
in order to avoid
 reporting them as spelling errors.
 )
 pindex(HASH_DIRS)
+pindex(NO_HASH_DIRS)
 pindex(HASHDIRS)
+pindex(NOHASHDIRS)
 cindex(hashing, of directories)
 cindex(directories, hashing)
 item(tt(HASH_DIRS) <D>)(
@@ -908,14 +1074,18 @@ as well as all directories that occur earlier
in the path.
 Has no effect if neither tt(HASH_CMDS) nor tt(CORRECT) is set.
 )
 pindex(MAIL_WARNING)
+pindex(NO_MAIL_WARNING)
 pindex(MAILWARNING)
+pindex(NOMAILWARNING)
 cindex(mail, warning of reading)
 item(tt(MAIL_WARNING) (tt(-U)))(
 Print a warning message if a mail file has been
 accessed since the shell last checked.
 )
 pindex(PATH_DIRS)
+pindex(NO_PATH_DIRS)
 pindex(PATHDIRS)
+pindex(NOPATHDIRS)
 cindex(path search, extended)
 item(tt(PATH_DIRS) (tt(-Q)))(
 Perform a path search even on command names with slashes in them.
@@ -932,7 +1102,9 @@ indicated by this option, and regardless of
whether `tt(.)' or the current
 directory appear in the command search path.
 )
 pindex(PRINT_EIGHT_BIT)
+pindex(NO_PRINT_EIGHT_BIT)
 pindex(PRINTEIGHTBIT)
+pindex(NOPRINTEIGHTBIT)
 cindex(eight bit characters, printing)
 item(tt(PRINT_EIGHT_BIT))(
 Print eight bit characters literally in completion lists, etc.
@@ -940,13 +1112,17 @@ This option is not necessary if your system
correctly returns the
 printability of eight bit characters (see manref(ctype)(3)).
 )
 pindex(PRINT_EXIT_VALUE)
+pindex(NO_PRINT_EXIT_VALUE)
 pindex(PRINTEXITVALUE)
+pindex(NOPRINTEXITVALUE)
 cindex(exit status, printing)
 item(tt(PRINT_EXIT_VALUE) (tt(-1)))(
 Print the exit value of programs with non-zero exit status.
 )
 pindex(RC_QUOTES)
+pindex(NO_RC_QUOTES)
 pindex(RCQUOTES)
+pindex(NORCQUOTES)
 cindex(rc, quoting style)
 cindex(quoting style, rc)
 item(tt(RC_QUOTES))(
@@ -956,14 +1132,18 @@ using the format tt($')var(...)tt('), where a
backslashed single quote can
 be used.
 )
 pindex(RM_STAR_SILENT)
+pindex(NO_RM_STAR_SILENT)
 pindex(RMSTARSILENT)
+pindex(NORMSTARSILENT)
 cindex(rm *, querying before)
 cindex(querying before rm *)
 item(tt(RM_STAR_SILENT) (tt(-H)) <K> <S>)(
 Do not query the user before executing `tt(rm *)' or `tt(rm path/*)'.
 )
 pindex(RM_STAR_WAIT)
+pindex(NO_RM_STAR_WAIT)
 pindex(RMSTARWAIT)
+pindex(NORMSTARWAIT)
 cindex(rm *, waiting before)
 cindex(waiting before rm *)
 item(tt(RM_STAR_WAIT))(
@@ -974,13 +1154,17 @@ when one didn't really mean it.  The wait and
query can always be
 avoided by expanding the `tt(*)' in ZLE (with tab).
 )
 pindex(SHORT_LOOPS)
+pindex(NO_SHORT_LOOPS)
 pindex(SHORTLOOPS)
+pindex(NOSHORTLOOPS)
 item(tt(SHORT_LOOPS) <C> <Z>)(
 Allow the short forms of tt(for), tt(repeat), tt(select),
 tt(if), and tt(function) constructs.
 )
 pindex(SUN_KEYBOARD_HACK)
+pindex(NO_SUN_KEYBOARD_HACK)
 pindex(SUNKEYBOARDHACK)
+pindex(NOSUNKEYBOARDHACK)
 cindex(sun keyboard, annoying)
 cindex(annoying keyboard, sun)
 item(tt(SUN_KEYBOARD_HACK) (tt(-L)))(
@@ -994,7 +1178,9 @@ enditem()
 subsect(Job Control)
 startitem()
 pindex(AUTO_CONTINUE)
+pindex(NO_AUTO_CONTINUE)
 pindex(AUTOCONTINUE)
+pindex(NOAUTOCONTINUE)
 cindex(jobs, continuing automatically)
 cindex(continuing jobs automatically)
 item(tt(AUTO_CONTINUE))(
@@ -1003,7 +1189,9 @@ with the tt(disown) builtin command are
automatically sent a tt(CONT)
 signal to make them running.
 )
 pindex(AUTO_RESUME)
+pindex(NO_AUTO_RESUME)
 pindex(AUTORESUME)
+pindex(NOAUTORESUME)
 cindex(jobs, resuming automatically)
 cindex(resuming jobs automatically)
 item(tt(AUTO_RESUME) (tt(-W)))(
@@ -1011,7 +1199,9 @@ Treat single word simple commands without
redirection
 as candidates for resumption of an existing job.
 )
 pindex(BG_NICE)
+pindex(NO_BG_NICE)
 pindex(BGNICE)
+pindex(NOBGNICE)
 cindex(jobs, background priority)
 cindex(background jobs, priority of)
 cindex(priority of background jobs)
@@ -1020,7 +1210,9 @@ Run all background jobs at a lower priority.
This option
 is set by default.
 )
 pindex(CHECK_JOBS)
+pindex(NO_CHECK_JOBS)
 pindex(CHECKJOBS)
+pindex(NOCHECKJOBS)
 cindex(exiting, checking jobs when)
 cindex(logging out, checking jobs when)
 item(tt(CHECK_JOBS) <Z>)(
@@ -1038,23 +1230,28 @@ ifzman(the section SPECIAL FUNCTIONS in
zmanref(zshmisc))
 is not counted for this purpose.
 )
 pindex(HUP)
+pindex(NO_HUP)
 cindex(jobs, HUP)
 item(tt(HUP) <Z>)(
 Send the tt(HUP) signal to running jobs when the
 shell exits.
 )
 pindex(LONG_LIST_JOBS)
+pindex(NO_LONG_LIST_JOBS)
 pindex(LONGLISTJOBS)
+pindex(NOLONGLISTJOBS)
 cindex(jobs, list format)
 item(tt(LONG_LIST_JOBS) (tt(-R)))(
 List jobs in the long format by default.
 )
 pindex(MONITOR)
+pindex(NO_MONITOR)
 cindex(job control, allowing)
 item(tt(MONITOR) (tt(-m), ksh: tt(-m)))(
 Allow job control.  Set by default in interactive shells.
 )
 pindex(NOTIFY)
+pindex(NO_NOTIFY)
 cindex(background jobs, notification)
 cindex(notification of background jobs)
 item(tt(NOTIFY) (tt(-5), ksh: tt(-b)) <Z>)(
@@ -1066,7 +1263,9 @@ enditem()
 subsect(Prompting)
 startitem()
 pindex(PROMPT_BANG)
+pindex(NO_PROMPT_BANG)
 pindex(PROMPTBANG)
+pindex(NOPROMPTBANG)
 cindex(prompt, ! expansion)
 item(tt(PROMPT_BANG) <K>)(
 If set, `tt(!)' is treated specially in prompt expansion.
@@ -1075,7 +1274,9 @@ ifzman(EXPANSION OF PROMPT SEQUENCES in
zmanref(zshmisc))\
 ifnzman(noderef(Prompt Expansion)).
 )
 pindex(PROMPT_CR)
+pindex(NO_PROMPT_CR)
 pindex(PROMPTCR)
+pindex(NOPROMPTCR)
 cindex(prompt, with CR)
 item(tt(PROMPT_CR) (tt(PLUS()V)) <D>)(
 Print a carriage return just before printing
@@ -1083,7 +1284,9 @@ a prompt in the line editor.  This is on by
default as multi-line editing
 is only possible if the editor knows where the start of the line
appears.
 )
 pindex(PROMPT_SP)
+pindex(NO_PROMPT_SP)
 pindex(PROMPTSP)
+pindex(NOPROMPTSP)
 cindex(prompt, save partial lines)
 item(tt(PROMPT_SP) <D>)(
 Attempt to preserve a partial line (i.e. a line that did not end with
a
@@ -1100,7 +1303,9 @@ NOTE: if the PROMPT_CR option is not set,
enabling this option will have no
 effect.  This option is on by default.
 )
 pindex(PROMPT_PERCENT)
+pindex(NO_PROMPT_PERCENT)
 pindex(PROMPTPERCENT)
+pindex(NOPROMPTPERCENT)
 cindex(prompt, % expansion)
 item(tt(PROMPT_PERCENT) <C> <Z>)(
 If set, `tt(%)' is treated specially in prompt expansion.
@@ -1109,7 +1314,9 @@ ifzman(EXPANSION OF PROMPT SEQUENCES in
zmanref(zshmisc))\
 ifnzman(noderef(Prompt Expansion)).
 )
 pindex(PROMPT_SUBST)
+pindex(NO_PROMPT_SUBST)
 pindex(PROMPTSUBST)
+pindex(NOPROMPTSUBST)
 cindex(prompt, parameter expansion)
 item(tt(PROMPT_SUBST) <K> <S>)(
 If set, em(parameter expansion), em(command substitution) and
@@ -1117,7 +1324,9 @@ em(arithmetic expansion) are performed in
prompts.  Substitutions
 within prompts do not affect the command status.
 )
 pindex(TRANSIENT_RPROMPT)
+pindex(NO_TRANSIENT_RPROMPT)
 pindex(TRANSIENTRPROMPT)
+pindex(NOTRANSIENTRPROMPT)
 item(tt(TRANSIENT_RPROMPT))(
 Remove any right prompt from display when accepting a command
 line.  This may be useful with terminals with other cut/paste
methods.
@@ -1127,7 +1336,9 @@ enditem()
 subsect(Scripts and Functions)
 startitem()
 pindex(C_BASES)
+pindex(NO_C_BASES)
 pindex(CBASES)
+pindex(NOCBASES)
 cindex(bases, output in C format)
 cindex(hexadecimal, output in C format)
 cindex(octal, output in C format)
@@ -1141,7 +1352,9 @@ hexadecimal and octal.  Note that these formats
will be understood on input
 irrespective of the setting of tt(C_BASES).
 )
 pindex(C_PRECEDENCES)
+pindex(NO_C_PRECEDENCES)
 pindex(CPRECEDENCES)
+pindex(NOCPRECEDENCES)
 cindex(precedence, operator)
 cindex(operator precedence)
 item(tt(C_PRECEDENCES))(
@@ -1152,6 +1365,9 @@ ifzman(the section ARITHMETIC EVALUATION in
zmanref(zshmisc))
 has an explicit list.
 )
 pindex(DEBUG_BEFORE_CMD <D>)
+pindex(NO_DEBUG_BEFORE_CMD <D>)
+pindex(DEBUGBEFORECMD <D>)
+pindex(NODEBUGBEFORECMD <D>)
 cindex(traps, DEBUG, before or after command)
 cindex(DEBUG trap, before or after command)
 item(tt(DEBUG_BEFORE_CMD))(
@@ -1160,7 +1376,9 @@ each command.  Setting this option mimics the
behaviour of ksh 93; with
 the option unset the behaviour is that of ksh 88.
 )
 pindex(ERR_EXIT)
+pindex(NO_ERR_EXIT)
 pindex(ERREXIT)
+pindex(NOERREXIT)
 cindex(exit status, trapping)
 item(tt(ERR_EXIT) (tt(-e), ksh: tt(-e)))(
 If a command has a non-zero exit status, execute the tt(ZERR)
@@ -1175,7 +1393,9 @@ on exit, then the command for which the
tt(DEBUG) trap is being executed is
 skipped.  The option is restored after the trap exits.
 )
 pindex(ERR_RETURN)
+pindex(NO_ERR_RETURN)
 pindex(ERRRETURN)
+pindex(NOERRRETURN)
 cindex(function return, on error)
 cindex(return from function, on error)
 item(tt(ERR_RETURN))(
@@ -1186,7 +1406,9 @@ tt(exit).  This will trigger an exit at the
outermost level of a
 non-interactive script.
 )
 pindex(EVAL_LINENO)
+pindex(NO_EVAL_LINENO)
 pindex(EVALLINENO)
+pindex(NOEVALLINENO)
 cindex(line number, in evaluated expression)
 item(tt(EVAL_LINENO) <Z>)(
 If set, line numbers of expressions evaluated using the builtin
tt(eval)
@@ -1200,6 +1422,7 @@ tt(EVAL_LINENO) is unset, the line number of the
surrounding script or
 function is retained during the evaluation.
 )
 pindex(EXEC)
+pindex(NO_EXEC)
 cindex(command execution, enabling)
 item(tt(EXEC) (tt(PLUS()n), ksh: tt(PLUS()n)) <D>)(
 Do execute commands.  Without this option, commands are
@@ -1208,14 +1431,18 @@ This option cannot be turned off in an
interactive shell,
 except when `tt(-n)' is supplied to the shell at startup.
 )
 pindex(FUNCTION_ARGZERO)
+pindex(NO_FUNCTION_ARGZERO)
 pindex(FUNCTIONARGZERO)
+pindex(NOFUNCTIONARGZERO)
 cindex($0, setting)
 item(tt(FUNCTION_ARGZERO) <C> <Z>)(
 When executing a shell function or sourcing a script, set tt($0)
 temporarily to the name of the function/script.
 )
 pindex(LOCAL_OPTIONS)
+pindex(NO_LOCAL_OPTIONS)
 pindex(LOCALOPTIONS)
+pindex(NOLOCALOPTIONS)
 item(tt(LOCAL_OPTIONS) <K>)(
 If this option is set at the point of return from a shell function,
 most options (including this one) which were in force upon entry to
@@ -1229,7 +1456,9 @@ with a formulation like `tt(emulate -L zsh)';
the tt(-L) activates
 tt(LOCAL_OPTIONS).
 )
 pindex(LOCAL_TRAPS)
+pindex(NO_LOCAL_TRAPS)
 pindex(LOCALTRAPS)
+pindex(NOLOCALTRAPS)
 item(tt(LOCAL_TRAPS) <K>)(
 If this option is set when a signal trap is set inside a function,
then the
 previous status of the trap for that signal will be restored when the
@@ -1246,7 +1475,9 @@ fn+LPAR()RPAR() { setopt localtraps; trap ''
INT; sleep 3; })
 will restore normally handling of tt(SIGINT) after the function
exits.
 )
 pindex(MULTI_FUNC_DEF)
+pindex(NO_MULTI_FUNC_DEF)
 pindex(MULTIFUNCDEF)
+pindex(NOMULTIFUNCDEF)
 item(tt(MULTI_FUNC_DEF) <Z>)(
 Allow definitions of multiple functions at once in the form `tt(fn1
 fn2)var(...)tt(LPAR()RPAR())'; if the option is not set, this causes
@@ -1255,12 +1486,15 @@ keyword is always allowed.  Multiple function
definitions are not often
 used and can cause obscure errors.
 )
 pindex(MULTIOS)
+pindex(NO_MULTIOS)
 item(tt(MULTIOS) <Z>)(
 Perform implicit bf(tee)s or bf(cat)s when multiple
 redirections are attempted (see noderef(Redirection)).
 )
 pindex(OCTAL_ZEROES)
+pindex(NO_OCTAL_ZEROES)
 pindex(OCTALZEROES)
+pindex(NOOCTALZEROES)
 cindex(octal, arithmetic expressions)
 item(tt(OCTAL_ZEROES) <S>)(
 Interpret any integer constant beginning with a 0 as octal, per IEEE
Std
@@ -1273,7 +1507,9 @@ component in `tt(08#77)' are always interpreted
as decimal, regardless
 of leading zeroes.
 )
 pindex(TYPESET_SILENT)
+pindex(NO_TYPESET_SILENT)
 pindex(TYPESETSILENT)
+pindex(NOTYPESETSILENT)
 item(tt(TYPESET_SILENT))(
 If this is unset, executing any of the `tt(typeset)' family of
 commands with no options and a list of parameters that have no values
@@ -1283,12 +1519,14 @@ with the `tt(-m)' option.  The option `tt(-p)'
is available whether or not
 the option is set.
 )
 pindex(VERBOSE)
+pindex(NO_VERBOSE)
 cindex(tracing, of input lines)
 cindex(input, tracing)
 item(tt(VERBOSE) (tt(-v), ksh: tt(-v)))(
 Print shell input lines as they are read.
 )
 pindex(XTRACE)
+pindex(NO_XTRACE)
 cindex(tracing, of commands)
 cindex(commands, tracing)
 item(tt(XTRACE) (tt(-x), ksh: tt(-x)))(
@@ -1299,7 +1537,9 @@ enditem()
 subsect(Shell Emulation)
 startitem()
 pindex(BASH_REMATCH)
+pindex(NO_BASH_REMATCH)
 pindex(BASHREMATCH)
+pindex(NOBASHREMATCH)
 cindex(bash, BASH_REMATCH variable)
 cindex(regexp, bash BASH_REMATCH variable)
 item(tt(BASH_REMATCH))(
@@ -1314,7 +1554,9 @@ contains the entire matched text and the
tt(match) array variable contains
 substrings.
 )
 pindex(BSD_ECHO)
+pindex(NO_BSD_ECHO)
 pindex(BSDECHO)
+pindex(NOBSDECHO)
 cindex(echo, BSD compatible)
 item(tt(BSD_ECHO) <S>)(
 Make the tt(echo) builtin compatible with the BSD manref(echo)(1)
command.
@@ -1322,7 +1564,9 @@ This disables backslashed escape sequences in
echo strings unless the
 tt(-e) option is specified.
 )
 pindex(CSH_JUNKIE_HISTORY)
+pindex(NO_CSH_JUNKIE_HISTORY)
 pindex(CSHJUNKIEHISTORY)
+pindex(NOCSHJUNKIEHISTORY)
 cindex(csh, history style)
 cindex(history style, csh)
 item(tt(CSH_JUNKIE_HISTORY) <C>)(
@@ -1332,7 +1576,9 @@ to the same event as the previous history
reference, defaulting to the
 previous command.
 )
 pindex(CSH_JUNKIE_LOOPS)
+pindex(NO_CSH_JUNKIE_LOOPS)
 pindex(CSHJUNKIELOOPS)
+pindex(NOCSHJUNKIELOOPS)
 cindex(csh, loop style)
 cindex(loop style, csh)
 item(tt(CSH_JUNKIE_LOOPS) <C>)(
@@ -1340,7 +1586,9 @@ Allow loop bodies to take the form `var(list);
tt(end)' instead of
 `tt(do) var(list); tt(done)'.
 )
 pindex(CSH_JUNKIE_QUOTES)
+pindex(NO_CSH_JUNKIE_QUOTES)
 pindex(CSHJUNKIEQUOTES)
+pindex(NOCSHJUNKIEQUOTES)
 cindex(csh, quoting style)
 cindex(quoting style, csh)
 item(tt(CSH_JUNKIE_QUOTES) <C>)(
@@ -1352,7 +1600,9 @@ or `tt(")' (and `tt(\)' itself no longer needs
escaping).
 Command substitutions are only expanded once, and cannot be nested.
 )
 pindex(CSH_NULLCMD)
+pindex(NO_CSH_NULLCMD)
 pindex(CSHNULLCMD)
+pindex(NOCSHNULLCMD)
 vindex(NULLCMD, ignoring)
 vindex(READNULLCMD, ignoring)
 cindex(redirections with no command, csh)
@@ -1363,7 +1613,9 @@ when running redirections with no command.  This
make
 such redirections fail (see noderef(Redirection)).
 )
 pindex(KSH_ARRAYS)
+pindex(NO_KSH_ARRAYS)
 pindex(KSHARRAYS)
+pindex(NOKSHARRAYS)
 cindex(arrays, ksh style)
 cindex(array style, ksh)
 cindex(ksh, array style)
@@ -1375,7 +1627,9 @@ and braces are required to delimit a subscript
(`tt(${path[2]})' rather
 than just `tt($path[2])').
 )
 pindex(KSH_AUTOLOAD)
+pindex(NO_KSH_AUTOLOAD)
 pindex(KSHAUTOLOAD)
+pindex(NOKSHAUTOLOAD)
 item(tt(KSH_AUTOLOAD) <K> <S>)(
 Emulate bf(ksh) function autoloading.  This means that when a
function is
 autoloaded, the corresponding file is merely executed, and must
define
@@ -1385,7 +1639,9 @@ containing only a simple definition of the
function - is always handled
 in the bf(ksh)-compatible manner.)
 )
 pindex(KSH_OPTION_PRINT)
+pindex(NO_KSH_OPTION_PRINT)
 pindex(KSHOPTIONPRINT)
+pindex(NOKSHOPTIONPRINT)
 cindex(option printing, ksh style)
 cindex(option printing style, ksh)
 cindex(ksh, option printing style)
@@ -1395,7 +1651,9 @@ set and unset options, all options are shown,
marked `on' if
 they are in the non-default state, `off' otherwise.
 )
 pindex(KSH_TYPESET)
+pindex(NO_KSH_TYPESET)
 pindex(KSHTYPESET)
+pindex(NOKSHTYPESET)
 cindex(argument splitting, in typeset etc.)
 cindex(ksh, argument splitting in typeset)
 item(tt(KSH_TYPESET) <K>)(
@@ -1406,7 +1664,9 @@ word splitting after command and parameter
expansion in arguments of an
 assignment; with it, word splitting does not take place in those
cases.
 )
 pindex(KSH_ZERO_SUBSCRIPT)
+pindex(NO_KSH_ZERO_SUBSCRIPT)
 pindex(KSHZEROSUBSCRIPT)
+pindex(NOKSHZEROSUBSCRIPT)
 cindex(arrays, behaviour of index zero)
 item(tt(KSH_ZERO_SUBSCRIPT))(
 Treat use of a subscript of value zero in array or string expressions
as a
@@ -1432,7 +1692,9 @@ This option is for compatibility with older
versions of the shell and
 is not recommended in new code.
 )
 pindex(POSIX_BUILTINS)
+pindex(NO_POSIX_BUILTINS)
 pindex(POSIXBUILTINS)
+pindex(NOPOSIXBUILTINS)
 item(tt(POSIX_BUILTINS) <K> <S>)(
 When this option is set the tt(command) builtin can be used to
execute
 shell builtin commands.  Parameter assignments specified before shell
@@ -1459,7 +1721,9 @@ tt(trap) and
 tt(unset).
 )
 pindex(POSIX_IDENTIFIERS)
+pindex(NO_POSIX_IDENTIFIERS)
 pindex(POSIXIDENTIFIERS)
+pindex(NOPOSIXIDENTIFIERS)
 cindex(identifiers, non-portable characters in)
 cindex(parameter names, non-portable characters in)
 item(tt(POSIX_IDENTIFIERS) <K> <S>)(
@@ -1481,7 +1745,9 @@ ignored; all octets with the top bit set may be
used in identifiers.
 This is non-standard but is the traditional zsh behaviour.
 )
 pindex(SH_FILE_EXPANSION)
+pindex(NO_SH_FILE_EXPANSION)
 pindex(SHFILEEXPANSION)
+pindex(NOSHFILEEXPANSION)
 cindex(sh, expansion style)
 cindex(expansion style, sh)
 item(tt(SH_FILE_EXPANSION) <K> <S>)(
@@ -1493,7 +1759,9 @@ brace expansion, so things like `tt(~$USERNAME)'
and
 `tt(~{pfalstad,rc})' will work.
 )
 pindex(SH_NULLCMD)
+pindex(NO_SH_NULLCMD)
 pindex(SHNULLCMD)
+pindex(NOSHNULLCMD)
 vindex(NULLCMD, ignoring)
 vindex(READNULLCMD, ignoring)
 cindex(sh, redirections with no command)
@@ -1505,7 +1773,9 @@ Do not use the values of tt(NULLCMD) and
tt(READNULLCMD)
 when doing redirections, use `tt(:)' instead (see
noderef(Redirection)).
 )
 pindex(SH_OPTION_LETTERS)
+pindex(NO_SH_OPTION_LETTERS)
 pindex(SHOPTIONLETTERS)
+pindex(NOSHOPTIONLETTERS)
 cindex(sh, single letter options style)
 cindex(ksh, single letter options style)
 cindex(single letter options, ksh style)
@@ -1516,7 +1786,9 @@ If this option is set the shell tries to
interpret single letter options
 This also affects the value of the tt(-) special parameter.
 )
 pindex(SH_WORD_SPLIT)
+pindex(NO_SH_WORD_SPLIT)
 pindex(SHWORDSPLIT)
+pindex(NOSHWORDSPLIT)
 cindex(field splitting, sh style)
 cindex(sh, field splitting style)
 item(tt(SH_WORD_SPLIT) (tt(-y)) <K> <S>)(
@@ -1525,7 +1797,9 @@ Note that this option has nothing to do with
word splitting.
 (See noderef(Parameter Expansion).)
 )
 pindex(TRAPS_ASYNC)
+pindex(NO_TRAPS_ASYNC)
 pindex(TRAPSASYNC)
+pindex(NOTRAPSASYNC)
 cindex(traps, asynchronous)
 item(tt(TRAPS_ASYNC))(
 While waiting for a program to exit, handle signals and run traps
@@ -1538,6 +1812,7 @@ enditem()
 subsect(Shell State)
 startitem()
 pindex(INTERACTIVE)
+pindex(NO_INTERACTIVE)
 item(tt(INTERACTIVE) (tt(-i), ksh: tt(-i)))(
 This is an interactive shell.  This option is set upon initialisation
if
 the standard input is a tty and commands are being read from standard
input.
@@ -1547,12 +1822,14 @@ on the command line.
 The value of this option cannot be changed anywhere other than the
command line.
 )
 pindex(LOGIN)
+pindex(NO_LOGIN)
 item(tt(LOGIN) (tt(-l), ksh: tt(-l)))(
 This is a login shell.
 If this option is not explicitly set, the shell is a login shell if
 the first character of the tt(argv[0]) passed to the shell is a
`tt(-)'.
 )
 pindex(PRIVILEGED)
+pindex(NO_PRIVILEGED)
 cindex(privileged mode)
 cindex(mode, privileged)
 item(tt(PRIVILEGED) (tt(-p), ksh: tt(-p)))(
@@ -1569,6 +1846,7 @@ function always changes it globally regardless
of the tt(LOCAL_OPTIONS)
 option.
 )
 pindex(RESTRICTED)
+pindex(NO_RESTRICTED)
 cindex(restricted shell)
 item(tt(RESTRICTED) (tt(-r)))(
 Enables restricted mode.  This option cannot be changed using
@@ -1577,7 +1855,9 @@ globally regardless of the tt(LOCAL_OPTIONS)
option.  See
 noderef(Restricted Shell).
 )
 pindex(SHIN_STDIN)
+pindex(NO_SHIN_STDIN)
 pindex(SHINSTDIN)
+pindex(NOSHINSTDIN)
 item(tt(SHIN_STDIN) (tt(-s), ksh: tt(-s)))(
 Commands are being read from the standard input.
 Commands are read from standard input if no command is specified with
@@ -1594,9 +1874,12 @@ The value of this option cannot be changed
anywhere other
 than the command line.
 )
 pindex(SINGLE_COMMAND)
+pindex(NO_SINGLE_COMMAND)
 pindex(SINGLECOMMAND)
+pindex(NOSINGLECOMMAND)
 cindex(single command)
 pindex(INTERACTIVE, use of)
+pindex(NO_INTERACTIVE, use of)
 item(tt(SINGLE_COMMAND) (tt(-t), ksh: tt(-t)))(
 If the shell is reading from standard input, it exits after a single
command
 has been executed.  This also makes the shell non-interactive, unless
the
@@ -1608,13 +1891,16 @@ enditem()
 subsect(Zle)
 startitem()
 pindex(BEEP)
+pindex(NO_BEEP)
 cindex(beep, enabling)
 cindex(enabling the beep)
 item(tt(BEEP) (tt(PLUS()B)) <D>)(
 Beep on error in ZLE.
 )
 pindex(COMBINING_CHARS)
+pindex(NO_COMBINING_CHARS)
 pindex(COMBININGCHARS)
+pindex(NOCOMBININGCHARS)
 cindex(characters, (Unicode) combining)
 cindex(combining characters (Unicode))
 cindex(Unicode combining characters)
@@ -1633,6 +1919,7 @@ used as part of a word in combination with a
word character.
 Otherwise the base shell does not handle combining characters
specially.
 )
 pindex(EMACS)
+pindex(NO_EMACS)
 item(tt(EMACS))(
 If ZLE is loaded, turning on this option has the equivalent effect
 of `tt(bindkey -e)'.  In addition, the VI option is unset.
@@ -1641,13 +1928,16 @@ not guaranteed to reflect the current keymap.
This option is
 provided for compatibility; tt(bindkey) is the recommended interface.
 )
 pindex(OVERSTRIKE)
+pindex(NO_OVERSTRIKE)
 cindex(editor, overstrike mode)
 cindex(overstrike mode, of editor)
 item(tt(OVERSTRIKE))(
 Start up the line editor in overstrike mode.
 )
 pindex(SINGLE_LINE_ZLE)
+pindex(NO_SINGLE_LINE_ZLE)
 pindex(SINGLELINEZLE)
+pindex(NOSINGLELINEZLE)
 cindex(editor, single line mode)
 item(tt(SINGLE_LINE_ZLE) (tt(-M)) <K>)(
 Use single-line command line editing instead of multi-line.
@@ -1659,6 +1949,7 @@ effect on shell syntax, many users may wish to
disable this option
 when using ksh emulation interactively.
 )
 pindex(VI)
+pindex(NO_VI)
 item(tt(VI))(
 If ZLE is loaded, turning on this option has the equivalent effect
 of `tt(bindkey -v)'.  In addition, the EMACS option is unset.
@@ -1667,6 +1958,7 @@ not guaranteed to reflect the current keymap.
This option is
 provided for compatibility; tt(bindkey) is the recommended interface.
 )
 pindex(ZLE)
+pindex(NO_ZLE)
 cindex(editor, enabling)
 cindex(enabling the editor)
 item(tt(ZLE) (tt(-Z)))(
@@ -1684,70 +1976,91 @@ options to the shell.

 startitem()
 pindex(BRACE_EXPAND)
+pindex(NO_BRACE_EXPAND)
 pindex(BRACEEXPAND)
+pindex(NOBRACEEXPAND)
 item(tt(BRACE_EXPAND))(
 em(NO_)tt(IGNORE_BRACES)
 (ksh and bash compatibility)
 )
 pindex(DOT_GLOB)
+pindex(NO_DOT_GLOB)
 pindex(DOTGLOB)
+pindex(NODOTGLOB)
 item(tt(DOT_GLOB))(
 tt(GLOB_DOTS)
 (bash compatibility)
 )
 pindex(HASH_ALL)
+pindex(NO_HASH_ALL)
 pindex(HASHALL)
+pindex(NOHASHALL)
 item(tt(HASH_ALL))(
 tt(HASH_CMDS)
 (bash compatibility)
 )
 pindex(HIST_APPEND)
+pindex(NO_HIST_APPEND)
 pindex(HISTAPPEND)
+pindex(NOHISTAPPEND)
 item(tt(HIST_APPEND))(
 tt(APPEND_HISTORY)
 (bash compatibility)
 )
 pindex(HIST_EXPAND)
+pindex(NO_HIST_EXPAND)
 pindex(HISTEXPAND)
+pindex(NOHISTEXPAND)
 item(tt(HIST_EXPAND))(
 tt(BANG_HIST)
 (bash compatibility)
 )
 pindex(LOG)
+pindex(NO_LOG)
 item(tt(LOG))(
 em(NO_)tt(HIST_NO_FUNCTIONS)
 (ksh compatibility)
 )
 pindex(MAIL_WARN)
+pindex(NO_MAIL_WARN)
 pindex(MAILWARN)
+pindex(NOMAILWARN)
 item(tt(MAIL_WARN))(
 tt(MAIL_WARNING)
 (bash compatibility)
 )
 pindex(ONE_CMD)
+pindex(NO_ONE_CMD)
 pindex(ONECMD)
+pindex(NOONECMD)
 item(tt(ONE_CMD))(
 tt(SINGLE_COMMAND)
 (bash compatibility)
 )
 pindex(PHYSICAL)
+pindex(NO_PHYSICAL)
 item(tt(PHYSICAL))(
 tt(CHASE_LINKS)
 (ksh and bash compatibility)
 )
 pindex(PROMPT_VARS)
+pindex(NO_PROMPT_VARS)
 pindex(PROMPTVARS)
+pindex(NOPROMPTVARS)
 item(tt(PROMPT_VARS))(
 tt(PROMPT_SUBST)
 (bash compatibility)
 )
 pindex(STDIN)
+pindex(NO_STDIN)
 item(tt(STDIN))(
 tt(SHIN_STDIN)
 (ksh compatibility)
 )
 pindex(TRACK_ALL)
+pindex(NO_TRACK_ALL)
 pindex(TRACKALL)
+pindex(NOTRACKALL)
 item(tt(TRACK_ALL))(
 tt(HASH_CMDS)
 (ksh compatibility)
--
1.5.6.5

--000e0cd25578aba2ae04626bd344
Content-Type: text/x-diff; charset=US-ASCII; name="0001-Even-more-pindex-entries.patch"
Content-Disposition: attachment; 
	filename="0001-Even-more-pindex-entries.patch"
Content-Transfer-Encoding: base64
X-Attachment-Id: f_fqy08noz1

RnJvbSBkYzg3MzNlMzAxOWY1YTVmNTY2NmFkYmM0OTYwZGQxODQ5ZmU1ZGE4IE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBSaWNoYXJkIEhhcnRtYW5uIDxyaWNoaWhAbmV0LmluLnR1bS5k
ZT4KRGF0ZTogU3VuLCA4IEZlYiAyMDA5IDE4OjM4OjI3ICswMTAwClN1YmplY3Q6IFtQQVRDSF0g
RXZlbiBtb3JlIHBpbmRleCgpIGVudHJpZXMKCnBpbmRleChGT09fT1BUSU9OKQpwaW5kZXgoTk9f
Rk9PX09QVElPTikKcGluZGV4KEZPT09QVElPTikKcGluZGV4KE5PRk9PUFRJT04pCi0tLQogRG9j
L1pzaC9vcHRpb25zLnlvIHwgIDMxMyArKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysrKysrCiAxIGZpbGVzIGNoYW5nZWQsIDMxMyBpbnNlcnRpb25zKCspLCAw
IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL0RvYy9ac2gvb3B0aW9ucy55byBiL0RvYy9ac2gv
b3B0aW9ucy55bwppbmRleCBhODg4MDM0Li4zNjk4ODI2IDEwMDY0NAotLS0gYS9Eb2MvWnNoL29w
dGlvbnMueW8KKysrIGIvRG9jL1pzaC9vcHRpb25zLnlvCkBAIC01NSw3ICs1NSw5IEBAIGFyZSBj
aGFuZ2VkIGZyb20gdGhlIGRlZmF1bHQuCiBzdWJzZWN0KENoYW5naW5nIERpcmVjdG9yaWVzKQog
c3RhcnRpdGVtKCkKIHBpbmRleChBVVRPX0NEKQorcGluZGV4KE5PX0FVVE9fQ0QpCiBwaW5kZXgo
QVVUT0NEKQorcGluZGV4KE5PQVVUT0NEKQogY2luZGV4KGNkLCBhdXRvbWF0aWMpCiBpdGVtKHR0
KEFVVE9fQ0QpICh0dCgtSikpKSgKIElmIGEgY29tbWFuZCBpcyBpc3N1ZWQgdGhhdCBjYW4ndCBi
ZSBleGVjdXRlZCBhcyBhIG5vcm1hbCBjb21tYW5kLApAQCAtNjMsMTQgKzY1LDE4IEBAIGFuZCB0
aGUgY29tbWFuZCBpcyB0aGUgbmFtZSBvZiBhIGRpcmVjdG9yeSwgcGVyZm9ybSB0aGUgdHQoY2Qp
CiBjb21tYW5kIHRvIHRoYXQgZGlyZWN0b3J5LgogKQogcGluZGV4KEFVVE9fUFVTSEQpCitwaW5k
ZXgoTk9fQVVUT19QVVNIRCkKIHBpbmRleChBVVRPUFVTSEQpCitwaW5kZXgoTk9BVVRPUFVTSEQp
CiBjaW5kZXgoY2QsIGJlaGF2aW5nIGxpa2UgcHVzaGQpCiBjaW5kZXgocHVzaGQsIG1ha2luZyBj
ZCBiZWhhdmUgbGlrZSkKIGl0ZW0odHQoQVVUT19QVVNIRCkgKHR0KC1OKSkpKAogTWFrZSB0dChj
ZCkgcHVzaCB0aGUgb2xkIGRpcmVjdG9yeSBvbnRvIHRoZSBkaXJlY3Rvcnkgc3RhY2suCiApCiBw
aW5kZXgoQ0RBQkxFX1ZBUlMpCitwaW5kZXgoTk9fQ0RBQkxFX1ZBUlMpCiBwaW5kZXgoQ0RBQkxF
VkFSUykKK3BpbmRleChOT0NEQUJMRVZBUlMpCiBjaW5kZXgoY2QsIHRvIHBhcmFtZXRlcikKIGl0
ZW0odHQoQ0RBQkxFX1ZBUlMpICh0dCgtVCkpKSgKIElmIHRoZSBhcmd1bWVudCB0byBhIHR0KGNk
KSBjb21tYW5kIChvciBhbiBpbXBsaWVkIHR0KGNkKSB3aXRoIHRoZQpAQCAtNzksNyArODUsOSBA
QCBzbGFzaCwgdHJ5IHRvIGV4cGFuZCB0aGUgZXhwcmVzc2lvbiBhcyBpZiBpdCB3ZXJlIHByZWNl
ZGVkIGJ5IGEgYHR0KH4pJyAoc2VlCiBub2RlcmVmKEZpbGVuYW1lIEV4cGFuc2lvbikpLgogKQog
cGluZGV4KENIQVNFX0RPVFMpCitwaW5kZXgoTk9fQ0hBU0VfRE9UUykKIHBpbmRleChDSEFTRURP
VFMpCitwaW5kZXgoTk9DSEFTRURPVFMpCiBjaW5kZXgoY2QsIHdpdGggLi4gaW4gYXJndW1lbnQp
CiBpdGVtKHR0KENIQVNFX0RPVFMpKSgKIFdoZW4gY2hhbmdpbmcgdG8gYSBkaXJlY3RvcnkgY29u
dGFpbmluZyBhIHBhdGggc2VnbWVudCBgdHQoLi4pJyB3aGljaCB3b3VsZApAQCAtOTYsNyArMTA0
LDkgQEAgaXMgdHQoL2Zvby9iYXIpIGFuZCBgdHQoY2QgLi4pJyBpcyB1c2VkLiAgTm90ZSB0aGF0
IGFsbCBvdGhlciBzeW1ib2xpYwogbGlua3MgaW4gdGhlIHBhdGggd2lsbCBhbHNvIGJlIHJlc29s
dmVkLgogKQogcGluZGV4KENIQVNFX0xJTktTKQorcGluZGV4KE5PX0NIQVNFX0xJTktTKQogcGlu
ZGV4KENIQVNFTElOS1MpCitwaW5kZXgoTk9DSEFTRUxJTktTKQogY2luZGV4KGxpbmtzLCBzeW1i
b2xpYykKIGNpbmRleChzeW1ib2xpYyBsaW5rcykKIGl0ZW0odHQoQ0hBU0VfTElOS1MpICh0dCgt
dykpKSgKQEAgLTEwNiwyNiArMTE2LDM0IEBAIHdpbGwgYmUgdHJlYXRlZCBhcyByZWZlcnJpbmcg
dG8gdGhlIHBoeXNpY2FsIHBhcmVudCwgZXZlbiBpZiB0aGUgcHJlY2VkaW5nCiBwYXRoIHNlZ21l
bnQgaXMgYSBzeW1ib2xpYyBsaW5rLgogKQogcGluZGV4KFBVU0hEX0lHTk9SRV9EVVBTKQorcGlu
ZGV4KE5PX1BVU0hEX0lHTk9SRV9EVVBTKQogcGluZGV4KFBVU0hESUdOT1JFRFVQUykKK3BpbmRl
eChOT1BVU0hESUdOT1JFRFVQUykKIGNpbmRleChkaXJlY3Rvcnkgc3RhY2ssIGlnbm9yaW5nIGR1
cGxpY2F0ZXMpCiBpdGVtKHR0KFBVU0hEX0lHTk9SRV9EVVBTKSkoCiBEb24ndCBwdXNoIG11bHRp
cGxlIGNvcGllcyBvZiB0aGUgc2FtZSBkaXJlY3Rvcnkgb250byB0aGUgZGlyZWN0b3J5IHN0YWNr
LgogKQogcGluZGV4KFBVU0hEX01JTlVTKQorcGluZGV4KE5PX1BVU0hEX01JTlVTKQogcGluZGV4
KFBVU0hETUlOVVMpCitwaW5kZXgoTk9QVVNIRE1JTlVTKQogY2luZGV4KGRpcmVjdG9yeSBzdGFj
aywgY29udHJvbGxpbmcgc3ludGF4KQogaXRlbSh0dChQVVNIRF9NSU5VUykpKAogRXhjaGFuZ2Vz
IHRoZSBtZWFuaW5ncyBvZiBgdHQoUExVUygpKScgYW5kIGB0dCgtKScKIHdoZW4gdXNlZCB3aXRo
IGEgbnVtYmVyIHRvIHNwZWNpZnkgYSBkaXJlY3RvcnkgaW4gdGhlIHN0YWNrLgogKQogcGluZGV4
KFBVU0hEX1NJTEVOVCkKK3BpbmRleChOT19QVVNIRF9TSUxFTlQpCiBwaW5kZXgoUFVTSERTSUxF
TlQpCitwaW5kZXgoTk9QVVNIRFNJTEVOVCkKIGNpbmRleChkaXJlY3Rvcnkgc3RhY2ssIHNpbGVu
Y2luZykKIGl0ZW0odHQoUFVTSERfU0lMRU5UKSAodHQoLUUpKSkoCiBEbyBub3QgcHJpbnQgdGhl
IGRpcmVjdG9yeSBzdGFjayBhZnRlciB0dChwdXNoZCkgb3IgdHQocG9wZCkuCiApCiBwaW5kZXgo
UFVTSERfVE9fSE9NRSkKK3BpbmRleChOT19QVVNIRF9UT19IT01FKQogcGluZGV4KFBVU0hEVE9I
T01FKQorcGluZGV4KE5PUFVTSERUT0hPTUUpCiBjaW5kZXgocHVzaGQsIHRvIGhvbWUpCiBpdGVt
KHR0KFBVU0hEX1RPX0hPTUUpICh0dCgtRCkpKSgKIEhhdmUgdHQocHVzaGQpIHdpdGggbm8gYXJn
dW1lbnRzIGFjdCBsaWtlIGB0dChwdXNoZCAkSE9NRSknLgpAQCAtMTM1LDE0ICsxNTMsMTggQEAg
ZW5kaXRlbSgpCiBzdWJzZWN0KENvbXBsZXRpb24pCiBzdGFydGl0ZW0oKQogcGluZGV4KEFMV0FZ
U19MQVNUX1BST01QVCkKK3BpbmRleChOT19BTFdBWVNfTEFTVF9QUk9NUFQpCiBwaW5kZXgoQUxX
QVlTTEFTVFBST01QVCkKK3BpbmRleChOT0FMV0FZU0xBU1RQUk9NUFQpCiBpdGVtKHR0KEFMV0FZ
U19MQVNUX1BST01QVCkgPEQ+KSgKIElmIHVuc2V0LCBrZXkgZnVuY3Rpb25zIHRoYXQgbGlzdCBj
b21wbGV0aW9ucyB0cnkgdG8gcmV0dXJuIHRvIHRoZSBsYXN0CiBwcm9tcHQgaWYgZ2l2ZW4gYSBu
dW1lcmljIGFyZ3VtZW50LiBJZiBzZXQgdGhlc2UgZnVuY3Rpb25zIHRyeSB0bwogcmV0dXJuIHRv
IHRoZSBsYXN0IHByb21wdCBpZiBnaXZlbiBlbShubykgbnVtZXJpYyBhcmd1bWVudC4KICkKIHBp
bmRleChBTFdBWVNfVE9fRU5EKQorcGluZGV4KE5PX0FMV0FZU19UT19FTkQpCiBwaW5kZXgoQUxX
QVlTVE9FTkQpCitwaW5kZXgoTk9BTFdBWVNUT0VORCkKIGl0ZW0odHQoQUxXQVlTX1RPX0VORCkp
KAogSWYgYSBjb21wbGV0aW9uIGlzIHBlcmZvcm1lZCB3aXRoIHRoZSBjdXJzb3Igd2l0aGluIGEg
d29yZCwgYW5kIGEKIGZ1bGwgY29tcGxldGlvbiBpcyBpbnNlcnRlZCwgdGhlIGN1cnNvciBpcyBt
b3ZlZCB0byB0aGUgZW5kIG9mIHRoZQpAQCAtMTUwLDEzICsxNzIsMTcgQEAgd29yZC4gIFRoYXQg
aXMsIHRoZSBjdXJzb3IgaXMgbW92ZWQgdG8gdGhlIGVuZCBvZiB0aGUgd29yZCBpZiBlaXRoZXIK
IGEgc2luZ2xlIG1hdGNoIGlzIGluc2VydGVkIG9yIG1lbnUgY29tcGxldGlvbiBpcyBwZXJmb3Jt
ZWQuCiApCiBwaW5kZXgoQVVUT19MSVNUKQorcGluZGV4KE5PX0FVVE9fTElTVCkKIHBpbmRleChB
VVRPTElTVCkKK3BpbmRleChOT0FVVE9MSVNUKQogY2luZGV4KGNvbXBsZXRpb24sIGxpc3Rpbmcg
Y2hvaWNlcykKIGl0ZW0odHQoQVVUT19MSVNUKSAodHQoLTkpKSA8RD4pKAogQXV0b21hdGljYWxs
eSBsaXN0IGNob2ljZXMgb24gYW4gYW1iaWd1b3VzIGNvbXBsZXRpb24uCiApCiBwaW5kZXgoQVVU
T19NRU5VKQorcGluZGV4KE5PX0FVVE9fTUVOVSkKIHBpbmRleChBVVRPTUVOVSkKK3BpbmRleChO
T0FVVE9NRU5VKQogY2luZGV4KGNvbXBsZXRpb24sIG1lbnUpCiBpdGVtKHR0KEFVVE9fTUVOVSkg
PEQ+KSgKIEF1dG9tYXRpY2FsbHkgdXNlIG1lbnUgY29tcGxldGlvbiBhZnRlciB0aGUgc2Vjb25k
IGNvbnNlY3V0aXZlIHJlcXVlc3QgZm9yCkBAIC0xNjQsNyArMTkwLDkgQEAgY29tcGxldGlvbiwg
Zm9yIGV4YW1wbGUgYnkgcHJlc3NpbmcgdGhlIHRhYiBrZXkgcmVwZWF0ZWRseS4gVGhpcyBvcHRp
b24KIGlzIG92ZXJyaWRkZW4gYnkgdHQoTUVOVV9DT01QTEVURSkuCiApCiBwaW5kZXgoQVVUT19O
QU1FX0RJUlMpCitwaW5kZXgoTk9fQVVUT19OQU1FX0RJUlMpCiBwaW5kZXgoQVVUT05BTUVESVJT
KQorcGluZGV4KE5PQVVUT05BTUVESVJTKQogY2luZGV4KGRpcmVjdG9yaWVzLCBuYW1lZCkKIGl0
ZW0odHQoQVVUT19OQU1FX0RJUlMpKSgKIEFueSBwYXJhbWV0ZXIgdGhhdCBpcyBzZXQgdG8gdGhl
IGFic29sdXRlIG5hbWUgb2YgYSBkaXJlY3RvcnkKQEAgLTE3NSw3ICsyMDMsOSBAQCBpcyBwZXJm
b3JtZWQgb24gYSB3b3JkIHN0YXJ0aW5nIHdpdGggYHR0KH4pJy4KIChPdGhlcndpc2UsIHRoZSBw
YXJhbWV0ZXIgbXVzdCBiZSB1c2VkIGluIHRoZSBmb3JtIGB0dCh+KXZhcihwYXJhbSknIGZpcnN0
LikKICkKIHBpbmRleChBVVRPX1BBUkFNX0tFWVMpCitwaW5kZXgoTk9fQVVUT19QQVJBTV9LRVlT
KQogcGluZGV4KEFVVE9QQVJBTUtFWVMpCitwaW5kZXgoTk9BVVRPUEFSQU1LRVlTKQogaXRlbSh0
dChBVVRPX1BBUkFNX0tFWVMpIDxEPikoCiBJZiBhIHBhcmFtZXRlciBuYW1lIHdhcyBjb21wbGV0
ZWQgYW5kIGEgZm9sbG93aW5nIGNoYXJhY3RlcgogKG5vcm1hbGx5IGEgc3BhY2UpIGF1dG9tYXRp
Y2FsbHkKQEAgLTE4NywxMyArMjE3LDE3IEBAIENvbXBsZXRpb24gaW4gYSBicmFjZSBleHBhbnNp
b24gaXMgYWZmZWN0ZWQgc2ltaWxhcmx5OiB0aGUgYWRkZWQgY2hhcmFjdGVyCiBpcyBhIGB0dCgs
KScsIHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBpZiBgdHQofSknIGlzIHR5cGVkIG5leHQuCiApCiBw
aW5kZXgoQVVUT19QQVJBTV9TTEFTSCkKK3BpbmRleChOT19BVVRPX1BBUkFNX1NMQVNIKQogcGlu
ZGV4KEFVVE9QQVJBTVNMQVNIKQorcGluZGV4KE5PQVVUT1BBUkFNU0xBU0gpCiBpdGVtKHR0KEFV
VE9fUEFSQU1fU0xBU0gpIDxEPikoCiBJZiBhIHBhcmFtZXRlciBpcyBjb21wbGV0ZWQgd2hvc2Ug
Y29udGVudCBpcyB0aGUgbmFtZSBvZiBhIGRpcmVjdG9yeSwKIHRoZW4gYWRkIGEgdHJhaWxpbmcg
c2xhc2ggaW5zdGVhZCBvZiBhIHNwYWNlLgogKQogcGluZGV4KEFVVE9fUkVNT1ZFX1NMQVNIKQor
cGluZGV4KE5PX0FVVE9fUkVNT1ZFX1NMQVNIKQogcGluZGV4KEFVVE9SRU1PVkVTTEFTSCkKK3Bp
bmRleChOT0FVVE9SRU1PVkVTTEFTSCkKIGNpbmRleChzbGFzaCwgcmVtb3ZpbmcgdHJhaWxpbmcp
CiBpdGVtKHR0KEFVVE9fUkVNT1ZFX1NMQVNIKSA8RD4pKAogV2hlbiB0aGUgbGFzdCBjaGFyYWN0
ZXIgcmVzdWx0aW5nIGZyb20gYSBjb21wbGV0aW9uIGlzIGEgc2xhc2ggYW5kIHRoZSBuZXh0CkBA
IC0yMDEsNyArMjM1LDkgQEAgY2hhcmFjdGVyIHR5cGVkIGlzIGEgd29yZCBkZWxpbWl0ZXIsIGEg
c2xhc2gsIG9yIGEgY2hhcmFjdGVyIHRoYXQgZW5kcwogYSBjb21tYW5kIChzdWNoIGFzIGEgc2Vt
aWNvbG9uIG9yIGFuIGFtcGVyc2FuZCksIHJlbW92ZSB0aGUgc2xhc2guCiApCiBwaW5kZXgoQkFT
SF9BVVRPX0xJU1QpCitwaW5kZXgoTk9fQkFTSF9BVVRPX0xJU1QpCiBwaW5kZXgoQkFTSEFVVE9M
SVNUKQorcGluZGV4KE5PQkFTSEFVVE9MSVNUKQogY2luZGV4KGNvbXBsZXRpb24sIGxpc3Rpbmcg
Y2hvaWNlcywgYmFzaCBzdHlsZSkKIGl0ZW0odHQoQkFTSF9BVVRPX0xJU1QpKSgKIE9uIGFuIGFt
YmlndW91cyBjb21wbGV0aW9uLCBhdXRvbWF0aWNhbGx5IGxpc3QgY2hvaWNlcyB3aGVuIHRoZQpA
QCAtMjEzLDcgKzI0OSw5IEBAIHR0KE1FTlVfQ09NUExFVEUpLCBzaW5jZSByZXBlYXRlZCBjb21w
bGV0aW9uIGNhbGxzIGltbWVkaWF0ZWx5IGN5Y2xlCiB0aHJvdWdoIHRoZSBsaXN0IGluIHRoYXQg
Y2FzZS4KICkKIHBpbmRleChDT01QTEVURV9BTElBU0VTKQorcGluZGV4KE5PX0NPTVBMRVRFX0FM
SUFTRVMpCiBwaW5kZXgoQ09NUExFVEVBTElBU0VTKQorcGluZGV4KE5PQ09NUExFVEVBTElBU0VT
KQogY2luZGV4KGFsaWFzZXMsIGNvbXBsZXRpb24gb2YpCiBpdGVtKHR0KENPTVBMRVRFX0FMSUFT
RVMpKSgKIFByZXZlbnRzIGFsaWFzZXMgb24gdGhlIGNvbW1hbmQgbGluZSBmcm9tIGJlaW5nIGlu
dGVybmFsbHkgc3Vic3RpdHV0ZWQKQEAgLTIyMSwxMyArMjU5LDE3IEBAIGJlZm9yZSBjb21wbGV0
aW9uIGlzIGF0dGVtcHRlZC4gIFRoZSBlZmZlY3QgaXMgdG8gbWFrZSB0aGUgYWxpYXMgYQogZGlz
dGluY3QgY29tbWFuZCBmb3IgY29tcGxldGlvbiBwdXJwb3Nlcy4KICkKIHBpbmRleChDT01QTEVU
RV9JTl9XT1JEKQorcGluZGV4KE5PX0NPTVBMRVRFX0lOX1dPUkQpCiBwaW5kZXgoQ09NUExFVEVJ
TldPUkQpCitwaW5kZXgoTk9DT01QTEVURUlOV09SRCkKIGl0ZW0odHQoQ09NUExFVEVfSU5fV09S
RCkpKAogSWYgdW5zZXQsIHRoZSBjdXJzb3IgaXMgc2V0IHRvIHRoZSBlbmQgb2YgdGhlIHdvcmQg
aWYgY29tcGxldGlvbiBpcwogc3RhcnRlZC4gT3RoZXJ3aXNlIGl0IHN0YXlzIHRoZXJlIGFuZCBj
b21wbGV0aW9uIGlzIGRvbmUgZnJvbSBib3RoIGVuZHMuCiApCiBwaW5kZXgoR0xPQl9DT01QTEVU
RSkKK3BpbmRleChOT19HTE9CX0NPTVBMRVRFKQogcGluZGV4KEdMT0JDT01QTEVURSkKK3BpbmRl
eChOT0dMT0JDT01QTEVURSkKIGl0ZW0odHQoR0xPQl9DT01QTEVURSkpKAogV2hlbiB0aGUgY3Vy
cmVudCB3b3JkIGhhcyBhIGdsb2IgcGF0dGVybiwgZG8gbm90IGluc2VydCBhbGwgdGhlIHdvcmRz
CiByZXN1bHRpbmcgZnJvbSB0aGUgZXhwYW5zaW9uIGJ1dCBnZW5lcmF0ZSBtYXRjaGVzIGFzIGZv
ciBjb21wbGV0aW9uIGFuZApAQCAtMjQzLDEzICsyODUsMTcgQEAgb25seSBhcHBsaWVzIHdoZW4g
dGhlIGN1cnJlbnQgd29yZCBjb250YWlucyBhIHBhdHRlcm47IHNpbXBseSB0dXJuaW5nCiBvbiB0
aGUgdHQoR0xPQl9DT01QTEVURSkgb3B0aW9uIGRvZXMgbm90IGhhdmUgdGhpcyBlZmZlY3QuCiAp
CiBwaW5kZXgoSEFTSF9MSVNUX0FMTCkKK3BpbmRleChOT19IQVNIX0xJU1RfQUxMKQogcGluZGV4
KEhBU0hMSVNUQUxMKQorcGluZGV4KE5PSEFTSExJU1RBTEwpCiBpdGVtKHR0KEhBU0hfTElTVF9B
TEwpIDxEPikoCiBXaGVuZXZlciBhIGNvbW1hbmQgY29tcGxldGlvbiBpcyBhdHRlbXB0ZWQsIG1h
a2Ugc3VyZSB0aGUgZW50aXJlCiBjb21tYW5kIHBhdGggaXMgaGFzaGVkIGZpcnN0LiAgVGhpcyBt
YWtlcyB0aGUgZmlyc3QgY29tcGxldGlvbiBzbG93ZXIuCiApCiBwaW5kZXgoTElTVF9BTUJJR1VP
VVMpCitwaW5kZXgoTk9fTElTVF9BTUJJR1VPVVMpCiBwaW5kZXgoTElTVEFNQklHVU9VUykKK3Bp
bmRleChOT0xJU1RBTUJJR1VPVVMpCiBjaW5kZXgoYW1iaWd1b3VzIGNvbXBsZXRpb24pCiBjaW5k
ZXgoY29tcGxldGlvbiwgYW1iaWd1b3VzKQogaXRlbSh0dChMSVNUX0FNQklHVU9VUykgPEQ+KSgK
QEAgLTI2MSw3ICszMDcsOSBAQCBpbnNlcnRlZC4gIEluIHRoZSBjYXNlIG9mIHR0KEJBU0hfQVVU
T19MSVNUKSwgdGhpcyBtZWFucyB0aGF0IHRoZSBsaXN0CiB3aWxsIGJlIGRlbGF5ZWQgdG8gdGhl
IHRoaXJkIGNhbGwgb2YgdGhlIGZ1bmN0aW9uLgogKQogcGluZGV4KExJU1RfQkVFUCkKK3BpbmRl
eChOT19MSVNUX0JFRVApCiBwaW5kZXgoTElTVEJFRVApCitwaW5kZXgoTk9MSVNUQkVFUCkKIGNp
bmRleChiZWVwLCBhbWJpZ3VvdXMgY29tcGxldGlvbikKIGNpbmRleChjb21wbGV0aW9uLCBiZWVw
IG9uIGFtYmlndW91cykKIGl0ZW0odHQoTElTVF9CRUVQKSA8RD4pKApAQCAtMjcxLDE0ICszMTks
MTggQEAgY2F1c2VzIHRoZSBzaGVsbCB0byBiZWVwIGlmIHRoZSBvcHRpb24gdHQoQkVFUCkgaXMg
YWxzbyBzZXQ7IHRoaXMgbWF5CiBiZSBtb2RpZmllZCBpZiBjb21wbGV0aW9uIGlzIGNhbGxlZCBm
cm9tIGEgdXNlci1kZWZpbmVkIHdpZGdldC4KICkKIHBpbmRleChMSVNUX1BBQ0tFRCkKK3BpbmRl
eChOT19MSVNUX1BBQ0tFRCkKIHBpbmRleChMSVNUUEFDS0VEKQorcGluZGV4KE5PTElTVFBBQ0tF
RCkKIGNpbmRleChjb21wbGV0aW9uLCBsaXN0aW5nKQogaXRlbSh0dChMSVNUX1BBQ0tFRCkpKAog
VHJ5IHRvIG1ha2UgdGhlIGNvbXBsZXRpb24gbGlzdCBzbWFsbGVyIChvY2N1cHlpbmcgbGVzcyBs
aW5lcykgYnkKIHByaW50aW5nIHRoZSBtYXRjaGVzIGluIGNvbHVtbnMgd2l0aCBkaWZmZXJlbnQg
d2lkdGhzLgogKQogcGluZGV4KExJU1RfUk9XU19GSVJTVCkKK3BpbmRleChOT19MSVNUX1JPV1Nf
RklSU1QpCiBwaW5kZXgoTElTVFJPV1NGSVJTVCkKK3BpbmRleChOT0xJU1RST1dTRklSU1QpCiBj
aW5kZXgoY29tcGxldGlvbiwgbGlzdGluZyBvcmRlcikKIGl0ZW0odHQoTElTVF9ST1dTX0ZJUlNU
KSkoCiBMYXkgb3V0IHRoZSBtYXRjaGVzIGluIGNvbXBsZXRpb24gbGlzdHMgc29ydGVkIGhvcml6
b250YWxseSwgdGhhdCBpcywKQEAgLTI4Niw3ICszMzgsOSBAQCB0aGUgc2Vjb25kIG1hdGNoIGlz
IHRvIHRoZSByaWdodCBvZiB0aGUgZmlyc3Qgb25lLCBub3QgdW5kZXIgaXQgYXMKIHVzdWFsLgog
KQogcGluZGV4KExJU1RfVFlQRVMpCitwaW5kZXgoTk9fTElTVF9UWVBFUykKIHBpbmRleChMSVNU
VFlQRVMpCitwaW5kZXgoTk9MSVNUVFlQRVMpCiBjaW5kZXgobWFya2luZyBmaWxlIHR5cGVzKQog
Y2luZGV4KGZpbGVzLCBtYXJraW5nIHR5cGUgb2YpCiBpdGVtKHR0KExJU1RfVFlQRVMpICh0dCgt
WCkpIDxEPikoCkBAIC0yOTQsNyArMzQ4LDkgQEAgV2hlbiBsaXN0aW5nIGZpbGVzIHRoYXQgYXJl
IHBvc3NpYmxlIGNvbXBsZXRpb25zLCBzaG93IHRoZQogdHlwZSBvZiBlYWNoIGZpbGUgd2l0aCBh
IHRyYWlsaW5nIGlkZW50aWZ5aW5nIG1hcmsuCiApCiBwaW5kZXgoTUVOVV9DT01QTEVURSkKK3Bp
bmRleChOT19NRU5VX0NPTVBMRVRFKQogcGluZGV4KE1FTlVDT01QTEVURSkKK3BpbmRleChOT01F
TlVDT01QTEVURSkKIGNpbmRleChjb21wbGV0aW9uLCBtZW51KQogaXRlbSh0dChNRU5VX0NPTVBM
RVRFKSAodHQoLVkpKSkoCiBPbiBhbiBhbWJpZ3VvdXMgY29tcGxldGlvbiwgaW5zdGVhZCBvZiBs
aXN0aW5nIHBvc3NpYmlsaXRpZXMgb3IgYmVlcGluZywKQEAgLTMwNSw3ICszNjEsOSBAQCB0dChy
ZXZlcnNlLW1lbnUtY29tcGxldGUpIG1heSBiZSB1c2VkIHRvIGxvb3AgdGhyb3VnaCB0aGUgbGlz
dAogaW4gdGhlIG90aGVyIGRpcmVjdGlvbi4gVGhpcyBvcHRpb24gb3ZlcnJpZGVzIHR0KEFVVE9f
TUVOVSkuCiApCiBwaW5kZXgoUkVDX0VYQUNUKQorcGluZGV4KE5PX1JFQ19FWEFDVCkKIHBpbmRl
eChSRUNFWEFDVCkKK3BpbmRleChOT1JFQ0VYQUNUKQogY2luZGV4KGNvbXBsZXRpb24sIGV4YWN0
IG1hdGNoZXMpCiBpdGVtKHR0KFJFQ19FWEFDVCkgKHR0KC1TKSkpKAogSW4gY29tcGxldGlvbiwg
cmVjb2duaXplIGV4YWN0IG1hdGNoZXMgZXZlbgpAQCAtMzE2LDcgKzM3NCw5IEBAIGVuZGl0ZW0o
KQogc3Vic2VjdChFeHBhbnNpb24gYW5kIEdsb2JiaW5nKQogc3RhcnRpdGVtKCkKIHBpbmRleChC
QURfUEFUVEVSTikKK3BpbmRleChOT19CQURfUEFUVEVSTikKIHBpbmRleChCQURQQVRURVJOKQor
cGluZGV4KE5PQkFEUEFUVEVSTikKIGNpbmRleChnbG9iYmluZywgYmFkIHBhdHRlcm4pCiBjaW5k
ZXgoZmlsZW5hbWUgZ2VuZXJhdGlvbiwgYmFkIHBhdHRlcm4pCiBpdGVtKHR0KEJBRF9QQVRURVJO
KSAodHQoUExVUygpMikpIDxDPiA8Wj4pKApAQCAtMzI0LDcgKzM4NCw5IEBAIElmIGEgcGF0dGVy
biBmb3IgZmlsZW5hbWUgZ2VuZXJhdGlvbiBpcyBiYWRseSBmb3JtZWQsIHByaW50IGFuIGVycm9y
IG1lc3NhZ2UuCiAoSWYgdGhpcyBvcHRpb24gaXMgdW5zZXQsIHRoZSBwYXR0ZXJuIHdpbGwgYmUg
bGVmdCB1bmNoYW5nZWQuKQogKQogcGluZGV4KEJBUkVfR0xPQl9RVUFMKQorcGluZGV4KE5PX0JB
UkVfR0xPQl9RVUFMKQogcGluZGV4KEJBUkVHTE9CUVVBTCkKK3BpbmRleChOT0JBUkVHTE9CUVVB
TCkKIGNpbmRleChnbG9iYmluZyBxdWFsaWZpZXJzLCBlbmFibGUpCiBjaW5kZXgoZW5hYmxlIGds
b2JiaW5nIHF1YWxpZmllcnMpCiBpdGVtKHR0KEJBUkVfR0xPQl9RVUFMKSA8Wj4pKApAQCAtMzMz
LDcgKzM5NSw5IEBAIGxpc3QsIGlmIGl0IGNvbnRhaW5zIG5vIGB0dCh8KScsIGB0dChMUEFSKCkp
JyBvciAoaWYgc3BlY2lhbCkgYHR0KH4pJwogY2hhcmFjdGVycy4gIFNlZSBub2RlcmVmKEZpbGVu
YW1lIEdlbmVyYXRpb24pLgogKQogcGluZGV4KEJSQUNFX0NDTCkKK3BpbmRleChOT19CUkFDRV9D
Q0wpCiBwaW5kZXgoQlJBQ0VDQ0wpCitwaW5kZXgoTk9CUkFDRUNDTCkKIGNpbmRleChicmFjZSBl
eHBhbnNpb24sIGV4dGVuZGluZykKIGNpbmRleChleHBhbnNpb24sIGJyYWNlLCBleHRlbmRpbmcp
CiBpdGVtKHR0KEJSQUNFX0NDTCkpKApAQCAtMzQyLDcgKzQwNiw5IEBAIGV4cGFuc2lvbiB0byBh
IGxleGljYWxseSBvcmRlcmVkIGxpc3Qgb2YgYWxsIHRoZSBjaGFyYWN0ZXJzLiAgU2VlCiBub2Rl
cmVmKEJyYWNlIEV4cGFuc2lvbikuCiApCiBwaW5kZXgoQ0FTRV9HTE9CKQorcGluZGV4KE5PX0NB
U0VfR0xPQikKIHBpbmRleChDQVNFR0xPQikKK3BpbmRleChOT0NBU0VHTE9CKQogY2luZGV4KGNh
c2UtaW5zZW5zaXRpdmUgZ2xvYmJpbmcsIG9wdGlvbikKIGl0ZW0odHQoQ0FTRV9HTE9CKSA8RD4p
KAogTWFrZSBnbG9iYmluZyAoZmlsZW5hbWUgZ2VuZXJhdGlvbikgc2Vuc2l0aXZlIHRvIGNhc2Uu
ICBOb3RlIHRoYXQgb3RoZXIKQEAgLTM1Myw3ICs0MTksOSBAQCBjYW4gbWF0Y2ggdGhlIGRpcmVj
dG9yeSB0dChDVlMpIG93aW5nIHRvIHRoZSBwcmVzZW5jZSBvZiB0aGUgZ2xvYmJpbmcgZmxhZwog
KHVubGVzcyB0aGUgb3B0aW9uIHR0KEJBUkVfR0xPQl9RVUFMKSBpcyB1bnNldCkuCiApCiBwaW5k
ZXgoQ0FTRV9NQVRDSCkKK3BpbmRleChOT19DQVNFX01BVENIKQogcGluZGV4KENBU0VNQVRDSCkK
K3BpbmRleChOT0NBU0VNQVRDSCkKIGNpbmRleChjYXNlLWluc2Vuc2l0aXZlIHJlZ3VsYXIgZXhw
cmVzc2lvbiBtYXRjaGVzLCBvcHRpb24pCiBjaW5kZXgocmVndWxhciBleHByZXNzaW9ucywgY2Fz
ZS1pbnNlbnNpdGl2ZSBtYXRjaGluZywgb3B0aW9uKQogaXRlbSh0dChDQVNFX01BVENIKSA8RD4p
KApAQCAtMzYxLDcgKzQyOSw5IEBAIE1ha2UgcmVndWxhciBleHByZXNzaW9ucyB1c2luZyB0aGUg
dHQoenNoL3JlZ2V4KSBtb2R1bGUgKGluY2x1ZGluZwogbWF0Y2hlcyB3aXRoIHR0KD1+KSkgc2Vu
c2l0aXZlIHRvIGNhc2UuCiApCiBwaW5kZXgoQ1NIX05VTExfR0xPQikKK3BpbmRleChOT19DU0hf
TlVMTF9HTE9CKQogcGluZGV4KENTSE5VTExHTE9CKQorcGluZGV4KE5PQ1NITlVMTEdMT0IpCiBj
aW5kZXgoY3NoLCBudWxsIGdsb2JiaW5nIHN0eWxlKQogY2luZGV4KG51bGwgZ2xvYmJpbmcgc3R5
bGUsIGNzaCkKIGNpbmRleChnbG9iYmluZywgbnVsbCwgc3R5bGUsIGNzaCkKQEAgLTM3MywxMyAr
NDQzLDE2IEBAIGluIGEgY29tbWFuZCBoYXZlIG5vIG1hdGNoZXMuCiBPdmVycmlkZXMgdHQoTk9N
QVRDSCkuCiApCiBwaW5kZXgoRVFVQUxTKQorcGluZGV4KE5PX0VRVUFMUykKIGNpbmRleChmaWxl
bmFtZSBleHBhbnNpb24sID0pCiBpdGVtKHR0KEVRVUFMUykgPFo+KSgKIFBlcmZvcm0gdHQoPSkg
ZmlsZW5hbWUgZXhwYW5zaW9uLgogKFNlZSBub2RlcmVmKEZpbGVuYW1lIEV4cGFuc2lvbikuKQog
KQogcGluZGV4KEVYVEVOREVEX0dMT0IpCitwaW5kZXgoTk9fRVhURU5ERURfR0xPQikKIHBpbmRl
eChFWFRFTkRFREdMT0IpCitwaW5kZXgoTk9FWFRFTkRFREdMT0IpCiBjaW5kZXgoZ2xvYmJpbmcs
IGV4dGVuZGVkKQogaXRlbSh0dChFWFRFTkRFRF9HTE9CKSkoCiBUcmVhdCB0aGUgYHR0KCMpJywg
YHR0KH4pJyBhbmQgYHR0KF4pJyBjaGFyYWN0ZXJzIGFzIHBhcnQgb2YgcGF0dGVybnMKQEAgLTM4
Nyw2ICs0NjAsNyBAQCBmb3IgZmlsZW5hbWUgZ2VuZXJhdGlvbiwgZXRjLiAgKEFuIGluaXRpYWwg
dW5xdW90ZWQgYHR0KH4pJwogYWx3YXlzIHByb2R1Y2VzIG5hbWVkIGRpcmVjdG9yeSBleHBhbnNp
b24uKQogKQogcGluZGV4KEdMT0IpCitwaW5kZXgoTk9fR0xPQikKIGNpbmRleChnbG9iYmluZywg
ZW5hYmxpbmcpCiBjaW5kZXgoZW5hYmxpbmcgZ2xvYmJpbmcpCiBpdGVtKHR0KEdMT0IpICh0dChQ
TFVTKClGKSwga3NoOiB0dChQTFVTKClmKSkgPEQ+KSgKQEAgLTM5NCw3ICs0NjgsOSBAQCBQZXJm
b3JtIGZpbGVuYW1lIGdlbmVyYXRpb24gKGdsb2JiaW5nKS4KIChTZWUgbm9kZXJlZihGaWxlbmFt
ZSBHZW5lcmF0aW9uKS4pCiApCiBwaW5kZXgoR0xPQl9BU1NJR04pCitwaW5kZXgoTk9fR0xPQl9B
U1NJR04pCiBwaW5kZXgoR0xPQkFTU0lHTikKK3BpbmRleChOT0dMT0JBU1NJR04pCiBpdGVtKHR0
KEdMT0JfQVNTSUdOKSA8Qz4pKAogSWYgdGhpcyBvcHRpb24gaXMgc2V0LCBmaWxlbmFtZSBnZW5l
cmF0aW9uIChnbG9iYmluZykgaXMKIHBlcmZvcm1lZCBvbiB0aGUgcmlnaHQgaGFuZCBzaWRlIG9m
IHNjYWxhciBwYXJhbWV0ZXIgYXNzaWdubWVudHMgb2YKQEAgLTQwOCwxMyArNDg0LDE3IEBAIHdp
dGggdGhpcyBvcHRpb24gc2V0LCBpdCBpcyBub3QgcG9zc2libGUgdG8gcHJlZGljdCB3aGV0aGVy
IHRoZSByZXN1bHQKIHdpbGwgYmUgYW4gYXJyYXkgb3IgYSBzY2FsYXIuCiApCiBwaW5kZXgoR0xP
Ql9ET1RTKQorcGluZGV4KE5PX0dMT0JfRE9UUykKIHBpbmRleChHTE9CRE9UUykKK3BpbmRleChO
T0dMT0JET1RTKQogY2luZGV4KGdsb2JiaW5nLCBvZiAuIGZpbGVzKQogaXRlbSh0dChHTE9CX0RP
VFMpICh0dCgtNCkpKSgKIERvIG5vdCByZXF1aXJlIGEgbGVhZGluZyBgdHQoLiknIGluIGEgZmls
ZW5hbWUgdG8gYmUgbWF0Y2hlZCBleHBsaWNpdGx5LgogKQogcGluZGV4KEdMT0JfU1VCU1QpCitw
aW5kZXgoTk9fR0xPQl9TVUJTVCkKIHBpbmRleChHTE9CU1VCU1QpCitwaW5kZXgoTk9HTE9CU1VC
U1QpCiBpdGVtKHR0KEdMT0JfU1VCU1QpIDxDPiA8Sz4gPFM+KSgKIFRyZWF0IGFueSBjaGFyYWN0
ZXJzIHJlc3VsdGluZyBmcm9tIHBhcmFtZXRlciBleHBhbnNpb24gYXMgYmVpbmcKIGVsaWdpYmxl
IGZvciBmaWxlIGV4cGFuc2lvbiBhbmQgZmlsZW5hbWUgZ2VuZXJhdGlvbiwgYW5kIGFueQpAQCAt
NDIzLDcgKzUwMyw5IEBAIGZpbGVuYW1lIGdlbmVyYXRpb24uICBCcmFjZXMgKGFuZCBjb21tYXMg
aW4gYmV0d2VlbikgZG8gbm90IGJlY29tZSBlbGlnaWJsZQogZm9yIGV4cGFuc2lvbi4KICkKIHBp
bmRleChISVNUX1NVQlNUX1BBVFRFUk4pCitwaW5kZXgoTk9fSElTVF9TVUJTVF9QQVRURVJOKQog
cGluZGV4KEhJU1RTVUJTVFBBVFRFUk4pCitwaW5kZXgoTk9ISVNUU1VCU1RQQVRURVJOKQogaXRl
bSh0dChISVNUX1NVQlNUX1BBVFRFUk4pKSgKIFN1YnN0aXR1dGlvbnMgdXNpbmcgdGhlIHR0KDpz
KSBhbmQgdHQoOiYpIGhpc3RvcnkgbW9kaWZpZXJzIGFyZSBwZXJmb3JtZWQKIHdpdGggcGF0dGVy
biBtYXRjaGluZyBpbnN0ZWFkIG9mIHN0cmluZyBtYXRjaGluZy4gIFRoaXMgb2NjdXJzIHdoZXJl
dmVyCkBAIC00MzMsNyArNTE1LDkgQEAgaWZ6bWFuKHRoZSBzZWN0aW9uIE1vZGlmaWVycyBpbiB6
bWFucmVmKHpzaGV4cCkpXAogaWZuem1hbihub2RlcmVmKE1vZGlmaWVycykpLgogKQogcGluZGV4
KElHTk9SRV9CUkFDRVMpCitwaW5kZXgoTk9fSUdOT1JFX0JSQUNFUykKIHBpbmRleChJR05PUkVC
UkFDRVMpCitwaW5kZXgoTk9JR05PUkVCUkFDRVMpCiBjaW5kZXgoZGlzYWJsaW5nIGJyYWNlIGV4
cGFuc2lvbikKIGNpbmRleChicmFjZSBleHBhbnNpb24sIGRpc2FibGluZykKIGNpbmRleChleHBh
bnNpb24sIGJyYWNlLCBkaXNhYmxpbmcpCkBAIC00NDEsMTQgKzUyNSwxOCBAQCBpdGVtKHR0KElH
Tk9SRV9CUkFDRVMpICh0dCgtSSkpIDxTPikoCiBEbyBub3QgcGVyZm9ybSBicmFjZSBleHBhbnNp
b24uCiApCiBwaW5kZXgoS1NIX0dMT0IpCitwaW5kZXgoTk9fS1NIX0dMT0IpCiBwaW5kZXgoS1NI
R0xPQikKK3BpbmRleChOT0tTSEdMT0IpCiBpdGVtKHR0KEtTSF9HTE9CKSA8Sz4pKAogSW4gcGF0
dGVybiBtYXRjaGluZywgdGhlIGludGVycHJldGF0aW9uIG9mIHBhcmVudGhlc2VzIGlzIGFmZmVj
dGVkIGJ5CiBhIHByZWNlZGluZyBgdHQoQCknLCBgdHQoKiknLCBgdHQoKyknLCBgdHQoPyknIG9y
IGB0dCghKScuCiBTZWUgbm9kZXJlZihGaWxlbmFtZSBHZW5lcmF0aW9uKS4KICkKIHBpbmRleChN
QUdJQ19FUVVBTF9TVUJTVCkKK3BpbmRleChOT19NQUdJQ19FUVVBTF9TVUJTVCkKIHBpbmRleChN
QUdJQ0VRVUFMU1VCU1QpCitwaW5kZXgoTk9NQUdJQ0VRVUFMU1VCU1QpCiBpdGVtKHR0KE1BR0lD
X0VRVUFMX1NVQlNUKSkoCiBBbGwgdW5xdW90ZWQgYXJndW1lbnRzIG9mIHRoZSBmb3JtIGB2YXIo
YW55dGhpbmcpdHQoPSl2YXIoZXhwcmVzc2lvbiknCiBhcHBlYXJpbmcgYWZ0ZXIgdGhlIGNvbW1h
bmQgbmFtZSBoYXZlIGZpbGVuYW1lIGV4cGFuc2lvbiAodGhhdCBpcywKQEAgLTQ2NCw3ICs1NTIs
OSBAQCB3b3JkcywgaWYgYm90aCBvcHRpb25zIGFyZSBpbiBlZmZlY3QsIGFyZ3VtZW50cyBsb29r
aW5nIGxpa2UKIGFzc2lnbm1lbnRzIHdpbGwgbm90IHVuZGVyZ28gd29yZCBzcGxpdHRpbmcuCiAp
CiBwaW5kZXgoTUFSS19ESVJTKQorcGluZGV4KE5PX01BUktfRElSUykKIHBpbmRleChNQVJLRElS
UykKK3BpbmRleChOT01BUktESVJTKQogY2luZGV4KGRpcmVjdG9yaWVzLCBtYXJraW5nKQogY2lu
ZGV4KG1hcmtpbmcgZGlyZWN0b3JpZXMpCiBpdGVtKHR0KE1BUktfRElSUykgKHR0KC04KSwga3No
OiB0dCgtWCkpKSgKQEAgLTQ3Miw2ICs1NjIsNyBAQCBBcHBlbmQgYSB0cmFpbGluZyBgdHQoLykn
IHRvIGFsbCBkaXJlY3RvcnkKIG5hbWVzIHJlc3VsdGluZyBmcm9tIGZpbGVuYW1lIGdlbmVyYXRp
b24gKGdsb2JiaW5nKS4KICkKIHBpbmRleChNVUxUSUJZVEUpCitwaW5kZXgoTk9fTVVMVElCWVRF
KQogY2luZGV4KGNoYXJhY3RlcnMsIG11bHRpYnl0ZSwgaW4gZXhwYW5zaW9uIGFuZCBnbG9iYmlu
ZykKIGNpbmRleChtdWx0aWJ5dGUgY2hhcmFjdGVycywgaW4gZXhwYW5zaW9uIGFuZCBnbG9iYmlu
ZykKIGl0ZW0odHQoTVVMVElCWVRFKSA8Qz4gPEs+IDxaPikoCkBAIC01MDAsNiArNTkxLDcgQEAg
dGhlIGNoYXJhY3RlciBzZXQgZGlzcGxheWVkIGJ5IHRoZSB0ZXJtaW5hbCBlbXVsYXRvciBpcyBp
bmRlcGVuZGVudCBvZgogc2hlbGwgc2V0dGluZ3MuCiApCiBwaW5kZXgoTk9NQVRDSCkKK3BpbmRl
eChOT19OT01BVENIKQogY2luZGV4KGdsb2JiaW5nLCBubyBtYXRjaGVzKQogaXRlbSh0dChOT01B
VENIKSAodHQoUExVUygpMykpIDxDPiA8Wj4pKAogSWYgYSBwYXR0ZXJuIGZvciBmaWxlbmFtZSBn
ZW5lcmF0aW9uIGhhcyBubyBtYXRjaGVzLApAQCAtNTA5LDcgKzYwMSw5IEBAIFRoaXMgYWxzbyBh
cHBsaWVzIHRvIGZpbGUgZXhwYW5zaW9uCiBvZiBhbiBpbml0aWFsIGB0dCh+KScgb3IgYHR0KD0p
Jy4KICkKIHBpbmRleChOVUxMX0dMT0IpCitwaW5kZXgoTk9fTlVMTF9HTE9CKQogcGluZGV4KE5V
TExHTE9CKQorcGluZGV4KE5PTlVMTEdMT0IpCiBjaW5kZXgoZ2xvYmJpbmcsIG5vIG1hdGNoZXMp
CiBpdGVtKHR0KE5VTExfR0xPQikgKHR0KC1HKSkpKAogSWYgYSBwYXR0ZXJuIGZvciBmaWxlbmFt
ZSBnZW5lcmF0aW9uIGhhcyBubyBtYXRjaGVzLApAQCAtNTE3LDE0ICs2MTEsMTggQEAgZGVsZXRl
IHRoZSBwYXR0ZXJuIGZyb20gdGhlIGFyZ3VtZW50IGxpc3QgaW5zdGVhZAogb2YgcmVwb3J0aW5n
IGFuIGVycm9yLiAgT3ZlcnJpZGVzIHR0KE5PTUFUQ0gpLgogKQogcGluZGV4KE5VTUVSSUNfR0xP
Ql9TT1JUKQorcGluZGV4KE5PX05VTUVSSUNfR0xPQl9TT1JUKQogcGluZGV4KE5VTUVSSUNHTE9C
U09SVCkKK3BpbmRleChOT05VTUVSSUNHTE9CU09SVCkKIGNpbmRleChnbG9iYmluZywgc29ydGlu
ZyBudW1lcmljYWxseSkKIGl0ZW0odHQoTlVNRVJJQ19HTE9CX1NPUlQpKSgKIElmIG51bWVyaWMg
ZmlsZW5hbWVzIGFyZSBtYXRjaGVkIGJ5IGEgZmlsZW5hbWUgZ2VuZXJhdGlvbiBwYXR0ZXJuLAog
c29ydCB0aGUgZmlsZW5hbWVzIG51bWVyaWNhbGx5IHJhdGhlciB0aGFuIGxleGljb2dyYXBoaWNh
bGx5LgogKQogcGluZGV4KFJDX0VYUEFORF9QQVJBTSkKK3BpbmRleChOT19SQ19FWFBBTkRfUEFS
QU0pCiBwaW5kZXgoUkNFWFBBTkRQQVJBTSkKK3BpbmRleChOT1JDRVhQQU5EUEFSQU0pCiBjaW5k
ZXgocmMsIHBhcmFtZXRlciBleHBhbnNpb24gc3R5bGUpCiBjaW5kZXgocGFyYW1ldGVyIGV4cGFu
c2lvbiBzdHlsZSwgcmMpCiBpdGVtKHR0KFJDX0VYUEFORF9QQVJBTSkgKHR0KC1QKSkpKApAQCAt
NTM2LDcgKzYzNCw5IEBAIHZhcih4eCkgaXMgc2V0IHRvIHR0KExQQVIoKSl2YXIoYSBiIGMpdHQo
UlBBUigpKSwgYXJlIHN1YnN0aXR1dGVkIHdpdGgKIGFsbCBhcmd1bWVudHMgdG8gYmUgcmVtb3Zl
ZC4KICkKIHBpbmRleChSRU1BVENIX1BDUkUpCitwaW5kZXgoTk9fUkVNQVRDSF9QQ1JFKQogcGlu
ZGV4KFJFTUFUQ0hQQ1JFKQorcGluZGV4KE5PUkVNQVRDSFBDUkUpCiBjaW5kZXgocmVnZXhwLCBQ
Q1JFKQogY2luZGV4KFBDUkUsIHJlZ2V4cCkKIGl0ZW0odHQoUkVNQVRDSF9QQ1JFKSA8Wj4pKApA
QCAtNTQ2LDcgKzY0Niw5IEBAIElmIG5vdCBzZXQsIHJlZ3VsYXIgZXhwcmVzc2lvbnMgd2lsbCB1
c2UgdGhlIGV4dGVuZGVkIHJlZ2V4cCBzeW50YXgKIHByb3ZpZGVkIGJ5IHRoZSBzeXN0ZW0gbGli
cmFyaWVzLgogKQogcGluZGV4KFNIX0dMT0IpCitwaW5kZXgoTk9fU0hfR0xPQikKIHBpbmRleChT
SEdMT0IpCitwaW5kZXgoTk9TSEdMT0IpCiBjaW5kZXgoc2gsIGdsb2JiaW5nIHN0eWxlKQogY2lu
ZGV4KGdsb2JiaW5nIHN0eWxlLCBzaCkKIGl0ZW0odHQoU0hfR0xPQikgPEs+IDxTPikoCkBAIC01
NTcsNiArNjU5LDcgQEAgdGhlIHNoZWxsIGFjY2VwdHMgcGF0dGVybnMuICBUaGlzIG9wdGlvbiBp
cyBzZXQgYnkgZGVmYXVsdCBpZiB6c2ggaXMKIGludm9rZWQgYXMgdHQoc2gpIG9yIHR0KGtzaCku
CiApCiBwaW5kZXgoVU5TRVQpCitwaW5kZXgoTk9fVU5TRVQpCiBjaW5kZXgocGFyYW1ldGVycywg
c3Vic3RpdHV0aW5nIHVuc2V0KQogY2luZGV4KHVuc2V0IHBhcmFtZXRlcnMsIHN1YnN0aXR1dGlu
ZykKIGl0ZW0odHQoVU5TRVQpICh0dChQTFVTKCl1KSwga3NoOiB0dChQTFVTKCl1KSkgPEs+IDxT
PiA8Wj4pKApAQCAtNTY0LDcgKzY2Nyw5IEBAIFRyZWF0IHVuc2V0IHBhcmFtZXRlcnMgYXMgaWYg
dGhleSB3ZXJlIGVtcHR5IHdoZW4gc3Vic3RpdHV0aW5nLgogT3RoZXJ3aXNlIHRoZXkgYXJlIHRy
ZWF0ZWQgYXMgYW4gZXJyb3IuCiApCiBwaW5kZXgoV0FSTl9DUkVBVEVfR0xPQkFMKQorcGluZGV4
KE5PX1dBUk5fQ1JFQVRFX0dMT0JBTCkKIHBpbmRleChXQVJOQ1JFQVRFR0xPQkFMKQorcGluZGV4
KE5PV0FSTkNSRUFURUdMT0JBTCkKIGNpbmRleChwYXJhbWV0ZXJzLCB3YXJuaW5nIHdoZW4gY3Jl
YXRlZCBnbG9iYWxseSkKIGl0ZW0odHQoV0FSTl9DUkVBVEVfR0xPQkFMKSkoCiBQcmludCBhIHdh
cm5pbmcgbWVzc2FnZSB3aGVuIGEgZ2xvYmFsIHBhcmFtZXRlciBpcyBjcmVhdGVkIGluIGEgZnVu
Y3Rpb24KQEAgLTU3OSw3ICs2ODQsOSBAQCBlbmRpdGVtKCkKIHN1YnNlY3QoSGlzdG9yeSkKIHN0
YXJ0aXRlbSgpCiBwaW5kZXgoQVBQRU5EX0hJU1RPUlkpCitwaW5kZXgoTk9fQVBQRU5EX0hJU1RP
UlkpCiBwaW5kZXgoQVBQRU5ESElTVE9SWSkKK3BpbmRleChOT0FQUEVOREhJU1RPUlkpCiBjaW5k
ZXgoaGlzdG9yeSwgYXBwZW5kaW5nIHRvIGEgZmlsZSkKIGl0ZW0odHQoQVBQRU5EX0hJU1RPUlkp
IDxEPikoCiBJZiB0aGlzIGlzIHNldCwgenNoIHNlc3Npb25zIHdpbGwgYXBwZW5kIHRoZWlyIGhp
c3RvcnkgbGlzdCB0bwpAQCAtNTkxLDcgKzY5OCw5IEBAIG51bWJlciBvZiBsaW5lcyBncm93cyAy
MCUgYmV5b25kIHRoZSB2YWx1ZSBzcGVjaWZpZWQgYnkKIHR0KCRTQVZFSElTVCkgKHNlZSBhbHNv
IHRoZSBISVNUX1NBVkVfQllfQ09QWSBvcHRpb24pLgogKQogcGluZGV4KEJBTkdfSElTVCkKK3Bp
bmRleChOT19CQU5HX0hJU1QpCiBwaW5kZXgoQkFOR0hJU1QpCitwaW5kZXgoTk9CQU5HSElTVCkK
IGNpbmRleChoaXN0b3J5LCBlbmFibGUgc3Vic3RpdHV0aW9uKQogY2luZGV4KGVuYWJsZSBoaXN0
b3J5IHN1YnN0aXR1dGlvbikKIGl0ZW0odHQoQkFOR19ISVNUKSAodHQoUExVUygpSykpIDxDPiA8
Wj4pKApAQCAtNTk5LDcgKzcwOCw5IEBAIFBlcmZvcm0gdGV4dHVhbCBoaXN0b3J5IGV4cGFuc2lv
biwgYmYoY3NoKS1zdHlsZSwKIHRyZWF0aW5nIHRoZSBjaGFyYWN0ZXIgYHR0KCEpJyBzcGVjaWFs
bHkuCiApCiBwaW5kZXgoRVhURU5ERURfSElTVE9SWSkKK3BpbmRleChOT19FWFRFTkRFRF9ISVNU
T1JZKQogcGluZGV4KEVYVEVOREVESElTVE9SWSkKK3BpbmRleChOT0VYVEVOREVESElTVE9SWSkK
IGNpbmRleChoaXN0b3J5LCB0aW1lc3RhbXBpbmcpCiBpdGVtKHR0KEVYVEVOREVEX0hJU1RPUlkp
IDxDPikoCiBTYXZlIGVhY2ggY29tbWFuZCdzIGJlZ2lubmluZyB0aW1lc3RhbXAgKGluIHNlY29u
ZHMgc2luY2UgdGhlIGVwb2NoKQpAQCAtNjA5LDEzICs3MjAsMTcgQEAgdGhpcyBwcmVmaXhlZCBk
YXRhIGlzOgogYHR0KDopdmFyKDxiZWdpbm5pbmcgdGltZT4pdHQoOil2YXIoPGVsYXBzZWQgc2Vj
b25kcz4pdHQoOil2YXIoPGNvbW1hbmQ+KScuCiApCiBwaW5kZXgoSElTVF9BTExPV19DTE9CQkVS
KQorcGluZGV4KE5PX0hJU1RfQUxMT1dfQ0xPQkJFUikKIHBpbmRleChISVNUQUxMT1dDTE9CQkVS
KQorcGluZGV4KE5PSElTVEFMTE9XQ0xPQkJFUikKIGl0ZW0odHQoSElTVF9BTExPV19DTE9CQkVS
KSkoCiBBZGQgYHR0KHwpJyB0byBvdXRwdXQgcmVkaXJlY3Rpb25zIGluIHRoZSBoaXN0b3J5LiAg
VGhpcyBhbGxvd3MgaGlzdG9yeQogcmVmZXJlbmNlcyB0byBjbG9iYmVyIGZpbGVzIGV2ZW4gd2hl
biB0dChDTE9CQkVSKSBpcyB1bnNldC4KICkKIHBpbmRleChISVNUX0JFRVApCitwaW5kZXgoTk9f
SElTVF9CRUVQKQogcGluZGV4KEhJU1RCRUVQKQorcGluZGV4KE5PSElTVEJFRVApCiBjaW5kZXgo
aGlzdG9yeSBiZWVwaW5nKQogY2luZGV4KGJlZXAsIGhpc3RvcnkpCiBpdGVtKHR0KEhJU1RfQkVF
UCkgPEQ+KSgKQEAgLTYyMyw3ICs3MzgsOSBAQCBCZWVwIHdoZW4gYW4gYXR0ZW1wdCBpcyBtYWRl
IHRvIGFjY2VzcyBhIGhpc3RvcnkgZW50cnkgd2hpY2gKIGlzbid0IHRoZXJlLgogKQogcGluZGV4
KEhJU1RfRVhQSVJFX0RVUFNfRklSU1QpCitwaW5kZXgoTk9fSElTVF9FWFBJUkVfRFVQU19GSVJT
VCkKIHBpbmRleChISVNURVhQSVJFRFVQU0ZJUlNUKQorcGluZGV4KE5PSElTVEVYUElSRURVUFNG
SVJTVCkKIGNpbmRleChoaXN0b3J5LCBleHBpcmluZyBkdXBsaWNhdGVzKQogaXRlbSh0dChISVNU
X0VYUElSRV9EVVBTX0ZJUlNUKSkoCiBJZiB0aGUgaW50ZXJuYWwgaGlzdG9yeSBuZWVkcyB0byBi
ZSB0cmltbWVkIHRvIGFkZCB0aGUgY3VycmVudCBjb21tYW5kIGxpbmUsCkBAIC02MzUsNyArNzUy
LDkgQEAgZXZlbnRzLCBvdGhlcndpc2UgdGhpcyBvcHRpb24gd2lsbCBiZWhhdmUganVzdCBsaWtl
CiB0dChISVNUX0lHTk9SRV9BTExfRFVQUykgb25jZSB0aGUgaGlzdG9yeSBmaWxscyB1cCB3aXRo
IHVuaXF1ZSBldmVudHMuCiApCiBwaW5kZXgoSElTVF9GQ05UTF9MT0NLKQorcGluZGV4KE5PX0hJ
U1RfRkNOVExfTE9DSykKIHBpbmRleChISVNURkNOVExMT0NLKQorcGluZGV4KE5PSElTVEZDTlRM
TE9DSykKIGl0ZW0odHQoSElTVF9GQ05UTF9MT0NLKSkoCiBXaGVuIHdyaXRpbmcgb3V0IHRoZSBo
aXN0b3J5IGZpbGUsIGJ5IGRlZmF1bHQgenNoIHVzZXMgYWQtaG9jIGZpbGUgbG9ja2luZwogdG8g
YXZvaWQga25vd24gcHJvYmxlbXMgd2l0aCBsb2NraW5nIG9uIHNvbWUgb3BlcmF0aW5nIHN5c3Rl
bXMuICBXaXRoIHRoaXMKQEAgLTY0NSw3ICs3NjQsOSBAQCBwcm92aWRlIGJldHRlciBwZXJmb3Jt
YW5jZSwgaW4gcGFydGljdWxhciBhdm9pZGluZyBoaXN0b3J5IGNvcnJ1cHRpb24gd2hlbgogZmls
ZXMgYXJlIHN0b3JlZCBvbiBORlMuCiApCiBwaW5kZXgoSElTVF9GSU5EX05PX0RVUFMpCitwaW5k
ZXgoTk9fSElTVF9GSU5EX05PX0RVUFMpCiBwaW5kZXgoSElTVEZJTkROT0RVUFMpCitwaW5kZXgo
Tk9ISVNURklORE5PRFVQUykKIGNpbmRleChoaXN0b3J5LCBpZ25vcmluZyBkdXBsaWNhdGVzIGlu
IHNlYXJjaCkKIGl0ZW0odHQoSElTVF9GSU5EX05PX0RVUFMpKSgKIFdoZW4gc2VhcmNoaW5nIGZv
ciBoaXN0b3J5IGVudHJpZXMgaW4gdGhlIGxpbmUgZWRpdG9yLCBkbyBub3QgZGlzcGxheQpAQCAt
NjUzLDcgKzc3NCw5IEBAIGR1cGxpY2F0ZXMgb2YgYSBsaW5lIHByZXZpb3VzbHkgZm91bmQsIGV2
ZW4gaWYgdGhlIGR1cGxpY2F0ZXMgYXJlIG5vdAogY29udGlndW91cy4KICkKIHBpbmRleChISVNU
X0lHTk9SRV9BTExfRFVQUykKK3BpbmRleChOT19ISVNUX0lHTk9SRV9BTExfRFVQUykKIHBpbmRl
eChISVNUSUdOT1JFQUxMRFVQUykKK3BpbmRleChOT0hJU1RJR05PUkVBTExEVVBTKQogY2luZGV4
KGhpc3RvcnksIGlnbm9yaW5nIGFsbCBkdXBsaWNhdGVzKQogaXRlbSh0dChISVNUX0lHTk9SRV9B
TExfRFVQUykpKAogSWYgYSBuZXcgY29tbWFuZCBsaW5lIGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0
b3J5IGxpc3QgZHVwbGljYXRlcyBhbgpAQCAtNjYxLDE0ICs3ODQsMTggQEAgb2xkZXIgb25lLCB0
aGUgb2xkZXIgY29tbWFuZCBpcyByZW1vdmVkIGZyb20gdGhlIGxpc3QgKGV2ZW4gaWYgaXQgaXMK
IG5vdCB0aGUgcHJldmlvdXMgZXZlbnQpLgogKQogcGluZGV4KEhJU1RfSUdOT1JFX0RVUFMpCitw
aW5kZXgoTk9fSElTVF9JR05PUkVfRFVQUykKIHBpbmRleChISVNUSUdOT1JFRFVQUykKK3BpbmRl
eChOT0hJU1RJR05PUkVEVVBTKQogY2luZGV4KGhpc3RvcnksIGlnbm9yaW5nIGR1cGxpY2F0ZXMp
CiBpdGVtKHR0KEhJU1RfSUdOT1JFX0RVUFMpICh0dCgtaCkpKSgKIERvIG5vdCBlbnRlciBjb21t
YW5kIGxpbmVzIGludG8gdGhlIGhpc3RvcnkgbGlzdAogaWYgdGhleSBhcmUgZHVwbGljYXRlcyBv
ZiB0aGUgcHJldmlvdXMgZXZlbnQuCiApCiBwaW5kZXgoSElTVF9JR05PUkVfU1BBQ0UpCitwaW5k
ZXgoTk9fSElTVF9JR05PUkVfU1BBQ0UpCiBwaW5kZXgoSElTVElHTk9SRVNQQUNFKQorcGluZGV4
KE5PSElTVElHTk9SRVNQQUNFKQogY2luZGV4KGhpc3RvcnksIGlnbm9yaW5nIHNwYWNlcykKIGl0
ZW0odHQoSElTVF9JR05PUkVfU1BBQ0UpICh0dCgtZykpKSgKIFJlbW92ZSBjb21tYW5kIGxpbmVz
IGZyb20gdGhlIGhpc3RvcnkgbGlzdCB3aGVuIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb24KQEAgLTY4
MCw3ICs4MDcsOSBAQCBvciBlZGl0IHRoZSBsaW5lLiAgSWYgeW91IHdhbnQgdG8gbWFrZSBpdCB2
YW5pc2ggcmlnaHQgYXdheSB3aXRob3V0CiBlbnRlcmluZyBhbm90aGVyIGNvbW1hbmQsIHR5cGUg
YSBzcGFjZSBhbmQgcHJlc3MgcmV0dXJuLgogKQogcGluZGV4KEhJU1RfTk9fRlVOQ1RJT05TKQor
cGluZGV4KE5PX0hJU1RfTk9fRlVOQ1RJT05TKQogcGluZGV4KEhJU1ROT0ZVTkNUSU9OUykKK3Bp
bmRleChOT0hJU1ROT0ZVTkNUSU9OUykKIGl0ZW0odHQoSElTVF9OT19GVU5DVElPTlMpKSgKIFJl
bW92ZSBmdW5jdGlvbiBkZWZpbml0aW9ucyBmcm9tIHRoZSBoaXN0b3J5IGxpc3QuCiBOb3RlIHRo
YXQgdGhlIGZ1bmN0aW9uIGxpbmdlcnMgaW4gdGhlIGludGVybmFsIGhpc3RvcnkgdW50aWwgdGhl
IG5leHQKQEAgLTY4OCw3ICs4MTcsOSBAQCBjb21tYW5kIGlzIGVudGVyZWQgYmVmb3JlIGl0IHZh
bmlzaGVzLCBhbGxvd2luZyB5b3UgdG8gYnJpZWZseSByZXVzZQogb3IgZWRpdCB0aGUgZGVmaW5p
dGlvbi4KICkKIHBpbmRleChISVNUX05PX1NUT1JFKQorcGluZGV4KE5PX0hJU1RfTk9fU1RPUkUp
CiBwaW5kZXgoSElTVE5PU1RPUkUpCitwaW5kZXgoTk9ISVNUTk9TVE9SRSkKIGl0ZW0odHQoSElT
VF9OT19TVE9SRSkpKAogUmVtb3ZlIHRoZSB0dChoaXN0b3J5KSAodHQoZmMgLWwpKSBjb21tYW5k
IGZyb20gdGhlIGhpc3RvcnkgbGlzdAogd2hlbiBpbnZva2VkLgpAQCAtNjk3LDEzICs4MjgsMTcg
QEAgY29tbWFuZCBpcyBlbnRlcmVkIGJlZm9yZSBpdCB2YW5pc2hlcywgYWxsb3dpbmcgeW91IHRv
IGJyaWVmbHkgcmV1c2UKIG9yIGVkaXQgdGhlIGxpbmUuCiApCiBwaW5kZXgoSElTVF9SRURVQ0Vf
QkxBTktTKQorcGluZGV4KE5PX0hJU1RfUkVEVUNFX0JMQU5LUykKIHBpbmRleChISVNUUkVEVUNF
QkxBTktTKQorcGluZGV4KE5PSElTVFJFRFVDRUJMQU5LUykKIGl0ZW0odHQoSElTVF9SRURVQ0Vf
QkxBTktTKSkoCiBSZW1vdmUgc3VwZXJmbHVvdXMgYmxhbmtzIGZyb20gZWFjaCBjb21tYW5kIGxp
bmUKIGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IGxpc3QuCiApCiBwaW5kZXgoSElTVF9TQVZF
X0JZX0NPUFkpCitwaW5kZXgoTk9fSElTVF9TQVZFX0JZX0NPUFkpCiBwaW5kZXgoSElTVFNBVkVC
WUNPUFkpCitwaW5kZXgoTk9ISVNUU0FWRUJZQ09QWSkKIGl0ZW0odHQoSElTVF9TQVZFX0JZX0NP
UFkpIDxEPikoCiBXaGVuIHRoZSBoaXN0b3J5IGZpbGUgaXMgcmUtd3JpdHRlbiwgd2Ugbm9ybWFs
bHkgd3JpdGUgb3V0IGEgY29weSBvZgogdGhlIGZpbGUgbmFtZWQgJEhJU1RGSUxFLm5ldyBhbmQg
dGhlbiByZW5hbWUgaXQgb3ZlciB0aGUgb2xkIG9uZS4KQEAgLTcyMCwxMyArODU1LDE3IEBAIGZp
bGUncyBwZXJtaXNzaW9ucyBhbmQgZ3JvdXAgaW5mb3JtYXRpb24sIGJ1dCB3aWxsIHJlZnVzZSB0
byB3cml0ZQogb3V0IGEgbmV3IGZpbGUgaWYgaXQgd291bGQgY2hhbmdlIHRoZSBoaXN0b3J5IGZp
bGUncyBvd25lci4KICkKIHBpbmRleChISVNUX1NBVkVfTk9fRFVQUykKK3BpbmRleChOT19ISVNU
X1NBVkVfTk9fRFVQUykKIHBpbmRleChISVNUU0FWRU5PRFVQUykKK3BpbmRleChOT0hJU1RTQVZF
Tk9EVVBTKQogaXRlbSh0dChISVNUX1NBVkVfTk9fRFVQUykpKAogV2hlbiB3cml0aW5nIG91dCB0
aGUgaGlzdG9yeSBmaWxlLCBvbGRlciBjb21tYW5kcyB0aGF0IGR1cGxpY2F0ZQogbmV3ZXIgb25l
cyBhcmUgb21pdHRlZC4KICkKIHBpbmRleChISVNUX1ZFUklGWSkKK3BpbmRleChOT19ISVNUX1ZF
UklGWSkKIHBpbmRleChISVNUVkVSSUZZKQorcGluZGV4KE5PSElTVFZFUklGWSkKIGNpbmRleCho
aXN0b3J5LCB2ZXJpZnlpbmcgc3Vic3RpdHV0aW9uKQogaXRlbSh0dChISVNUX1ZFUklGWSkpKAog
V2hlbmV2ZXIgdGhlIHVzZXIgZW50ZXJzIGEgbGluZSB3aXRoIGhpc3RvcnkgZXhwYW5zaW9uLApA
QCAtNzM0LDcgKzg3Myw5IEBAIGRvbid0IGV4ZWN1dGUgdGhlIGxpbmUgZGlyZWN0bHk7IGluc3Rl
YWQsIHBlcmZvcm0KIGhpc3RvcnkgZXhwYW5zaW9uIGFuZCByZWxvYWQgdGhlIGxpbmUgaW50byB0
aGUgZWRpdGluZyBidWZmZXIuCiApCiBwaW5kZXgoSU5DX0FQUEVORF9ISVNUT1JZKQorcGluZGV4
KE5PX0lOQ19BUFBFTkRfSElTVE9SWSkKIHBpbmRleChJTkNBUFBFTkRISVNUT1JZKQorcGluZGV4
KE5PSU5DQVBQRU5ESElTVE9SWSkKIGNpbmRleChoaXN0b3J5LCBpbmNyZW1lbnRhbCBhcHBlbmRp
bmcgdG8gYSBmaWxlKQogaXRlbSh0dChJTkNfQVBQRU5EX0hJU1RPUlkpKSgKIFRoaXMgb3B0aW9u
cyB3b3JrcyBsaWtlIHR0KEFQUEVORF9ISVNUT1JZKSBleGNlcHQgdGhhdCBuZXcgaGlzdG9yeSBs
aW5lcwpAQCAtNzQ1LDcgKzg4Niw5IEBAIG51bWJlciBvZiBsaW5lcyBncm93cyAyMCUgYmV5b25k
IHRoZSB2YWx1ZSBzcGVjaWZpZWQgYnkKIHR0KCRTQVZFSElTVCkgKHNlZSBhbHNvIHRoZSBISVNU
X1NBVkVfQllfQ09QWSBvcHRpb24pLgogKQogcGluZGV4KFNIQVJFX0hJU1RPUlkpCitwaW5kZXgo
Tk9fU0hBUkVfSElTVE9SWSkKIHBpbmRleChTSEFSRUhJU1RPUlkpCitwaW5kZXgoTk9TSEFSRUhJ
U1RPUlkpCiBjaW5kZXgoc2hhcmUgaGlzdG9yeSkKIGNpbmRleChoaXN0b3J5LCBzaGFyaW5nKQog
aXRlbSh0dChTSEFSRV9ISVNUT1JZKSA8Sz4pKApAQCAtNzczLDEzICs5MTYsMTcgQEAgZW5kaXRl
bSgpCiBzdWJzZWN0KEluaXRpYWxpc2F0aW9uKQogc3RhcnRpdGVtKCkKIHBpbmRleChBTExfRVhQ
T1JUKQorcGluZGV4KE5PX0FMTF9FWFBPUlQpCiBwaW5kZXgoQUxMRVhQT1JUKQorcGluZGV4KE5P
QUxMRVhQT1JUKQogY2luZGV4KGV4cG9ydCwgYXV0b21hdGljKQogaXRlbSh0dChBTExfRVhQT1JU
KSAodHQoLWEpLCBrc2g6IHR0KC1hKSkpKAogQWxsIHBhcmFtZXRlcnMgc3Vic2VxdWVudGx5IGRl
ZmluZWQgYXJlIGF1dG9tYXRpY2FsbHkgZXhwb3J0ZWQuCiApCiBwaW5kZXgoR0xPQkFMX0VYUE9S
VCkKK3BpbmRleChOT19HTE9CQUxfRVhQT1JUKQogcGluZGV4KEdMT0JBTEVYUE9SVCkKK3BpbmRl
eChOT0dMT0JBTEVYUE9SVCkKIGNpbmRleChlbnZpcm9ubWVudCwgYW5kIGxvY2FsIHBhcmFtZXRl
cnMpCiBpdGVtKHR0KEdMT0JBTF9FWFBPUlQpICh0dCg8Wj4pKSkoCiBJZiB0aGlzIG9wdGlvbiBp
cyBzZXQsIHBhc3NpbmcgdGhlIHR0KC14KSBmbGFnIHRvIHRoZSBidWlsdGlucyB0dChkZWNsYXJl
KSwKQEAgLTc5OCw3ICs5NDUsOSBAQCBtb3N0IHBvcnRhYmxlIHdheSB0byBhY2hpZXZlIHRoaXMg
YmVoYXZpb3VyLgogKQogY2luZGV4KGV4cG9ydGluZywgYW5kIGxvY2FsIHBhcmFtZXRlcnMpCiBw
aW5kZXgoR0xPQkFMX1JDUykKK3BpbmRleChOT19HTE9CQUxfUkNTKQogcGluZGV4KEdMT0JBTFJD
UykKK3BpbmRleChOT0dMT0JBTFJDUykKIGNpbmRleChzdGFydHVwIGZpbGVzLCBnbG9iYWwsIGlu
aGliaXRpbmcpCiBjaW5kZXgoZmlsZXMsIGdsb2JhbCBzdGFydHVwLCBpbmhpYml0aW5nKQogaXRl
bSh0dChHTE9CQUxfUkNTKSAodHQoLWQpKSA8RD4pKApAQCAtODA4LDYgKzk1Nyw3IEBAIGNhbiBi
ZSBkaXNhYmxlZCBhbmQgcmUtZW5hYmxlZCBhdCBhbnkgdGltZSwgaW5jbHVkaW5nIGluc2lkZSBs
b2NhbCBzdGFydHVwCiBmaWxlcyAodHQoLnpzaHJjKSwgZXRjLikuCiApCiBwaW5kZXgoUkNTKQor
cGluZGV4KE5PX1JDUykKIGNpbmRleChzdGFydHVwIGZpbGVzLCBzb3VyY2luZykKIGl0ZW0odHQo
UkNTKSAodHQoUExVUygpZikpIDxEPikoCiBBZnRlciB0dCh6c2hlbnYoKSkgaXMgc291cmNlZCBv
biBzdGFydHVwLCBzb3VyY2UgdGhlCkBAIC04MjQsMTEgKzk3NCwxMyBAQCBlbmRpdGVtKCkKIHN1
YnNlY3QoSW5wdXQvT3V0cHV0KQogc3RhcnRpdGVtKCkKIHBpbmRleChBTElBU0VTKQorcGluZGV4
KE5PX0FMSUFTRVMpCiBjaW5kZXgoYWxpYXNlcywgZXhwYW5zaW9uKQogaXRlbSh0dChBTElBU0VT
KSA8RD4pKAogRXhwYW5kIGFsaWFzZXMuCiApCiBwaW5kZXgoQ0xPQkJFUikKK3BpbmRleChOT19D
TE9CQkVSKQogY2luZGV4KGNsb2JiZXJpbmcsIG9mIGZpbGVzKQogY2luZGV4KGZpbGUgY2xvYmJl
cmluZywgYWxsb3dpbmcpCiBpdGVtKHR0KENMT0JCRVIpICh0dChQTFVTKClDKSwga3NoOiB0dChQ
TFVTKClDKSkgPEQ+KSgKQEAgLTgzOCw2ICs5OTAsNyBAQCBPdGhlcndpc2UgYHR0KD4hKScgb3Ig
YHR0KD58KScgbXVzdCBiZSB1c2VkIHRvIHRydW5jYXRlIGEgZmlsZSwKIGFuZCBgdHQoPj4hKScg
b3IgYHR0KD4+fCknIHRvIGNyZWF0ZSBhIGZpbGUuCiApCiBwaW5kZXgoQ09SUkVDVCkKK3BpbmRl
eChOT19DT1JSRUNUKQogY2luZGV4KGNvcnJlY3Rpb24sIHNwZWxsaW5nKQogY2luZGV4KHNwZWxs
aW5nIGNvcnJlY3Rpb24pCiBpdGVtKHR0KENPUlJFQ1QpICh0dCgtMCkpKSgKQEAgLTg0NywxOCAr
MTAwMCwyMyBAQCBkaXJlY3RvcmllcyBpbiB0aGUgcGF0aCBhcmUgbm90IHJlYWRhYmxlLCB0aGlz
IG1heSBmYWxzZWx5IHJlcG9ydCBzcGVsbGluZwogZXJyb3JzIHRoZSBmaXJzdCB0aW1lIHNvbWUg
Y29tbWFuZHMgYXJlIHVzZWQuCiApCiBwaW5kZXgoQ09SUkVDVF9BTEwpCitwaW5kZXgoTk9fQ09S
UkVDVF9BTEwpCiBwaW5kZXgoQ09SUkVDVEFMTCkKK3BpbmRleChOT0NPUlJFQ1RBTEwpCiBpdGVt
KHR0KENPUlJFQ1RfQUxMKSAodHQoLU8pKSkoCiBUcnkgdG8gY29ycmVjdCB0aGUgc3BlbGxpbmcg
b2YgYWxsIGFyZ3VtZW50cyBpbiBhIGxpbmUuCiApCiBwaW5kZXgoRFZPUkFLKQorcGluZGV4KE5P
X0RWT1JBSykKIGl0ZW0odHQoRFZPUkFLKSkoCiBVc2UgdGhlIER2b3JhayBrZXlib2FyZCBpbnN0
ZWFkIG9mIHRoZSBzdGFuZGFyZCBxd2VydHkga2V5Ym9hcmQgYXMgYSBiYXNpcwogZm9yIGV4YW1p
bmluZyBzcGVsbGluZyBtaXN0YWtlcyBmb3IgdGhlIHR0KENPUlJFQ1QpIGFuZCB0dChDT1JSRUNU
X0FMTCkKIG9wdGlvbnMgYW5kIHRoZSB0dChzcGVsbC13b3JkKSBlZGl0b3IgY29tbWFuZC4KICkK
IHBpbmRleChGTE9XX0NPTlRST0wpCitwaW5kZXgoTk9fRkxPV19DT05UUk9MKQogcGluZGV4KEZM
T1dDT05UUk9MKQorcGluZGV4KE5PRkxPV0NPTlRST0wpCiBjaW5kZXgoZmxvdyBjb250cm9sKQog
aXRlbSh0dChGTE9XX0NPTlRST0wpIDxEPikoCiBJZiB0aGlzIG9wdGlvbiBpcyB1bnNldCwKQEAg
LTg2Niw3ICsxMDI0LDkgQEAgb3V0cHV0IGZsb3cgY29udHJvbCB2aWEgc3RhcnQvc3RvcCBjaGFy
YWN0ZXJzICh1c3VhbGx5IGFzc2lnbmVkIHRvCiBeUy9eUSkgaXMgZGlzYWJsZWQgaW4gdGhlIHNo
ZWxsJ3MgZWRpdG9yLgogKQogcGluZGV4KElHTk9SRV9FT0YpCitwaW5kZXgoTk9fSUdOT1JFX0VP
RikKIHBpbmRleChJR05PUkVFT0YpCitwaW5kZXgoTk9JR05PUkVFT0YpCiBjaW5kZXgoRU9GLCBp
Z25vcmluZykKIGl0ZW0odHQoSUdOT1JFX0VPRikgKHR0KC03KSkpKAogRG8gbm90IGV4aXQgb24g
ZW5kLW9mLWZpbGUuICBSZXF1aXJlIHRoZSB1c2UKQEAgLTg4MCwxMyArMTA0MCwxNyBAQCBDb250
cm9sLUQpIHdpdGhvdXQgcHJpbnRpbmcgdGhlIG5vcm1hbCB3YXJuaW5nIG1lc3NhZ2UuICBUaGlz
IHdvcmtzCiBvbmx5IGZvciBub3JtYWwgd2lkZ2V0cywgbm90IGZvciBjb21wbGV0aW9uIHdpZGdl
dHMuCiApCiBwaW5kZXgoSU5URVJBQ1RJVkVfQ09NTUVOVFMpCitwaW5kZXgoTk9fSU5URVJBQ1RJ
VkVfQ09NTUVOVFMpCiBwaW5kZXgoSU5URVJBQ1RJVkVDT01NRU5UUykKK3BpbmRleChOT0lOVEVS
QUNUSVZFQ09NTUVOVFMpCiBjaW5kZXgoY29tbWVudHMsIGluIGludGVyYWN0aXZlIHNoZWxscykK
IGl0ZW0odHQoSU5URVJBQ1RJVkVfQ09NTUVOVFMpICh0dCgtaykpIDxLPiA8Uz4pKAogQWxsb3cg
Y29tbWVudHMgZXZlbiBpbiBpbnRlcmFjdGl2ZSBzaGVsbHMuCiApCiBwaW5kZXgoSEFTSF9DTURT
KQorcGluZGV4KE5PX0hBU0hfQ01EUykKIHBpbmRleChIQVNIQ01EUykKK3BpbmRleChOT0hBU0hD
TURTKQogY2luZGV4KGhhc2hpbmcsIG9mIGNvbW1hbmRzKQogY2luZGV4KGNvbW1hbmQgaGFzaGlu
ZykKIGl0ZW0odHQoSEFTSF9DTURTKSA8RD4pKApAQCAtODk5LDcgKzEwNjMsOSBAQCB0aGUgZnVu
Y3Rpb25zIG9yIGFsaWFzZXMgaGFzaCB0YWJsZXMgYXJlIGhhc2hlZCBpbiBvcmRlciB0byBhdm9p
ZAogcmVwb3J0aW5nIHRoZW0gYXMgc3BlbGxpbmcgZXJyb3JzLgogKQogcGluZGV4KEhBU0hfRElS
UykKK3BpbmRleChOT19IQVNIX0RJUlMpCiBwaW5kZXgoSEFTSERJUlMpCitwaW5kZXgoTk9IQVNI
RElSUykKIGNpbmRleChoYXNoaW5nLCBvZiBkaXJlY3RvcmllcykKIGNpbmRleChkaXJlY3Rvcmll
cywgaGFzaGluZykKIGl0ZW0odHQoSEFTSF9ESVJTKSA8RD4pKApAQCAtOTA4LDE0ICsxMDc0LDE4
IEBAIGFzIHdlbGwgYXMgYWxsIGRpcmVjdG9yaWVzIHRoYXQgb2NjdXIgZWFybGllciBpbiB0aGUg
cGF0aC4KIEhhcyBubyBlZmZlY3QgaWYgbmVpdGhlciB0dChIQVNIX0NNRFMpIG5vciB0dChDT1JS
RUNUKSBpcyBzZXQuCiApCiBwaW5kZXgoTUFJTF9XQVJOSU5HKQorcGluZGV4KE5PX01BSUxfV0FS
TklORykKIHBpbmRleChNQUlMV0FSTklORykKK3BpbmRleChOT01BSUxXQVJOSU5HKQogY2luZGV4
KG1haWwsIHdhcm5pbmcgb2YgcmVhZGluZykKIGl0ZW0odHQoTUFJTF9XQVJOSU5HKSAodHQoLVUp
KSkoCiBQcmludCBhIHdhcm5pbmcgbWVzc2FnZSBpZiBhIG1haWwgZmlsZSBoYXMgYmVlbgogYWNj
ZXNzZWQgc2luY2UgdGhlIHNoZWxsIGxhc3QgY2hlY2tlZC4KICkKIHBpbmRleChQQVRIX0RJUlMp
CitwaW5kZXgoTk9fUEFUSF9ESVJTKQogcGluZGV4KFBBVEhESVJTKQorcGluZGV4KE5PUEFUSERJ
UlMpCiBjaW5kZXgocGF0aCBzZWFyY2gsIGV4dGVuZGVkKQogaXRlbSh0dChQQVRIX0RJUlMpICh0
dCgtUSkpKSgKIFBlcmZvcm0gYSBwYXRoIHNlYXJjaCBldmVuIG9uIGNvbW1hbmQgbmFtZXMgd2l0
aCBzbGFzaGVzIGluIHRoZW0uCkBAIC05MzIsNyArMTEwMiw5IEBAIGluZGljYXRlZCBieSB0aGlz
IG9wdGlvbiwgYW5kIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciBgdHQoLiknIG9yIHRoZSBjdXJyZW50
CiBkaXJlY3RvcnkgYXBwZWFyIGluIHRoZSBjb21tYW5kIHNlYXJjaCBwYXRoLgogKQogcGluZGV4
KFBSSU5UX0VJR0hUX0JJVCkKK3BpbmRleChOT19QUklOVF9FSUdIVF9CSVQpCiBwaW5kZXgoUFJJ
TlRFSUdIVEJJVCkKK3BpbmRleChOT1BSSU5URUlHSFRCSVQpCiBjaW5kZXgoZWlnaHQgYml0IGNo
YXJhY3RlcnMsIHByaW50aW5nKQogaXRlbSh0dChQUklOVF9FSUdIVF9CSVQpKSgKIFByaW50IGVp
Z2h0IGJpdCBjaGFyYWN0ZXJzIGxpdGVyYWxseSBpbiBjb21wbGV0aW9uIGxpc3RzLCBldGMuCkBA
IC05NDAsMTMgKzExMTIsMTcgQEAgVGhpcyBvcHRpb24gaXMgbm90IG5lY2Vzc2FyeSBpZiB5b3Vy
IHN5c3RlbSBjb3JyZWN0bHkgcmV0dXJucyB0aGUKIHByaW50YWJpbGl0eSBvZiBlaWdodCBiaXQg
Y2hhcmFjdGVycyAoc2VlIG1hbnJlZihjdHlwZSkoMykpLgogKQogcGluZGV4KFBSSU5UX0VYSVRf
VkFMVUUpCitwaW5kZXgoTk9fUFJJTlRfRVhJVF9WQUxVRSkKIHBpbmRleChQUklOVEVYSVRWQUxV
RSkKK3BpbmRleChOT1BSSU5URVhJVFZBTFVFKQogY2luZGV4KGV4aXQgc3RhdHVzLCBwcmludGlu
ZykKIGl0ZW0odHQoUFJJTlRfRVhJVF9WQUxVRSkgKHR0KC0xKSkpKAogUHJpbnQgdGhlIGV4aXQg
dmFsdWUgb2YgcHJvZ3JhbXMgd2l0aCBub24temVybyBleGl0IHN0YXR1cy4KICkKIHBpbmRleChS
Q19RVU9URVMpCitwaW5kZXgoTk9fUkNfUVVPVEVTKQogcGluZGV4KFJDUVVPVEVTKQorcGluZGV4
KE5PUkNRVU9URVMpCiBjaW5kZXgocmMsIHF1b3Rpbmcgc3R5bGUpCiBjaW5kZXgocXVvdGluZyBz
dHlsZSwgcmMpCiBpdGVtKHR0KFJDX1FVT1RFUykpKApAQCAtOTU2LDE0ICsxMTMyLDE4IEBAIHVz
aW5nIHRoZSBmb3JtYXQgdHQoJCcpdmFyKC4uLil0dCgnKSwgd2hlcmUgYSBiYWNrc2xhc2hlZCBz
aW5nbGUgcXVvdGUgY2FuCiBiZSB1c2VkLgogKQogcGluZGV4KFJNX1NUQVJfU0lMRU5UKQorcGlu
ZGV4KE5PX1JNX1NUQVJfU0lMRU5UKQogcGluZGV4KFJNU1RBUlNJTEVOVCkKK3BpbmRleChOT1JN
U1RBUlNJTEVOVCkKIGNpbmRleChybSAqLCBxdWVyeWluZyBiZWZvcmUpCiBjaW5kZXgocXVlcnlp
bmcgYmVmb3JlIHJtICopCiBpdGVtKHR0KFJNX1NUQVJfU0lMRU5UKSAodHQoLUgpKSA8Sz4gPFM+
KSgKIERvIG5vdCBxdWVyeSB0aGUgdXNlciBiZWZvcmUgZXhlY3V0aW5nIGB0dChybSAqKScgb3Ig
YHR0KHJtIHBhdGgvKiknLgogKQogcGluZGV4KFJNX1NUQVJfV0FJVCkKK3BpbmRleChOT19STV9T
VEFSX1dBSVQpCiBwaW5kZXgoUk1TVEFSV0FJVCkKK3BpbmRleChOT1JNU1RBUldBSVQpCiBjaW5k
ZXgocm0gKiwgd2FpdGluZyBiZWZvcmUpCiBjaW5kZXgod2FpdGluZyBiZWZvcmUgcm0gKikKIGl0
ZW0odHQoUk1fU1RBUl9XQUlUKSkoCkBAIC05NzQsMTMgKzExNTQsMTcgQEAgd2hlbiBvbmUgZGlk
bid0IHJlYWxseSBtZWFuIGl0LiAgVGhlIHdhaXQgYW5kIHF1ZXJ5IGNhbiBhbHdheXMgYmUKIGF2
b2lkZWQgYnkgZXhwYW5kaW5nIHRoZSBgdHQoKiknIGluIFpMRSAod2l0aCB0YWIpLgogKQogcGlu
ZGV4KFNIT1JUX0xPT1BTKQorcGluZGV4KE5PX1NIT1JUX0xPT1BTKQogcGluZGV4KFNIT1JUTE9P
UFMpCitwaW5kZXgoTk9TSE9SVExPT1BTKQogaXRlbSh0dChTSE9SVF9MT09QUykgPEM+IDxaPiko
CiBBbGxvdyB0aGUgc2hvcnQgZm9ybXMgb2YgdHQoZm9yKSwgdHQocmVwZWF0KSwgdHQoc2VsZWN0
KSwKIHR0KGlmKSwgYW5kIHR0KGZ1bmN0aW9uKSBjb25zdHJ1Y3RzLgogKQogcGluZGV4KFNVTl9L
RVlCT0FSRF9IQUNLKQorcGluZGV4KE5PX1NVTl9LRVlCT0FSRF9IQUNLKQogcGluZGV4KFNVTktF
WUJPQVJESEFDSykKK3BpbmRleChOT1NVTktFWUJPQVJESEFDSykKIGNpbmRleChzdW4ga2V5Ym9h
cmQsIGFubm95aW5nKQogY2luZGV4KGFubm95aW5nIGtleWJvYXJkLCBzdW4pCiBpdGVtKHR0KFNV
Tl9LRVlCT0FSRF9IQUNLKSAodHQoLUwpKSkoCkBAIC05OTQsNyArMTE3OCw5IEBAIGVuZGl0ZW0o
KQogc3Vic2VjdChKb2IgQ29udHJvbCkKIHN0YXJ0aXRlbSgpCiBwaW5kZXgoQVVUT19DT05USU5V
RSkKK3BpbmRleChOT19BVVRPX0NPTlRJTlVFKQogcGluZGV4KEFVVE9DT05USU5VRSkKK3BpbmRl
eChOT0FVVE9DT05USU5VRSkKIGNpbmRleChqb2JzLCBjb250aW51aW5nIGF1dG9tYXRpY2FsbHkp
CiBjaW5kZXgoY29udGludWluZyBqb2JzIGF1dG9tYXRpY2FsbHkpCiBpdGVtKHR0KEFVVE9fQ09O
VElOVUUpKSgKQEAgLTEwMDMsNyArMTE4OSw5IEBAIHdpdGggdGhlIHR0KGRpc293bikgYnVpbHRp
biBjb21tYW5kIGFyZSBhdXRvbWF0aWNhbGx5IHNlbnQgYSB0dChDT05UKQogc2lnbmFsIHRvIG1h
a2UgdGhlbSBydW5uaW5nLgogKQogcGluZGV4KEFVVE9fUkVTVU1FKQorcGluZGV4KE5PX0FVVE9f
UkVTVU1FKQogcGluZGV4KEFVVE9SRVNVTUUpCitwaW5kZXgoTk9BVVRPUkVTVU1FKQogY2luZGV4
KGpvYnMsIHJlc3VtaW5nIGF1dG9tYXRpY2FsbHkpCiBjaW5kZXgocmVzdW1pbmcgam9icyBhdXRv
bWF0aWNhbGx5KQogaXRlbSh0dChBVVRPX1JFU1VNRSkgKHR0KC1XKSkpKApAQCAtMTAxMSw3ICsx
MTk5LDkgQEAgVHJlYXQgc2luZ2xlIHdvcmQgc2ltcGxlIGNvbW1hbmRzIHdpdGhvdXQgcmVkaXJl
Y3Rpb24KIGFzIGNhbmRpZGF0ZXMgZm9yIHJlc3VtcHRpb24gb2YgYW4gZXhpc3Rpbmcgam9iLgog
KQogcGluZGV4KEJHX05JQ0UpCitwaW5kZXgoTk9fQkdfTklDRSkKIHBpbmRleChCR05JQ0UpCitw
aW5kZXgoTk9CR05JQ0UpCiBjaW5kZXgoam9icywgYmFja2dyb3VuZCBwcmlvcml0eSkKIGNpbmRl
eChiYWNrZ3JvdW5kIGpvYnMsIHByaW9yaXR5IG9mKQogY2luZGV4KHByaW9yaXR5IG9mIGJhY2tn
cm91bmQgam9icykKQEAgLTEwMjAsNyArMTIxMCw5IEBAIFJ1biBhbGwgYmFja2dyb3VuZCBqb2Jz
IGF0IGEgbG93ZXIgcHJpb3JpdHkuICBUaGlzIG9wdGlvbgogaXMgc2V0IGJ5IGRlZmF1bHQuCiAp
CiBwaW5kZXgoQ0hFQ0tfSk9CUykKK3BpbmRleChOT19DSEVDS19KT0JTKQogcGluZGV4KENIRUNL
Sk9CUykKK3BpbmRleChOT0NIRUNLSk9CUykKIGNpbmRleChleGl0aW5nLCBjaGVja2luZyBqb2Jz
IHdoZW4pCiBjaW5kZXgobG9nZ2luZyBvdXQsIGNoZWNraW5nIGpvYnMgd2hlbikKIGl0ZW0odHQo
Q0hFQ0tfSk9CUykgPFo+KSgKQEAgLTEwMzgsMjMgKzEyMzAsMjggQEAgaWZ6bWFuKHRoZSBzZWN0
aW9uIFNQRUNJQUwgRlVOQ1RJT05TIGluIHptYW5yZWYoenNobWlzYykpCiBpcyBub3QgY291bnRl
ZCBmb3IgdGhpcyBwdXJwb3NlLgogKQogcGluZGV4KEhVUCkKK3BpbmRleChOT19IVVApCiBjaW5k
ZXgoam9icywgSFVQKQogaXRlbSh0dChIVVApIDxaPikoCiBTZW5kIHRoZSB0dChIVVApIHNpZ25h
bCB0byBydW5uaW5nIGpvYnMgd2hlbiB0aGUKIHNoZWxsIGV4aXRzLgogKQogcGluZGV4KExPTkdf
TElTVF9KT0JTKQorcGluZGV4KE5PX0xPTkdfTElTVF9KT0JTKQogcGluZGV4KExPTkdMSVNUSk9C
UykKK3BpbmRleChOT0xPTkdMSVNUSk9CUykKIGNpbmRleChqb2JzLCBsaXN0IGZvcm1hdCkKIGl0
ZW0odHQoTE9OR19MSVNUX0pPQlMpICh0dCgtUikpKSgKIExpc3Qgam9icyBpbiB0aGUgbG9uZyBm
b3JtYXQgYnkgZGVmYXVsdC4KICkKIHBpbmRleChNT05JVE9SKQorcGluZGV4KE5PX01PTklUT1Ip
CiBjaW5kZXgoam9iIGNvbnRyb2wsIGFsbG93aW5nKQogaXRlbSh0dChNT05JVE9SKSAodHQoLW0p
LCBrc2g6IHR0KC1tKSkpKAogQWxsb3cgam9iIGNvbnRyb2wuICBTZXQgYnkgZGVmYXVsdCBpbiBp
bnRlcmFjdGl2ZSBzaGVsbHMuCiApCiBwaW5kZXgoTk9USUZZKQorcGluZGV4KE5PX05PVElGWSkK
IGNpbmRleChiYWNrZ3JvdW5kIGpvYnMsIG5vdGlmaWNhdGlvbikKIGNpbmRleChub3RpZmljYXRp
b24gb2YgYmFja2dyb3VuZCBqb2JzKQogaXRlbSh0dChOT1RJRlkpICh0dCgtNSksIGtzaDogdHQo
LWIpKSA8Wj4pKApAQCAtMTA2Niw3ICsxMjYzLDkgQEAgZW5kaXRlbSgpCiBzdWJzZWN0KFByb21w
dGluZykKIHN0YXJ0aXRlbSgpCiBwaW5kZXgoUFJPTVBUX0JBTkcpCitwaW5kZXgoTk9fUFJPTVBU
X0JBTkcpCiBwaW5kZXgoUFJPTVBUQkFORykKK3BpbmRleChOT1BST01QVEJBTkcpCiBjaW5kZXgo
cHJvbXB0LCAhIGV4cGFuc2lvbikKIGl0ZW0odHQoUFJPTVBUX0JBTkcpIDxLPikoCiBJZiBzZXQs
IGB0dCghKScgaXMgdHJlYXRlZCBzcGVjaWFsbHkgaW4gcHJvbXB0IGV4cGFuc2lvbi4KQEAgLTEw
NzUsNyArMTI3NCw5IEBAIGlmem1hbihFWFBBTlNJT04gT0YgUFJPTVBUIFNFUVVFTkNFUyBpbiB6
bWFucmVmKHpzaG1pc2MpKVwKIGlmbnptYW4obm9kZXJlZihQcm9tcHQgRXhwYW5zaW9uKSkuCiAp
CiBwaW5kZXgoUFJPTVBUX0NSKQorcGluZGV4KE5PX1BST01QVF9DUikKIHBpbmRleChQUk9NUFRD
UikKK3BpbmRleChOT1BST01QVENSKQogY2luZGV4KHByb21wdCwgd2l0aCBDUikKIGl0ZW0odHQo
UFJPTVBUX0NSKSAodHQoUExVUygpVikpIDxEPikoCiBQcmludCBhIGNhcnJpYWdlIHJldHVybiBq
dXN0IGJlZm9yZSBwcmludGluZwpAQCAtMTA4Myw3ICsxMjg0LDkgQEAgYSBwcm9tcHQgaW4gdGhl
IGxpbmUgZWRpdG9yLiAgVGhpcyBpcyBvbiBieSBkZWZhdWx0IGFzIG11bHRpLWxpbmUgZWRpdGlu
ZwogaXMgb25seSBwb3NzaWJsZSBpZiB0aGUgZWRpdG9yIGtub3dzIHdoZXJlIHRoZSBzdGFydCBv
ZiB0aGUgbGluZSBhcHBlYXJzLgogKQogcGluZGV4KFBST01QVF9TUCkKK3BpbmRleChOT19QUk9N
UFRfU1ApCiBwaW5kZXgoUFJPTVBUU1ApCitwaW5kZXgoTk9QUk9NUFRTUCkKIGNpbmRleChwcm9t
cHQsIHNhdmUgcGFydGlhbCBsaW5lcykKIGl0ZW0odHQoUFJPTVBUX1NQKSA8RD4pKAogQXR0ZW1w
dCB0byBwcmVzZXJ2ZSBhIHBhcnRpYWwgbGluZSAoaS5lLiBhIGxpbmUgdGhhdCBkaWQgbm90IGVu
ZCB3aXRoIGEKQEAgLTExMDAsNyArMTMwMyw5IEBAIE5PVEU6IGlmIHRoZSBQUk9NUFRfQ1Igb3B0
aW9uIGlzIG5vdCBzZXQsIGVuYWJsaW5nIHRoaXMgb3B0aW9uIHdpbGwgaGF2ZSBubwogZWZmZWN0
LiAgVGhpcyBvcHRpb24gaXMgb24gYnkgZGVmYXVsdC4KICkKIHBpbmRleChQUk9NUFRfUEVSQ0VO
VCkKK3BpbmRleChOT19QUk9NUFRfUEVSQ0VOVCkKIHBpbmRleChQUk9NUFRQRVJDRU5UKQorcGlu
ZGV4KE5PUFJPTVBUUEVSQ0VOVCkKIGNpbmRleChwcm9tcHQsICUgZXhwYW5zaW9uKQogaXRlbSh0
dChQUk9NUFRfUEVSQ0VOVCkgPEM+IDxaPikoCiBJZiBzZXQsIGB0dCglKScgaXMgdHJlYXRlZCBz
cGVjaWFsbHkgaW4gcHJvbXB0IGV4cGFuc2lvbi4KQEAgLTExMDksNyArMTMxNCw5IEBAIGlmem1h
bihFWFBBTlNJT04gT0YgUFJPTVBUIFNFUVVFTkNFUyBpbiB6bWFucmVmKHpzaG1pc2MpKVwKIGlm
bnptYW4obm9kZXJlZihQcm9tcHQgRXhwYW5zaW9uKSkuCiApCiBwaW5kZXgoUFJPTVBUX1NVQlNU
KQorcGluZGV4KE5PX1BST01QVF9TVUJTVCkKIHBpbmRleChQUk9NUFRTVUJTVCkKK3BpbmRleChO
T1BST01QVFNVQlNUKQogY2luZGV4KHByb21wdCwgcGFyYW1ldGVyIGV4cGFuc2lvbikKIGl0ZW0o
dHQoUFJPTVBUX1NVQlNUKSA8Sz4gPFM+KSgKIElmIHNldCwgZW0ocGFyYW1ldGVyIGV4cGFuc2lv
biksIGVtKGNvbW1hbmQgc3Vic3RpdHV0aW9uKSBhbmQKQEAgLTExMTcsNyArMTMyNCw5IEBAIGVt
KGFyaXRobWV0aWMgZXhwYW5zaW9uKSBhcmUgcGVyZm9ybWVkIGluIHByb21wdHMuICBTdWJzdGl0
dXRpb25zCiB3aXRoaW4gcHJvbXB0cyBkbyBub3QgYWZmZWN0IHRoZSBjb21tYW5kIHN0YXR1cy4K
ICkKIHBpbmRleChUUkFOU0lFTlRfUlBST01QVCkKK3BpbmRleChOT19UUkFOU0lFTlRfUlBST01Q
VCkKIHBpbmRleChUUkFOU0lFTlRSUFJPTVBUKQorcGluZGV4KE5PVFJBTlNJRU5UUlBST01QVCkK
IGl0ZW0odHQoVFJBTlNJRU5UX1JQUk9NUFQpKSgKIFJlbW92ZSBhbnkgcmlnaHQgcHJvbXB0IGZy
b20gZGlzcGxheSB3aGVuIGFjY2VwdGluZyBhIGNvbW1hbmQKIGxpbmUuICBUaGlzIG1heSBiZSB1
c2VmdWwgd2l0aCB0ZXJtaW5hbHMgd2l0aCBvdGhlciBjdXQvcGFzdGUgbWV0aG9kcy4KQEAgLTEx
MjcsNyArMTMzNiw5IEBAIGVuZGl0ZW0oKQogc3Vic2VjdChTY3JpcHRzIGFuZCBGdW5jdGlvbnMp
CiBzdGFydGl0ZW0oKQogcGluZGV4KENfQkFTRVMpCitwaW5kZXgoTk9fQ19CQVNFUykKIHBpbmRl
eChDQkFTRVMpCitwaW5kZXgoTk9DQkFTRVMpCiBjaW5kZXgoYmFzZXMsIG91dHB1dCBpbiBDIGZv
cm1hdCkKIGNpbmRleChoZXhhZGVjaW1hbCwgb3V0cHV0IGluIEMgZm9ybWF0KQogY2luZGV4KG9j
dGFsLCBvdXRwdXQgaW4gQyBmb3JtYXQpCkBAIC0xMTQxLDcgKzEzNTIsOSBAQCBoZXhhZGVjaW1h
bCBhbmQgb2N0YWwuICBOb3RlIHRoYXQgdGhlc2UgZm9ybWF0cyB3aWxsIGJlIHVuZGVyc3Rvb2Qg
b24gaW5wdXQKIGlycmVzcGVjdGl2ZSBvZiB0aGUgc2V0dGluZyBvZiB0dChDX0JBU0VTKS4KICkK
IHBpbmRleChDX1BSRUNFREVOQ0VTKQorcGluZGV4KE5PX0NfUFJFQ0VERU5DRVMpCiBwaW5kZXgo
Q1BSRUNFREVOQ0VTKQorcGluZGV4KE5PQ1BSRUNFREVOQ0VTKQogY2luZGV4KHByZWNlZGVuY2Us
IG9wZXJhdG9yKQogY2luZGV4KG9wZXJhdG9yIHByZWNlZGVuY2UpCiBpdGVtKHR0KENfUFJFQ0VE
RU5DRVMpKSgKQEAgLTExNTIsNiArMTM2NSw5IEBAIGlmem1hbih0aGUgc2VjdGlvbiBBUklUSE1F
VElDIEVWQUxVQVRJT04gaW4gem1hbnJlZih6c2htaXNjKSkKIGhhcyBhbiBleHBsaWNpdCBsaXN0
LgogKQogcGluZGV4KERFQlVHX0JFRk9SRV9DTUQgPEQ+KQorcGluZGV4KE5PX0RFQlVHX0JFRk9S
RV9DTUQgPEQ+KQorcGluZGV4KERFQlVHQkVGT1JFQ01EIDxEPikKK3BpbmRleChOT0RFQlVHQkVG
T1JFQ01EIDxEPikKIGNpbmRleCh0cmFwcywgREVCVUcsIGJlZm9yZSBvciBhZnRlciBjb21tYW5k
KQogY2luZGV4KERFQlVHIHRyYXAsIGJlZm9yZSBvciBhZnRlciBjb21tYW5kKQogaXRlbSh0dChE
RUJVR19CRUZPUkVfQ01EKSkoCkBAIC0xMTYwLDcgKzEzNzYsOSBAQCBlYWNoIGNvbW1hbmQuICBT
ZXR0aW5nIHRoaXMgb3B0aW9uIG1pbWljcyB0aGUgYmVoYXZpb3VyIG9mIGtzaCA5Mzsgd2l0aAog
dGhlIG9wdGlvbiB1bnNldCB0aGUgYmVoYXZpb3VyIGlzIHRoYXQgb2Yga3NoIDg4LgogKQogcGlu
ZGV4KEVSUl9FWElUKQorcGluZGV4KE5PX0VSUl9FWElUKQogcGluZGV4KEVSUkVYSVQpCitwaW5k
ZXgoTk9FUlJFWElUKQogY2luZGV4KGV4aXQgc3RhdHVzLCB0cmFwcGluZykKIGl0ZW0odHQoRVJS
X0VYSVQpICh0dCgtZSksIGtzaDogdHQoLWUpKSkoCiBJZiBhIGNvbW1hbmQgaGFzIGEgbm9uLXpl
cm8gZXhpdCBzdGF0dXMsIGV4ZWN1dGUgdGhlIHR0KFpFUlIpCkBAIC0xMTc1LDcgKzEzOTMsOSBA
QCBvbiBleGl0LCB0aGVuIHRoZSBjb21tYW5kIGZvciB3aGljaCB0aGUgdHQoREVCVUcpIHRyYXAg
aXMgYmVpbmcgZXhlY3V0ZWQgaXMKIHNraXBwZWQuICBUaGUgb3B0aW9uIGlzIHJlc3RvcmVkIGFm
dGVyIHRoZSB0cmFwIGV4aXRzLgogKQogcGluZGV4KEVSUl9SRVRVUk4pCitwaW5kZXgoTk9fRVJS
X1JFVFVSTikKIHBpbmRleChFUlJSRVRVUk4pCitwaW5kZXgoTk9FUlJSRVRVUk4pCiBjaW5kZXgo
ZnVuY3Rpb24gcmV0dXJuLCBvbiBlcnJvcikKIGNpbmRleChyZXR1cm4gZnJvbSBmdW5jdGlvbiwg
b24gZXJyb3IpCiBpdGVtKHR0KEVSUl9SRVRVUk4pKSgKQEAgLTExODYsNyArMTQwNiw5IEBAIHR0
KGV4aXQpLiAgVGhpcyB3aWxsIHRyaWdnZXIgYW4gZXhpdCBhdCB0aGUgb3V0ZXJtb3N0IGxldmVs
IG9mIGEKIG5vbi1pbnRlcmFjdGl2ZSBzY3JpcHQuCiApCiBwaW5kZXgoRVZBTF9MSU5FTk8pCitw
aW5kZXgoTk9fRVZBTF9MSU5FTk8pCiBwaW5kZXgoRVZBTExJTkVOTykKK3BpbmRleChOT0VWQUxM
SU5FTk8pCiBjaW5kZXgobGluZSBudW1iZXIsIGluIGV2YWx1YXRlZCBleHByZXNzaW9uKQogaXRl
bSh0dChFVkFMX0xJTkVOTykgPFo+KSgKIElmIHNldCwgbGluZSBudW1iZXJzIG9mIGV4cHJlc3Np
b25zIGV2YWx1YXRlZCB1c2luZyB0aGUgYnVpbHRpbiB0dChldmFsKQpAQCAtMTIwMCw2ICsxNDIy
LDcgQEAgdHQoRVZBTF9MSU5FTk8pIGlzIHVuc2V0LCB0aGUgbGluZSBudW1iZXIgb2YgdGhlIHN1
cnJvdW5kaW5nIHNjcmlwdCBvcgogZnVuY3Rpb24gaXMgcmV0YWluZWQgZHVyaW5nIHRoZSBldmFs
dWF0aW9uLgogKQogcGluZGV4KEVYRUMpCitwaW5kZXgoTk9fRVhFQykKIGNpbmRleChjb21tYW5k
IGV4ZWN1dGlvbiwgZW5hYmxpbmcpCiBpdGVtKHR0KEVYRUMpICh0dChQTFVTKCluKSwga3NoOiB0
dChQTFVTKCluKSkgPEQ+KSgKIERvIGV4ZWN1dGUgY29tbWFuZHMuICBXaXRob3V0IHRoaXMgb3B0
aW9uLCBjb21tYW5kcyBhcmUKQEAgLTEyMDgsMTQgKzE0MzEsMTggQEAgVGhpcyBvcHRpb24gY2Fu
bm90IGJlIHR1cm5lZCBvZmYgaW4gYW4gaW50ZXJhY3RpdmUgc2hlbGwsCiBleGNlcHQgd2hlbiBg
dHQoLW4pJyBpcyBzdXBwbGllZCB0byB0aGUgc2hlbGwgYXQgc3RhcnR1cC4KICkKIHBpbmRleChG
VU5DVElPTl9BUkdaRVJPKQorcGluZGV4KE5PX0ZVTkNUSU9OX0FSR1pFUk8pCiBwaW5kZXgoRlVO
Q1RJT05BUkdaRVJPKQorcGluZGV4KE5PRlVOQ1RJT05BUkdaRVJPKQogY2luZGV4KCQwLCBzZXR0
aW5nKQogaXRlbSh0dChGVU5DVElPTl9BUkdaRVJPKSA8Qz4gPFo+KSgKIFdoZW4gZXhlY3V0aW5n
IGEgc2hlbGwgZnVuY3Rpb24gb3Igc291cmNpbmcgYSBzY3JpcHQsIHNldCB0dCgkMCkKIHRlbXBv
cmFyaWx5IHRvIHRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi9zY3JpcHQuCiApCiBwaW5kZXgoTE9D
QUxfT1BUSU9OUykKK3BpbmRleChOT19MT0NBTF9PUFRJT05TKQogcGluZGV4KExPQ0FMT1BUSU9O
UykKK3BpbmRleChOT0xPQ0FMT1BUSU9OUykKIGl0ZW0odHQoTE9DQUxfT1BUSU9OUykgPEs+KSgK
IElmIHRoaXMgb3B0aW9uIGlzIHNldCBhdCB0aGUgcG9pbnQgb2YgcmV0dXJuIGZyb20gYSBzaGVs
bCBmdW5jdGlvbiwKIG1vc3Qgb3B0aW9ucyAoaW5jbHVkaW5nIHRoaXMgb25lKSB3aGljaCB3ZXJl
IGluIGZvcmNlIHVwb24gZW50cnkgdG8KQEAgLTEyMjksNyArMTQ1Niw5IEBAIHdpdGggYSBmb3Jt
dWxhdGlvbiBsaWtlIGB0dChlbXVsYXRlIC1MIHpzaCknOyB0aGUgdHQoLUwpIGFjdGl2YXRlcwog
dHQoTE9DQUxfT1BUSU9OUykuCiApCiBwaW5kZXgoTE9DQUxfVFJBUFMpCitwaW5kZXgoTk9fTE9D
QUxfVFJBUFMpCiBwaW5kZXgoTE9DQUxUUkFQUykKK3BpbmRleChOT0xPQ0FMVFJBUFMpCiBpdGVt
KHR0KExPQ0FMX1RSQVBTKSA8Sz4pKAogSWYgdGhpcyBvcHRpb24gaXMgc2V0IHdoZW4gYSBzaWdu
YWwgdHJhcCBpcyBzZXQgaW5zaWRlIGEgZnVuY3Rpb24sIHRoZW4gdGhlCiBwcmV2aW91cyBzdGF0
dXMgb2YgdGhlIHRyYXAgZm9yIHRoYXQgc2lnbmFsIHdpbGwgYmUgcmVzdG9yZWQgd2hlbiB0aGUK
QEAgLTEyNDYsNyArMTQ3NSw5IEBAIGZuK0xQQVIoKVJQQVIoKSB7IHNldG9wdCBsb2NhbHRyYXBz
OyB0cmFwICcnIElOVDsgc2xlZXAgMzsgfSkKIHdpbGwgcmVzdG9yZSBub3JtYWxseSBoYW5kbGlu
ZyBvZiB0dChTSUdJTlQpIGFmdGVyIHRoZSBmdW5jdGlvbiBleGl0cy4KICkKIHBpbmRleChNVUxU
SV9GVU5DX0RFRikKK3BpbmRleChOT19NVUxUSV9GVU5DX0RFRikKIHBpbmRleChNVUxUSUZVTkNE
RUYpCitwaW5kZXgoTk9NVUxUSUZVTkNERUYpCiBpdGVtKHR0KE1VTFRJX0ZVTkNfREVGKSA8Wj4p
KAogQWxsb3cgZGVmaW5pdGlvbnMgb2YgbXVsdGlwbGUgZnVuY3Rpb25zIGF0IG9uY2UgaW4gdGhl
IGZvcm0gYHR0KGZuMQogZm4yKXZhciguLi4pdHQoTFBBUigpUlBBUigpKSc7IGlmIHRoZSBvcHRp
b24gaXMgbm90IHNldCwgdGhpcyBjYXVzZXMKQEAgLTEyNTUsMTIgKzE0ODYsMTUgQEAga2V5d29y
ZCBpcyBhbHdheXMgYWxsb3dlZC4gIE11bHRpcGxlIGZ1bmN0aW9uIGRlZmluaXRpb25zIGFyZSBu
b3Qgb2Z0ZW4KIHVzZWQgYW5kIGNhbiBjYXVzZSBvYnNjdXJlIGVycm9ycy4KICkKIHBpbmRleChN
VUxUSU9TKQorcGluZGV4KE5PX01VTFRJT1MpCiBpdGVtKHR0KE1VTFRJT1MpIDxaPikoCiBQZXJm
b3JtIGltcGxpY2l0IGJmKHRlZSlzIG9yIGJmKGNhdClzIHdoZW4gbXVsdGlwbGUKIHJlZGlyZWN0
aW9ucyBhcmUgYXR0ZW1wdGVkIChzZWUgbm9kZXJlZihSZWRpcmVjdGlvbikpLgogKQogcGluZGV4
KE9DVEFMX1pFUk9FUykKK3BpbmRleChOT19PQ1RBTF9aRVJPRVMpCiBwaW5kZXgoT0NUQUxaRVJP
RVMpCitwaW5kZXgoTk9PQ1RBTFpFUk9FUykKIGNpbmRleChvY3RhbCwgYXJpdGhtZXRpYyBleHBy
ZXNzaW9ucykKIGl0ZW0odHQoT0NUQUxfWkVST0VTKSA8Uz4pKAogSW50ZXJwcmV0IGFueSBpbnRl
Z2VyIGNvbnN0YW50IGJlZ2lubmluZyB3aXRoIGEgMCBhcyBvY3RhbCwgcGVyIElFRUUgU3RkCkBA
IC0xMjczLDcgKzE1MDcsOSBAQCBjb21wb25lbnQgaW4gYHR0KDA4Izc3KScgYXJlIGFsd2F5cyBp
bnRlcnByZXRlZCBhcyBkZWNpbWFsLCByZWdhcmRsZXNzCiBvZiBsZWFkaW5nIHplcm9lcy4KICkK
IHBpbmRleChUWVBFU0VUX1NJTEVOVCkKK3BpbmRleChOT19UWVBFU0VUX1NJTEVOVCkKIHBpbmRl
eChUWVBFU0VUU0lMRU5UKQorcGluZGV4KE5PVFlQRVNFVFNJTEVOVCkKIGl0ZW0odHQoVFlQRVNF
VF9TSUxFTlQpKSgKIElmIHRoaXMgaXMgdW5zZXQsIGV4ZWN1dGluZyBhbnkgb2YgdGhlIGB0dCh0
eXBlc2V0KScgZmFtaWx5IG9mCiBjb21tYW5kcyB3aXRoIG5vIG9wdGlvbnMgYW5kIGEgbGlzdCBv
ZiBwYXJhbWV0ZXJzIHRoYXQgaGF2ZSBubyB2YWx1ZXMKQEAgLTEyODMsMTIgKzE1MTksMTQgQEAg
d2l0aCB0aGUgYHR0KC1tKScgb3B0aW9uLiAgVGhlIG9wdGlvbiBgdHQoLXApJyBpcyBhdmFpbGFi
bGUgd2hldGhlciBvciBub3QKIHRoZSBvcHRpb24gaXMgc2V0LgogKQogcGluZGV4KFZFUkJPU0Up
CitwaW5kZXgoTk9fVkVSQk9TRSkKIGNpbmRleCh0cmFjaW5nLCBvZiBpbnB1dCBsaW5lcykKIGNp
bmRleChpbnB1dCwgdHJhY2luZykKIGl0ZW0odHQoVkVSQk9TRSkgKHR0KC12KSwga3NoOiB0dCgt
dikpKSgKIFByaW50IHNoZWxsIGlucHV0IGxpbmVzIGFzIHRoZXkgYXJlIHJlYWQuCiApCiBwaW5k
ZXgoWFRSQUNFKQorcGluZGV4KE5PX1hUUkFDRSkKIGNpbmRleCh0cmFjaW5nLCBvZiBjb21tYW5k
cykKIGNpbmRleChjb21tYW5kcywgdHJhY2luZykKIGl0ZW0odHQoWFRSQUNFKSAodHQoLXgpLCBr
c2g6IHR0KC14KSkpKApAQCAtMTI5OSw3ICsxNTM3LDkgQEAgZW5kaXRlbSgpCiBzdWJzZWN0KFNo
ZWxsIEVtdWxhdGlvbikKIHN0YXJ0aXRlbSgpCiBwaW5kZXgoQkFTSF9SRU1BVENIKQorcGluZGV4
KE5PX0JBU0hfUkVNQVRDSCkKIHBpbmRleChCQVNIUkVNQVRDSCkKK3BpbmRleChOT0JBU0hSRU1B
VENIKQogY2luZGV4KGJhc2gsIEJBU0hfUkVNQVRDSCB2YXJpYWJsZSkKIGNpbmRleChyZWdleHAs
IGJhc2ggQkFTSF9SRU1BVENIIHZhcmlhYmxlKQogaXRlbSh0dChCQVNIX1JFTUFUQ0gpKSgKQEAg
LTEzMTQsNyArMTU1NCw5IEBAIGNvbnRhaW5zIHRoZSBlbnRpcmUgbWF0Y2hlZCB0ZXh0IGFuZCB0
aGUgdHQobWF0Y2gpIGFycmF5IHZhcmlhYmxlIGNvbnRhaW5zCiBzdWJzdHJpbmdzLgogKQogcGlu
ZGV4KEJTRF9FQ0hPKQorcGluZGV4KE5PX0JTRF9FQ0hPKQogcGluZGV4KEJTREVDSE8pCitwaW5k
ZXgoTk9CU0RFQ0hPKQogY2luZGV4KGVjaG8sIEJTRCBjb21wYXRpYmxlKQogaXRlbSh0dChCU0Rf
RUNITykgPFM+KSgKIE1ha2UgdGhlIHR0KGVjaG8pIGJ1aWx0aW4gY29tcGF0aWJsZSB3aXRoIHRo
ZSBCU0QgbWFucmVmKGVjaG8pKDEpIGNvbW1hbmQuCkBAIC0xMzIyLDcgKzE1NjQsOSBAQCBUaGlz
IGRpc2FibGVzIGJhY2tzbGFzaGVkIGVzY2FwZSBzZXF1ZW5jZXMgaW4gZWNobyBzdHJpbmdzIHVu
bGVzcyB0aGUKIHR0KC1lKSBvcHRpb24gaXMgc3BlY2lmaWVkLgogKQogcGluZGV4KENTSF9KVU5L
SUVfSElTVE9SWSkKK3BpbmRleChOT19DU0hfSlVOS0lFX0hJU1RPUlkpCiBwaW5kZXgoQ1NISlVO
S0lFSElTVE9SWSkKK3BpbmRleChOT0NTSEpVTktJRUhJU1RPUlkpCiBjaW5kZXgoY3NoLCBoaXN0
b3J5IHN0eWxlKQogY2luZGV4KGhpc3Rvcnkgc3R5bGUsIGNzaCkKIGl0ZW0odHQoQ1NIX0pVTktJ
RV9ISVNUT1JZKSA8Qz4pKApAQCAtMTMzMiw3ICsxNTc2LDkgQEAgdG8gdGhlIHNhbWUgZXZlbnQg
YXMgdGhlIHByZXZpb3VzIGhpc3RvcnkgcmVmZXJlbmNlLCBkZWZhdWx0aW5nIHRvIHRoZQogcHJl
dmlvdXMgY29tbWFuZC4KICkKIHBpbmRleChDU0hfSlVOS0lFX0xPT1BTKQorcGluZGV4KE5PX0NT
SF9KVU5LSUVfTE9PUFMpCiBwaW5kZXgoQ1NISlVOS0lFTE9PUFMpCitwaW5kZXgoTk9DU0hKVU5L
SUVMT09QUykKIGNpbmRleChjc2gsIGxvb3Agc3R5bGUpCiBjaW5kZXgobG9vcCBzdHlsZSwgY3No
KQogaXRlbSh0dChDU0hfSlVOS0lFX0xPT1BTKSA8Qz4pKApAQCAtMTM0MCw3ICsxNTg2LDkgQEAg
QWxsb3cgbG9vcCBib2RpZXMgdG8gdGFrZSB0aGUgZm9ybSBgdmFyKGxpc3QpOyB0dChlbmQpJyBp
bnN0ZWFkIG9mCiBgdHQoZG8pIHZhcihsaXN0KTsgdHQoZG9uZSknLgogKQogcGluZGV4KENTSF9K
VU5LSUVfUVVPVEVTKQorcGluZGV4KE5PX0NTSF9KVU5LSUVfUVVPVEVTKQogcGluZGV4KENTSEpV
TktJRVFVT1RFUykKK3BpbmRleChOT0NTSEpVTktJRVFVT1RFUykKIGNpbmRleChjc2gsIHF1b3Rp
bmcgc3R5bGUpCiBjaW5kZXgocXVvdGluZyBzdHlsZSwgY3NoKQogaXRlbSh0dChDU0hfSlVOS0lF
X1FVT1RFUykgPEM+KSgKQEAgLTEzNTIsNyArMTYwMCw5IEBAIG9yIGB0dCgiKScgKGFuZCBgdHQo
XCknIGl0c2VsZiBubyBsb25nZXIgbmVlZHMgZXNjYXBpbmcpLgogQ29tbWFuZCBzdWJzdGl0dXRp
b25zIGFyZSBvbmx5IGV4cGFuZGVkIG9uY2UsIGFuZCBjYW5ub3QgYmUgbmVzdGVkLgogKQogcGlu
ZGV4KENTSF9OVUxMQ01EKQorcGluZGV4KE5PX0NTSF9OVUxMQ01EKQogcGluZGV4KENTSE5VTExD
TUQpCitwaW5kZXgoTk9DU0hOVUxMQ01EKQogdmluZGV4KE5VTExDTUQsIGlnbm9yaW5nKQogdmlu
ZGV4KFJFQUROVUxMQ01ELCBpZ25vcmluZykKIGNpbmRleChyZWRpcmVjdGlvbnMgd2l0aCBubyBj
b21tYW5kLCBjc2gpCkBAIC0xMzYzLDcgKzE2MTMsOSBAQCB3aGVuIHJ1bm5pbmcgcmVkaXJlY3Rp
b25zIHdpdGggbm8gY29tbWFuZC4gIFRoaXMgbWFrZQogc3VjaCByZWRpcmVjdGlvbnMgZmFpbCAo
c2VlIG5vZGVyZWYoUmVkaXJlY3Rpb24pKS4KICkKIHBpbmRleChLU0hfQVJSQVlTKQorcGluZGV4
KE5PX0tTSF9BUlJBWVMpCiBwaW5kZXgoS1NIQVJSQVlTKQorcGluZGV4KE5PS1NIQVJSQVlTKQog
Y2luZGV4KGFycmF5cywga3NoIHN0eWxlKQogY2luZGV4KGFycmF5IHN0eWxlLCBrc2gpCiBjaW5k
ZXgoa3NoLCBhcnJheSBzdHlsZSkKQEAgLTEzNzUsNyArMTYyNyw5IEBAIGFuZCBicmFjZXMgYXJl
IHJlcXVpcmVkIHRvIGRlbGltaXQgYSBzdWJzY3JpcHQgKGB0dCgke3BhdGhbMl19KScgcmF0aGVy
CiB0aGFuIGp1c3QgYHR0KCRwYXRoWzJdKScpLgogKQogcGluZGV4KEtTSF9BVVRPTE9BRCkKK3Bp
bmRleChOT19LU0hfQVVUT0xPQUQpCiBwaW5kZXgoS1NIQVVUT0xPQUQpCitwaW5kZXgoTk9LU0hB
VVRPTE9BRCkKIGl0ZW0odHQoS1NIX0FVVE9MT0FEKSA8Sz4gPFM+KSgKIEVtdWxhdGUgYmYoa3No
KSBmdW5jdGlvbiBhdXRvbG9hZGluZy4gIFRoaXMgbWVhbnMgdGhhdCB3aGVuIGEgZnVuY3Rpb24g
aXMKIGF1dG9sb2FkZWQsIHRoZSBjb3JyZXNwb25kaW5nIGZpbGUgaXMgbWVyZWx5IGV4ZWN1dGVk
LCBhbmQgbXVzdCBkZWZpbmUKQEAgLTEzODUsNyArMTYzOSw5IEBAIGNvbnRhaW5pbmcgb25seSBh
IHNpbXBsZSBkZWZpbml0aW9uIG9mIHRoZSBmdW5jdGlvbiAtIGlzIGFsd2F5cyBoYW5kbGVkCiBp
biB0aGUgYmYoa3NoKS1jb21wYXRpYmxlIG1hbm5lci4pCiApCiBwaW5kZXgoS1NIX09QVElPTl9Q
UklOVCkKK3BpbmRleChOT19LU0hfT1BUSU9OX1BSSU5UKQogcGluZGV4KEtTSE9QVElPTlBSSU5U
KQorcGluZGV4KE5PS1NIT1BUSU9OUFJJTlQpCiBjaW5kZXgob3B0aW9uIHByaW50aW5nLCBrc2gg
c3R5bGUpCiBjaW5kZXgob3B0aW9uIHByaW50aW5nIHN0eWxlLCBrc2gpCiBjaW5kZXgoa3NoLCBv
cHRpb24gcHJpbnRpbmcgc3R5bGUpCkBAIC0xMzk1LDcgKzE2NTEsOSBAQCBzZXQgYW5kIHVuc2V0
IG9wdGlvbnMsIGFsbCBvcHRpb25zIGFyZSBzaG93biwgbWFya2VkIGBvbicgaWYKIHRoZXkgYXJl
IGluIHRoZSBub24tZGVmYXVsdCBzdGF0ZSwgYG9mZicgb3RoZXJ3aXNlLgogKQogcGluZGV4KEtT
SF9UWVBFU0VUKQorcGluZGV4KE5PX0tTSF9UWVBFU0VUKQogcGluZGV4KEtTSFRZUEVTRVQpCitw
aW5kZXgoTk9LU0hUWVBFU0VUKQogY2luZGV4KGFyZ3VtZW50IHNwbGl0dGluZywgaW4gdHlwZXNl
dCBldGMuKQogY2luZGV4KGtzaCwgYXJndW1lbnQgc3BsaXR0aW5nIGluIHR5cGVzZXQpCiBpdGVt
KHR0KEtTSF9UWVBFU0VUKSA8Sz4pKApAQCAtMTQwNiw3ICsxNjY0LDkgQEAgd29yZCBzcGxpdHRp
bmcgYWZ0ZXIgY29tbWFuZCBhbmQgcGFyYW1ldGVyIGV4cGFuc2lvbiBpbiBhcmd1bWVudHMgb2Yg
YW4KIGFzc2lnbm1lbnQ7IHdpdGggaXQsIHdvcmQgc3BsaXR0aW5nIGRvZXMgbm90IHRha2UgcGxh
Y2UgaW4gdGhvc2UgY2FzZXMuCiApCiBwaW5kZXgoS1NIX1pFUk9fU1VCU0NSSVBUKQorcGluZGV4
KE5PX0tTSF9aRVJPX1NVQlNDUklQVCkKIHBpbmRleChLU0haRVJPU1VCU0NSSVBUKQorcGluZGV4
KE5PS1NIWkVST1NVQlNDUklQVCkKIGNpbmRleChhcnJheXMsIGJlaGF2aW91ciBvZiBpbmRleCB6
ZXJvKQogaXRlbSh0dChLU0hfWkVST19TVUJTQ1JJUFQpKSgKIFRyZWF0IHVzZSBvZiBhIHN1YnNj
cmlwdCBvZiB2YWx1ZSB6ZXJvIGluIGFycmF5IG9yIHN0cmluZyBleHByZXNzaW9ucyBhcyBhCkBA
IC0xNDMyLDcgKzE2OTIsOSBAQCBUaGlzIG9wdGlvbiBpcyBmb3IgY29tcGF0aWJpbGl0eSB3aXRo
IG9sZGVyIHZlcnNpb25zIG9mIHRoZSBzaGVsbCBhbmQKIGlzIG5vdCByZWNvbW1lbmRlZCBpbiBu
ZXcgY29kZS4KICkKIHBpbmRleChQT1NJWF9CVUlMVElOUykKK3BpbmRleChOT19QT1NJWF9CVUlM
VElOUykKIHBpbmRleChQT1NJWEJVSUxUSU5TKQorcGluZGV4KE5PUE9TSVhCVUlMVElOUykKIGl0
ZW0odHQoUE9TSVhfQlVJTFRJTlMpIDxLPiA8Uz4pKAogV2hlbiB0aGlzIG9wdGlvbiBpcyBzZXQg
dGhlIHR0KGNvbW1hbmQpIGJ1aWx0aW4gY2FuIGJlIHVzZWQgdG8gZXhlY3V0ZQogc2hlbGwgYnVp
bHRpbiBjb21tYW5kcy4gIFBhcmFtZXRlciBhc3NpZ25tZW50cyBzcGVjaWZpZWQgYmVmb3JlIHNo
ZWxsCkBAIC0xNDU5LDcgKzE3MjEsOSBAQCB0dCh0cmFwKSBhbmQKIHR0KHVuc2V0KS4KICkKIHBp
bmRleChQT1NJWF9JREVOVElGSUVSUykKK3BpbmRleChOT19QT1NJWF9JREVOVElGSUVSUykKIHBp
bmRleChQT1NJWElERU5USUZJRVJTKQorcGluZGV4KE5PUE9TSVhJREVOVElGSUVSUykKIGNpbmRl
eChpZGVudGlmaWVycywgbm9uLXBvcnRhYmxlIGNoYXJhY3RlcnMgaW4pCiBjaW5kZXgocGFyYW1l
dGVyIG5hbWVzLCBub24tcG9ydGFibGUgY2hhcmFjdGVycyBpbikKIGl0ZW0odHQoUE9TSVhfSURF
TlRJRklFUlMpIDxLPiA8Uz4pKApAQCAtMTQ4MSw3ICsxNzQ1LDkgQEAgaWdub3JlZDsgYWxsIG9j
dGV0cyB3aXRoIHRoZSB0b3AgYml0IHNldCBtYXkgYmUgdXNlZCBpbiBpZGVudGlmaWVycy4KIFRo
aXMgaXMgbm9uLXN0YW5kYXJkIGJ1dCBpcyB0aGUgdHJhZGl0aW9uYWwgenNoIGJlaGF2aW91ci4K
ICkKIHBpbmRleChTSF9GSUxFX0VYUEFOU0lPTikKK3BpbmRleChOT19TSF9GSUxFX0VYUEFOU0lP
TikKIHBpbmRleChTSEZJTEVFWFBBTlNJT04pCitwaW5kZXgoTk9TSEZJTEVFWFBBTlNJT04pCiBj
aW5kZXgoc2gsIGV4cGFuc2lvbiBzdHlsZSkKIGNpbmRleChleHBhbnNpb24gc3R5bGUsIHNoKQog
aXRlbSh0dChTSF9GSUxFX0VYUEFOU0lPTikgPEs+IDxTPikoCkBAIC0xNDkzLDcgKzE3NTksOSBA
QCBicmFjZSBleHBhbnNpb24sIHNvIHRoaW5ncyBsaWtlIGB0dCh+JFVTRVJOQU1FKScgYW5kCiBg
dHQofntwZmFsc3RhZCxyY30pJyB3aWxsIHdvcmsuCiApCiBwaW5kZXgoU0hfTlVMTENNRCkKK3Bp
bmRleChOT19TSF9OVUxMQ01EKQogcGluZGV4KFNITlVMTENNRCkKK3BpbmRleChOT1NITlVMTENN
RCkKIHZpbmRleChOVUxMQ01ELCBpZ25vcmluZykKIHZpbmRleChSRUFETlVMTENNRCwgaWdub3Jp
bmcpCiBjaW5kZXgoc2gsIHJlZGlyZWN0aW9ucyB3aXRoIG5vIGNvbW1hbmQpCkBAIC0xNTA1LDcg
KzE3NzMsOSBAQCBEbyBub3QgdXNlIHRoZSB2YWx1ZXMgb2YgdHQoTlVMTENNRCkgYW5kIHR0KFJF
QUROVUxMQ01EKQogd2hlbiBkb2luZyByZWRpcmVjdGlvbnMsIHVzZSBgdHQoOiknIGluc3RlYWQg
KHNlZSBub2RlcmVmKFJlZGlyZWN0aW9uKSkuCiApCiBwaW5kZXgoU0hfT1BUSU9OX0xFVFRFUlMp
CitwaW5kZXgoTk9fU0hfT1BUSU9OX0xFVFRFUlMpCiBwaW5kZXgoU0hPUFRJT05MRVRURVJTKQor
cGluZGV4KE5PU0hPUFRJT05MRVRURVJTKQogY2luZGV4KHNoLCBzaW5nbGUgbGV0dGVyIG9wdGlv
bnMgc3R5bGUpCiBjaW5kZXgoa3NoLCBzaW5nbGUgbGV0dGVyIG9wdGlvbnMgc3R5bGUpCiBjaW5k
ZXgoc2luZ2xlIGxldHRlciBvcHRpb25zLCBrc2ggc3R5bGUpCkBAIC0xNTE2LDcgKzE3ODYsOSBA
QCBJZiB0aGlzIG9wdGlvbiBpcyBzZXQgdGhlIHNoZWxsIHRyaWVzIHRvIGludGVycHJldCBzaW5n
bGUgbGV0dGVyIG9wdGlvbnMKIFRoaXMgYWxzbyBhZmZlY3RzIHRoZSB2YWx1ZSBvZiB0aGUgdHQo
LSkgc3BlY2lhbCBwYXJhbWV0ZXIuCiApCiBwaW5kZXgoU0hfV09SRF9TUExJVCkKK3BpbmRleChO
T19TSF9XT1JEX1NQTElUKQogcGluZGV4KFNIV09SRFNQTElUKQorcGluZGV4KE5PU0hXT1JEU1BM
SVQpCiBjaW5kZXgoZmllbGQgc3BsaXR0aW5nLCBzaCBzdHlsZSkKIGNpbmRleChzaCwgZmllbGQg
c3BsaXR0aW5nIHN0eWxlKQogaXRlbSh0dChTSF9XT1JEX1NQTElUKSAodHQoLXkpKSA8Sz4gPFM+
KSgKQEAgLTE1MjUsNyArMTc5Nyw5IEBAIE5vdGUgdGhhdCB0aGlzIG9wdGlvbiBoYXMgbm90aGlu
ZyB0byBkbyB3aXRoIHdvcmQgc3BsaXR0aW5nLgogKFNlZSBub2RlcmVmKFBhcmFtZXRlciBFeHBh
bnNpb24pLikKICkKIHBpbmRleChUUkFQU19BU1lOQykKK3BpbmRleChOT19UUkFQU19BU1lOQykK
IHBpbmRleChUUkFQU0FTWU5DKQorcGluZGV4KE5PVFJBUFNBU1lOQykKIGNpbmRleCh0cmFwcywg
YXN5bmNocm9ub3VzKQogaXRlbSh0dChUUkFQU19BU1lOQykpKAogV2hpbGUgd2FpdGluZyBmb3Ig
YSBwcm9ncmFtIHRvIGV4aXQsIGhhbmRsZSBzaWduYWxzIGFuZCBydW4gdHJhcHMKQEAgLTE1Mzgs
NiArMTgxMiw3IEBAIGVuZGl0ZW0oKQogc3Vic2VjdChTaGVsbCBTdGF0ZSkKIHN0YXJ0aXRlbSgp
CiBwaW5kZXgoSU5URVJBQ1RJVkUpCitwaW5kZXgoTk9fSU5URVJBQ1RJVkUpCiBpdGVtKHR0KElO
VEVSQUNUSVZFKSAodHQoLWkpLCBrc2g6IHR0KC1pKSkpKAogVGhpcyBpcyBhbiBpbnRlcmFjdGl2
ZSBzaGVsbC4gIFRoaXMgb3B0aW9uIGlzIHNldCB1cG9uIGluaXRpYWxpc2F0aW9uIGlmCiB0aGUg
c3RhbmRhcmQgaW5wdXQgaXMgYSB0dHkgYW5kIGNvbW1hbmRzIGFyZSBiZWluZyByZWFkIGZyb20g
c3RhbmRhcmQgaW5wdXQuCkBAIC0xNTQ3LDEyICsxODIyLDE0IEBAIG9uIHRoZSBjb21tYW5kIGxp
bmUuCiBUaGUgdmFsdWUgb2YgdGhpcyBvcHRpb24gY2Fubm90IGJlIGNoYW5nZWQgYW55d2hlcmUg
b3RoZXIgdGhhbiB0aGUgY29tbWFuZCBsaW5lLgogKQogcGluZGV4KExPR0lOKQorcGluZGV4KE5P
X0xPR0lOKQogaXRlbSh0dChMT0dJTikgKHR0KC1sKSwga3NoOiB0dCgtbCkpKSgKIFRoaXMgaXMg
YSBsb2dpbiBzaGVsbC4KIElmIHRoaXMgb3B0aW9uIGlzIG5vdCBleHBsaWNpdGx5IHNldCwgdGhl
IHNoZWxsIGlzIGEgbG9naW4gc2hlbGwgaWYKIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHR0
KGFyZ3ZbMF0pIHBhc3NlZCB0byB0aGUgc2hlbGwgaXMgYSBgdHQoLSknLgogKQogcGluZGV4KFBS
SVZJTEVHRUQpCitwaW5kZXgoTk9fUFJJVklMRUdFRCkKIGNpbmRleChwcml2aWxlZ2VkIG1vZGUp
CiBjaW5kZXgobW9kZSwgcHJpdmlsZWdlZCkKIGl0ZW0odHQoUFJJVklMRUdFRCkgKHR0KC1wKSwg
a3NoOiB0dCgtcCkpKSgKQEAgLTE1NjksNiArMTg0Niw3IEBAIGZ1bmN0aW9uIGFsd2F5cyBjaGFu
Z2VzIGl0IGdsb2JhbGx5IHJlZ2FyZGxlc3Mgb2YgdGhlIHR0KExPQ0FMX09QVElPTlMpCiBvcHRp
b24uCiApCiBwaW5kZXgoUkVTVFJJQ1RFRCkKK3BpbmRleChOT19SRVNUUklDVEVEKQogY2luZGV4
KHJlc3RyaWN0ZWQgc2hlbGwpCiBpdGVtKHR0KFJFU1RSSUNURUQpICh0dCgtcikpKSgKIEVuYWJs
ZXMgcmVzdHJpY3RlZCBtb2RlLiAgVGhpcyBvcHRpb24gY2Fubm90IGJlIGNoYW5nZWQgdXNpbmcK
QEAgLTE1NzcsNyArMTg1NSw5IEBAIGdsb2JhbGx5IHJlZ2FyZGxlc3Mgb2YgdGhlIHR0KExPQ0FM
X09QVElPTlMpIG9wdGlvbi4gIFNlZQogbm9kZXJlZihSZXN0cmljdGVkIFNoZWxsKS4KICkKIHBp
bmRleChTSElOX1NURElOKQorcGluZGV4KE5PX1NISU5fU1RESU4pCiBwaW5kZXgoU0hJTlNURElO
KQorcGluZGV4KE5PU0hJTlNURElOKQogaXRlbSh0dChTSElOX1NURElOKSAodHQoLXMpLCBrc2g6
IHR0KC1zKSkpKAogQ29tbWFuZHMgYXJlIGJlaW5nIHJlYWQgZnJvbSB0aGUgc3RhbmRhcmQgaW5w
dXQuCiBDb21tYW5kcyBhcmUgcmVhZCBmcm9tIHN0YW5kYXJkIGlucHV0IGlmIG5vIGNvbW1hbmQg
aXMgc3BlY2lmaWVkIHdpdGgKQEAgLTE1OTQsOSArMTg3NCwxMiBAQCBUaGUgdmFsdWUgb2YgdGhp
cyBvcHRpb24gY2Fubm90IGJlIGNoYW5nZWQgYW55d2hlcmUgb3RoZXIKIHRoYW4gdGhlIGNvbW1h
bmQgbGluZS4KICkKIHBpbmRleChTSU5HTEVfQ09NTUFORCkKK3BpbmRleChOT19TSU5HTEVfQ09N
TUFORCkKIHBpbmRleChTSU5HTEVDT01NQU5EKQorcGluZGV4KE5PU0lOR0xFQ09NTUFORCkKIGNp
bmRleChzaW5nbGUgY29tbWFuZCkKIHBpbmRleChJTlRFUkFDVElWRSwgdXNlIG9mKQorcGluZGV4
KE5PX0lOVEVSQUNUSVZFLCB1c2Ugb2YpCiBpdGVtKHR0KFNJTkdMRV9DT01NQU5EKSAodHQoLXQp
LCBrc2g6IHR0KC10KSkpKAogSWYgdGhlIHNoZWxsIGlzIHJlYWRpbmcgZnJvbSBzdGFuZGFyZCBp
bnB1dCwgaXQgZXhpdHMgYWZ0ZXIgYSBzaW5nbGUgY29tbWFuZAogaGFzIGJlZW4gZXhlY3V0ZWQu
ICBUaGlzIGFsc28gbWFrZXMgdGhlIHNoZWxsIG5vbi1pbnRlcmFjdGl2ZSwgdW5sZXNzIHRoZQpA
QCAtMTYwOCwxMyArMTg5MSwxNiBAQCBlbmRpdGVtKCkKIHN1YnNlY3QoWmxlKQogc3RhcnRpdGVt
KCkKIHBpbmRleChCRUVQKQorcGluZGV4KE5PX0JFRVApCiBjaW5kZXgoYmVlcCwgZW5hYmxpbmcp
CiBjaW5kZXgoZW5hYmxpbmcgdGhlIGJlZXApCiBpdGVtKHR0KEJFRVApICh0dChQTFVTKClCKSkg
PEQ+KSgKIEJlZXAgb24gZXJyb3IgaW4gWkxFLgogKQogcGluZGV4KENPTUJJTklOR19DSEFSUykK
K3BpbmRleChOT19DT01CSU5JTkdfQ0hBUlMpCiBwaW5kZXgoQ09NQklOSU5HQ0hBUlMpCitwaW5k
ZXgoTk9DT01CSU5JTkdDSEFSUykKIGNpbmRleChjaGFyYWN0ZXJzLCAoVW5pY29kZSkgY29tYmlu
aW5nKQogY2luZGV4KGNvbWJpbmluZyBjaGFyYWN0ZXJzIChVbmljb2RlKSkKIGNpbmRleChVbmlj
b2RlIGNvbWJpbmluZyBjaGFyYWN0ZXJzKQpAQCAtMTYzMyw2ICsxOTE5LDcgQEAgdXNlZCBhcyBw
YXJ0IG9mIGEgd29yZCBpbiBjb21iaW5hdGlvbiB3aXRoIGEgd29yZCBjaGFyYWN0ZXIuCiBPdGhl
cndpc2UgdGhlIGJhc2Ugc2hlbGwgZG9lcyBub3QgaGFuZGxlIGNvbWJpbmluZyBjaGFyYWN0ZXJz
IHNwZWNpYWxseS4KICkKIHBpbmRleChFTUFDUykKK3BpbmRleChOT19FTUFDUykKIGl0ZW0odHQo
RU1BQ1MpKSgKIElmIFpMRSBpcyBsb2FkZWQsIHR1cm5pbmcgb24gdGhpcyBvcHRpb24gaGFzIHRo
ZSBlcXVpdmFsZW50IGVmZmVjdAogb2YgYHR0KGJpbmRrZXkgLWUpJy4gIEluIGFkZGl0aW9uLCB0
aGUgVkkgb3B0aW9uIGlzIHVuc2V0LgpAQCAtMTY0MSwxMyArMTkyOCwxNiBAQCBub3QgZ3VhcmFu
dGVlZCB0byByZWZsZWN0IHRoZSBjdXJyZW50IGtleW1hcC4gIFRoaXMgb3B0aW9uIGlzCiBwcm92
aWRlZCBmb3IgY29tcGF0aWJpbGl0eTsgdHQoYmluZGtleSkgaXMgdGhlIHJlY29tbWVuZGVkIGlu
dGVyZmFjZS4KICkKIHBpbmRleChPVkVSU1RSSUtFKQorcGluZGV4KE5PX09WRVJTVFJJS0UpCiBj
aW5kZXgoZWRpdG9yLCBvdmVyc3RyaWtlIG1vZGUpCiBjaW5kZXgob3ZlcnN0cmlrZSBtb2RlLCBv
ZiBlZGl0b3IpCiBpdGVtKHR0KE9WRVJTVFJJS0UpKSgKIFN0YXJ0IHVwIHRoZSBsaW5lIGVkaXRv
ciBpbiBvdmVyc3RyaWtlIG1vZGUuCiApCiBwaW5kZXgoU0lOR0xFX0xJTkVfWkxFKQorcGluZGV4
KE5PX1NJTkdMRV9MSU5FX1pMRSkKIHBpbmRleChTSU5HTEVMSU5FWkxFKQorcGluZGV4KE5PU0lO
R0xFTElORVpMRSkKIGNpbmRleChlZGl0b3IsIHNpbmdsZSBsaW5lIG1vZGUpCiBpdGVtKHR0KFNJ
TkdMRV9MSU5FX1pMRSkgKHR0KC1NKSkgPEs+KSgKIFVzZSBzaW5nbGUtbGluZSBjb21tYW5kIGxp
bmUgZWRpdGluZyBpbnN0ZWFkIG9mIG11bHRpLWxpbmUuCkBAIC0xNjU5LDYgKzE5NDksNyBAQCBl
ZmZlY3Qgb24gc2hlbGwgc3ludGF4LCBtYW55IHVzZXJzIG1heSB3aXNoIHRvIGRpc2FibGUgdGhp
cyBvcHRpb24KIHdoZW4gdXNpbmcga3NoIGVtdWxhdGlvbiBpbnRlcmFjdGl2ZWx5LgogKQogcGlu
ZGV4KFZJKQorcGluZGV4KE5PX1ZJKQogaXRlbSh0dChWSSkpKAogSWYgWkxFIGlzIGxvYWRlZCwg
dHVybmluZyBvbiB0aGlzIG9wdGlvbiBoYXMgdGhlIGVxdWl2YWxlbnQgZWZmZWN0CiBvZiBgdHQo
YmluZGtleSAtdiknLiAgSW4gYWRkaXRpb24sIHRoZSBFTUFDUyBvcHRpb24gaXMgdW5zZXQuCkBA
IC0xNjY3LDYgKzE5NTgsNyBAQCBub3QgZ3VhcmFudGVlZCB0byByZWZsZWN0IHRoZSBjdXJyZW50
IGtleW1hcC4gIFRoaXMgb3B0aW9uIGlzCiBwcm92aWRlZCBmb3IgY29tcGF0aWJpbGl0eTsgdHQo
YmluZGtleSkgaXMgdGhlIHJlY29tbWVuZGVkIGludGVyZmFjZS4KICkKIHBpbmRleChaTEUpCitw
aW5kZXgoTk9fWkxFKQogY2luZGV4KGVkaXRvciwgZW5hYmxpbmcpCiBjaW5kZXgoZW5hYmxpbmcg
dGhlIGVkaXRvcikKIGl0ZW0odHQoWkxFKSAodHQoLVopKSkoCkBAIC0xNjg0LDcwICsxOTc2LDkx
IEBAIG9wdGlvbnMgdG8gdGhlIHNoZWxsLgogCiBzdGFydGl0ZW0oKQogcGluZGV4KEJSQUNFX0VY
UEFORCkKK3BpbmRleChOT19CUkFDRV9FWFBBTkQpCiBwaW5kZXgoQlJBQ0VFWFBBTkQpCitwaW5k
ZXgoTk9CUkFDRUVYUEFORCkKIGl0ZW0odHQoQlJBQ0VfRVhQQU5EKSkoCiBlbShOT18pdHQoSUdO
T1JFX0JSQUNFUykKIChrc2ggYW5kIGJhc2ggY29tcGF0aWJpbGl0eSkKICkKIHBpbmRleChET1Rf
R0xPQikKK3BpbmRleChOT19ET1RfR0xPQikKIHBpbmRleChET1RHTE9CKQorcGluZGV4KE5PRE9U
R0xPQikKIGl0ZW0odHQoRE9UX0dMT0IpKSgKIHR0KEdMT0JfRE9UUykKIChiYXNoIGNvbXBhdGli
aWxpdHkpCiApCiBwaW5kZXgoSEFTSF9BTEwpCitwaW5kZXgoTk9fSEFTSF9BTEwpCiBwaW5kZXgo
SEFTSEFMTCkKK3BpbmRleChOT0hBU0hBTEwpCiBpdGVtKHR0KEhBU0hfQUxMKSkoCiB0dChIQVNI
X0NNRFMpCiAoYmFzaCBjb21wYXRpYmlsaXR5KQogKQogcGluZGV4KEhJU1RfQVBQRU5EKQorcGlu
ZGV4KE5PX0hJU1RfQVBQRU5EKQogcGluZGV4KEhJU1RBUFBFTkQpCitwaW5kZXgoTk9ISVNUQVBQ
RU5EKQogaXRlbSh0dChISVNUX0FQUEVORCkpKAogdHQoQVBQRU5EX0hJU1RPUlkpCiAoYmFzaCBj
b21wYXRpYmlsaXR5KQogKQogcGluZGV4KEhJU1RfRVhQQU5EKQorcGluZGV4KE5PX0hJU1RfRVhQ
QU5EKQogcGluZGV4KEhJU1RFWFBBTkQpCitwaW5kZXgoTk9ISVNURVhQQU5EKQogaXRlbSh0dChI
SVNUX0VYUEFORCkpKAogdHQoQkFOR19ISVNUKQogKGJhc2ggY29tcGF0aWJpbGl0eSkKICkKIHBp
bmRleChMT0cpCitwaW5kZXgoTk9fTE9HKQogaXRlbSh0dChMT0cpKSgKIGVtKE5PXyl0dChISVNU
X05PX0ZVTkNUSU9OUykKIChrc2ggY29tcGF0aWJpbGl0eSkKICkKIHBpbmRleChNQUlMX1dBUk4p
CitwaW5kZXgoTk9fTUFJTF9XQVJOKQogcGluZGV4KE1BSUxXQVJOKQorcGluZGV4KE5PTUFJTFdB
Uk4pCiBpdGVtKHR0KE1BSUxfV0FSTikpKAogdHQoTUFJTF9XQVJOSU5HKQogKGJhc2ggY29tcGF0
aWJpbGl0eSkKICkKIHBpbmRleChPTkVfQ01EKQorcGluZGV4KE5PX09ORV9DTUQpCiBwaW5kZXgo
T05FQ01EKQorcGluZGV4KE5PT05FQ01EKQogaXRlbSh0dChPTkVfQ01EKSkoCiB0dChTSU5HTEVf
Q09NTUFORCkKIChiYXNoIGNvbXBhdGliaWxpdHkpCiApCiBwaW5kZXgoUEhZU0lDQUwpCitwaW5k
ZXgoTk9fUEhZU0lDQUwpCiBpdGVtKHR0KFBIWVNJQ0FMKSkoCiB0dChDSEFTRV9MSU5LUykKIChr
c2ggYW5kIGJhc2ggY29tcGF0aWJpbGl0eSkKICkKIHBpbmRleChQUk9NUFRfVkFSUykKK3BpbmRl
eChOT19QUk9NUFRfVkFSUykKIHBpbmRleChQUk9NUFRWQVJTKQorcGluZGV4KE5PUFJPTVBUVkFS
UykKIGl0ZW0odHQoUFJPTVBUX1ZBUlMpKSgKIHR0KFBST01QVF9TVUJTVCkKIChiYXNoIGNvbXBh
dGliaWxpdHkpCiApCiBwaW5kZXgoU1RESU4pCitwaW5kZXgoTk9fU1RESU4pCiBpdGVtKHR0KFNU
RElOKSkoCiB0dChTSElOX1NURElOKQogKGtzaCBjb21wYXRpYmlsaXR5KQogKQogcGluZGV4KFRS
QUNLX0FMTCkKK3BpbmRleChOT19UUkFDS19BTEwpCiBwaW5kZXgoVFJBQ0tBTEwpCitwaW5kZXgo
Tk9UUkFDS0FMTCkKIGl0ZW0odHQoVFJBQ0tfQUxMKSkoCiB0dChIQVNIX0NNRFMpCiAoa3NoIGNv
bXBhdGliaWxpdHkpCi0tIAoxLjUuNi41Cgo=
--000e0cd25578aba2ae04626bd344--

