From zsh-workers-return-8351-mason-zsh=primenet.com.au@sunsite.auc.dk Thu Oct 21 07:10:43 1999
Return-Path: <zsh-workers-return-8351-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 14370 invoked from network); 21 Oct 1999 07:10:41 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 21 Oct 1999 07:10:41 -0000
Received: (qmail 20615 invoked by alias); 21 Oct 1999 07:10:34 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 8351
Received: (qmail 20606 invoked from network); 21 Oct 1999 07:10:34 -0000
Date: Thu, 21 Oct 1999 09:10:32 +0200 (MET DST)
Message-Id: <199910210710.JAA04616@beta.informatik.hu-berlin.de>
From: Sven Wischnowsky <wischnow@informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk
In-reply-to: "Bart Schaefer"'s message of Wed, 20 Oct 1999 18:01:15 +0000
Subject: Re: Completeinword and ambiguous completions


Bart Schaefer wrote:

> Consider the following situation:
> 
> zsh% setopt completeinword
> zsh% setopt pro<TAB>
> zsh% setopt prompt<TAB>
> promptbang     promptcr       promptpercent  promptsubst    promptvars
> 
> Note that the prefix "prompt" is unambiguous.  Now consider what happens
> if the cursor is over the "m" when TAB is hit in each of these cases:
> 
> zsh% setopt prompt
> (feep, cursor stays on "m")
> zsh% setopt promptvars
> zsh% setopt promptvars
> (cursor is one space past end of word)
> 
> What I'd like is, in the first of those cases, the cursor doesn't stay
> on the "m" but rather moves to the end of the unambiguous prefix, so that
> I can immediately start menu completion for the rest of the word.  The
> following almost does it:

That's a case for global match specs, since what you want is that the
code finds out that you are in a prefix for possible matches and moves 
you at the end of the unambiguous string. Since completeinword
normally doesn't test this, but instead looks only for strings ending
with the stuff after the cursor, it doesn't help. But with:

  compmatchers=('r:|=*')

It takes the string from the line only as a prefix, builds the
possible matches you were expecting and puts you at the place were
something is missing, i.e. the end in your example.

This is then independent of the setting of completeinword (at least in 
this example). And, of course, you may prefer to use:

  compmatchers=('' 'r:|=*')

to first try to generate matches without this strings-is-a-prefix
behaviour.


Is that good enough?

Bye
 Sven


--
Sven Wischnowsky                         wischnow@informatik.hu-berlin.de

