From zsh-users-return-3895-mason-zsh=primenet.com.au@sunsite.dk Tue May 22 15:42:44 2001
Return-Path: <zsh-users-return-3895-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 5076 invoked from network); 22 May 2001 15:42:39 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 22 May 2001 15:42:39 -0000
Received: (qmail 16015 invoked by alias); 22 May 2001 15:42:21 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 3895
Received: (qmail 16003 invoked from network); 22 May 2001 15:42:20 -0000
Date: Tue, 22 May 2001 11:42:18 -0400
From: Jason Price <jprice@cyberbuzz.gatech.edu>
To: zsh-users@sunsite.dk
Subject: Re: 4.0.1-pre-5 (solaris issues)
Message-ID: <20010522114218.A12553@oobleck.gatech.edu>
References: <Tc0a88d0153ac729d36@mailsweeper01.cambridgesiliconradio.com> <20010522111111.A11800@oobleck.gatech.edu> <1010522152929.ZM22161@candle.brasslantern.com>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="AqsLC8rIMeq19msA"
X-Mailer: Mutt 1.0.1us
In-Reply-To: <1010522152929.ZM22161@candle.brasslantern.com>; from schaefer@candle.brasslantern.com on Tue, May 22, 2001 at 03:29:28PM +0000


--AqsLC8rIMeq19msA
Content-Type: text/plain; charset=us-ascii

> } Was testing: read multio with globbing
> This is a race condition; the "read multio" test depends on a background
> job from the "setup multio" test.

Is there something I can help test to track this one down?
 
> } ./V01zmodload.ztst: starting.
> } Segmentation Fault
> } ./V01zmodload.ztst: starting.
> } Segmentation Fault
> Please run "ZTST_verbose=2 make check TESTNUM=V01" so we can see where
> this is happening.

I have attached the 3 outputs from solaris 2.6, 2.7 and 2.8.

> That's right, it won't compile out of the box.  I have an uncommitted edit
> for /etc/MACHINES to document this.  You must use --disable-lfs.

I'm not sure if this is the best approach.  There are a LOT of 2.6 installs 
lying around a lot of shops.  There are 2 ways that this can go: 1) they're 
old boxes that arn't going to be touched, so we shouln't bother.  Sun has
also announced that they will end of life solaris 2.6 in the next 6
months.  I have my doubts that they will be able to make that one stick
however.  2) Since there is such a large install base, we should make it
easy to install.

I don't know which way to take it.

Jason

-- 
"Friendship is the bridge between lonely and loved, between a glance and a
gaze. It stretches from the fog into sunshine, hopelessness into faith, 
between despair and joy. It crosses the chasm from hell and to heaven, from 
God to man, and from you to me." --Unknown   Jason Price  jprice@gatech.edu

--AqsLC8rIMeq19msA
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename=file-26

cd Test ; make TESTNUM=V01 check
make[1]: Entering directory `/export/home/jprice/programs/zsh/zsh-no-lfs/Test'
if test -n "gcc"; then \
  cd .. && \
  make TESTNUM=V01 MODDIR=`pwd`/Test/Modules install.modules > /dev/null; \
fi
mkdir /export/home/jprice/programs/zsh/zsh-no-lfs/Test/Modules
mkdir /export/home/jprice/programs/zsh/zsh-no-lfs/Test/Modules/zsh
for f in ./V01*.ztst; do \
  ../Src/zsh +Z -f ./ztst.zsh $f; \
done
./V01zmodload.ztst: starting.
ZTST_getsect: read section name: prep
ZTST_getchunk: read code chunk:
 mods=()
 while read name modfile link auto load funcs
 do
   [[ $name == \#* ]] && continue
   eval "$name $modfile $link $auto $load"
   [[ $link == no ]] && continue
   mods=($mods $name)
 done < $ZTST_testdir/../config.modules
ZTST_execchunk: status 0
ZTST_getchunk: read code chunk:

ZTST_getsect: read section name: test
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -L
ZTST_getchunk: read code chunk:
 zmodload -L
ZTST_test: examining line:
>zmodload zsh/main
ZTST_getredir: read redir for '>':
zmodload zsh/main
zmodload zsh/parameter
ZTST_test: examining line:

Running test: List the loaded modules
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
zmodload zsh/main
zmodload zsh/parameter
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload zsh/main
ZTST_getchunk: read code chunk:
 zmodload zsh/main
ZTST_test: examining line:
?ZTST_execchunk:zmodload:2: module zsh/main already loaded.
ZTST_getredir: read redir for '?':
ZTST_execchunk:zmodload:2: module zsh/main already loaded.
ZTST_test: examining line:

Running test: Test reloading an already-loaded module
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
ZTST_execchunk:zmodload:2: module zsh/main already loaded.
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 for m in $mods
ZTST_getchunk: read code chunk:
 for m in $mods
 do
   zmodload -i $m || mods[(r)$m]=()
 done
ZTST_test: examining line:

Running test: Test loading of all compiled modules
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -e $mods
ZTST_getchunk: read code chunk:
 zmodload -e $mods
ZTST_test: examining line:

Running test: Check that zsh believes the modules did load
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -i bogus/notamodule
ZTST_getchunk: read code chunk:
 zmodload -i bogus/notamodule
ZTST_test: examining line:

Running test: Check that loading a nonexistent module fails
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
ZTST_execchunk:2: failed to load module: bogus/notamodule
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -u bogus/notamodule
ZTST_getchunk: read code chunk:
 zmodload -u bogus/notamodule
ZTST_test: examining line:

Running test: Check that unloading a nonexistent module fails
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
ZTST_execchunk:zmodload:2: no such module bogus/notamodule
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -ab bogus
ZTST_getchunk: read code chunk:
 zmodload -ab bogus
 zmodload -ub bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded builtin
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -ac bogus
ZTST_getchunk: read code chunk:
 zmodload -ac bogus
 zmodload -uc bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded condition
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -ap bogus
ZTST_getchunk: read code chunk:
 zmodload -ap bogus
 zmodload -up bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded parameter
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -af bogus
ZTST_getchunk: read code chunk:
 zmodload -af bogus
 zmodload -uf bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded math function
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -ab zsh/example example
   builtin example
   zmodload -e zsh/example
 else print -u8 Warning: zsh/example not linked: not checking autoloading
 fi
ZTST_test: examining line:

Running test: Autoload a module via a builtin
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
Options: 
Arguments:
Name: example

Integer Parameter: 42
String Parameter: example
Array Parameter: example array
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -ac -I zsh/example ex
   [[ exam -ex ple ]]
   zmodload -e zsh/example
 else :
 fi
ZTST_test: examining line:

Running test: Autoload a module via a condition
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -ap zsh/example exint
   : $exint
   zmodload -e zsh/example
 else :
 fi
ZTST_test: examining line:

Running test: Autoload a module via a parameter
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -af zsh/example sum
   (( sum(1) ))
   zmodload -e zsh/example
 else :
 fi
ZTST_test: examining line:

Running test: Autoload a module via a math function
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -A example=zsh/example
ZTST_getchunk: read code chunk:
 zmodload -A example=zsh/example
 zmodload -A
ZTST_test: examining line:
>example -> zsh/example
ZTST_getredir: read redir for '>':
example -> zsh/example
ZTST_test: examining line:

Running test: Test creating a module alias
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
example -> zsh/example
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u example
   zmodload -ab example
   builtin example
   zmodload -e example
 else :
 fi
ZTST_test: examining line:

Running test: Unload/autoload the module via its alias
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
Options: 
Arguments:
Name: example

Integer Parameter: 42
String Parameter: example
Array Parameter: example array
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -R example
ZTST_getchunk: read code chunk:
 zmodload -R example
 zmodload -e example
ZTST_test: examining line:

Running test: Delete the module alias again
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 mods[(r)zsh/main]=()
ZTST_getchunk: read code chunk:
 mods[(r)zsh/main]=()
 mods[(r)zsh/parameter]=()
 for m in $mods
 do
   zmodload -ud $m
 done
ZTST_test: examining line:

Running test: Remove module dependecies
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -u $mods
ZTST_getchunk: read code chunk:
 zmodload -u $mods
ZTST_test: examining line:

Running test: Unload the modules loaded by this test suite
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
%clean
ZTST_test: all tests successful
ZTST_getsect: read section name: clean
ZTST_getchunk: read code chunk:
 unset name modfile link auto load funcs mods m
ZTST_execchunk: status 0
ZTST_getchunk: read code chunk:

./V01zmodload.ztst: all tests successful.
rm -rf Modules .zcompdump
make[1]: Leaving directory `/export/home/jprice/programs/zsh/zsh-no-lfs/Test'

--AqsLC8rIMeq19msA
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename=file-27

cd Test ; make check
if test -n "gcc"; then \
  cd .. && \
  make MODDIR=`pwd`/Test/Modules install.modules > /dev/null; \
fi
mkdir /export/home/jprice/programs/zsh/zsh-4.0.1-pre-5/Test/Modules
mkdir /export/home/jprice/programs/zsh/zsh-4.0.1-pre-5/Test/Modules/zsh
for f in ./V01*.ztst; do \
  ../Src/zsh +Z -f ./ztst.zsh $f; \
done
./V01zmodload.ztst: starting.
ZTST_getsect: read section name: prep
ZTST_getchunk: read code chunk:
 mods=()
 while read name modfile link auto load funcs
 do
   [[ $name == \#* ]] && continue
   eval "$name $modfile $link $auto $load"
   [[ $link == no ]] && continue
   mods=($mods $name)
 done < $ZTST_testdir/../config.modules
ZTST_execchunk: status 0
ZTST_getchunk: read code chunk:

ZTST_getsect: read section name: test
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -L
ZTST_getchunk: read code chunk:
 zmodload -L
ZTST_test: examining line:
>zmodload zsh/main
ZTST_getredir: read redir for '>':
zmodload zsh/main
zmodload zsh/parameter
ZTST_test: examining line:

Running test: List the loaded modules
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
zmodload zsh/main
zmodload zsh/parameter
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload zsh/main
ZTST_getchunk: read code chunk:
 zmodload zsh/main
ZTST_test: examining line:
?ZTST_execchunk:zmodload:2: module zsh/main already loaded.
ZTST_getredir: read redir for '?':
ZTST_execchunk:zmodload:2: module zsh/main already loaded.
ZTST_test: examining line:

Running test: Test reloading an already-loaded module
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
ZTST_execchunk:zmodload:2: module zsh/main already loaded.
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 for m in $mods
ZTST_getchunk: read code chunk:
 for m in $mods
 do
   zmodload -i $m || mods[(r)$m]=()
 done
ZTST_test: examining line:

Running test: Test loading of all compiled modules
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -e $mods
ZTST_getchunk: read code chunk:
 zmodload -e $mods
ZTST_test: examining line:

Running test: Check that zsh believes the modules did load
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -i bogus/notamodule
ZTST_getchunk: read code chunk:
 zmodload -i bogus/notamodule
ZTST_test: examining line:

Running test: Check that loading a nonexistent module fails
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
ZTST_execchunk:2: failed to load module: bogus/notamodule
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -u bogus/notamodule
ZTST_getchunk: read code chunk:
 zmodload -u bogus/notamodule
ZTST_test: examining line:

Running test: Check that unloading a nonexistent module fails
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
ZTST_execchunk:zmodload:2: no such module bogus/notamodule
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -ab bogus
ZTST_getchunk: read code chunk:
 zmodload -ab bogus
 zmodload -ub bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded builtin
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -ac bogus
ZTST_getchunk: read code chunk:
 zmodload -ac bogus
 zmodload -uc bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded condition
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -ap bogus
ZTST_getchunk: read code chunk:
 zmodload -ap bogus
 zmodload -up bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded parameter
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -af bogus
ZTST_getchunk: read code chunk:
 zmodload -af bogus
 zmodload -uf bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded math function
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -ab zsh/example example
   builtin example
   zmodload -e zsh/example
 else print -u8 Warning: zsh/example not linked: not checking autoloading
 fi
ZTST_test: examining line:

Running test: Autoload a module via a builtin
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
Options: 
Arguments:
Name: example

Integer Parameter: 42
String Parameter: example
Array Parameter: example array
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -ac -I zsh/example ex
   [[ exam -ex ple ]]
   zmodload -e zsh/example
 else :
 fi
ZTST_test: examining line:

Running test: Autoload a module via a condition
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -ap zsh/example exint
   : $exint
   zmodload -e zsh/example
 else :
 fi
ZTST_test: examining line:

Running test: Autoload a module via a parameter
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -af zsh/example sum
   (( sum(1) ))
   zmodload -e zsh/example
 else :
 fi
ZTST_test: examining line:

Running test: Autoload a module via a math function
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -A example=zsh/example
ZTST_getchunk: read code chunk:
 zmodload -A example=zsh/example
 zmodload -A
ZTST_test: examining line:
>example -> zsh/example
ZTST_getredir: read redir for '>':
example -> zsh/example
ZTST_test: examining line:

Running test: Test creating a module alias
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
example -> zsh/example
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u example
   zmodload -ab example
   builtin example
   zmodload -e example
 else :
 fi
ZTST_test: examining line:

Running test: Unload/autoload the module via its alias
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
Options: 
Arguments:
Name: example

Integer Parameter: 42
String Parameter: example
Array Parameter: example array
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -R example
ZTST_getchunk: read code chunk:
 zmodload -R example
 zmodload -e example
ZTST_test: examining line:

Running test: Delete the module alias again
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 mods[(r)zsh/main]=()
ZTST_getchunk: read code chunk:
 mods[(r)zsh/main]=()
 mods[(r)zsh/parameter]=()
 for m in $mods
 do
   zmodload -ud $m
 done
ZTST_test: examining line:

Running test: Remove module dependecies
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -u $mods
ZTST_getchunk: read code chunk:
 zmodload -u $mods
ZTST_test: examining line:

Running test: Unload the modules loaded by this test suite
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
%clean
ZTST_test: all tests successful
ZTST_getsect: read section name: clean
ZTST_getchunk: read code chunk:
 unset name modfile link auto load funcs mods m
ZTST_execchunk: status 0
ZTST_getchunk: read code chunk:

./V01zmodload.ztst: all tests successful.
rm -rf Modules .zcompdump

--AqsLC8rIMeq19msA
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename=file-28

cd Test ; make check
make[1]: Entering directory `/programs/zsh/zsh-4.0.1-pre-5/Test'
if test -n "gcc"; then \
  cd .. && \
  make MODDIR=`pwd`/Test/Modules install.modules > /dev/null; \
fi
mkdir /programs/zsh/zsh-4.0.1-pre-5/Test/Modules
mkdir /programs/zsh/zsh-4.0.1-pre-5/Test/Modules/zsh
for f in ./V01*.ztst; do \
  ../Src/zsh +Z -f ./ztst.zsh $f; \
done
./V01zmodload.ztst: starting.
ZTST_getsect: read section name: prep
ZTST_getchunk: read code chunk:
 mods=()
 while read name modfile link auto load funcs
 do
   [[ $name == \#* ]] && continue
   eval "$name $modfile $link $auto $load"
   [[ $link == no ]] && continue
   mods=($mods $name)
 done < $ZTST_testdir/../config.modules
ZTST_execchunk: status 0
ZTST_getchunk: read code chunk:

ZTST_getsect: read section name: test
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -L
ZTST_getchunk: read code chunk:
 zmodload -L
ZTST_test: examining line:
>zmodload zsh/main
ZTST_getredir: read redir for '>':
zmodload zsh/main
zmodload zsh/parameter
ZTST_test: examining line:

Running test: List the loaded modules
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
zmodload zsh/main
zmodload zsh/parameter
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload zsh/main
ZTST_getchunk: read code chunk:
 zmodload zsh/main
ZTST_test: examining line:
?ZTST_execchunk:zmodload:2: module zsh/main already loaded.
ZTST_getredir: read redir for '?':
ZTST_execchunk:zmodload:2: module zsh/main already loaded.
ZTST_test: examining line:

Running test: Test reloading an already-loaded module
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
ZTST_execchunk:zmodload:2: module zsh/main already loaded.
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 for m in $mods
ZTST_getchunk: read code chunk:
 for m in $mods
 do
   zmodload -i $m || mods[(r)$m]=()
 done
ZTST_test: examining line:

Running test: Test loading of all compiled modules
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -e $mods
ZTST_getchunk: read code chunk:
 zmodload -e $mods
ZTST_test: examining line:

Running test: Check that zsh believes the modules did load
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -i bogus/notamodule
ZTST_getchunk: read code chunk:
 zmodload -i bogus/notamodule
ZTST_test: examining line:

Running test: Check that loading a nonexistent module fails
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
ZTST_execchunk:2: failed to load module: bogus/notamodule
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -u bogus/notamodule
ZTST_getchunk: read code chunk:
 zmodload -u bogus/notamodule
ZTST_test: examining line:

Running test: Check that unloading a nonexistent module fails
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:
ZTST_execchunk:zmodload:2: no such module bogus/notamodule
Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -ab bogus
ZTST_getchunk: read code chunk:
 zmodload -ab bogus
 zmodload -ub bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded builtin
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -ac bogus
ZTST_getchunk: read code chunk:
 zmodload -ac bogus
 zmodload -uc bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded condition
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -ap bogus
ZTST_getchunk: read code chunk:
 zmodload -ap bogus
 zmodload -up bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded parameter
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -af bogus
ZTST_getchunk: read code chunk:
 zmodload -af bogus
 zmodload -uf bogus
ZTST_test: examining line:

Running test: Add/remove autoloaded math function
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -ab zsh/example example
   builtin example
   zmodload -e zsh/example
 else print -u8 Warning: zsh/example not linked: not checking autoloading
 fi
ZTST_test: examining line:

Running test: Autoload a module via a builtin
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
Options: 
Arguments:
Name: example

Integer Parameter: 42
String Parameter: example
Array Parameter: example array
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -ac -I zsh/example ex
   [[ exam -ex ple ]]
   zmodload -e zsh/example
 else :
 fi
ZTST_test: examining line:

Running test: Autoload a module via a condition
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -ap zsh/example exint
   : $exint
   zmodload -e zsh/example
 else :
 fi
ZTST_test: examining line:

Running test: Autoload a module via a parameter
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u zsh/example
   zmodload -af zsh/example sum
   (( sum(1) ))
   zmodload -e zsh/example
 else :
 fi
ZTST_test: examining line:

Running test: Autoload a module via a math function
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -A example=zsh/example
ZTST_getchunk: read code chunk:
 zmodload -A example=zsh/example
 zmodload -A
ZTST_test: examining line:
>example -> zsh/example
ZTST_getredir: read redir for '>':
example -> zsh/example
ZTST_test: examining line:

Running test: Test creating a module alias
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
example -> zsh/example
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
ZTST_getchunk: read code chunk:
 if [[ $mods[(r)zsh/example] == zsh/example ]]; then
   zmodload -u example
   zmodload -ab example
   builtin example
   zmodload -e example
 else :
 fi
ZTST_test: examining line:

Running test: Unload/autoload the module via its alias
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:
Thank you for using the example module.  Have a nice day.
The example module has now been set up.
Options: 
Arguments:
Name: example

Integer Parameter: 42
String Parameter: example
Array Parameter: example array
ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -R example
ZTST_getchunk: read code chunk:
 zmodload -R example
 zmodload -e example
ZTST_test: examining line:

Running test: Delete the module alias again
ZTST_test: expecting status: 1
ZTST_execchunk: status 1
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 mods[(r)zsh/main]=()
ZTST_getchunk: read code chunk:
 mods[(r)zsh/main]=()
 mods[(r)zsh/parameter]=()
 for m in $mods
 do
   zmodload -ud $m
 done
ZTST_test: examining line:

Running test: Remove module dependecies
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
ZTST_test: test produced standard output:

ZTST_test: and standard error:

Test successful.
ZTST_test: looking for new test
ZTST_test: examining line:

ZTST_test: examining line:

ZTST_test: examining line:
 zmodload -u $mods
ZTST_getchunk: read code chunk:
 zmodload -u $mods
ZTST_test: examining line:

Running test: Unload the modules loaded by this test suite
ZTST_test: expecting status: 0
ZTST_execchunk: status 0
Segmentation Fault
make[1]: [check] Error 139 (ignored)
rm -rf Modules .zcompdump
make[1]: Leaving directory `/programs/zsh/zsh-4.0.1-pre-5/Test'

--AqsLC8rIMeq19msA--

