From zsh-users-return-12747-mason-zsh=primenet.com.au@sunsite.dk Sat Mar 29 07:18:06 2008
Return-Path: <zsh-users-return-12747-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23958 invoked from network); 29 Mar 2008 07:18:04 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 29 Mar 2008 07:18:04 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 59345 invoked from network); 29 Mar 2008 07:17:43 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 29 Mar 2008 07:17:43 -0000
Received: (qmail 11021 invoked by alias); 29 Mar 2008 07:17:30 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12747
Received: (qmail 11010 invoked from network); 29 Mar 2008 07:17:30 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 29 Mar 2008 07:17:30 -0000
Received: from vms048pub.verizon.net (vms048pub.verizon.net [206.46.252.48])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 368DF82CD273
	for <zsh-users@sunsite.dk>; Sat, 29 Mar 2008 08:17:24 +0100 (CET)
Received: from torch.brasslantern.com ([71.116.79.77])
 by vms048.mailsrvcs.net (Sun Java System Messaging Server 6.2-6.01 (built Apr
 3 2006)) with ESMTPA id <0JYH009NGDKV8SO3@vms048.mailsrvcs.net> for
 zsh-users@sunsite.dk; Sat, 29 Mar 2008 02:17:20 -0500 (CDT)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id m2T7HI6x020535	for
 <zsh-users@sunsite.dk>; Sat, 29 Mar 2008 00:17:18 -0700
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id m2T7HHPJ020534	for zsh-users@sunsite.dk; Sat,
 29 Mar 2008 00:17:17 -0700
Date: Sat, 29 Mar 2008 00:17:17 -0700
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: Is it possible to list all styles in all contexts?
In-reply-to: <c21da7250803281518y2757f519p8cd1dddb7fe667c2@mail.gmail.com>
To: zsh-users@sunsite.dk
Message-id: <080329001717.ZM20533@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <c21da7250803281518y2757f519p8cd1dddb7fe667c2@mail.gmail.com>
Comments: In reply to "Ian Tegebo" <ian.tegebo@gmail.com>
 "Is it possible to list all styles in all contexts?" (Mar 28,  3:18pm)
X-Virus-Scanned: ClamAV 0.91.2/6457/Sat Mar 29 00:56:30 2008 on bifrost
X-Virus-Status: Clean

On Mar 28,  3:18pm, Ian Tegebo wrote:
}
} Intuitively, I think I should be able to list them all with:
} 
} zstyle -L "*"

Unlike options or builtin commands, styles are not enumerated anywhere.
You can think of them as *very* fancy names for variables.  Anyone can
invent a style having any name and use it for any reason; they happen
to be used in the completion system because we first thought of needing
them in conjunction with completions, but the zstyle command exists
entirely separately from the completion modules.
 
} To rephrase the original question, how do I programmatically expand
} all contexts into a horizontal tree whose leaves also contain the
} values tied to those styles?

Asking to list all style contexts is like asking to list all possible
shell functions.  It's meaningless; until you set a style it doesn't
exist to be listed, and no matter how many of them you have it's always
possible (up to the limits of your process memory) to create another.

On top of that, although styles are looked up using fixed strings, they
are set using patterns, so there are a large number of ways to refer
to any given context (exponential in proportion to the length of the
string used to look the style up, I think).  Even the use of colons to
separate parts of a context is an invention of the completion system
and has nothing to do with the operation of the zstyle command.

There's no registry that you can consult of lookup contexts for styles.
Within the completion system, the lookup contexts themselves are built
up dynamically during the operation of the system, including things
like the name of the command you're completing, what argument position
to that command you're completing, and even what kinds of strings can
be completed at the current position on the command line.  Even if you
could list them all, you wouldn't want to; there may be thousands of
possible values for the command name alone.

The closest to a listing is the "Completion System Configuration"
section of the manual, where there is an explanation of the syntax
":completion:FUNCTION:COMPLETER:COMMAND:ARGUMENT:TAG" that is used
for the contexts constructed by the completion system to describe the
command line.  Everything but the colons and the word "completion" at
the beginning is mutable, but except in special cases you only care
about two bits: the TAG and the style name itself.  The documentation
is only able to enumerate a few special cases of COMMAND (which are
not really commands at all and have names like "-subscript-" or
"-parameter-"), but it's got pretty thorough coverage of the most
common values of TAG and of the standard list of style names that may
be looked up.

You can also set up a command line representing a completion you want
to know about, and then press ctrl-x h.  This will show you the set
of TAG values the completion system would generate and four of the
five parts (all but the FUNCTION) of the context string that prefixes
those tags when styles are looked up.  It'll also show you a list of
the possible values for FUNCTION, but it can't predict the style
names that might eventually be asked for when one FUNCTION is finally
selected and called.  For that you have to look at the documentation
of the functions, or if that seems unsatisfactory, at their source.

I suspect that most people do one (or more) of three things:
(1) Run compinstall and let it create the style settings it knows.
(2) Grab someone else's canned set of styles and tweak it.
(3) Create styles incrementally as they work, by using ctrl-x h when
    the encounter a command they haven't used completion with before
    and the default doesn't do what they want.

