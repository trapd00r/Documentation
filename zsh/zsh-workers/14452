From zsh-workers-return-14452-mason-zsh=primenet.com.au@sunsite.dk Wed May 23 09:39:13 2001
Return-Path: <zsh-workers-return-14452-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 21528 invoked from network); 23 May 2001 09:39:11 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 23 May 2001 09:39:11 -0000
Received: (qmail 647 invoked by alias); 23 May 2001 09:38:49 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 14452
Received: (qmail 624 invoked from network); 23 May 2001 09:38:47 -0000
X-Envelope-Sender-Is: Andrej.Borsenkow@mow.siemens.ru (at relayer goliath.siemens.de)
Date: Wed, 23 May 2001 13:38:23 +0400 (MSD)
From: Andrej Borsenkow <Andrej.Borsenkow@mow.siemens.ru>
X-X-Sender:  <bor@itsrm2.mow.siemens.ru>
To: <zsh-workers@sunsite.dk>
cc: Paul Ackersviller <paulda@alumni.uwo.ca>
Subject: Re: 64-bit sparc instructions
In-Reply-To: <1010523044128.ZM23100@candle.brasslantern.com>
Message-ID: <Pine.SV4.4.33.0105231332520.3756-100000@itsrm2.mow.siemens.ru>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

On Wed, 23 May 2001, Bart Schaefer wrote:

> On May 22,  8:04pm, Paul Ackersviller wrote:
> }
> } [...] What does make a difference is simply generating default 32-bit
> } sparc instructions.  I'd negelected to mention that I was using Sun's
> } compiler and 64-bit code.  I suppose it's fair to blame this one on Sun.
>
> Is that problem solved by the following?
>
> On May 22,  2:32pm, Clint Adams wrote:
> } Subject: Re: 4.0.1-pre-5 (solaris issues)
> }
> } > the 64-bit Forte compiler.  Can you figure out what we need to be passing
> } > as a compiler argument that we aren't, or whatever?
> }
> } LFS64_CFLAGS:                   -D_LARGEFILE64_SOURCE
> } LFS_CFLAGS:                     -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
> }
> } By replacing the latter with the former, the test [succeeds].
>
> If so, can you identify a configure test we can use to decide when to
> use LFS64_CFLAGS instead of LFS_CFLAGS ?  (The existing test is in the
> definition of zsh_LARGE_FILE_SUPPORT in aczsh.m4.)
>
>

Hmm ... they both have very different semantic. LFS means, use existing
interfaces but assume some parameters are 64 bit (off_t, size_t, ino_t to
name some).

LFS64 means - you are explicitly using special 64-bit version of these
interfaces (open64 vs. open, stat64 vs. stat etc) that are using special
types (off64_t, ino64_t etc). Zsh is not designed to do it.

So, if the above change really helped, it was just because zsh was
actually compiled in 32-bit mode :-) We simply need better detection if
LFS really works. Could you provide testcase suitable for putting in
configure?

-andrej

