From zsh-workers-return-16742-mason-zsh=primenet.com.au@sunsite.dk Thu Feb 28 18:48:44 2002
Return-Path: <zsh-workers-return-16742-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 19956 invoked from network); 28 Feb 2002 18:48:43 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 28 Feb 2002 18:48:43 -0000
Received: (qmail 8682 invoked by alias); 28 Feb 2002 18:48:38 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 16742
Received: (qmail 8671 invoked from network); 28 Feb 2002 18:48:37 -0000
Date: Thu, 28 Feb 2002 10:47:31 -0800
From: Derek Peschel <dpeschel@eskimo.com>
To: zsh-workers@sunsite.dk
Subject: Re: Auto-maintaining the manual (modularity of zsh)?
Message-ID: <20020228104730.A15257@eskimo.eskimo.com>
References: <20020228004858.A13280@eskimo.eskimo.com> <1020228155000.ZM17507@candle.brasslantern.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 1.0i
In-Reply-To: <1020228155000.ZM17507@candle.brasslantern.com>; from schaefer@brasslantern.com on Thu, Feb 28, 2002 at 03:50:00PM +0000

On Thu, Feb 28, 2002 at 03:50:00PM +0000, Bart Schaefer wrote:
> On Feb 28, 12:48am, Derek Peschel wrote:

> } If the documentation or code aren't very modular, or if the layout of the
> } documentation doesn't match the layout of the code, then I'm not going
> } to bother.
> 
> The documentation and the code are modularized differently.  In my opinion,
> the kind of automated documentation you're describing only works well for
> *technical* documentation; e.g. it may work for documenting a code library
> where the indended audience is programmers making use of the library, but
> (beyond very limited contexts such as describing the names and options of
> builtin commands) I do not feel it can be effective where the audience is
> potentially-nontechnical users of the whole system created from the code.

I wasn't talking about generating the documentation automatically, but
about making sure it stays in sync with the code.  If the code changes,
make regenerates the documentation's view of the code.  If the new view
is different than the old view, you get a warning.  You still have to write
the text.

(By "view" I mean the properties of the code as a whole that the
documentation describes.  As you say, the view could be very different
from the source files -- for example options.yo describes, for each option,
the effects across all source files of setting that option.)

> Perhaps I'm wrong, but I imagine that you envision something like Sun's
> Java documentation.  If so, stop it.  I find the Java docs to be only

I've never read the Java docs (or written even a line of Java).  The
structure of the documentation doesn't have to change.

My ideas are mostly a fantasy anyway, so don't worry about any huge
changes happening under your nose. :)

> superficially complete, and they're also an example of how bad it can be
> to have the documentation match the code structure even when documenting
> a library for a technical audience.

The whole point of this exercise would be to increase completeness, not
reduce it.

I'll look for DPUTS and check through Etc/CONTRIBUTORS.

-- Derek

