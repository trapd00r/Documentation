From zsh-workers-return-15327-mason-zsh=primenet.com.au@sunsite.dk Mon Jul 09 15:25:08 2001
Return-Path: <zsh-workers-return-15327-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29246 invoked from network); 9 Jul 2001 15:25:06 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 9 Jul 2001 15:25:06 -0000
Received: (qmail 27095 invoked by alias); 9 Jul 2001 15:24:49 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 15327
Received: (qmail 27060 invoked from network); 9 Jul 2001 15:24:47 -0000
Message-ID: <Tc0a88d0154a4d24461@mailsweeper01.cambridgesiliconradio.com>
To: zsh-workers@sunsite.dk (Zsh hackers list)
Subject: Re: Debugging of dynamocally defined functions 
In-reply-to: ""Bart Schaefer""'s message of "Sat, 07 Jul 2001 23:30:10 -0000."
             <1010707233010.ZM16910@candle.brasslantern.com> 
Date: Mon, 09 Jul 2001 15:52:54 +0100
From: Peter Stephenson <pws@csr.com>

"Bart Schaefer" wrote:
> In another message, PWS said:
> > 
> > By the way, you can use the trick of
> > 
> >   eval "$(which compdef)"
> > 
> > to sync the line numbers with the which output.  At least I hope so ---
> > if this goes screwy there's a bug in text.c.
> 
> No, you can't.  This causes all the lines to be numbered zero.

> `zed -f' has the same problem; drives me nuts.

I've sent a patch on this, which has disappeared, probably into our
non-UNIX (sorry if I like labouring this point) mail server.  Here's a
fuller version.  It turns on line numbering anywhere which behaves like an
eval (by using the parse_string() function; there are some other ways into
the parser which still don't do this).

I've discovered that bash simply gives 0 for line numbers in eval.  This
(perl-like) behaviour of numbering eval's separately is probably more
useful than that, at least.

I suspect the only way of finding out whether people prefer this behaviour
is to commit it.  So I'll do that and produced 4.1.0-dev-1.

Index: Src/builtin.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/builtin.c,v
retrieving revision 1.48
diff -u -r1.48 builtin.c
--- Src/builtin.c	2001/07/08 00:33:45	1.48
+++ Src/builtin.c	2001/07/09 14:45:09
@@ -3421,7 +3421,7 @@
 {
     Eprog prog;
 
-    prog = parse_string(zjoin(argv, ' ', 1), 0);
+    prog = parse_string(zjoin(argv, ' ', 1));
     if (!prog) {
 	errflag = 0;
 	return 1;
@@ -4027,7 +4027,7 @@
     arg = *argv++;
     if (!*arg)
 	prog = &dummy_eprog;
-    else if (!(prog = parse_string(arg, 0))) {
+    else if (!(prog = parse_string(arg))) {
 	zwarnnam(name, "couldn't parse trap command", NULL, 0);
 	return 1;
     }
Index: Src/exec.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/exec.c,v
retrieving revision 1.33
diff -u -r1.33 exec.c
--- Src/exec.c	2001/06/27 11:22:05	1.33
+++ Src/exec.c	2001/07/09 14:45:09
@@ -147,15 +147,15 @@
 
 /**/
 mod_export Eprog
-parse_string(char *s, int ln)
+parse_string(char *s)
 {
     Eprog p;
     int oldlineno = lineno;
 
     lexsave();
-    inpush(s, (ln ? INP_LINENO : 0), NULL);
+    inpush(s, INP_LINENO, NULL);
     strinbeg(0);
-    lineno = ln ? 1 : -1;
+    lineno = 1;
     p = parse_list();
     lineno = oldlineno;
     strinend();
@@ -711,7 +711,7 @@
     Eprog prog;
 
     pushheap();
-    if ((prog = parse_string(s, 0)))
+    if ((prog = parse_string(s)))
 	execode(prog, dont_change_job, exiting);
     popheap();
 }
@@ -2669,7 +2669,7 @@
     pid_t pid;
     Wordcode pc;
 
-    if (!(prog = parse_string(cmd, 0)))
+    if (!(prog = parse_string(cmd)))
 	return NULL;
 
     pc = prog->prog;
@@ -2800,7 +2800,7 @@
 	return NULL;
     }
     *str = '\0';
-    if (str[1] || !(prog = parse_string(cmd + 2, 0))) {
+    if (str[1] || !(prog = parse_string(cmd + 2))) {
 	zerr("parse error in process substitution", NULL, 0);
 	return NULL;
     }
@@ -3496,7 +3496,7 @@
 		    d = metafy(d, len, META_REALLOC);
 
 		    scriptname = dupstring(s);
-		    r = parse_string(d, 1);
+		    r = parse_string(d);
 		    scriptname = oldscriptname;
 
 		    zfree(d, len + 1);
Index: Src/glob.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/glob.c,v
retrieving revision 1.20
diff -u -r1.20 glob.c
--- Src/glob.c	2001/07/06 09:23:58	1.20
+++ Src/glob.c	2001/07/09 14:45:09
@@ -2632,7 +2632,7 @@
 {
     Eprog prog;
 
-    if ((prog = parse_string(str, 0))) {
+    if ((prog = parse_string(str))) {
 	int ef = errflag, lv = lastval, ret;
 
 	unsetparam("reply");
Index: Src/parse.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/parse.c,v
retrieving revision 1.27
diff -u -r1.27 parse.c
--- Src/parse.c	2001/07/06 09:40:08	1.27
+++ Src/parse.c	2001/07/09 14:45:09
@@ -2602,7 +2602,7 @@
 	close(fd);
 	file = metafy(file, flen, META_REALLOC);
 
-	if (!(prog = parse_string(file, 1)) || errflag) {
+	if (!(prog = parse_string(file)) || errflag) {
 	    errflag = 0;
 	    close(dfd);
 	    zfree(file, flen);
Index: Src/Modules/parameter.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Modules/parameter.c,v
retrieving revision 1.20
diff -u -r1.20 parameter.c
--- Src/Modules/parameter.c	2001/05/31 09:44:00	1.20
+++ Src/Modules/parameter.c	2001/07/09 14:45:09
@@ -342,7 +342,7 @@
 
     val = metafy(val, strlen(val), META_REALLOC);
 
-    prog = parse_string(val, 1);
+    prog = parse_string(val);
 
     if (!prog || prog == &dummy_eprog) {
 	zwarn("invalid function definition", value, 0);
Index: Src/Modules/zpty.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Modules/zpty.c,v
retrieving revision 1.23
diff -u -r1.23 zpty.c
--- Src/Modules/zpty.c	2001/05/08 10:26:58	1.23
+++ Src/Modules/zpty.c	2001/07/09 14:45:09
@@ -276,7 +276,7 @@
     int master, slave, pid;
     Eprog prog;
 
-    prog = parse_string(zjoin(args, ' ', 1), 0);
+    prog = parse_string(zjoin(args, ' ', 1));
     if (!prog) {
 	errflag = 0;
 	return 1;
Index: Src/Modules/zutil.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Modules/zutil.c,v
retrieving revision 1.8
diff -u -r1.8 zutil.c
--- Src/Modules/zutil.c	2001/01/16 13:44:20	1.8
+++ Src/Modules/zutil.c	2001/07/09 14:45:09
@@ -115,7 +115,7 @@
     if (eval) {
 	int ef = errflag;
 
-	eprog = parse_string(zjoin(vals, ' ', 1), 0);
+	eprog = parse_string(zjoin(vals, ' ', 1));
 	errflag = ef;
 
 	if (!eprog)

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR Ltd., Unit 300, Science Park, Milton Road,
Cambridge, CB4 0XL, UK                          Tel: +44 (0)1223 392070


**********************************************************************
The information transmitted is intended only for the person or
entity to which it is addressed and may contain confidential 
and/or privileged material. 
Any review, retransmission, dissemination or other use of, or
taking of any action in reliance upon, this information by 
persons or entities other than the intended recipient is 
prohibited.  
If you received this in error, please contact the sender and 
delete the material from any computer.
**********************************************************************

