From zsh-workers-return-28983-mason-zsh=primenet.com.au@zsh.org Sat Apr 09 20:13:11 2011
Return-Path: <zsh-workers-return-28983-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27234 invoked by alias); 9 Apr 2011 20:13:11 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 28983
Received: (qmail 8641 invoked from network); 9 Apr 2011 20:13:08 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <110409131236.ZM16037@torch.brasslantern.com>
Date: Sat, 09 Apr 2011 13:12:36 -0700
In-reply-to: <BANLkTinRkfcNJWnYnooqSDWTYG2q1VrcZQ@mail.gmail.com>
Comments: In reply to Mikael Magnusson <mikachu@gmail.com>
 "menu-select interactive mode" (Apr  9,  4:56pm)
References: <BANLkTinRkfcNJWnYnooqSDWTYG2q1VrcZQ@mail.gmail.com>
	<BANLkTik_Ugey6bgCRXBz-fzgheod8htJYA@mail.gmail.com>
In-reply-to: <BANLkTik_Ugey6bgCRXBz-fzgheod8htJYA@mail.gmail.com>
Comments: In reply to Mikael Magnusson <mikachu@gmail.com>
 "Re: menu-select interactive mode" (Apr  9,  5:02pm)
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: zsh workers <zsh-workers@zsh.org>
Subject: Re: menu-select interactive mode
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

On Apr 9,  4:56pm, Mikael Magnusson wrote:
} Subject: menu-select interactive mode
}
} We were talking on irc about this, and I couldn't get it to work.
} Turns out if you just set
} zstyle ':completion:*' menu interactive
} and invoke the menu-select widget, nothing happens.

First of all, make sure you're really invoking _main_complete via the
menu-select widget, rather than invoking the builtin menu-select.  
The builtin obviously won't pay any attention to the zstyles.  In
order to get this to work correctly, you have to explicitly load the
zsh/complist module BEFORE running compinit or compinit won't replace
the builtin widget.

I have the feeling this is documented somewhere but I can't find it
just now.

The builtin normally doesn't begin selection unless you either always
do menu completion or it's invoked in a context where menu completion
would start (such as after a listing has been printed).  Not being in
the correct context would correspond to your "nothing happens" case.

If I start zsh with a .zshrc that looks like this --

autoload -Uz compinit
compinit -D
zmodload zsh/complist
zstyle ':completion:*' menu interactive
bindey '\em' menu-select

-- then pressing ESC m does nothing unless I first hit TAB and get a
listing.  However, if I .zshrc looks like THIS --

zmodload zsh/complist
autoload -Uz compinit
compinit -D
zstyle ':completion:*' menu interactive
bindey '\em' menu-select

-- then ESC m goes directly into menu selection as I would expect.

However, what it does NOT do is go directly into interactive mode.
You do need both "select" and "interactive" to get into interactive
mode, even when the widget is named menu-select.  I'm not sure if
this is intentional (more below).

} What you have to do is either
} zstyle ':completion:*' menu select interactive
} but then you always get menu selection which you might not want

With the exception of what I described above, I don't think that has
accomplished what you think it has.  I suspect that what this has done
is to cause a *different* completion widget (one that does go through
_main_complete) to assign a value to the MENUSELECT variable, which
then later is observed by the menu-select builtin, which eventually
results in the builtin doing something.

} don't), so I ended up with this instead
} zle -C menu-select-interactive menu-complete _generic
} zstyle ':completion:menu-select-interactive:*' menu select interactive
} bindkey "^[m"  menu-select-interactive

What you've done here (I think) is mimic the setup that compinit would
have done for you if the complist module was loaded before compinit
was run.

} Additionally, when you do the second one, ie set both select and
} interactive, the menu-select widget does invoke interactiveness, so my
} guess is the code simply checks the style instead of also checking
} which widget invoked it.

That's sort of the right diagnosis.  There are several possible ways
to "fix" this if it's wrong, and I don't know which one is correct.

Here's the first, which has the smallest number of side-effects:

Index: Completion/Base/Core/_main_complete
===================================================================
--- _main_complete	21 Dec 2010 16:41:14 -0000	1.12
+++ _main_complete	9 Apr 2011 19:57:11 -0000
@@ -284,7 +284,7 @@
         unset MENUSELECT
       fi
     fi
-    if [[ -n "$MENUSELECT" ]]; then
+    if [[ -n "$MENUSELECT" || "$WIDGET" = menu-select ]]; then
       if [[ -n "$_menu_style[(r)interactive*]" ]]; then
         MENUMODE=interactive
       elif [[ -n "$_menu_style[(r)search*]" ]]; then

Here's the second, which has the effect of causing MENUSELECT to be
set and thereby make the "-" line of the above diff true (do *NOT*
apply both this and the above diff):

Index: Completion/Base/Core/_main_complete
===================================================================
--- _main_complete	21 Dec 2010 16:41:14 -0000	1.12
+++ _main_complete	9 Apr 2011 19:59:46 -0000
@@ -249,7 +249,7 @@
     fi
   fi
 
-  if [[ "$compstate[insert]" = *menu* ]]; then
+  if [[ "$compstate[insert]" = *menu*  || "$WIDGET" = menu-select ]]; then
     [[ "$MENUSELECT" = 00 ]] && MENUSELECT=0
     if [[ -n "$_menu_style[(r)no-select*]" ]]; then
       unset MENUSELECT

A third way might be to change the way _last_menu_style is determined
in _setup, but that makes me nervous.  PWS, any other ideas/opinions?

