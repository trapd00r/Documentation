From zsh-users-return-6997-mason-zsh=primenet.com.au@sunsite.dk Sun Jan 18 01:54:34 2004
Return-Path: <zsh-users-return-6997-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 25903 invoked from network); 18 Jan 2004 01:54:32 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 18 Jan 2004 01:54:32 -0000
Received: (qmail 1064 invoked by alias); 18 Jan 2004 01:54:18 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 6997
Received: (qmail 964 invoked from network); 18 Jan 2004 01:54:17 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 18 Jan 2004 01:54:17 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [4.11.8.53] by sunsite.dk (MessageWall 1.0.8) with SMTP; 18 Jan 2004 1:54:17 -0000
Received: (from schaefer@localhost)
	by candle.brasslantern.com (8.11.6/8.11.6) id i0I1sFF01151
	for zsh-users@sunsite.dk; Sat, 17 Jan 2004 17:54:15 -0800
X-Authentication-Warning: candle.brasslantern.com: schaefer set sender to schaefer@closedmail.com using -f
From: Bart Schaefer <schaefer@brasslantern.com>
Message-Id: <040117175415.ZM1150@candle.brasslantern.com>
Date: Sat, 17 Jan 2004 17:54:15 -0800
In-Reply-To: <1074385732.8078.9.camel@localhost>
Comments: In reply to  Szekeres Istva'n <istvan.szekeres@pulsussoft.hu>
        "parameter expansion question" (Jan 18,  1:28am)
References: <1074385732.8078.9.camel@localhost>
X-Mailer: Z-Mail Lite (5.0.0 30July97)
To: Zsh list <zsh-users@sunsite.dk>
Subject: Re: parameter expansion question
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

On Jan 18,  1:28am, Szekeres Istva'n wrote:
> 
> #this is NOT ok, it prints 1=a 2=b 3=
> foo='a::b'
> print_em ${(s/:/)foo}
> 
> It seems like in the second case the empty string is not passed as the
> 2nd parameter. How to specify the expansion so it will pass the empty
> string just like in the first example?

You have two problems.

The first is that the (s) flag always collapses consecutive occurrences
of the split character; unlike perl's split function, zsh's (s/:/) cannot
create an empty word in the middle of "::".

Even if that worked, though, empty arguments are deleted when not quoted,
so you would need to quote the parameter expansion.

As a workaround to the splitting problem, you can use "typeset -T" like
so:
	typeset -T foo splitfoo :

And then quote the expansion:
	print_em "$splitfoo[@]"

Note that it doesn't work properly to use "typeset -T" more than once on
the same scalar variable (that is, you can't tie the same scalar to more
than one array).

