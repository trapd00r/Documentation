From zsh-users-return-2287-mason-zsh=primenet.com.au@sunsite.auc.dk Sat Apr 10 22:21:13 1999
Return-Path: <zsh-users-return-2287-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 23143 invoked from network); 10 Apr 1999 22:21:12 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 10 Apr 1999 22:21:12 -0000
Received: (qmail 29584 invoked by alias); 10 Apr 1999 22:20:49 -0000
Mailing-List: contact zsh-users-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.auc.dk
X-Seq: 2287
Received: (qmail 29577 invoked from network); 10 Apr 1999 22:20:48 -0000
To: zsh-users@sunsite.auc.dk
Subject: Re: why doesn't 'source *' work?
References: <199904101839.OAA02885@ocalhost>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
From: Bruce Stephens <bruce@cenderis.demon.co.uk>
Date: 10 Apr 1999 23:19:06 +0100
In-Reply-To: Timothy J Luoma's message of "Sat, 10 Apr 1999 14:39:04 -0400"
Message-ID: <m3wvzkjezp.fsf@cenderis.demon.co.uk>
User-Agent: Gnus/5.07008 (Pterodactyl Gnus v0.80) XEmacs/20.4 (Emerald)
Lines: 36

Timothy J Luoma <tjlists@bigfoot.com> writes:

> Is there a reason why 'source *' doesn't work?
> 
> Is there a setopt I need to configure?

In what way doesn't it work?

According to the manual:

 . file [ arg ... ]
   Read commands from file and execute them in the current shell
   environment.  If file does not contain a slash, or if PATH_DIRS is
   set, the shell looks in the components of $path to find the
   directory containing file.  Files in the current directory are not
   read unless `.' appears somewhere in $path.

   If any arguments arg are given, they become the positional
   parameters; the old positional parameters are restored when the
   file is done executing.  The exit status is the exit status of the
   last command executed.

source is approximately the same as ".".

I'm guessing you missed the bit about the positional parameters.

If you want to source all the files (giving them no parameters),
you'll need to use a loop:

for i in *
do
   source $i
done

You could wrap this in an autoloaded function, if you wanted.  But not
a shell script, obviously.  (Well, probably not.)

