From zsh-workers-return-27156-mason-zsh=primenet.com.au@sunsite.dk Sat Jul 18 03:23:26 2009
Return-Path: <zsh-workers-return-27156-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 9369 invoked from network); 18 Jul 2009 03:23:22 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00,HTML_MESSAGE
	autolearn=ham version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 18 Jul 2009 03:23:22 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 13984 invoked from network); 18 Jul 2009 03:23:12 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 18 Jul 2009 03:23:12 -0000
Received: (qmail 28376 invoked by alias); 18 Jul 2009 03:23:02 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 27156
Received: (qmail 28356 invoked from network); 18 Jul 2009 03:23:01 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 18 Jul 2009 03:23:01 -0000
Received: from web37307.mail.mud.yahoo.com (web37307.mail.mud.yahoo.com [209.191.90.250])
	by bifrost.dotsrc.org (Postfix) with SMTP id DE7D58027106
	for <zsh-workers@sunsite.dk>; Sat, 18 Jul 2009 05:22:57 +0200 (CEST)
Received: (qmail 41944 invoked by uid 60001); 18 Jul 2009 03:22:56 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoo.com; s=s1024; t=1247887376; bh=KeOsIFKMT2Z8GhFpPJhISkWWuKCvvr0FtPrZZwQ0QMc=; h=Message-ID:X-YMail-OSG:Received:X-Mailer:Date:From:Subject:To:MIME-Version:Content-Type; b=nk81UlLWviMBSd/0XVcR4v4vD2YAOYWG28ie5EczRaHgfpbX839rHCVhpWDLv3x7uEOXnYl+AzuYELc+wzwrJZVP/6ymERM3Fb6v99b32h0fNbnfoIXMlQwxLB3GKdg3Bwn0Wdquu0A4npZv+zbVPtcnNLj3/8xuR6c6Vp1OiIk=
DomainKey-Signature:a=rsa-sha1; q=dns; c=nofws;
  s=s1024; d=yahoo.com;
  h=Message-ID:X-YMail-OSG:Received:X-Mailer:Date:From:Subject:To:MIME-Version:Content-Type;
  b=F/pqcEDKAnUQbPqN+bJL75sljywK9AbpmCnxFqsZ5b8Ye05UWA3dvQFB3AzEjtDBekO5oyY776qau33dGi8DgKJy50z8xqB8PyRhKjqhgAkqpxNwy7V9pfnCfil1IlqEgTqFD1ZlLYxdEKUFtP0BiontIcAjfgpLZQ3aJJWI+I8=;
Message-ID: <504433.40657.qm@web37307.mail.mud.yahoo.com>
X-YMail-OSG: oHZFWAEVM1kKH8EGt_edSFGsVcX8a7HokJQPQuvNgSOAP9FrA6ffx.TafcSPyWTWjigKRMUL_c8rSfbk2KBeh0fvzEUP4Se_YGTB7irgc3dQLxyvPll9eSHq_otnrt1oSXVYpQgoQ108CNEA5.S5_Vsvt5QB4paukIxy.95hi2lEKanRgmQ1qs0ttyIFgLqzNATbDOOlTjyL79VsvQCiGc16qya8MMYUKb6jFR.iF6ZTZnhWDzwlLf4L0jxDMaOqRR7cgPQBdcQQNZu_qI4Y5btWKupqAm78elHZx1P6T7oZiIDPsXiNVtbxdsvFAO0Y_qXIB77mTfZY489A2WrBR.9cXBYEGz3Te2fSFZptUA--
Received: from [173.59.41.177] by web37307.mail.mud.yahoo.com via HTTP; Fri, 17 Jul 2009 20:22:56 PDT
X-Mailer: YahooMailRC/1358.22 YahooMailWebService/0.7.289.15
Date: Fri, 17 Jul 2009 20:22:56 -0700 (PDT)
From: Michael Hwang <nomex45@yahoo.com>
Subject: Re: [PATCH]: New hook function "atexec"
To: zsh-workers@sunsite.dk
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="0-1550049423-1247887376=:40657"
X-Virus-Scanned: ClamAV 0.94.2/9585/Sat Jul 18 03:14:41 2009 on bifrost
X-Virus-Status: Clean


--0-1550049423-1247887376=:40657
Content-Type: text/plain; charset=us-ascii

Peter Stephenson <p.w.stephenson@ntlworld.com>wrote:

> I'm not sure where this needs to be called execcmd(), there's so much
> going on there.  The issue I'm most worried about is redirection; where
> is the output of hook functions called in the middle of a pipeline going?

atexec is triggered before redirection, so it's not a problem.

% atexec () { print -- ${(q-)@} }
% print "Testing 1 2 3" | cat > temp

The commands are printed to the screen, indicating that atexec is not affected by redirection. Opening temp reveals nothing unexpected.

> However, it also worries me that this is calling execcmd() recursively
> in strange ways never before attempted---we partly set up a command for
> execution, then call an entire arbitrary execution tree, then finish
> executing the command.  This could easily have odd effects.  I wonder if
> using execsave() and execrestore() might be sensible.

I'm not sure if it's sensible either. I know at least that I have to set "errflag = 0", as execsave doesn't take care of it.

> I'm surprised you only need to set atexec to zero in two places, but
> there may be another way of testing the conditions you want anyway.

The difficulty is figuring out whether or not the current zsh process is an asynchronous child. As far as I know, zsh doesn't keep track of whether the current process is the result of an asynchronous fork. I don't think we can eliminate the "atexec = 0" here.

Also, I was thinking that sfcontext should be set to SFC_SUBST during command substitution. That would be a way to remove an "atexec = 0".

> I don't see why you need the test for sourcelevel, which stops it
> happening in all "." files.  That might be sensible for init files, but
> otherwise it seems a bit arbitrary when other limitations might be more
> useful.  For example, I don't see anything to stop this being run for
> every individual command in every function run by the user, which could
> be a huge overhead, probably more so that "." files which tend to be
> one-off.  (I think the test for "sfcontext" happens to catch a lot of
> completion functions, however.)  I'd be tempted to add a "locallevel"
> test to exclude all function bodies.  If necessary we can think of a way
> of reactivating it in a function.

Without the test for sourcelevel, a manual "source" by the user would trigger atexec for each command in the file. The sfcontext of the body of a function is SFC_DIRECT, and hence is excluded from atexec.

Michael Hwang



      
--0-1550049423-1247887376=:40657
Content-Type: text/html; charset=us-ascii

<html><head><style type="text/css"><!-- DIV {margin:0px;} --></style></head><body><div style="font-family:arial,helvetica,sans-serif;font-size:12pt">
<div style="font-family: times new roman,new york,times,serif; font-size: 12pt;"><div>Peter Stephenson &lt;p.w.stephenson@ntlworld.com&gt;wrote:<br><div>&gt; I'm not sure where this needs to be called execcmd(), there's so much<br>&gt; going on there.&nbsp; The issue I'm most worried about is redirection; where<br>&gt; is the output of hook functions called in the middle of a pipeline going?<br><br>atexec is triggered before redirection, so it's not a problem.<br><br>% atexec () { print -- ${(q-)@} }<br>% print "Testing 1 2 3" | cat &gt; temp<br><br>The commands are printed to the screen, indicating that
 atexec is not affected by redirection. Opening temp reveals nothing unexpected.<br><br>&gt; However, it also worries me that this is calling execcmd() recursively<br>&gt; in strange ways never before attempted---we partly set up a command for<br>&gt; execution, then call an entire arbitrary execution tree, then finish<br>&gt; executing the command.&nbsp; This could easily have odd effects.&nbsp; I wonder if<br>&gt; using execsave() and execrestore() might be sensible.<br><br>I'm not sure if it's sensible either. I know at least that I have to set "errflag = 0", as execsave doesn't take care of it.<br><br>&gt; I'm surprised you only need to set atexec to zero in two places, but<br>&gt; there may be another way of testing the conditions you want anyway.<br><br>The difficulty is figuring out whether or not the current zsh process is an asynchronous child. As far as I know, zsh doesn't keep track of whether the current process is the result of an
 asynchronous fork. I don't think we can eliminate the "atexec = 0"
 here.<br><br>Also, I was thinking that sfcontext should be set to SFC_SUBST during command substitution. That would be a way to remove an "atexec = 0".<br><br>&gt; I don't see why you need the test for sourcelevel, which stops it<br>&gt; happening in all "." files.&nbsp; That might be sensible for init files, but<br>&gt; otherwise it seems a bit arbitrary when other limitations might be more<br>&gt; useful.&nbsp; For example, I don't see anything to stop this being run for<br>&gt; every individual command in every function run by the user, which could<br>&gt; be a huge overhead, probably more so that "." files which tend to be<br>&gt; one-off.&nbsp; (I think the test for "sfcontext" happens to catch a lot of<br>&gt; completion functions, however.)&nbsp; I'd be tempted to add a "locallevel"<br>&gt; test to exclude all function bodies.&nbsp; If necessary we can think of a way<br>&gt; of reactivating it in a function.<br><br>Without the test for
 sourcelevel, a manual "source" by the user would trigger atexec for each command in the file. The sfcontext of the body of a function is SFC_DIRECT, and hence is excluded from atexec.<br><br>Michael Hwang<br></div></div></div></div><br>



      </body></html>
--0-1550049423-1247887376=:40657--

