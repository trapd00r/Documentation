From zsh-users-return-12600-mason-zsh=primenet.com.au@sunsite.dk Sat Feb 16 17:38:29 2008
Return-Path: <zsh-users-return-12600-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27462 invoked from network); 16 Feb 2008 17:38:27 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 16 Feb 2008 17:38:27 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 26186 invoked from network); 16 Feb 2008 17:38:11 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 16 Feb 2008 17:38:11 -0000
Received: (qmail 26859 invoked by alias); 16 Feb 2008 17:38:03 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12600
Received: (qmail 26837 invoked from network); 16 Feb 2008 17:38:02 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 16 Feb 2008 17:38:02 -0000
Received: from vms044pub.verizon.net (vms044pub.verizon.net [206.46.252.44])
	by bifrost.dotsrc.org (Postfix) with ESMTP id AB6598026E0B
	for <zsh-users@sunsite.dk>; Sat, 16 Feb 2008 18:37:58 +0100 (CET)
Received: from torch.brasslantern.com ([71.121.18.67])
 by vms044.mailsrvcs.net (Sun Java System Messaging Server 6.2-6.01 (built Apr
 3 2006)) with ESMTPA id <0JWC00HF1EB8HVL0@vms044.mailsrvcs.net> for
 zsh-users@sunsite.dk; Sat, 16 Feb 2008 11:37:57 -0600 (CST)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id m1GHbtmx017003	for
 <zsh-users@sunsite.dk>; Sat, 16 Feb 2008 09:37:56 -0800
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id m1GHbtWW017002	for zsh-users@sunsite.dk; Sat,
 16 Feb 2008 09:37:55 -0800
Date: Sat, 16 Feb 2008 09:37:53 -0800
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: read -s doesn't work with -t?
In-reply-to: <237967ef0802152350i1fec3369oba9268400a209b2e@mail.gmail.com>
To: "zsh users" <zsh-users@sunsite.dk>
Message-id: <080216093755.ZM17001@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <237967ef0802151327q1c6d3a19oa67a977b82c52f67@mail.gmail.com>
	<080215191216.ZM29994@torch.brasslantern.com>
	<237967ef0802152333g7f759674r806f61f9f76f86f2@mail.gmail.com>
	<237967ef0802152350i1fec3369oba9268400a209b2e@mail.gmail.com>
Comments: In reply to "Mikael Magnusson" <mikachu@gmail.com>
 "Re: read -s doesn't work with -t?" (Feb 16,  8:50am)
X-Virus-Scanned: ClamAV 0.91.2/5837/Sat Feb 16 18:14:09 2008 on bifrost
X-Virus-Status: Clean

On Feb 16,  8:50am, Mikael Magnusson wrote:
}
} Maybe this is overly naive, but the following seems to fix the issue
} for me. That is, just moving the code for -s up above the code for -t.

No, that isn't enough.  That moves -s above -d as well, and the code
for -d saves and restores the tty state; so if -s has already set
~ECHO then the tty will be restored incorrectly if you use -s and -d.

It also seems to me that canonical input mode should be set and the
prompt should be printed before the read-timeout poll is done, so -d
should come before -t as well.  However, I'm not really sure what's
going on with shttyinfo versus saveti, so I'm not going to commit the
following until somebody else checks it over.

And of course there may be some kind of bad interaction between changing
the tty state and reading typeahead that I'm not aware of that makes all
this impossible, in which case it should just be documented that you
can't use a prompt or -s or -d in combination with -t.

HOWEVER, this patch *does* solve my problem from zsh-workers/24409, if I
use "read -st 2 -rk ..." in the xterm-ask function.  So I think this is
at least on the right track.


Index: Src/builtin.c
--- zsh-forge/current/Src/builtin.c	2008-01-26 17:42:21.000000000 -0800
+++ zsh-4.3/Src/builtin.c	2008-02-16 09:25:02.000000000 -0800
@@ -4822,32 +4822,32 @@
     } else
 	readfd = izle = 0;
 
-    if (OPT_ISSET(ops,'t')) {
-	zlong timeout = 0;
-	if (OPT_HASARG(ops,'t')) {
-	    mnumber mn = zero_mnumber;
-	    mn = matheval(OPT_ARG(ops,'t'));
-	    if (errflag)
-		return 1;
-	    if (mn.type == MN_FLOAT) {
-		mn.u.d *= 1e6;
-		timeout = (zlong)mn.u.d;
-	    } else {
-		timeout = (zlong)mn.u.l * (zlong)1000000;
-	    }
-	}
-	if (readfd == -1 ||
-	    !read_poll(readfd, &readchar, keys && !zleactive, timeout)) {
-	    if (OPT_ISSET(ops,'k') && !zleactive && !isem)
-		settyinfo(&shttyinfo);
-	    if (haso) {
-		fclose(shout);
-		shout = oshout;
-		SHTTY = -1;
+    if (OPT_ISSET(ops,'s') && SHTTY != -1) {
+	struct ttyinfo ti;
+	gettyinfo(&ti);
+	saveti = ti;
+	resettty = 1;
+#ifdef HAS_TIO
+	ti.tio.c_lflag &= ~ECHO;
+#else
+	ti.sgttyb.sg_flags &= ~ECHO;
+#endif
+	settyinfo(&ti);
+    }
+
+    /* handle prompt */
+    if (firstarg) {
+	for (readpmpt = firstarg;
+	     *readpmpt && *readpmpt != '?'; readpmpt++);
+	if (*readpmpt++) {
+	    if (keys || isatty(0)) {
+		zputs(readpmpt, (shout ? shout : stderr));
+		fflush(shout ? shout : stderr);
 	    }
-	    return 1;
+	    readpmpt[-1] = '\0';
 	}
     }
+
     if (OPT_ISSET(ops,'d')) {
 	char *delimstr = OPT_ARG(ops,'d');
 #ifdef MULTIBYTE_SUPPORT
@@ -4870,8 +4870,10 @@
 	if (SHTTY != -1) {
 	    struct ttyinfo ti;
 	    gettyinfo(&ti);
-	    saveti = ti;
-	    resettty = 1;
+	    if (! resettty) {
+		saveti = ti;
+		resettty = 1;
+	    }
 #ifdef HAS_TIO
 	    ti.tio.c_lflag &= ~ICANON;
 	    ti.tio.c_cc[VMIN] = 1;
@@ -4882,31 +4884,32 @@
 	    settyinfo(&ti);
 	}
     }
-    if (OPT_ISSET(ops,'s') && SHTTY != -1) {
-	struct ttyinfo ti;
-	gettyinfo(&ti);
-	if (! resettty) {
-	    saveti = ti;
-	    resettty = 1;
+    if (OPT_ISSET(ops,'t')) {
+	zlong timeout = 0;
+	if (OPT_HASARG(ops,'t')) {
+	    mnumber mn = zero_mnumber;
+	    mn = matheval(OPT_ARG(ops,'t'));
+	    if (errflag)
+		return 1;
+	    if (mn.type == MN_FLOAT) {
+		mn.u.d *= 1e6;
+		timeout = (zlong)mn.u.d;
+	    } else {
+		timeout = (zlong)mn.u.l * (zlong)1000000;
+	    }
 	}
-#ifdef HAS_TIO
-	ti.tio.c_lflag &= ~ECHO;
-#else
-	ti.sgttyb.sg_flags &= ~ECHO;
-#endif
-	settyinfo(&ti);
-    }
-
-    /* handle prompt */
-    if (firstarg) {
-	for (readpmpt = firstarg;
-	     *readpmpt && *readpmpt != '?'; readpmpt++);
-	if (*readpmpt++) {
-	    if (keys || isatty(0)) {
-		zputs(readpmpt, (shout ? shout : stderr));
-		fflush(shout ? shout : stderr);
+	if (readfd == -1 ||
+	    !read_poll(readfd, &readchar, keys && !zleactive, timeout)) {
+	    if (OPT_ISSET(ops,'k') && !zleactive && !isem)
+		settyinfo(&shttyinfo);
+	    else if (resettty && SHTTY != -1)
+		settyinfo(&saveti);
+	    if (haso) {
+		fclose(shout);
+		shout = oshout;
+		SHTTY = -1;
 	    }
-	    readpmpt[-1] = '\0';
+	    return 1;
 	}
     }
 

-- 

