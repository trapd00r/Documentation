From zsh-workers-return-11037-mason-zsh=primenet.com.au@sunsite.auc.dk Mon May 01 03:44:35 2000
Return-Path: <zsh-workers-return-11037-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 7916 invoked from network); 1 May 2000 03:44:33 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 1 May 2000 03:44:33 -0000
Received: (qmail 3904 invoked by alias); 1 May 2000 03:44:27 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 11037
Received: (qmail 3888 invoked from network); 1 May 2000 03:44:26 -0000
Sender: opk
Message-ID: <390CEF40.AD7339AA@u.genie.co.uk>
Date: Mon, 01 May 2000 03:43:12 +0100
From: Oliver Kiddle <opk@u.genie.co.uk>
X-Mailer: Mozilla 4.61 [en] (X11; I; Linux 2.2.13 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: zsh-workers@sunsite.auc.dk
Subject: PATCH: Spelling corrections in Etc/ files
References: <200004200718.JAA24905@beta.informatik.hu-berlin.de> 
				<38FECB9E.39061965@u.genie.co.uk> <1000424052337.ZM30300@candle.brasslantern.com>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

I've fixed a few typos in some of the files in the Etc directory. I have
also removed the comment in the zsh-development-guide about how future
tests of interactive features may require external software like expect
because I would imagine that any such tests would now be done using
zpty. If anyone disagrees, I'll put the comment back.

On the subject of Completion function directories, Bart Schaefer wrote:

> And then if we're going to keep the system-specific
> directories like AIX and even X, maybe we should subdivide them further
> into the same two directories that we break User into, and eliminate
> the system-specific level of hierarchy at install time.
> 
> So we'd end up with something like
> 
> Helpers  Commands  AIX/Helpers  AIX/Commands  Bsd/Helpers  Bsd/Commands
> etc. etc.
> 
> (with probably a better name than "helpers").  Things like _diff_options
> still end up in a fuzzy space, I know ...

The completion-style-guide seems to refer to the `helpers' as utility
functions so 'Utilities' would be one suggestion for a different name. I
can't think of many other options though - thinking of similar things in
various programming languages: 'Generic', 'Library'.

I think your suggestion on how to reorganise the completion directories
is very good.

Oliver

Index: Etc/MACHINES
===================================================================
RCS file: /cvsroot/zsh/zsh/Etc/MACHINES,v
retrieving revision 1.2
diff -u -r1.2 MACHINES
--- Etc/MACHINES	2000/04/16 19:02:13	1.2
+++ Etc/MACHINES	2000/05/01 03:39:53
@@ -64,7 +64,7 @@
 	Should build `out-of-the-box', but --enable-zsh-mem will not work.
 
 	On 3.2, for 64-bit integer support you need to compile with gcc, as
-	the native compiler does not support ANSI simulataneously with
+	the native compiler does not support ANSI simultaneously with
 	`long long'.  On 4.1, there appear to be problems using
 	--enable-dynamic (the default) with gcc (version was 2.7.2.3) in
 	4.1, though native cc works. More information about this problem
@@ -107,16 +107,16 @@
        and CDS/CDS++ compiler.
 
 SIEMENS: SINIX
-       MX (Intel) plattform: SINIX-L/M 5.41
+       MX (Intel) platform: SINIX-L/M 5.41
        Builds out-of-the-box with EGCS. Neither dynamic loading nor
-       64-bit integers are suported. Native compiler was not tried
+       64-bit integers are supported. Native compiler was not tried
        mostly because GCC/EGCS builds out-of-the-box as well. If you 
        succeed with native compiler, send a patch for this file
        to zsh-workers.
 
-       RM (MIPS) plattform: SINIX-N/Y 5.42
+       RM (MIPS) platform: SINIX-N/Y 5.42
        Should build out-of-the-box but it was not tested. Neither
-       dynamic loading nor 64-bit integers are suported.
+       dynamic loading nor 64-bit integers are supported.
        Note, that this version is obsolete and users are expected to 
        update to Reliant UNIX.
 
Index: Etc/NEWS
===================================================================
RCS file: /cvsroot/zsh/zsh/Etc/NEWS,v
retrieving revision 1.2
diff -u -r1.2 NEWS
--- Etc/NEWS	2000/04/30 21:04:55	1.2
+++ Etc/NEWS	2000/05/01 03:39:56
@@ -5,14 +5,14 @@
 New features in zsh version 3.1.7
 ---------------------------------
 Further enhancements to new completion system:
- - Comprehensive context-sensitive configuration vai `styles', which
-   can be set by the menu-driven front end in compinstall.
+ - Comprehensive context-sensitive configuration via `styles', which
+   can be set by the menu-driven front end in compinstall
  - General mechanism for setting patterns to be ignored in a completion;
    overriding  of patterns to be matched for functions
  - New completers: _prefix to complete word before cursor, _ignored
    to complete using words so far ignored (like $fignore but more
    powerful), _history to complete words from shell history
- - Multiple use of completers with different options, similalry splitting
+ - Multiple use of completers with different options, similarly splitting
    of different types of completion (`tags') so they are considered with
    different styles
  - Many more supplied completions for standard commands which work out of
@@ -68,7 +68,7 @@
    matches, e.g.
      [[ $foo = (#b)(*/)[^/]* ]]
    stores the part of $foo up to the last / in $match[1] and the indexes of
-   the match in $mbegin[1], $mend[1].  (#m) is also availabel to set $MATCH
+   the match in $mbegin[1], $mend[1].  (#m) is also available to set $MATCH
    to the entire match and corresponding $MBEGIN, $MEND:  useful in
    parameter substitutions like ${.../.../...}.
  - (#s) and (#e) match start and end of pattern like ^ and $ in regular
@@ -88,7 +88,7 @@
    zsh subdirectory, so zle becomes zsh/zle etc.; aliases supplied for
    compatibility for existing code, but the new format should be used in
    future.
- - zmodload is more consistent between dynamicall and statically linked
+ - zmodload is more consistent between dynamically and statically linked
    shells
  - zsh/zftp and its function suite support multiple sessions (zfsession
    command); zftransfer allows transfer of files between two ftp sessions
@@ -286,7 +286,7 @@
 -------------------------------
 
 Trailing "/" in a glob pattern now works like in other shell thus it
-can no longer be used as a sorthand for "(/)".
+can no longer be used as a shorthand for "(/)".
 
 Much improved sh/ksh emulation.  When zsh is invoked as sh it mostly
 conforms to POSIX 1003.2.
Index: Etc/completion-style-guide
===================================================================
RCS file: /cvsroot/zsh/zsh/Etc/completion-style-guide,v
retrieving revision 1.4
diff -u -r1.4 completion-style-guide
--- Etc/completion-style-guide	2000/04/25 09:48:09	1.4
+++ Etc/completion-style-guide	2000/05/01 03:39:59
@@ -2,7 +2,7 @@
 ---------------------------
 
 The completion system keeps track of the current context in the
-parameter `curcontext'. It's content is the hierarchical name for the
+parameter `curcontext'. Its content is the hierarchical name for the
 current context sans the `:completion:' and the last colon and the tag
 currently tried. The tags represent different types of matches. So,
 whenever you are about to add matches, you should use a tag for them
@@ -98,13 +98,13 @@
 
 The `_all_labels' function implements the loop over the tag aliases and
 handles the user-defined description, using (in the example) the
-parameter `expl' to store options to give to the command. These option 
+parameter `expl' to store options to give to the command. These options
 are inserted into the command line either directly before a single
 hyphen if there is such an argument or after the first word if there
-is no single hyphen. Since using `_all_labels' is so much more conveient
+is no single hyphen. Since using `_all_labels' is so much more convenient
 than writing the loop with the `_next_label' function (see below), but
-some function called to generate matches don't accept a single hyphen
-as argument anywhere but want the options built as their last arguments,
+some functions called to generate matches don't accept a single hyphen
+as an argument anywhere but want the options built as their last arguments,
 `_all_labels' will *replace* the hyphen with the options if the hyphen is
 the last argument. A good example for such a function is
 `_combination' which can be called like:
@@ -157,7 +157,7 @@
   _tags friends users hosts
 
   while _tags; do
-    _requested friends expl friend compad alice bob && ret=0
+    _requested friends expl friend compadd alice bob && ret=0
     _requested users && _users && ret=0
     _requested hosts && _hosts && ret=0
 
@@ -207,7 +207,7 @@
 For the names of the tags: choose simple (short, if at all possible)
 names in plural. Also, first have a look at the tag names already used 
 by other functions and if any of these names seem sensible for the
-type of matches you are about to add, the use those names. This will
+type of matches you are about to add, then use those names. This will
 allow users to define styles for certain types of matches independent
 of the place where they are added.
 
@@ -233,7 +233,7 @@
 Users can associate patterns for hierarchical context names with
 certain styles using the `zstyle' builtin. The completion code
 should then use these styles to decide how matches should be added and 
-to get user-configured values. This, too,  is done using the builtin
+to get user-configured values. This, too, is done using the builtin
 `zstyle'.
 
 Basically styles map names to a bunch of strings (the `value'). In
@@ -327,7 +327,7 @@
   _description tag expl <descr>
   compadd "$expl@]" - <matches ...>
 
-Note that this function also accepts `-V' und `-J', optionally (in the 
+Note that this function also accepts `-V' and `-J', optionally (in the 
 same word) preceded by `1' or `2' to describe the type of group you
 want to use. For example:
 
@@ -373,7 +373,7 @@
     change the way these things will be completed everywhere by just using
     their own implementations for these functions.
 4)  Make sure that the return value of your functions is correct: zero
-    if matches where added and non-zero if no matches were found.
+    if matches were added and non-zero if no matches were found.
     In some cases you'll need to test the value of `$compstate[nmatches]'
     for this. This should always be done by first saving the old value
     (`local nm="$compstate[nmatches]"') and later comparing this with
@@ -397,7 +397,7 @@
     documentation for `_arguments' and `_values' for two functions
     that may help you with this.
 8)  If a completion function generates completely different types of
-    completions (for example, because the comamnd has several
+    completions (for example, because the command has several
     completely different modes), it should allow users to define
     functions that separately override the behavior for these
     different types. This can easily be achieved by using the
Index: Etc/zsh-development-guide
===================================================================
RCS file: /cvsroot/zsh/zsh/Etc/zsh-development-guide,v
retrieving revision 1.2
diff -u -r1.2 zsh-development-guide
--- Etc/zsh-development-guide	2000/04/06 16:44:03	1.2
+++ Etc/zsh-development-guide	2000/05/01 03:40:02
@@ -73,8 +73,7 @@
   tests for basic syntactic features, builtins, options etc. which you
   know to be flakey or to have had difficulties in the past.  Better
   support for testing job control and interactive features is expected
-  to follow eventually (this may require additional external software
-  e.g. `expect').
+  to follow eventually.
 
 * The directory is not part of the usual process of building and
   installation.  To run the tests, go to Test and `make check'.  Please
@@ -146,7 +145,7 @@
   The declaration itself should be all on one line (except for multi-line
   initialisers).
 
-* Preprocessor directives thst affect the function/variable declarations must
+* Preprocessor directives that affect the function/variable declarations must
   also be preceded by a "/**/" line, so that they get copied into the
   prototype lists.
 
@@ -178,12 +177,13 @@
 
 Each module is described by a file with a name ending in `.mdd' somewhere
 under the Src directory.  This file is actually a shell script that will
-sourced when zsh is build. To describe the module it can/should set the
+sourced when zsh is built. To describe the module it can/should set the
 following shell variables:
 
   - name            name of the module
   - moddeps         modules on which this module depends (default none)
-  - nozshdep        non-empty indicates no dependence on the `zsh/main' pseudo-module
+  - nozshdep        non-empty indicates no dependence on the `zsh/main'
+                    pseudo-module
   - alwayslink      if non-empty, always link the module into the executable
   - autobins        builtins defined by the module, for autoloading
   - autoinfixconds  infix condition codes defined by the module, for
@@ -361,7 +361,7 @@
     function is non-zero if the the num'th string from the array taken 
     as a glob pattern matches the given string.
 
-Registering and de-resgitering condition codes with the shell is
+Registering and de-registering condition codes with the shell is
 almost exactly the same as for builtins, using the functions
 `addconddefs()' and `deleteconddefs()' instead:
 
@@ -504,7 +504,7 @@
 `STRMATHFUNC' get the name of the function, the string between the
 parentheses at the call, and the last argument from the macro-call.
 
-Both types of functions return an mnumber which is a descriminated
+Both types of functions return an mnumber which is a discriminated
 union looking like:
 
   typedef struct {
@@ -737,7 +737,7 @@
   }
 
 Inside these wrapper functions the global variable `sfcontext' will be 
-set to a vlue indicating the circumstances under which the shell
+set to a clue indicating the circumstances under which the shell
 function was called. It can have any of the following values:
 
   - SFC_DIRECT:   the function was invoked directly by the user
@@ -758,13 +758,13 @@
 be unloaded immediately since the wrapper function is still on the
 call stack. The zsh code delays unloading modules until all wrappers
 from them have finished. To hide this from the user, the module's
-cleanup function is run immediatly so that all builtins, condition
+cleanup function is run immediately so that all builtins, condition
 codes, and wrapper function defined by the module are
 de-registered. But if there is some module-global state that has to be 
 finalized (e.g. some memory that has to be freed) and that is used by
 the wrapper functions finalizing this data in the cleanup function
 won't work.
-This is why ther are two functions each for the initialization and
+This is why there are two functions each for the initialization and
 finalization of modules. The `boot'- and `cleanup'-functions are run
 whenever the user calls `zmodload' or `zmodload -u' and should only
 register or de-register the module's interface that is visible to the
@@ -810,7 +810,7 @@
     `item()' list structure, then the instruction `nofill(...)', which
     simply turns off filling should be used; as with `indent(...)',
     explicit font changing commands are required.  This can be used
-    without `indent()' when no identation is required, e.g. if the
+    without `indent()' when no indentation is required, e.g. if the
     accumulated indentation would otherwise be too long.
   All the above should appear on their own, separated by newlines from the
   surrounding text.  No extra newlines after the opening or before the

