From zsh-workers-return-15099-mason-zsh=primenet.com.au@sunsite.dk Tue Jun 26 14:52:37 2001
Return-Path: <zsh-workers-return-15099-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15020 invoked from network); 26 Jun 2001 14:52:35 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 26 Jun 2001 14:52:35 -0000
Received: (qmail 24831 invoked by alias); 26 Jun 2001 14:51:45 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 15099
Received: (qmail 24817 invoked from network); 26 Jun 2001 14:51:44 -0000
X-Envelope-Sender-Is: Andrej.Borsenkow@mow.siemens.ru (at relayer david.siemens.de)
From: "Andrej Borsenkow" <Andrej.Borsenkow@mow.siemens.ru>
To: "ZSH Workers Mailing List" <zsh-workers@sunsite.dk>
Subject: RE: PATCH: "unimplemented" for test suite
Date: Tue, 26 Jun 2001 18:52:23 +0400
Message-ID: <003101c0fe4f$9c074ed0$21c9ca95@mow.siemens.ru>
MIME-Version: 1.0
Content-Type: multipart/mixed;
	boundary="----=_NextPart_000_0032_01C0FE71.2318EED0"
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
In-Reply-To: <1010618190240.ZM16502@candle.brasslantern.com>
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2479.0006
Importance: Normal

This is a multi-part message in MIME format.

------=_NextPart_000_0032_01C0FE71.2318EED0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit

>
> On Jun 18, 10:44pm, Andrej Borsenkow wrote:
> }
> } I was unsure about added value of this patch and there was no comments.
>
> Certainly it would be nice to at least *explain* the test failures for
> the Y* tests when --disable-dynamic ... either that, or we should add
> zpty to the list of modules that are always linked by default.
>
> Probably comptestinit should not proceed if zmodload zpty fails, and
> the %prep section should fail in that case, so that we don't report
> failures on individual tests.
>
> If Andrej's patch -- or some combination of it with the below -- isn't
> considered better, how about this?
>

I guess, we better leave completion tests as in Bart patch. It is impossible
(at least, I have no idea how) to decide if zsh/zpty  failed or just was
missing, so skipping other tests is the most we can do.

And here is for the rest.

-andrej

------=_NextPart_000_0032_01C0FE71.2318EED0
Content-Type: application/octet-stream;
	name="zsh-unimplemented.diff"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
	filename="zsh-unimplemented.diff"

Index: Test/D03procsubst.ztst=0A=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=0A=
RCS file: /cvsroot/zsh/zsh/Test/D03procsubst.ztst,v=0A=
retrieving revision 1.1=0A=
diff -u -r1.1 D03procsubst.ztst=0A=
--- Test/D03procsubst.ztst	2001/04/02 12:33:49	1.1=0A=
+++ Test/D03procsubst.ztst	2001/06/26 14:22:17=0A=
@@ -1,10 +1,16 @@=0A=
 # Tests for process substitution: <(...), >(...) and =3D(...).=0A=
 =0A=
 %prep=0A=
-  mkdir procsubst.tmp=0A=
-  cd procsubst.tmp=0A=
-  print 'First\tSecond\tThird\tFourth' >FILE1=0A=
-  print 'Erste\tZweite\tDritte\tVierte' >FILE2=0A=
+  if grep '#define PATH_DEV_FD' $ZTST_testdir/../config.h > /dev/null =
2>&1 ||=0A=
+     grep '#define HAVE_FIFOS' $ZTST_testdir/../config.h > /dev/null =
2>&1; then=0A=
+    mkdir procsubst.tmp=0A=
+    cd procsubst.tmp=0A=
+    print 'First\tSecond\tThird\tFourth' >FILE1=0A=
+    print 'Erste\tZweite\tDritte\tVierte' >FILE2=0A=
+  else=0A=
+    ZTST_unimplemented=3D"process substitution is not supported"=0A=
+    true=0A=
+  fi=0A=
 =0A=
 %test=0A=
   paste <(cut -f1 FILE1) <(cut -f3 FILE2)=0A=
Index: Test/ztst.zsh=0A=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=0A=
RCS file: /cvsroot/zsh/zsh/Test/ztst.zsh,v=0A=
retrieving revision 1.15=0A=
diff -u -r1.15 ztst.zsh=0A=
--- Test/ztst.zsh	2001/05/22 09:27:25	1.15=0A=
+++ Test/ztst.zsh	2001/06/26 14:22:17=0A=
@@ -232,9 +232,11 @@=0A=
 ZTST_prepclean() {=0A=
   # Execute indented code chunks.=0A=
   while ZTST_getchunk; do=0A=
-    ZTST_execchunk >/dev/null || [[ -n $1 ]] ||=0A=
-    ZTST_testfailed "non-zero status from preparation code:=0A=
-$ZTST_code"=0A=
+    ZTST_execchunk >/dev/null || [[ -n $1 ]] || {=0A=
+      [[ -n "$ZTST_unimplemented" ]] ||=0A=
+      ZTST_testfailed "non-zero status from preparation code:=0A=
+$ZTST_code" && return 0=0A=
+    }=0A=
   done=0A=
 }=0A=
 =0A=
@@ -363,8 +365,11 @@=0A=
 print "$ZTST_testname: starting."=0A=
 =0A=
 # Now go through all the different sections until the end.=0A=
+# prep section may set ZTST_unimplemented, in this case the actual=0A=
+# tests will be skipped=0A=
 ZTST_skipok=3D=0A=
-while ZTST_getsect $ZTST_skipok; do=0A=
+ZTST_unimplemented=3D=0A=
+while [[ -z "$ZTST_unimplemented" ]] && ZTST_getsect $ZTST_skipok; do=0A=
   case $ZTST_cursect in=0A=
     prep) if (( ${ZTST_sects[prep]} + ${ZTST_sects[test]} + \=0A=
 	        ${ZTST_sects[clean]} )); then=0A=
@@ -399,6 +404,10 @@=0A=
   esac=0A=
 done=0A=
 =0A=
-(( $ZTST_testfailed )) || print "$ZTST_testname: all tests successful."=0A=
+if [[ -n "$ZTST_unimplemented" ]]; then=0A=
+  print "$ZTST_testname: skipped ($ZTST_unimplemented)"=0A=
+elif (( ! $ZTST_testfailed )); then=0A=
+  print "$ZTST_testname: all tests successful."=0A=
+fi=0A=
 ZTST_cleanup=0A=
 exit $(( ZTST_testfailed ))=0A=

------=_NextPart_000_0032_01C0FE71.2318EED0--

