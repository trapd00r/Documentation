From zsh-workers-return-11251-mason-zsh=primenet.com.au@sunsite.auc.dk Mon May 08 10:02:04 2000
Return-Path: <zsh-workers-return-11251-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 12519 invoked from network); 8 May 2000 10:01:59 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 8 May 2000 10:01:59 -0000
Received: (qmail 29349 invoked by alias); 8 May 2000 10:01:54 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 11251
Received: (qmail 29333 invoked from network); 8 May 2000 10:01:53 -0000
Date: Mon, 08 May 2000 11:01:26 +0100
From: Peter Stephenson <pws@cambridgesiliconradio.com>
Subject: Re: optional argument?
In-reply-to: "Your message of Mon, 08 May 2000 11:44:16 +0200."
 <200005080944.LAA15834@beta.informatik.hu-berlin.de>
To: zsh-workers@sunsite.auc.dk (Zsh hackers list)
Message-id: <0FU8000DOJUEMT@la-la.cambridgesiliconradio.com>
Content-transfer-encoding: 7BIT

> Hrmpf. Make `='-options complete the argument *only* after the equal
> sign? Add a new specification type, say `-opt==' for options that
> don't accept the argument in a separte word (should the long-option
> auto-detection code use it then?)?
> 
> I think I prefer the latter. Opinions?

More generally, I wonder if a good way to handle variant option syntax
might be to allow a `profile' of some sort to be passed down to arguments,
either as an option or a parameter, saying what form of options and
arguments the command in question accepts.  This keeps the rest of the
command line to arguments neater.  It can wait.  It doesn't help here if
it's really that one option that has the rogue behaviour.

-- 
Peter Stephenson <pws@cambridgesiliconradio.com>
Cambridge Silicon Radio, Unit 300, Science Park, Milton Road,
Cambridge, CB4 0XL, UK                          Tel: +44 (0)1223 392070

