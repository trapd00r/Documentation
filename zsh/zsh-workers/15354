From zsh-workers-return-15354-mason-zsh=primenet.com.au@sunsite.dk Tue Jul 10 08:42:16 2001
Return-Path: <zsh-workers-return-15354-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 19224 invoked from network); 10 Jul 2001 08:42:12 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 10 Jul 2001 08:42:12 -0000
Received: (qmail 3929 invoked by alias); 10 Jul 2001 08:42:00 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 15354
Received: (qmail 3916 invoked from network); 10 Jul 2001 08:41:58 -0000
From: "Bart Schaefer" <schaefer@candle.brasslantern.com>
Message-Id: <1010710083953.ZM28253@candle.brasslantern.com>
Date: Tue, 10 Jul 2001 08:39:53 +0000
X-Mailer: Z-Mail (5.0.0 30July97)
To: zsh-workers@sunsite.dk
Subject: PATCH: Documentation indexing, prompt expansion doc
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii

I've long been somewhat annoyed at finding seemingly obvious things missing
from the indices in the zsh manual -- an index entry for prompt expansion
that actually refers to the section on prompt expansion being the one that
set me off on this project -- so this patch is the beginning of an attempt
to improve the situation.  It covers only the first 11% of zsh.texi (which
is just enough to get past prompt expansion), so I'll probably be posting
more chunks eventually, unless someone beats me to it.

The addition of the %y prompt escape also convinced me that the ordering of
entries in the prompt expansion section was getting out of hand.  To keep
related items grouped together while still making some sense alphabetically,
I've split the list into six subsections; this is the largest part of the
patch below.  I also reordered the list of all X for %(X.T.F) conditions.

--------------------------------------------------------------------------

diff -ru ../zsh-forge/current/Doc/Zsh/arith.yo ./Doc/Zsh/arith.yo
--- ../zsh-forge/current/Doc/Zsh/arith.yo	Thu Oct  5 01:41:36 2000
+++ ./Doc/Zsh/arith.yo	Sat Jul  7 12:45:41 2001
@@ -32,6 +32,7 @@
 both assigning the value 3 to the shell variable tt(foo) and returning a
 zero status.
 
+cindex(arithmetic base)
 cindex(bases, in arithmetic)
 Integers can be in bases other than 10.
 A leading `tt(0x)' or `tt(0X)' denotes hexadecimal.
@@ -65,6 +66,15 @@
 implicitly typed by the arithmetic evaluation, where it acquires the output
 base 8.
 
+pindex(C_BASES, use of)
+pindex(OCTAL_ZEROES, use of)
+If the tt(C_BASES) option is set, hexadecimal numbers in the standard C
+format, for example tt(0xFF) instead of the usual `tt(16#FF)'.  If the
+option tt(OCTAL_ZEROES) is also set (it is not by default), octal numbers
+will be treated similarly and hence appear as `tt(077)' instead of
+`tt(8#77)'.  This option has no effect on the output of bases other than
+hexadecimal and octal, and these formats are always understood on input.
+
 When an output base is specified using the `tt([#)var(base)tt(])' syntax,
 an appropriate base prefix will be output if necessary, so that the value
 output is valid syntax for input.  If the tt(#) is doubled, for example
@@ -105,8 +115,8 @@
 operator is evaluated.  Note the precedence of the bitwise AND, OR,
 and XOR operators.
 
-cindex(math functions)
-cindex(functions, math)
+cindex(mathematical functions, use of)
+cindex(functions, math, use of)
 Mathematical functions can be called with the syntax
 `var(func)tt(LPAR())var(args)tt(RPAR())', where the function decides
 if the var(args) is used as a string or a comma-separated list of
diff -ru ../zsh-forge/current/Doc/Zsh/builtins.yo ./Doc/Zsh/builtins.yo
--- ../zsh-forge/current/Doc/Zsh/builtins.yo	Wed Jun 27 08:17:38 2001
+++ ./Doc/Zsh/builtins.yo	Sat Jun 30 22:28:13 2001
@@ -130,7 +130,8 @@
 )
 findex(builtin)
 item(tt(builtin) var(name) [ var(args) ... ])(
-Executes the builtin var(name), with the given var(args).
+Executes the builtin var(name), with the given var(args), even if that
+builtin has been disabled (see tt(disable)).
 )
 alias(bye)(exit)
 module(cap)(zsh/cap)
diff -ru ../zsh-forge/current/Doc/Zsh/compat.yo ./Doc/Zsh/compat.yo
--- ../zsh-forge/current/Doc/Zsh/compat.yo	Mon May 22 08:01:35 2000
+++ ./Doc/Zsh/compat.yo	Sat Jun 30 22:10:12 2001
@@ -1,8 +1,8 @@
 texinode(Compatibility)(Restricted Shell)()(Invocation)
 sect(Compatibility)
 cindex(compatibility)
-cindex(sh, compatibility)
-cindex(ksh, compatibility)
+cindex(sh compatibility)
+cindex(ksh compatibility)
 Zsh tries to emulate bf(sh) or bf(ksh) when it is invoked as
 tt(sh) or tt(ksh) respectively; more precisely, it looks at the first
 letter of the name by which it was invoked, excluding any initial `tt(r)'
@@ -33,6 +33,7 @@
 tt(status),
 tt(watch).
 
+vindex(ENV, use of)
 The usual zsh startup/shutdown scripts are not executed.  Login shells
 source tt(/etc/profile) followed by tt($HOME/.profile).  If the
 tt(ENV) environment variable is set on invocation, tt($ENV) is sourced
diff -ru ../zsh-forge/current/Doc/Zsh/files.yo ./Doc/Zsh/files.yo
--- ../zsh-forge/current/Doc/Zsh/files.yo	Sat Apr  1 12:43:44 2000
+++ ./Doc/Zsh/files.yo	Sat Jun 30 22:16:52 2001
@@ -5,8 +5,12 @@
 cindex(startup files)
 cindex(files, shutdown)
 cindex(shutdown files)
+pindex(RCS, use of)
+pindex(GLOBAL_RCS, use of)
 pindex(NO_RCS, use of)
 pindex(NO_GLOBAL_RCS, use of)
+vindex(ZDOTDIR, use of)
+@cindex(zshenv)
 Commands are first read from tt(/etc/zshenv); this cannot be overridden.
 Subsequent behaviour is modified by the tt(RCS) and
 tt(GLOBAL_RCS) options; the former affects all startup files, while the
@@ -18,13 +22,17 @@
 
 Commands are then read from tt($ZDOTDIR/.zshenv).
 pindex(LOGIN, use of)
+cindex(zprofile)
 If the shell is a login shell, commands
 are read from tt(/etc/zprofile) and then tt($ZDOTDIR/.zprofile).
+cindex(zshrc)
 Then, if the shell is interactive,
 commands are read from tt(/etc/zshrc) and then tt($ZDOTDIR/.zshrc).
+cindex(zlogin)
 Finally, if the shell is a login shell, tt(/etc/zlogin) and
 tt($ZDOTDIR/.zlogin) are read.
 
+cindex(zlogout)
 When a login shell exits, the files tt($ZDOTDIR/.zlogout) and then
 tt(/etc/zlogout) are read.  This happens with either an explicit exit
 via the tt(exit) or tt(logout) commands, or an implicit exit by reading
@@ -35,6 +43,7 @@
 i.e. if tt(RCS) is unset when the shell exits, no history file will be
 saved.
 
+vindex(HOME, use of)
 If tt(ZDOTDIR) is unset, tt(HOME) is used instead.
 Those files listed above as being in tt(/etc) may be in another
 directory, depending on the installation.
diff -ru ../zsh-forge/current/Doc/Zsh/func.yo ./Doc/Zsh/func.yo
--- ../zsh-forge/current/Doc/Zsh/func.yo	Wed May 30 00:23:56 2001
+++ ./Doc/Zsh/func.yo	Mon Jul  2 18:28:27 2001
@@ -4,7 +4,7 @@
 sect(Functions)
 )\
 cindex(functions)
-findex(function)
+findex(function, use of)
 Shell functions are defined with the tt(function) reserved word or the
 special syntax `var(funcname) tt(())'.
 Shell functions are read in and stored internally.
@@ -28,10 +28,11 @@
 findex(unfunction, use of)
 Functions can be undefined with the tt(unfunction) builtin.
 sect(Autoloading Functions)
-findex(autoload, use of)
 cindex(autoloading functions)
 cindex(functions, autoloading)
 
+findex(autoload, use of)
+vindex(fpath, use of)
 A function can be marked as em(undefined) using the tt(autoload) builtin
 (or `tt(functions -u)' or `tt(typeset -fu)').  Such a function has no
 body.  When the function is first executed, the shell searches for its
@@ -44,6 +45,7 @@
 The usual alias expansion during reading will be suppressed if the
 tt(autoload) builtin or its equivalent is given the option tt(-U). This is
 recommended for the use of functions supplied with the zsh distribution.
+findex(zcompile, use of)
 Note that for functions precompiled with the tt(zcompile) builtin command
 the flag tt(-U) must be provided when the tt(.zwc) file is created, as the
 corresponding information is compiled into the latter.
@@ -135,14 +137,13 @@
 myfunc args...)
 
 In fact, the tt(functions) command outputs `tt(builtin autoload -X)' as
-the body of an autoloaded function.  A true autoloaded function can be
-identified by the presence of the comment `tt(# undefined)' in the body,
-because all comments are discarded from defined functions.  This is done
-so that
+the body of an autoloaded function.  This is done so that
 
 example(eval "$(functions)")
 
-produces a reasonable result.
+produces a reasonable result.  A true autoloaded function can be
+identified by the presence of the comment `tt(# undefined)' in the body,
+because all comments are discarded from defined functions.
 
 To load the definition of an autoloaded function tt(myfunc) without
 executing tt(myfunc), use:
@@ -178,7 +179,7 @@
 actual command that will be executed (including expanded aliases) is
 passed in two different forms: the second argument is a single-line,
 size-limited version of the command (with things like function bodies
-elided); the third argument contains the full text what what is being
+elided); the third argument contains the full text that is being
 executed.
 )
 item(tt(TRAP)var(NAL))(
@@ -211,6 +212,7 @@
 )
 enditem()
 
+findex(trap, use of)
 The functions beginning `tt(TRAP)' may alternatively be defined with the
 tt(trap) builtin:  this may be preferable for some uses, as they are then
 run in the environment of the calling process, rather than in their own
diff -ru ../zsh-forge/current/Doc/Zsh/grammar.yo ./Doc/Zsh/grammar.yo
--- ../zsh-forge/current/Doc/Zsh/grammar.yo	Thu Jul  5 22:36:10 2001
+++ ./Doc/Zsh/grammar.yo	Thu Jul  5 22:36:25 2001
@@ -226,7 +226,7 @@
 in the parameter tt(REPLY).  var(list) is executed
 for each selection until a break or end-of-file is encountered.
 )
-cindex(subshells)
+cindex(subshell)
 item(tt(LPAR()) var(list) tt(RPAR()))(
 Execute var(list) in a subshell.  Traps set by the tt(trap) builtin
 are reset to their default values while executing var(list).
@@ -234,6 +234,7 @@
 item(tt({) var(list) tt(}))(
 Execute var(list).
 )
+findex(function)
 xitem(tt(function) var(word) ... [ tt(()) ] [ var(term) ] tt({) var(list) tt(}))
 xitem(var(word) ... tt(()) [ var(term) ] tt({) var(list) tt(}))
 item(var(word) ... tt(()) [ var(term) ] var(command))(
@@ -250,6 +251,7 @@
 forming a globbing pattern in that case.
 )
 cindex(timing)
+findex(time)
 item(tt(time) [ var(pipeline) ])(
 The var(pipeline) is executed, and timing statistics are
 reported on the standard error in the form specified
@@ -257,7 +259,8 @@
 If var(pipeline) is omitted, print statistics about the
 shell process and its children.
 )
-cindex(testing conditional expression)
+cindex(conditional expression)
+findex([[)
 item(tt([[) var(exp) tt(]]))(
 Evaluates the conditional expression var(exp)
 and return a zero exit status if it is true.
@@ -314,6 +317,7 @@
 item(tt(for LPAR()LPAR()) [var(expr1)] tt(;) [var(expr2)] tt(;) [var(expr3)] tt(RPAR()RPAR()) var(sublist))(
 A short form of the arithmetic tt(for) command.
 )
+findex(foreach)
 item(tt(foreach) var(name) ... tt(LPAR()) var(word) ... tt(RPAR()) var(list) tt(end))(
 Another form of tt(for).
 )
@@ -394,6 +398,7 @@
 entirely quoted.  A literal `tt(')' character can be included in the
 string by using the `tt(\')' escape.
 
+@pindex(RC_QUOTES, use of)
 All characters enclosed between a pair of single quotes (tt('')) that
 is not preceded by a `tt($)' are quoted.  A single quote cannot appear
 within single quotes unless the option tt(RC_QUOTES) is set, in which case
diff -ru ../zsh-forge/current/Doc/Zsh/intro.yo ./Doc/Zsh/intro.yo
--- ../zsh-forge/current/Doc/Zsh/intro.yo	Fri Apr 28 10:13:50 2000
+++ ./Doc/Zsh/intro.yo	Sat Jun 30 21:50:28 2001
@@ -1,5 +1,6 @@
 texinode(Introduction)(Invocation)(The Z Shell Manual)(Top)
 chapter(Introduction)
+cindex(introduction)
 ifzman(\
 sect(Synopsis)
 Because zsh contains many features, the zsh manual has been split into
diff -ru ../zsh-forge/current/Doc/Zsh/invoke.yo ./Doc/Zsh/invoke.yo
--- ../zsh-forge/current/Doc/Zsh/invoke.yo	Sun Jul 30 12:18:13 2000
+++ ./Doc/Zsh/invoke.yo	Sat Jun 30 21:56:29 2001
@@ -2,8 +2,10 @@
 chapter(Invocation)
 cindex(invocation)
 sect(Invocation Options)
-cindex(flags, shell)
+cindex(shell options)
+cindex(options, shell)
 cindex(shell flags)
+cindex(flags, shell)
 The following flags are interpreted by the shell when invoked to determine
 where the shell will read commands from:
 
@@ -47,6 +49,7 @@
 `tt(-xo shwordsplit)' or `tt(-xoshwordsplit)' is equivalent to
 `tt(-x -o shwordsplit)'.
 
+cindex(long option)
 Options may also be specified by name in GNU long option style,
 `tt(--)var(option-name)'.  When this is done, `tt(-)' characters in the
 option name are permitted: they are translated into `tt(_)', and thus ignored.
@@ -58,6 +61,8 @@
 any other options, so for example `tt(-x-shwordsplit)' is an error,
 rather than being treated like `tt(-x --shwordsplit)'.
 
+cindex(--version)
+cindex(--help)
 The special GNU-style option `tt(--version)' is handled; it sends to standard
 output the shell's version information, then exits successfully.
 `tt(--help)' is also handled; it sends to standard output a list of options
diff -ru ../zsh-forge/current/Doc/Zsh/jobs.yo ./Doc/Zsh/jobs.yo
--- ../zsh-forge/current/Doc/Zsh/jobs.yo	Fri Oct 13 17:14:15 2000
+++ ./Doc/Zsh/jobs.yo	Sat Jun 30 23:18:30 2001
@@ -2,6 +2,7 @@
 chapter(Jobs & Signals)
 sect(Jobs)
 cindex(jobs)
+pindex(MONITOR, use of)
 If the tt(MONITOR) option is set,
 an interactive shell associates a em(job) with each pipeline.
 It keeps a table of current jobs, printed by the tt(jobs)
Only in ./Doc/Zsh: manmodmenu.yo
diff -ru ../zsh-forge/current/Doc/Zsh/manual.yo ./Doc/Zsh/manual.yo
--- ../zsh-forge/current/Doc/Zsh/manual.yo	Thu Jun 28 21:44:55 2001
+++ ./Doc/Zsh/manual.yo	Sat Jun 30 21:47:54 2001
@@ -7,6 +7,7 @@
 (shell), which of the standard shells most closely resembles the Korn shell
 (ksh), although it is not completely compatible.
 
+cindex(version)
 Version version(), last updated date().
 )\
 
Only in ./Doc/Zsh: modlist.yo
Only in ./Doc/Zsh: modmenu.yo
diff -ru ../zsh-forge/current/Doc/Zsh/params.yo ./Doc/Zsh/params.yo
--- ../zsh-forge/current/Doc/Zsh/params.yo	Fri Jun 15 02:41:47 2001
+++ ./Doc/Zsh/params.yo	Sat Jun 30 22:06:56 2001
@@ -684,6 +684,14 @@
 This is useful with the tt(AUTO_PUSHD) option.
 pindex(AUTO_PUSHD, use of)
 )
+vindex(ENV)
+item(tt(ENV))(
+If the tt(ENV) environment variable is set when zsh is invoked as tt(sh)
+or tt(ksh), tt($ENV) is sourced after the profile scripts.  The value of
+tt(ENV) is subjected to parameter expansion, command substitution, and
+arithmetic expansion before being interpreted as a pathname.  Note that
+tt(ENV) is em(not) used unless zsh is emulating bf(sh) or bf(ksh).
+)
 vindex(FCEDIT)
 item(tt(FCEDIT))(
 The default editor for the tt(fc) builtin.
diff -ru ../zsh-forge/current/Doc/Zsh/prompt.yo ./Doc/Zsh/prompt.yo
--- ../zsh-forge/current/Doc/Zsh/prompt.yo	Fri Jun 22 19:43:14 2001
+++ ./Doc/Zsh/prompt.yo	Tue Jul  3 09:08:33 2001
@@ -3,6 +3,8 @@
 ifzman(\
 sect(Prompt Expansion)
 )\
+cindex(prompt expansion)
+cindex(expansion, prompt)
 Prompt sequences undergo a special form of expansion.  This type of expansion
 is also available using the tt(-P) option to the tt(print) builtin.
 
@@ -33,6 +35,7 @@
 should appear between the `tt(%)' and the next character of the
 sequence.  The following escape sequences are recognized:
 
+subsect(Special characters)
 startitem()
 item(tt(%%))(
 A `tt(%)'.
@@ -40,6 +43,53 @@
 item(tt(%RPAR()))(
 A `tt(RPAR())'.
 )
+enditem()
+
+subsect(Login information)
+startitem()
+item(tt(%l))(
+The line (tty) the user is logged in on, without `tt(/dev/)' prefix.
+If the name starts with `tt(/dev/tty)', that prefix is stripped.
+)
+item(tt(%M))(
+The full machine hostname.
+)
+item(tt(%m))(
+The hostname up to the first `tt(.)'.
+An integer may follow the `tt(%)' to specify
+how many components of the hostname are desired.  With a negative integer,
+trailing components of the hostname are shown.
+)
+item(tt(%n))(
+tt($USERNAME).
+)
+item(tt(%y))(
+The line (tty) the user is logged in on, without `tt(/dev/)' prefix.
+This does not treat `tt(/dev/tty)' names specially.
+)
+enditem()
+
+subsect(Shell state)
+startitem()
+item(tt(%#))(
+A `tt(#)' if the shell is running with privileges, a `tt(%)' if not.
+Equivalent to `tt(%(!.#.%%))'.
+The definition of `privileged', for these purposes, is that either the
+effective user ID is zero, or, if POSIX.1e capabilities are supported, that
+at least one capability is raised in either the Effective or Inheritable
+capability vectors.
+)
+item(tt(%?))(
+The return code of the last command executed just before the prompt.
+)
+item(tt(%_))(
+The status of the parser, i.e. the shell constructs (like `tt(if)' and
+`tt(for)') that have been started on the command line. If given an integer
+number that many strings will be printed; zero or negative or no integer means
+print as many as there are.  This is most useful in prompts tt(PS2) for
+continuation lines and tt(PS4) for debugging with the tt(XTRACE) option; in
+the latter case it will also work non-interactively.
+)
 xitem(tt(%d))
 item(tt(%/))(
 Present working directory (tt($PWD)).  If an integer follows the `tt(%)',
@@ -56,61 +106,54 @@
 item(tt(%!))(
 Current history event number.
 )
+item(tt(%i))(
+The line number currently being executed in the script, sourced file, or
+shell function given by tt(%N).  This is most useful for debugging as part
+of tt($PS4).
+)
 item(tt(%L))(
 The current value of tt($SHLVL).
 )
-item(tt(%M))(
-The full machine hostname.
-)
-item(tt(%m))(
-The hostname up to the first `tt(.)'.
-An integer may follow the `tt(%)' to specify
-how many components of the hostname are desired.  With a negative integer,
-trailing components of the hostname are shown.
+item(tt(%N))(
+The name of the script, sourced file, or shell function that zsh is
+currently executing, whichever was started most recently.  If there is
+none, this is equivalent to the parameter tt($0).  An integer may follow
+the `tt(%)' to specify a number of trailing path components to show; zero
+means the full path.  A negative integer specifies leading components.
 )
-item(tt(%S) LPAR()tt(%s)RPAR())(
-Start (stop) standout mode.
+xitem(tt(%c))
+xitem(tt(%.))
+item(tt(%C))(
+Trailing component of tt($PWD).
+An integer may follow the `tt(%)' to get more than one component.
+Unless `tt(%C)' is used, tilde contraction is performed first.  These are
+deprecated as tt(%c) and tt(%C) are equivalent to tt(%1~) and tt(%1/),
+respectively, while explicit positive integers have the same effect as for
+the latter two sequences.
 )
-item(tt(%U) LPAR()tt(%u)RPAR())(
-Start (stop) underline mode.
+enditem()
+
+subsect(Date and time)
+startitem()
+item(tt(%D))(
+The date in var(yy)tt(-)var(mm)tt(-)var(dd) format.
 )
-item(tt(%B) LPAR()tt(%b)RPAR())(
-Start (stop) boldface mode.
+item(tt(%T))(
+Current time of day, in 24-hour format.
 )
 xitem(tt(%t))
 item(tt(%@))(
 Current time of day, in 12-hour, am/pm format.
 )
-item(tt(%T))(
-Current time of day, in 24-hour format.
-)
 item(tt(%*))(
 Current time of day in 24-hour format, with seconds.
 )
-item(tt(%n))(
-tt($USERNAME).
-)
-item(tt(%N))(
-The name of the script, sourced file, or shell function that zsh is
-currently executing, whichever was started most recently.  If there is
-none, this is equivalent to the parameter tt($0).  An integer may follow
-the `tt(%)' to specify a number of trailing path components to show; zero
-means the full path.  A negative integer specifies leading components.
-)
-item(tt(%i))(
-The line number currently being executed in the script, sourced file, or
-shell function given by tt(%N).  This is most useful for debugging as part
-of tt($PS4).
-)
 item(tt(%w))(
 The date in var(day)tt(-)var(dd) format.
 )
 item(tt(%W))(
 The date in var(mm)tt(/)var(dd)tt(/)var(yy) format.
 )
-item(tt(%D))(
-The date in var(yy)tt(-)var(mm)tt(-)var(dd) format.
-)
 item(tt(%D{)var(string)tt(}))(
 var(string) is formatted using the tt(strftime) function.
 See manref(strftime)(3) for more details.  Three additional codes are
@@ -119,47 +162,37 @@
 tt(%K)/tt(%L) correspond to tt(%k)/tt(%l) for the hour of the day
 (24/12 hour clock) in the same way.
 )
-item(tt(%l))(
-The line (tty) the user is logged in on without tt(/dev/) prefix.
-If name starts with tt(/dev/tty) this is stripped.
-)
-item(tt(%y))(
-The line (tty) the user is logged in on without tt(/dev/) prefix.
-It does not treat tt(/dev/tty*) specially.
+enditem()
+
+subsect(Visual effects)
+startitem()
+item(tt(%B) LPAR()tt(%b)RPAR())(
+Start (stop) boldface mode.
 )
-item(tt(%?))(
-The return code of the last command executed just before the prompt.
+item(tt(%E))(
+Clear to end of line.
 )
-item(tt(%_))(
-The status of the parser, i.e. the shell constructs (like `tt(if)' and
-`tt(for)') that have been started on the command line. If given an integer
-number that many strings will be printed; zero or negative or no integer means
-print as many as there are.  This is most useful in prompts tt(PS2) for
-continuation lines and tt(PS4) for debugging with the tt(XTRACE) option; in
-the latter case it will also work non-interactively.
+item(tt(%U) LPAR()tt(%u)RPAR())(
+Start (stop) underline mode.
 )
-item(tt(%E))(
-Clears to end of line.
+item(tt(%S) LPAR()tt(%s)RPAR())(
+Start (stop) standout mode.
 )
-item(tt(%#))(
-A `tt(#)' if the shell is running with privileges, a `tt(%)' if not.
-Equivalent to `tt(%(!.#.%%))'.
-The definition of `privileged', for these purposes, is that either the
-effective user ID is zero, or, if POSIX.1e capabilities are supported, that
-at least one capability is raised in either the Effective or Inheritable
-capability vectors.
+item(tt(%{)...tt(%}))(
+Include a string as a literal escape sequence.
+The string within the braces should not change the cursor
+position.  Brace pairs can nest.
 )
+enditem()
+
+subsect(Conditional substrings)
+startitem()
 item(tt(%v))(
 vindex(psvar, use of)
 The value of the first element of the tt(psvar) array parameter.  Following
 the `tt(%)' with an integer gives that element of the array.  Negative
 integers count from the end of the array.
 )
-item(tt(%{)...tt(%}))(
-Include a string as a literal escape sequence.
-The string within the braces should not change the cursor
-position.  Brace pairs can nest.
-)
 item(tt(%LPAR())var(x.true-text.false-text)tt(RPAR()))(
 Specifies a ternary expression.  The character following the var(x) is
 arbitrary; the same character is used to separate the text for the
@@ -176,26 +209,27 @@
 The test character var(x) may be any of the following:
 
 startsitem()
+sitem(tt(!))(True if the shell is running with privileges.)
+sitem(tt(#))(True if the effective uid of the current process is var(n).)
+sitem(tt(?))(True if the exit status of the last command was var(n).)
+sitem(tt(_))(True if at least var(n) shell constructs were started.)
+sxitem(tt(C))
+sitem(tt(/))(True if the current absolute path has at least var(n) elements.)
 sxitem(tt(c))
 sxitem(tt(.))
-sitem(tt(~))(True if the current path, with prefix replacement, has at least var(n) elements.)
-sxitem(tt(/))
-sitem(tt(C))(True if the current absolute path has at least var(n) elements.)
-sitem(tt(t))(True if the time in minutes is equal to var(n).)
-sitem(tt(T))(True if the time in hours is equal to var(n).)
-sitem(tt(d))(True if the day of the month is equal to var(n).)
+sitem(tt(~))(True if the current path, with prefix replacement, has at
+least var(n) elements.)
 sitem(tt(D))(True if the month is equal to var(n) (January = 0).)
-sitem(tt(w))(True if the day of the week is equal to var(n) (Sunday = 0).)
-sitem(tt(?))(True if the exit status of the last command was var(n).)
-sitem(tt(#))(True if the effective uid of the current process is var(n).)
+sitem(tt(d))(True if the day of the month is equal to var(n).)
 sitem(tt(g))(True if the effective gid of the current process is var(n).)
+sitem(tt(L))(True if the tt(SHLVL) parameter is at least var(n).)
 sitem(tt(l))(True if at least var(n) characters have already been
 printed on the current line.)
-sitem(tt(L))(True if the tt(SHLVL) parameter is at least var(n).)
 sitem(tt(S))(True if the tt(SECONDS) parameter is at least var(n).)
+sitem(tt(T))(True if the time in hours is equal to var(n).)
+sitem(tt(t))(True if the time in minutes is equal to var(n).)
 sitem(tt(v))(True if the array tt(psvar) has at least var(n) elements.)
-sitem(tt(_))(True if at least var(n) shell constructs were started.)
-sitem(tt(!))(True if the shell is running with privileges.)
+sitem(tt(w))(True if the day of the week is equal to var(n) (Sunday = 0).)
 endsitem()
 )
 xitem(tt(%<)var(string)tt(<))
@@ -236,15 +270,5 @@
 current directory, followed by a `tt(%)' or `tt(#)', followed by a
 space.  Without the `tt(%<<)', those two characters would be included
 in the string to be truncated.
-)
-xitem(tt(%c))
-xitem(tt(%.))
-item(tt(%C))(
-Trailing component of tt($PWD).
-An integer may follow the `tt(%)' to get more than one component.
-Unless `tt(%C)' is used, tilde contraction is performed first.  These are
-deprecated as tt(%c) and tt(%C) are equivalent to tt(%1~) and tt(%1/),
-respectively, while explicit positive integers have the same effect as for
-the latter two sequences.
 )
 enditem()
diff -ru ../zsh-forge/current/Doc/Zsh/redirect.yo ./Doc/Zsh/redirect.yo
--- ../zsh-forge/current/Doc/Zsh/redirect.yo	Sun May 14 15:08:41 2000
+++ ./Doc/Zsh/redirect.yo	Sat Jun 30 22:53:13 2001
@@ -139,6 +139,7 @@
 with the terminal (assuming file descriptor 1 had been)
 and then file descriptor 1 would be associated with file var(fname).
 sect(Multios)
+cindex(multios)
 pindex(MULTIOS, use of)
 If the user tries to open a file descriptor for writing more than once,
 the shell opens the file descriptor as a pipe to a process that copies
@@ -196,22 +197,22 @@
 when tt(MULTIOS) is unset will truncate bar, and write `tt(foo)' into baz.
 
 sect(Redirections with no command)
-vindex(NULLCMD, use of)
-vindex(READNULLCMD, use of)
-pindex(CSH_NULLCMD, use of)
-pindex(SH_NULLCMD, use of)
 When a simple command consists of one or more redirection operators
 and zero or more parameter assignments, but no command name, zsh can
 behave in several ways.
 
+vindex(NULLCMD, use of)
+pindex(CSH_NULLCMD, use of)
 If the parameter tt(NULLCMD) is not set or the option tt(CSH_NULLCMD) is
 set, an error is caused.  This is the bf(csh) behavior and tt(CSH_NULLCMD)
 is set by default when emulating bf(csh).
 
+pindex(SH_NULLCMD, use of)
 If the option tt(SH_NULLCMD) is set, the builtin `tt(:)' is inserted as a
 command with the given redirections.  This is the default when emulating
 bf(sh) or bf(ksh).
 
+vindex(READNULLCMD, use of)
 Otherwise, if the parameter tt(NULLCMD) is set, its value will be used as a
 command with the given redirections.  If both tt(NULLCMD) and
 tt(READNULLCMD) are set, then the value of the latter will be used instead

