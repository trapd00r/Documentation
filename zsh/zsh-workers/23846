From zsh-workers-return-23846-mason-zsh=primenet.com.au@sunsite.dk Thu Sep 27 12:35:06 2007
Return-Path: <zsh-workers-return-23846-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 2687 invoked from network); 27 Sep 2007 12:34:55 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.3 (2007-08-08) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.3
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 27 Sep 2007 12:34:55 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 9632 invoked from network); 27 Sep 2007 12:34:49 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 27 Sep 2007 12:34:49 -0000
Received: (qmail 21990 invoked by alias); 27 Sep 2007 12:34:46 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 23846
Received: (qmail 21979 invoked from network); 27 Sep 2007 12:34:45 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 27 Sep 2007 12:34:45 -0000
Received: (qmail 9271 invoked from network); 27 Sep 2007 12:34:45 -0000
Received: from acolyte.scowler.net (216.254.112.45)
  by a.mx.sunsite.dk with SMTP; 27 Sep 2007 12:34:38 -0000
Received: by acolyte.scowler.net (Postfix, from userid 1000)
	id 85FDE5C2AF; Thu, 27 Sep 2007 08:34:36 -0400 (EDT)
Date: Thu, 27 Sep 2007 08:34:36 -0400
From: Clint Adams <clint@zsh.org>
To: Nikolai Weibull <now@bitwi.se>
Cc: Mikael Magnusson <mikachu@gmail.com>, zsh-workers@sunsite.dk
Subject: Re: PATCH: _git (large)
Message-ID: <20070927123436.GA18536@scowler.net>
Mail-Followup-To: Nikolai Weibull <now@bitwi.se>,
	Mikael Magnusson <mikachu@gmail.com>, zsh-workers@sunsite.dk
References: <20070925155927.GA22272@scowler.net> <237967ef0709251034u4f1edc29i4ecadbed57bee1d4@mail.gmail.com> <20070925175434.GA25244@scowler.net> <237967ef0709251144t4b553b5dla9ff570de41bbed4@mail.gmail.com> <20070925190011.GA26894@scowler.net> <237967ef0709261616q39d1f76al9e34b8b5fb6603a7@mail.gmail.com> <dbfc82860709270425x1b8c049fieaa4178a378935fc@mail.gmail.com> <20070927114319.GA17017@scowler.net> <dbfc82860709270457h455fd8b7h4b21d9b383d80f7a@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable
In-Reply-To: <dbfc82860709270457h455fd8b7h4b21d9b383d80f7a@mail.gmail.com>
User-Agent: Mutt/1.5.16 (2007-06-11)

On Thu, Sep 27, 2007 at 01:57:27PM +0200, Nikolai Weibull wrote:
> Yes, seems so; now pushed.

Great, merging the following.

Index: Completion/Unix/Command/_git
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
RCS file: /cvsroot/zsh/zsh/Completion/Unix/Command/_git,v
retrieving revision 1.27
diff -u -r1.27 _git
--- Completion/Unix/Command/_git	27 Sep 2007 11:42:52 -0000	1.27
+++ Completion/Unix/Command/_git	27 Sep 2007 12:29:39 -0000
@@ -1,10 +1,4 @@
-#compdef git git-add git-am git-annotate git-apply git-applymbox git-apply=
patch git-archimport git-archive git-bisect git-blame git-branch git-cat-fi=
le git-check-ref-format git-checkout git-checkout-index git-cherry git-cher=
ry-pick git-clean git-clone git-clone-pack git-commit git-commit-tree git-c=
onvert-objects git-count-objects git-cvsexportcommit git-cvsimport git-daem=
on git-describe git-diff git-diff-files git-diff-index git-diff-stages git-=
diff-tree git-fast-import git-fetch git-fetch-pack git-fmt-merge-msg git-fo=
rmat-patch git-fsck git-gc git-get-tar-commit-id git-grep git-hash-object g=
it-http-fetch git-http-push git-imap-send git-index-pack git-init git-insta=
web git-local-fetch git-log git-lost-found git-ls-files git-ls-remote git-l=
s-tree git-mailinfo git-mailsplit git-merge git-merge-base git-merge-file g=
it-merge-index git-merge-one-file git-merge-tree git-mktag git-mktree git-m=
v git-name-rev git-octopus git-pack-objects git-pack-redundant git-pack-ref=
s git-patch-id git-peek-remote git-prune git-prune-packed git-pull git-push=
 git-quiltimport git-read-tree git-rebase git-receive-pack git-reflog git-r=
elink git-remote git-repack gut-runstatus git-config git-request-pull git-r=
erere git-reset git-rev-list git-rev-parse git-revert git-rm git-send-email=
 git-send-pack git-shortlog git-show git-show-branch git-show-index git-ssh=
-fetch git-ssh-upload git-status git-stripspace git-svn git-svnimport git-s=
ymbolic-ref git-tag git-tar-tree git-unpack-file git-unpack-objects git-upd=
ate-index git-update-ref git-update-server-info git-upload-pack git-var git=
-verify-pack git-verify-tag git-whatchanged git-write-tree
-
-# Commands not completed:
-# git-cvsserver
-# git-parse-remote=20
-# git-shell
-# git-sh-setup
+#compdef git git-add git-am git-annotate git-apply git-applymbox git-apply=
patch git-archimport git-archive git-bisect git-blame git-branch git-cat-fi=
le git-check-attr git-check-ref-format git-checkout git-checkout-index git-=
cherry git-cherry-pick git-clean git-clone git-clone-pack git-commit git-co=
mmit-tree git-convert-objects git-count-objects git-cvsexportcommit git-cvs=
import git-cvsserver git-daemon git-describe git-diff git-diff-files git-di=
ff-index git-diff-stages git-diff-tree git-fast-import git-fetch git-fetch-=
pack git-fmt-merge-msg git-for-each-ref git-format-patch git-fsck git-gc gi=
t-get-tar-commit-id git-grep git-hash-object git-http-fetch git-http-push g=
it-imap-send git-index-pack git-init git-instaweb git-local-fetch git-log g=
it-lost-found git-ls-files git-ls-remote git-ls-tree git-mailinfo git-mails=
plit git-merge git-merge-base git-merge-file git-merge-index git-merge-one-=
file git-merge-tree git-mktag git-mktree git-mv git-name-rev git-octopus gi=
t-pack-objects git-pack-redundant git-pack-refs git-patch-id git-peek-remot=
e git-prune git-prune-packed git-pull git-push git-quiltimport git-read-tre=
e git-rebase git-receive-pack git-reflog git-relink git-remote git-repack g=
ut-runstatus git-config git-request-pull git-rerere git-reset git-rev-list =
git-rev-parse git-revert git-rm git-send-email git-send-pack git-sh-setup g=
it-shell git-shortlog git-show git-show-branch git-show-index git-show-ref =
git-ssh-fetch git-ssh-upload git-status git-stripspace git-svn git-svnimpor=
t git-symbolic-ref git-tag git-tar-tree git-unpack-file git-unpack-objects =
git-update-index git-update-ref git-update-server-info git-upload-archive g=
it-upload-pack git-var git-verify-pack git-verify-tag git-whatchanged git-w=
rite-tree
=20
 # TODO: All if (( words[(I)-option] )) should be turned into
 # if (( words[(I)-option] > 0 && words[(I)-option] < CURRENT )), as the us=
er
@@ -21,7 +15,7 @@
=20
 declare -g abbrev_arg
=20
-abbrev_arg=3D'--abbrev=3D-[set minimum SHA1 display-length]: :_guard "[[\:=
digit\:]]##" length'
+abbrev_arg=3D'--abbrev=3D-[set minimum SHA1 display-length]: :_guard "[[\:=
digit\:]]#" length'
=20
 declare -g find_copies_harder_arg=3D
=20
@@ -84,12 +78,12 @@
 declare -ga fetch_args
=20
 fetch_args=3D(
-  '-a[fetch all objects]'
   '-c[fetch commit objects]'
-  '--recover[recover from a failed fetch]'
   '-t[fetch trees associated with commit objects]'
+  '-a[fetch all objects]'
   '-v[show what is downloaded]'
   '-w[write commit-id into the filename under "$GIT_DIR/refs/<filename>"]:=
filename'
+  '--recover[recover from a failed fetch]'
 )
=20
 declare -ga merge_args
@@ -128,11 +122,15 @@
 declare -g help_arg=3D
 help_arg=3D'-h[display usage information]'
=20
+declare -ga upload_pack_arg
+upload_pack_arg=3D('(-u --upload-pack)'{-u,--upload-pack=3D-}'[specify pat=
h to git-upload-pack on remote side]:remote path')
+
+
 declare -ga common_fetch_args
=20
 common_fetch_args=3D(
   '(-a --append)'{-a,--append}'[append ref names and object names of fetch=
ed refs to "$GIT_DIR/FETCH_HEAD"]'
-  '--upload-pack[pass --exec=3D<upload-pack> to git-fetch-pack]:remote pac=
k'
+  $upload_pack_arg
   $force_ref_arg
   $tags_fetch_arg
   '(-k --keep)'{-k,--keep}'[keep downloaded pack]'
@@ -155,6 +153,9 @@
=20
 shared_arg=3D'--shared=3D-[share repository amongst several users]::permis=
sions:__git_repository_permissions'
=20
+declare -g thin_arg=3D
+thin_arg=3D'--thin[minimize number of objects to be sent]'
+
 __git_zstyle_default () {
   zstyle -t $1 $2
   if (( $status =3D=3D 2 )); then
@@ -207,6 +208,7 @@
     'archive:create an archive of files from a named tree'
     'blame:blame file lines on commits'
     'cat-file:provide content or type information for repository objects'
+    'check-attr:display gitattributes information'
     'check-ref-format:makes sure that a reference-name is well formed'
     'checkout-index:copy files from the index to the working directory'
     'cherry:find commits not merged upstream'
@@ -220,7 +222,6 @@
     'diff-stages:compare two "merge states" in the index file'
     'diff-tree:compare the content and mode of blobs found via two tree ob=
jects'
     'fetch-pack:receive missing objects from another repository'
-    'fmt-merge-msg:produce merge commit message'
     'imap-send:dump mailbox from stdin into imap folder'
     'index-pack:build pack index file for an existing packed archive'
     'local-fetch:duplicate another git repository on a local system'
@@ -231,7 +232,6 @@
     'merge-base:find as good a common ancestor as possible for a merge'
     'merge-file:run a three-way file merge'
     'merge-index:run merge for files needing merging'
-    'merge-one-file:standard helper-program to use with merge-index'
     'merge-tree:show three-way merge without touching index'
     'mktag:create tag object'
     'mktree:build tree-object from ls-tree formatted text'
@@ -253,6 +253,7 @@
     'shortlog:summarize git log output'
     'show:show various types of objects'
     'show-index:display contents of a pack idx file'
+    'show-ref:list references in a local repository'
     'symbolic-ref:read and modify symbolic references'
     'tar-tree:create tar archive of the files in the named tree'
     "unpack-file:create temporary file with blob's contents"
@@ -269,7 +270,7 @@
     'format-patch:prepare patches for e-mail submission'
     'ls-files:information about files in the index/working directory'
     'config:get and set options in "$GIT_DIR/config"'
-    'instaweb:insantly browse your working repository in gitweb'
+    'instaweb:instantly browse your working repository in gitweb'
     'remote:manage set of tracked repositories'
     'send-email:send patch-e-mails out of "format-patch" output'
     'update-index:modify index in some given way')
@@ -286,6 +287,7 @@
   local -a ancillary_commands
   ancillary_commands=3D(
     'convert-objects:convert old-style git repository'
+    'for-each-ref:output information on each ref'
     'get-tar-commit-id:extract commit ID from an archive created using tar=
-tree'
     'hash-object:compute object ID from a file'
     'patch-id:compute unique ID for a patch'
@@ -296,15 +298,19 @@
   internal_commands=3D(
     'daemon:start a really simple server for git repositories'
     'fast-import:import information into git directly'
+    'fmt-merge-msg:produce merge commit message'
     'http-fetch:download remote git repository via HTTP'
     'http-push:push missing objects using HTTP/DAV'
+    'merge-one-file:standard helper-program to use with merge-index'
     'receive-pack:command invoked by send-pack to receive what is pushed t=
o it'
     'rev-parse:pick out and massage parameters for other git commands'
     'runstatus:a helper for git-status and git-commit'
     'send-pack:push to remote repository, intelligently'
+    'shell:restricted login shell for GIT-only SSH access'
     'ssh-fetch:pull from remote repository over an SSH connection'
     'ssh-upload:"server-side" helper program used by ssh-fetch'
     'stripspace:filter out empty lines'
+    'upload-archive:send archive back to git-archive'
     'upload-pack:command invoked by clone-pack and fetch-pack')
=20
   local wanted_commands
@@ -890,9 +896,30 @@
   esac
 }
=20
+# TODO: Better completion for --format: should complete %(field) stuff, th=
at
+# is, %(refname), %(objecttype), %(objectsize), %(objectname) with optiona=
l =E2=80=98*=E2=80=99
+# in front.
+# TODO: Documentation says that --count can be given * number of times, but
+# sources beg to differ, allowing only one.
+(( $+functions[_git-for-each-ref] )) ||
+_git-for-each-ref () {
+  _arguments -S \
+    '--format=3D-[output format of ref information]:format' \
+    '(-s --shell -p --perl --python --tcl)'{-s,--shell}'[use string litera=
ls suitable for sh]' \
+    '(-s --shell -p --perl --python --tcl)'{-p,--perl}'[use string literal=
s suitable for Perl]' \
+    '(-s --shell -p --perl          --tcl)'--python'[use string literals s=
uitable for Python]' \
+    '(-s --shell -p --perl --python      )'--tcl'[use string literals suit=
able for Tcl]' \
+    '--count=3D-[maximum number of refs to iterate over]: :_guard "[[\:dig=
it\:]]#" "maximum number of refs"' \
+    '--sort=3D-[key to sort refs by]:sort key:__git_ref_sort_keys' \
+    ':: :_guard "([^-]?#|)" pattern' && ret=3D0
+}
+
 (( $+functions[_git-fmt-merge-msg] )) ||
 _git-fmt-merge-msg () {
-  _message "you probably should not be issuing this command"
+  arguments \
+    '(          --no-summary)--summary[add one-line descriptions from comm=
its being merged]' \
+    '(--summary             )--no-summary[do not add one-line descriptions=
 from commits being merged]' \
+    '(-F --file)'{-F,--file}'[specify list of merged objects from file]:fi=
le:_files' && ret=3D0
 }
=20
 (( $+functions[_git-fsck] )) ||
@@ -909,6 +936,12 @@
=20
 (( $+functions[_git-ls-files] )) ||
 _git-ls-files () {
+  local no_empty_directory_arg
+
+  if (( words[(I)--directory] )); then
+    no_empty_directory_arg=3D'--no-empty-directory[do not list empty direc=
tories]'
+  fi
+
   _arguments -S \
     $nul_arg \
     '(-c --cached)'{-c,--cached}'[show cached files in the output]' \
@@ -918,15 +951,17 @@
     '(-m --modified)'{-m,--modified}'[show modified files in the output]' \
     '(-o --others)'{-o,--others}'[show other files in the output]' \
     '(-s --stage)'{-s,--stage}'[show stage files in the output]' \
-    '(-t -v)-t[identify each files status (HMRCK?)]' \
     '(-u --unmerged)'{-u,--unmerged}'[show unmerged files in the output]' \
-    '(-t -v)-v[identify each files status (hmrck?)]' \
+    '(   -v)-t[identify each files status (HMRCK?)]' \
+    '(-t   )-v[identify each files status (hmrck?)]' \
     '*'{-x,--exclude=3D-}'[skip files matching given pattern]:file pattern=
' \
     '*'{-X,--exclude-from=3D-}'[skip files matching patterns in given file=
]:file:_files' \
     '*--exclude-per-directory=3D-[skip directories matching patterns in gi=
ven file]:file:_files' \
     '--directory[if a whole directory is classified as "other", show just =
its name]' \
+    $no_empty_directory_arg \
     '--error-unmatch[if any <file> does not appear in the index, treat thi=
s as an error]' \
     '--full-name[force paths to be output relative to the project top dire=
ctory]' \
+    $abbrev_arg \
     '*::index file:_files' && ret=3D0
 }
=20
@@ -942,6 +977,7 @@
     {--name-only,--name-status}'[list only filenames, one per line]' \
     '-r[recurse into subdirectories]' \
     '-t[show tree entries even when going to recurse them]' \
+    '--full-name[output full path-names]' \
     ':tree-ish:__git_tree_ishs' \
     '*::tree file:->files' && ret=3D0
=20
@@ -977,6 +1013,7 @@
 _git-name-rev () {
   _arguments -S \
     '--tags[only use tags to name the commits]' \
+    '--refs=3D-[only use refs matching given pattern]: :_guard "?#" "shell=
 pattern"' \
     '(--stdin :)--all[list all commits reachable from all refs]' \
     '(--all :)--stdin[read from stdin and append revision-name]' \
     '(--stdin --all)*:commit-ish:__git_revisions' && ret=3D0
@@ -1006,13 +1043,32 @@
     _arguments -S \
       $revision_arguments \
       '(--pretty)--header[show commit headers]' \
+      '--remote-empty[stop when a given path disappears from the tree]' \
       '--timestamp[undocumented]' \
-      '--bisect[show only the middlemost commit object]' \
+      '(         --bisect-vars)--bisect[show only the middlemost commit ob=
ject]' \
+      '(--bisect              )--bisect-vars[same as --bisect, outputing s=
hell-evalable code]' \
       '--stdin[read commit objects from standard input]' \
       '*:commit id:__git_commits2' && ret=3D0
   fi
 }
=20
+(( $+functions[_git-show-ref] )) ||
+_git-show-ref () {
+  _arguments -S \
+    - list \
+      '(-h --head)'{-h,--head}'[show the HEAD reference]' \
+      '--tags[show only "refs/tags"]' \
+      '--heads[show only "refs/heads"]' \
+      '(-d --dereference)'{-d,--dereference}'[dereference tags into object=
 IDs as well]' \
+      '(-s --hash)'{-s+,--hash=3D-}'[only show the SHA-1 hash, not the ref=
erence name]:: :_guard "[[\:digit\:]]#" length' \
+      '--verify[enable stricter reference checking]' \
+      $abbrev_arg \
+      '(-q --quiet)'{-q,--quiet}'[do not print any results to stdout]' \
+      '*: :_guard "([^-]?#|)" pattern' \
+    - exclude \
+      '--exclude-existing=3D-[filter out existing refs from stdin]:: :_gua=
rd "([^-]?#|)" pattern' && ret=3D0
+}
+
 (( $+functions[_git-show] )) ||
 _git-show () {
   declare -a revision_arguments
@@ -1032,6 +1088,7 @@
 (( $+functions[_git-tar-tree] )) ||
 _git-tar-tree () {
   _arguments \
+    '--remote=3D-[retrieve a tar archive from a remote repository]:__git_r=
emote_repository' \
     ':tree-ish:__git_tree_ishs' \
     ':base:_files' && ret=3D0
 }
@@ -1068,11 +1125,16 @@
 (( $+functions[_git-fetch-pack] )) ||
 _git-fetch-pack () {
   _arguments \
-    $exec_arg \
-    '-k[do not invoke "git-unpack-objects" on received data]'
-    '-q[pass "-q" flag to "git-unpack-objects"]' \
+    '--all[fetch all remote refs]' \
+    '(-q --quiet)'{-q,--quiet}'[make output less verbose]' \
+    '(-k --keep)'{-k,--keep}'[do not invoke git-unpack-objects on received=
 data]' \
+    $thin_arg \
+    '(--upload-pack --exec)'{--upload-pack=3D-,--exec=3D-}'[specify path t=
o git-upload-pack on remote side]:remote path' \
+    '--depth=3D-[limit fetching to ancestor-chains not longer than given n=
umber]: :_guard "[[\:digit\:]]#" "maximum ancestor-chain length"' \
+    '--no-progress[do not show progress]' \
+    $verbose_arg \
     ':repository:__git_any_repositories' \
-    '*:head:__git_heads' && ret=3D0
+    '*:references:__git_references' && ret=3D0
 }
=20
 (( $+functions[_git-fast-import] )) ||
@@ -1095,6 +1157,7 @@
 _git-http-fetch () {
   _arguments \
     $fetch_args \
+    '(1)--stdin[read commit ids and refs from standard input]' \
     ':commit id:__git_commits' \
     ':URL:_urls' && ret=3D0
 }
@@ -1102,11 +1165,14 @@
 (( $+functions[_git-http-push] )) ||
 _git-http-push () {
   _arguments \
+    '--all[verify that all objects in local ref history exist remotely]' \
     '--complete[do not assume that the remote repository is complete]' \
-    $force_ref_arg \
+    '--force[allow refs that are not ancestors to be updated]' \
     '--verbose[report the list of objects being walked locally and sent to=
 the remote]' \
+    '(   -D)-d[remove refs from remote repository]' \
+    '(-d   )-D[forcefully remove refs from remote repository]' \
     ':URL:_urls' \
-    '*:remote refs' && ret=3D0
+    '*:remote refs:__git_remote_references' && ret=3D0
 }
=20
 (( $+functions[_git-local-fetch] )) ||
@@ -1116,17 +1182,30 @@
     '-l[hard-link objects]' \
     '-n[do not copy objects]' \
     '-s[sym-link objects]' \
+    '(1)--stdin[read commit ids and refs from standard input]' \
     ':commit id:__git_commits' \
     ':directory:_directories' && ret=3D0
 }
=20
+# TODO: --tags undocumented.
+# TODO: --heads undocumented.
+# TODO: --refs undocumented.
 (( $+functions[_git-peek-remote] )) ||
 _git-peek-remote () {
   _arguments \
+    '--upload-pack=3D-[specify path to git-upload-pack on remote side]:rem=
ote path' \
     $exec_arg \
+    '--tags[undocumented]' \
+    '--heads[undocumented]' \
+    '--refs[undocumented]' \
     ':repository:__git_repository' && ret=3D0
 }
=20
+(( $+functions[_git-sh-setup] )) ||
+_git-sh-setup () {
+  _message "you probably should not be issuing this command; it is an inte=
rnal git helper"
+}
+
 # TODO: --dry-run undocumented.
 # TODO: -n undocumented.
 # TODO: --stale-fix undocumented.
@@ -1179,17 +1258,62 @@
=20
 (( $+functions[_git-receive-pack] )) ||
 _git-receive-pack () {
-  _message "you probably should not be issuing this command"
+  _arguments \
+    ':directory to sync into:_directories' && ret=3D0
+}
+
+(( $+functions[_git-shell] )) ||
+_git-shell () {
+  local curcontext=3D$curcontext state line
+  declare -A opt_args
+
+  _arguments -C \
+    '-c[command to execute]:command:->commands' \
+    ':argument to command:->arguments' && ret=3D0
+
+  case $state in
+    (commands)
+      declare -a commands
+
+      commands=3D(git-receive-pack git-upload-pack)
+
+      _describe -t commands command commands && ret=3D0
+      ;;
+    (arguments)
+      case $line[1] in
+        (git-receive-pack)
+          local expl
+
+          _description directories expl 'directory to sync into'
+          _directories $expl
+          ;;
+        (git-upload-pack)
+          local expl
+
+          _description directories expl 'directory to sync from'
+          _directories $expl
+          ;;
+      esac
+      ;;
+  esac
+}
+
+(( $+functions[_git-upload-archive] )) ||
+_git-upload-archive () {
+  _arguments \
+    ':directory to get tar archive from:_directories' && ret=3D0
 }
=20
 (( $+functions[_git-send-pack] )) ||
 _git-send-pack () {
   _arguments \
-    $exec_arg \
+    '(--receive-pack --exec)'{--receive-pack=3D-,--exec=3D-}'[specify path=
 to git-receive-pack on remote side]:remote path'
     '--all[update all refs that exist locally]' \
     '--force[update remote orphaned refs]' \
+    $verbose_arg \
+    $thin_arg \
     ':repository:__git_any_repositories' \
-    '*:remote refs' && ret=3D0
+    '*:remote refs:__git_remote_references' && ret=3D0
 }
=20
 (( $+functions[_git-ssh-fetch] )) ||
@@ -1217,6 +1341,8 @@
 (( $+functions[_git-upload-pack] )) ||
 _git-upload-pack () {
   _arguments \
+    '--strict[do not try <directory>/.git/ if <directory> is not a git dir=
ectory' \
+    '--timeout=3D-[interrupt transfer after given number of seconds of ina=
ctivity]: :_guard "[[\:digit\:]]" "inactivity timeout"' \
     ':directory:_directories' && ret=3D0
 }
=20
@@ -1487,7 +1613,7 @@
     '(-q --quiet)'{-q,--quiet}'[operate quietly]' \
     '-n[do not checkout HEAD after clone is complete]' \
     '(-o --origin)'{-o,--origin}'[use given name instead of "origin" as br=
anch name]:name:__git_guard_branch-name' \
-    '(-u --upload-pack)'{-u,--uploadpack}'[specify path to git-upload-pack=
 on remote side]:remote path' \
+    $upload_pack_arg \
     $template_arg \
     '--depth[create a shallow clone, given number of revisions deep]: :_gu=
ard "[[\:digit\:]]##" depth' \
     ':repository:__git_any_repositories' \
@@ -1655,6 +1781,7 @@
   _arguments \
     '(-h --heads)'{-h,--heads}'[show only refs under refs/heads]' \
     '(-t --tags)'{-t,--tags}'[show only refs under refs/tags]' \
+    $upload_pack_arg \
     ':repository:__git_any_repositories' \
     '*: :__git_references' && ret=3D0
 }
@@ -1858,6 +1985,30 @@
     '::signoff file:__git_signoff_file' && ret=3D0
 }
=20
+# TODO: Need to combine the list of attributes defined in __git_attributes.
+(( $+functions[_git-check-attr] )) ||
+_git-check-attr () {
+  local -a attributes
+
+  attributes=3D(crlf ident filter diff merge)
+
+  local only_attributes=3D1
+  for (( i =3D 2; i < $#words; i++ )); do
+    if (( attributes[(I)$words[i]] =3D=3D 0 )); then
+      only_attributes=3D0
+      break
+    fi
+  done
+
+  if (( !only_attributes || words[(I)--] )); then
+    __git_files && ret=3D0
+  else
+    _alternative \
+      'files:file:__git_files' \
+      'attributes:attribute:__git_attributes' && ret=3D0
+  fi
+}
+
 # TODO: archive/branch can use _arch_archives perhaps?
 (( $+functions[_git-archimport] )) ||
 _git-archimport () {
@@ -1922,6 +2073,11 @@
     ':cvsmodule' && ret=3D0
 }
=20
+(( $+functions[_git-cvsserver] )) ||
+_git-cvsserver () {
+  _message "you probably should not be issuing this command; it is an inte=
rnal git helper"
+}
+
 (( $+functions[_git-lost-found] )) ||
 _git-lost-found () {
   _nothing
@@ -2056,19 +2212,31 @@
=20
 # TODO: do better than _directories?  The directory needs to be a git-repo=
sitory,
 # so one could check for a required file in the given directory.
+# TODO: --interpolated-path should complete %H, %CH, %IP, %P, and %D.
 (( $+functions[_git-daemon] )) ||
 _git-daemon () {
   _arguments -S \
     '--strict-paths[match paths exactly]' \
-    '--base-path=3D[remap all the path requests as relative to the given p=
ath]:path:_directories' \
+    '--base-path=3D-[remap all the path requests as relative to the given =
path]:path:_directories' \
+    '--interpolated-path=3D-[dynamically construct alternate paths]:path:_=
directories' \
     '--export-all[allow pulling from all repositories without verification=
]' \
-    '(--port)--inetd[run server as an inetd service]' \
-    '(--inetd)--port=3D-[specify port to listen to]' \
-    '--init-timeout=3D-[specify timeout between connection and request]' \
-    '--timeout=3D-[specify timeout for sub-requests]' \
+    '(--port --listen --user --group)--inetd[run server as an inetd servic=
e]' \
+    '(--inetd)--listen=3D-[listen on a specific IP address or hostname]:ho=
stname:_hosts' \
+    '(--inetd)--port=3D-[specify port to listen to]:port:_ports' \
+    '--init-timeout=3D-[specify timeout between connection and request]: :=
_guard "[[\:digit\:]]#" timeout' \
+    '--timeout=3D-[specify timeout for sub-requests]: :_guard "[[\:digit\:=
]]#" timeout' \
     '--syslog[log to syslog instead of stderr]' \
-    '--user-path=3D[allow ~user notation to be used in requests]::path:_di=
rectories' \
+    '--user-path=3D-[allow ~user notation to be used in requests]::path:_d=
irectories' \
     '--verbose[log details about incoming connections and requested files]=
' \
+    '--reuseaddr[reuse addresses when already bound]' \
+    '(--syslog)--detach[detach from the shell]' \
+    '--pid-file=3D-[save the process id in given file]:pid file:_files' \
+    '--user=3D-[set uid of daemon]:user:_users' \
+    '--group=3D-[set gid of daemon]:group:_groups' \
+    '--enable=3D-[enable site-wide service]:service:__git_daemon_service' \
+    '--disable=3D-[disable site-wide service]:service:__git_daemon_service=
' \
+    '--allow-override[allow overriding site-wide service]:service:__git_da=
emon_service' \
+    '--forbid-override[forbid overriding site-wide service]:service:__git_=
daemon_service' \
     '*:repository:_directories' && ret=3D0
 }
=20
@@ -2676,12 +2844,6 @@
=20
 (( $+functions[__git_tag_ids] )) ||
 __git_tag_ids () {
-  local -a refs
-
-  refs=3D(${${(f)"$(_call_program tag_ids git ls-remote --tags ./. 2>/dev/=
null)"}%$'\t'*})
-  __git_command_successful || return
-
-  _wanted tag_id expl 'tag object hash' compadd - $refs
 }
=20
 (( $+functions[__git_heads_or_tags] )) ||
@@ -2747,6 +2909,11 @@
   _wanted references expl 'references' compadd - $_git_local_refs_cache
 }
=20
+(( $+functions[__git_remote_references] )) ||
+__git_remote_references () {
+  __git_references
+}
+
 (( $+functions[__git_branch_names] )) ||
 __git_branch_names () {
   local expl
@@ -2758,6 +2925,8 @@
   _wanted branch-names expl branch-name compadd $* - $branch_names
 }
=20
+# TODO: Add merge.*.(name|driver|recursive) and diff.*.(command|funcname) =
(see
+# gitattributes(5)).
 (( $+functions[__git_config_name] )) ||
 __git_config_name () {
   local label=3Dnames
@@ -3829,11 +3998,72 @@
   _describe -t symbolic-revisions 'symbolic revision' revisions -S ':' -r =
': '
 }
=20
+# TODO: numparent is undocumented.
+(( $+functions[__git_ref_sort_keys] )) ||
+__git_ref_sort_keys () {
+  compset -P '-'
+
+  local -a keys
+
+  keys=3D(
+    'refname:the name of the ref'
+    'objecttype:the type of the object'
+    'objectsize:the size of the object'
+    'objectname:the object name (SHA-1)'
+    'tree:the tree header-field'
+    'parent:the parent header-field'
+    'numparent:undocumented'
+    'object:the object header-field'
+    'type:the type header-field'
+    'tag:the tag header-field'
+    'author:the author header-field'
+    'authorname:the name component of the author header-field'
+    'authoremail:the email component of the author header-field'
+    'authordate:the date component of the author header-field'
+    'committername:the name component of the committer header-field'
+    'committeremail:the email component of the committer header-field'
+    'committerdate:the date component of the committer header-field'
+    'taggername:the name component of the tagger header-field'
+    'taggeremail:the email component of the tagger header-field'
+    'taggerdate:the date component of the tagger header-field'
+    'creatorname:the name component of the creator header-field'
+    'creatordate:the date component of the creator header-field'
+    'subject:the subject of the message'
+    'body:the body of the message'
+    'body:the contents of the message (subject and body)')
+
+  _describe -t sort-keys 'sort key' keys
+}
+
+(( $+functions[__git_daemon_service] )) ||
+__git_daemon_service () {
+  local -a services
+
+  services=3D(
+    'upload-pack:serve git-fetch-pack and git-peek-remote clients'
+    'upload-archive:serve git-archive --remote clients')
+
+  _describe -t services 'service' services
+}
+
+(( $+functions[__git_attributes] )) ||
+__git_attributes () {
+  local -a attributes
+
+  attributes=3D(
+    'crlf:line-ending convention'
+    'ident:ident substitution'
+    'filter:filters'
+    'diff:textual diff'
+    'merge:merging strategy')
+
+  _describe -t attributes 'attribute' attributes
+}
+
 # ---
=20
 # TODO: How do we do -/n/ here?
 # --reflog undocumented
-# --left-right undocumented
 # -m undocumented
 # -v undocumented
 # --root undocumented
@@ -3855,6 +4085,7 @@
     '(          --until --before)--min-age[minimum age of commits to outpu=
t]: :_guard "[[\:digit\:]]#" timestamp'
     '(--min-age --until --before)'{--until=3D-,--before=3D-}'[show commits=
 older than given date]: :_guard "[[\:digit\:]]#" timestamp'
     '--all[show all commits from refs]'
+    '--cherry-pick[omit any same-change commits]'
     '--reflog[show all commits from reflogs]'
     '(-g --walk-reflogs)'{-g,--walk-reflogs}'[walk reflog entries from mos=
t recent to oldest]'
     '*--not[reverses meaning of ^ prefix for revisions that follow]'
@@ -3868,7 +4099,7 @@
     '--remove-empty[stop when a given path disappears from the tree]'
     '--no-merges[do not print commits with more than one parent]'
     '--boundary[output uninteresting commits at the boundary]'
-    '--left-right[undocumented]'
+    '--left-right[mark which side of a symmetric diff a commit is reachabl=
e from]'
     '(          --objects-edge)--objects[show object ids of objects refere=
nced by the listed commits]'
     '(--objects               )--objects-edge[show object ids of objects r=
eferenced by the listed and excluded commits]'
     '(   -t)-r[show recursive diffs]'
@@ -3886,6 +4117,9 @@
     '--abbrev-commit[undocumented]'
     '--full-history[undocumented]'
     '--relative-date[show dates relative to the current time]'
+    "--date=3D-[format of date output]:date format:((relative\:'show dates=
 relative to the current time'
+                                                   local\:\"show timestamp=
s in user's local timezone\"
+                                                   default\:'show timestam=
p in the original timezone\""
     '--author=3D-[limit commits to those by the given author]:author'
     '--committer=3D-[limit commits to those by the given committer]:commit=
ter'
     '--grep=3D-[limit commits to those with log messages matching the give=
n pattern]:pattern'

