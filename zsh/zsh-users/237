From tbp@cs.monash.edu.au Fri Jun  7 11:32:28 1996
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by melb.werple.net.au (8.7.5/8.7.3/2) with ESMTP id LAA23362 for <mason@werple.mira.net.au>; Fri, 7 Jun 1996 11:32:25 +1000 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id VAA01643; Thu, 6 Jun 1996 21:21:08 -0400 (EDT)
Resent-Date: Thu, 6 Jun 1996 21:20:42 -0400 (EDT)
From: Tim Pickett <tbp@cs.monash.edu.au>
Message-Id: <199606070117.LAA10739@molly.cs.monash.edu.au>
Subject: Re: Auto-created completion.
To: rodger@hpbs2245.boi.hp.com (Rodger Anderson)
Date: Fri, 7 Jun 1996 11:17:32 +1000 (EST)
Cc: zsh-users@math.gatech.edu
In-Reply-To: <199606061451.AA003572668@hpbs2245.boi.hp.com> from "Rodger Anderson" at Jun 6, 96 08:51:07 am
Reply-To: tlm@yoyo.cc.monash.edu.au
X-TLM-Quote: It's a dinglehopper!
X-Mailer: ELM [version 2.4 PL24 ME8b]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Resent-Message-ID: <"exIKs3.0.AP.fFujn"@euclid>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/237
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu
Content-Length: 2694
Status: OR

> Zsh would be able to automatically figure out what each program might
> need for options/arguments and do completion accordingly.
> This would require that every program have some way to tell zsh what
> its options are, so this idea is pretty far-fetched.

This would involve a lot of cooperation on the part of developers.  You
certainly couldn't expect all programs to support this for all the
different completion standards (it'd need to check the $SHELL variable
to determine the type of shell and print the corresponding
compctl-oe-equivalent for that shell). 

You might be able to get
programs which accept GNU options to agree on a standard, say,
--complete, which would do this.  Then in your shell you can say 'eval
`program --complete`' to add to the shell's compctl list.  For a bit of
syntactic sugar you yould have zsh do something like 'compctl -V
program' (or some other letter not yet used) which does this and marks
the completion as autoloadable so the eval is only done when needed.  On
the plus side this might speed up zsh startup, which for me is pretty
slow given my 100 compctls.  (Which brings up another point - even if we
can't have programs supply their own compctls, autoloadable compctls
might be a good idea in itself.)

On another level, people expect different things from completion.  My
GNU ls compctl looks like this:

-f -x "s[--format]" -k "(long verbose commas horizontal across vertical single-column)" -P "=" - "s[--sort]" -k "(none time size extension)" -P "=" - "s[--time]" -k "(atime ctime access use status)" -P "=" - "s[--width=][--tabsize=][--ignore=][-w][-T][-I] , c[-1,-w][-1,-T][-1,-I]" -k "( )" - "s[--]" -k "(all\  escape\  directory\  inode\  kilobytes\  numeric-uid-gid\  no-group\  hide-control-chars\  reverse\  size\  width= tabsize= almost-all\  ignore-backups\  classify\  file-type\  full-time\  ignore= dereference\  literal\  quote-name\  no-color\  7bit\  8bit\  recursive\  sort= format= time= help\  version\ )" -S "" - "s[-]" -k "(a b c d f g i k l m n o p q r s t u x A B C F G L N Q R S U X 1 w T I)" 

But other people might be content with (indeed, prefer) something like:

ls -f

Which should ls provide?  For that matter, zsh has undergone several
changes.  Notably the -K option is relatively new.  Should programs
check the VERSION shell variable too and attempt to provide the right
compctl string for each version?

What might be more feasible is simply to have archives of compctl
and have people download them if they want and have them autoloaded as
needed.

-- 
Tim Pickett                                     tlm@yoyo.cc.monash.edu.au
"Oh, Caesar, emperor of Rome. [zzzt]"          tbp@molly.cs.monash.edu.au


