From zsh-workers-return-23962-mason-zsh=primenet.com.au@sunsite.dk Mon Oct 15 16:46:05 2007
Return-Path: <zsh-workers-return-23962-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 8029 invoked from network); 15 Oct 2007 16:45:56 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.3 (2007-08-08) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.3
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 15 Oct 2007 16:45:56 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 82932 invoked from network); 15 Oct 2007 16:45:50 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 15 Oct 2007 16:45:50 -0000
Received: (qmail 16263 invoked by alias); 15 Oct 2007 16:45:47 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 23962
Received: (qmail 16247 invoked from network); 15 Oct 2007 16:45:46 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 15 Oct 2007 16:45:46 -0000
Received: (qmail 82641 invoked from network); 15 Oct 2007 16:45:46 -0000
Received: from acolyte.scowler.net (216.254.112.45)
  by a.mx.sunsite.dk with SMTP; 15 Oct 2007 16:45:41 -0000
Received: by acolyte.scowler.net (Postfix, from userid 1000)
	id 227585C58C; Mon, 15 Oct 2007 12:45:38 -0400 (EDT)
Date: Mon, 15 Oct 2007 12:45:39 -0400
From: Clint Adams <clint@zsh.org>
To: Peter Stephenson <pws@csr.com>
Cc: zsh-workers@sunsite.dk
Subject: Re: PATCH: make curses module not need wideness
Message-ID: <20071015164539.GA10021@scowler.net>
Mail-Followup-To: Peter Stephenson <pws@csr.com>, zsh-workers@sunsite.dk
References: <20071014042142.GA27713@scowler.net> <071014092646.ZM21802@torch.brasslantern.com> <20071014170856.GA14631@scowler.net> <071014151608.ZM26588@torch.brasslantern.com> <200710150911.l9F9BqR1003986@news01.csr.com> <20071015143456.GA4979@scowler.net> <200710151458.l9FEwUb1001931@news01.csr.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <200710151458.l9FEwUb1001931@news01.csr.com>
User-Agent: Mutt/1.5.16 (2007-06-11)

On Mon, Oct 15, 2007 at 03:58:30PM +0100, Peter Stephenson wrote:
> Something like that.

Here goes nothing.

Index: Doc/Zsh/mod_curses.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/mod_curses.yo,v
retrieving revision 1.3
diff -u -r1.3 mod_curses.yo
--- Doc/Zsh/mod_curses.yo	15 Oct 2007 13:37:41 -0000	1.3
+++ Doc/Zsh/mod_curses.yo	15 Oct 2007 16:44:55 -0000
@@ -17,8 +17,8 @@
 
 With tt(-a), create a window with var(nlines) lines and var(ncols) columns.
 Its upper left corner will be placed at row var(begin_y) and column
-var(begin_x) of the screen.  var(targetwin) must be an integer between 1
-and 9 inclusive, and refer to a window that is not currently assigned.
+var(begin_x) of the screen.  var(targetwin) is a string and refers
+to the name of a window that is not currently assigned.
 
 Use tt(-d) to delete a window created with tt(-a).
 
Index: Src/Modules/curses.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/Modules/curses.c,v
retrieving revision 1.6
diff -u -r1.6 curses.c
--- Src/Modules/curses.c	15 Oct 2007 13:37:41 -0000	1.6
+++ Src/Modules/curses.c	15 Oct 2007 16:44:55 -0000
@@ -39,9 +39,13 @@
 #include "curses.mdh"
 #include "curses.pro"
 
-#define ZCURSES_MAX_WINDOWS 9
+typedef struct zc_win {
+    WINDOW *win;
+    char *name;
+} *ZCWin;
 
-static WINDOW *zcurses_WIN[ZCURSES_MAX_WINDOWS + 1];
+WINDOW *win_zero;
+LinkList zcurses_windows;
 
 #define ZCURSES_ERANGE 1
 #define ZCURSES_EDEFINED 2
@@ -52,7 +56,6 @@
 
 static int zc_errno;
 
-/**/
 static const char *
 zcurses_strerror(int err)
 {
@@ -65,94 +68,144 @@
     return errs[(err < 1 || err > 2) ? 0 : err];
 }
 
-/**/
-static unsigned
-zcurses_validate_window(char *win, int criteria)
+static LinkNode
+zcurses_getwindowbyname(char *name)
 {
-    unsigned target;
+    LinkNode node;
+    ZCWin w;
 
-    if (win==NULL) {
-	zc_errno = ZCURSES_ERANGE;
-	return -1;
-    }
+    for (node = firstnode(zcurses_windows); node; incnode(node))
+	if (w = (ZCWin)getdata(node), !strcmp(w->name, name))
+	    return node;
 
-    target = (unsigned)atoi(win);
+    return NULL;
+}
 
-    if (target > ZCURSES_MAX_WINDOWS || target < 1) {
+static LinkNode
+zcurses_validate_window(char *win, int criteria)
+{
+    LinkNode target;
+
+    if (win==NULL || strlen(win) < 1) {
 	zc_errno = ZCURSES_ERANGE;
-	return -1;
+	return NULL;
     }
 
-    if (zcurses_WIN[target]!=NULL && (criteria & ZCURSES_UNUSED)) {
+    target = zcurses_getwindowbyname(win);
+
+    if (target && (criteria & ZCURSES_UNUSED)) {
 	zc_errno = ZCURSES_EDEFINED;
-	return -1;
+	return NULL;
     }
 
-    if (zcurses_WIN[target]==NULL && (criteria & ZCURSES_USED)) {
+    if (!target && (criteria & ZCURSES_USED)) {
 	zc_errno = ZCURSES_EUNDEFINED;
-	return -1;
+	return NULL;
     }
 
+    zc_errno = 0;
     return target;
 }
 
+static int
+zcurses_free_window(ZCWin w)
+{
+    if (delwin(w->win)!=OK)
+	return 1;
+
+    if (w->name)
+	zsfree(w->name);
+
+    zfree(w, sizeof(struct zc_win));
+
+    return 0;
+}
+
 /**/
 static int
 bin_zcurses(char *nam, char **args, Options ops, UNUSED(int func))
 {
-    unsigned targetwin;
-
     if (OPT_ISSET(ops,'a')) {
 	int nlines, ncols, begin_y, begin_x;
+        ZCWin w;
+
+	if (zcurses_validate_window(args[0], ZCURSES_UNUSED) == NULL && zc_errno) {
+	    zerrnam(nam, "%s: %s", zcurses_strerror(zc_errno), args[0], 0);
+	    return 1;
+	}
 
-	targetwin = zcurses_validate_window(args[0], ZCURSES_UNUSED);
 	nlines = atoi(args[1]);
 	ncols = atoi(args[2]);
 	begin_y = atoi(args[3]);
 	begin_x = atoi(args[4]);
 
-	if (targetwin == -1) {
-	    zerrnam(nam, "%s: %s", zcurses_strerror(zc_errno), args[0], 0);
+        w = (ZCWin)zshcalloc(sizeof(struct zc_win));
+        if (!w)
 	    return 1;
-	}
 
-	zcurses_WIN[targetwin]=newwin(nlines, ncols, begin_y, begin_x);
+        w->name = ztrdup(args[0]);
+	w->win = newwin(nlines, ncols, begin_y, begin_x);
 
-	if (zcurses_WIN[targetwin]==NULL)
+	if (w->win == NULL) {
+	    zsfree(w->name);
+	    free(w);
 	    return 1;
+	}
+
+        zinsertlinknode(zcurses_windows, lastnode(zcurses_windows), (void *)w);
 
 	return 0;
     }
 
     if (OPT_ISSET(ops,'d')) {
-	targetwin = zcurses_validate_window(OPT_ARG(ops,'d'), ZCURSES_USED);
-	if (targetwin == -1) {
+	LinkNode node;
+	ZCWin w;
+
+	node = zcurses_validate_window(OPT_ARG(ops,'d'), ZCURSES_USED);
+	if (node == NULL) {
 	    zwarnnam(nam, "%s: %s", zcurses_strerror(zc_errno), OPT_ARG(ops,'d'), 0);
 	    return 1;
 	}
 
-	if (delwin(zcurses_WIN[targetwin])!=OK)
-		return 1;
+	w = (ZCWin)getdata(node);
+
+	if (w == NULL) {
+	    zwarnnam(nam, "record for window `%s' is corrupt", OPT_ARG(ops, 'd'), 0);
+	    return 1;
+	}
+	if (delwin(w->win)!=OK)
+	    return 1;
+
+	if (w->name)
+	    zsfree(w->name);
+
+        remnode(zcurses_windows, node);
 
-	zcurses_WIN[targetwin]=NULL;
 	return 0;
     }
 
     if (OPT_ISSET(ops,'r')) {
-	targetwin = zcurses_validate_window(OPT_ARG(ops,'r'), ZCURSES_USED);
-	if (targetwin == -1) {
+	LinkNode node;
+	ZCWin w;
+
+	node = zcurses_validate_window(OPT_ARG(ops,'r'), ZCURSES_USED);
+	if (node == NULL) {
 	    zwarnnam(nam, "%s: %s", zcurses_strerror(zc_errno), OPT_ARG(ops,'r'), 0);
 	    return 1;
 	}
 
-	return (wrefresh(zcurses_WIN[targetwin])!=OK) ? 1 : 0;
+	w = (ZCWin)getdata(node);
+
+	return (wrefresh(w->win)!=OK) ? 1 : 0;
     }
 
     if (OPT_ISSET(ops,'m')) {
 	int y, x;
+	LinkNode node;
+	ZCWin w;
 
-	targetwin = zcurses_validate_window(args[0], ZCURSES_USED);
-	if (targetwin == -1) {
+	node = zcurses_validate_window(args[0], ZCURSES_USED);
+	if (node == NULL) {
 	    zwarnnam(nam, "%s: %s", zcurses_strerror(zc_errno), args[0], 0);
 	    return 1;
 	}
@@ -160,24 +213,30 @@
 	y = atoi(args[1]);
 	x = atoi(args[2]);
 
-	if (wmove(zcurses_WIN[targetwin], y, x)!=OK)
+	w = (ZCWin)getdata(node);
+
+	if (wmove(w->win, y, x)!=OK)
 	    return 1;
 
 	return 0;
     }
 
     if (OPT_ISSET(ops,'c')) {
+	LinkNode node;
+	ZCWin w;
 #ifdef HAVE_SETCCHAR
 	wchar_t c;
 	cchar_t cc;
 #endif
 
-	targetwin = zcurses_validate_window(args[0], ZCURSES_USED);
-	if (targetwin == -1) {
+	node = zcurses_validate_window(args[0], ZCURSES_USED);
+	if (node == NULL) {
 	    zwarnnam(nam, "%s: %s", zcurses_strerror(zc_errno), args[0], 0);
 	    return 1;
 	}
 
+	w = (ZCWin)getdata(node);
+
 #ifdef HAVE_SETCCHAR
 	if (mbrtowc(&c, args[1], MB_CUR_MAX, NULL) < 1)
 	    return 1;
@@ -185,10 +244,10 @@
 	if (setcchar(&cc, &c, A_NORMAL, 0, NULL)==ERR)
 	    return 1;
 
-	if (wadd_wch(zcurses_WIN[targetwin], &cc)!=OK)
+	if (wadd_wch(w->win, &cc)!=OK)
 	    return 1;
 #else
-	if (waddch(zcurses_WIN[targetwin], (chtype)args[1][0])!=OK)
+	if (waddch(w->win, (chtype)args[1][0])!=OK)
 	    return 1;
 #endif
 
@@ -196,18 +255,23 @@
     }
 
     if (OPT_ISSET(ops,'s')) {
+	LinkNode node;
+	ZCWin w;
+
 #ifdef HAVE_SETCCHAR
 	wchar_t *ws;
 	cchar_t *wcc;
 	size_t sl;
 #endif
 
-	targetwin = zcurses_validate_window(args[0], ZCURSES_USED);
-	if (targetwin == -1) {
+	node = zcurses_validate_window(args[0], ZCURSES_USED);
+	if (node == NULL) {
 	    zwarnnam(nam, "%s: %s", zcurses_strerror(zc_errno), args[0], 0);
 	    return 1;
 	}
 
+	w = (ZCWin)getdata(node);
+
 #ifdef HAVE_SETCCHAR
 	sl = strlen(args[1]);
 
@@ -230,28 +294,32 @@
 
 	free(ws);
 
-	if (wadd_wchstr(zcurses_WIN[targetwin], wcc)!=OK) {
+	if (wadd_wchstr(w->win, wcc)!=OK) {
 	    free(wcc);
 	    return 1;
 	}
 
 	free(wcc);
 #else
-	if (waddstr(zcurses_WIN[targetwin], args[1])!=OK)
+	if (waddstr(w->win, args[1])!=OK)
 	    return 1;
 #endif
 	return 0;
     }
 
     if (OPT_ISSET(ops,'b')) {
+	LinkNode node;
+	ZCWin w;
 
-	targetwin = zcurses_validate_window(OPT_ARG(ops,'b'), ZCURSES_USED);
-	if (targetwin == -1) {
+	node = zcurses_validate_window(OPT_ARG(ops,'b'), ZCURSES_USED);
+	if (node == NULL) {
 	    zwarnnam(nam, "%s: %s", zcurses_strerror(zc_errno), OPT_ARG(ops,'b'), 0);
 	    return 1;
 	}
 
-	if (wborder(zcurses_WIN[targetwin], 0, 0, 0, 0, 0, 0, 0, 0)!=OK)
+	w = (ZCWin)getdata(node);
+
+	if (wborder(w->win, 0, 0, 0, 0, 0, 0, 0, 0)!=OK)
 	    return 1;
 
 	return 0;
@@ -302,11 +370,8 @@
 int
 boot_(Module m)
 {
-    int i;
-    for(i=1;i<=ZCURSES_MAX_WINDOWS;i++)
-	zcurses_WIN[i]=NULL;
-
-    zcurses_WIN[0]=initscr();
+    zcurses_windows = znewlinklist();
+    win_zero=initscr();
 
     return 0;
 }
@@ -315,6 +380,7 @@
 int
 cleanup_(Module m)
 {
+    freelinklist(zcurses_windows, (FreeFunc) zcurses_free_window);
     return setfeatureenables(m, &module_features, NULL);
 }
 

