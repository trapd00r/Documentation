From zsh-users-return-14481-mason-zsh=primenet.com.au@sunsite.dk Sun Oct 11 15:06:04 2009
Return-Path: <zsh-users-return-14481-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 15483 invoked from network); 11 Oct 2009 15:05:51 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 11 Oct 2009 15:05:51 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 81235 invoked from network); 11 Oct 2009 15:05:41 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 11 Oct 2009 15:05:41 -0000
Received: (qmail 23774 invoked by alias); 11 Oct 2009 15:05:33 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 14481
Received: (qmail 23759 invoked from network); 11 Oct 2009 15:05:33 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 11 Oct 2009 15:05:33 -0000
Received: from mail-ew0-f225.google.com (mail-ew0-f225.google.com [209.85.219.225])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 770F4805D09E
	for <zsh-users@sunsite.dk>; Sun, 11 Oct 2009 17:05:26 +0200 (CEST)
Received: by ewy25 with SMTP id 25so1926979ewy.45
        for <zsh-users@sunsite.dk>; Sun, 11 Oct 2009 08:05:26 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=gamma;
        h=domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type
         :content-transfer-encoding;
        bh=iK2Rql2uBE61faZQyNr8F1yuuL+8viC2IxwAwdBBGA4=;
        b=O1qy4jiEWdQ7qkaxO6KLdr1xHUj7AoOjveRWsqtRxhZEVWV12p1Ds4YbQwfiFEumSu
         cp2PPq+et0Eb1wDmd+NL8P9kldymcHvs2go/1VlkuHGevBXI/bodHIjRMSJFDzKUGzRc
         ZCou+xPBlazp+olqrXF9LkA7mOTGVD6VTjz/k=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=gamma;
        h=mime-version:in-reply-to:references:date:message-id:subject:from:to
         :content-type:content-transfer-encoding;
        b=aZDmgCvMt8A0syfnH6EYHqfWOZPgtD00iyceBVPQkk+UKBrEXkawfFvjenLBcol/HE
         r1XEsfmuUV7SyTvXqD6AKAB7xIsxf+K/HMb1yB5ia9elS/Nh0P1TKim1kc47cpSRuCWG
         qMd6Q/cLgnhYGxKhgCSd3s/0sFUvvsGrg6odU=
MIME-Version: 1.0
Received: by 10.210.153.2 with SMTP id a2mr2961066ebe.12.1255273526012; Sun, 
	11 Oct 2009 08:05:26 -0700 (PDT)
In-Reply-To: <20091011145833.GA1254@fly.srk.fer.hr>
References: <544dda350910092001r28997c41x5ef1ffe2e6d71982@mail.gmail.com>
	 <87ab002aev.fsf@old-tantale.fifi.org>
	 <544dda350910100053s499c0827yd54408b7f82b696d@mail.gmail.com>
	 <544dda350910100233r6954f653wee358fc568e3a1a8@mail.gmail.com>
	 <7591F47B-F5AA-42EE-849A-9D8B1EC5FCFF@biskalar.de>
	 <20091011145833.GA1254@fly.srk.fer.hr>
Date: Sun, 11 Oct 2009 17:05:25 +0200
Message-ID: <237967ef0910110805rc8d4651i8627bdfe83eccc7d@mail.gmail.com>
Subject: Re: noquote for quotes as in noglob for filename generation?
From: Mikael Magnusson <mikachu@gmail.com>
To: zsh-users@sunsite.dk
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-Virus-Scanned: ClamAV 0.94.2/9881/Sat Oct 10 11:21:35 2009 on bifrost
X-Virus-Status: Clean

2009/10/11 Dra=C5=BEen Ka=C4=8Dar <dave@fly.srk.fer.hr>:
> Sebastian Stark wrote:
>> Am 10.10.2009 um 11:33 schrieb Nazri Ramliy:
>>>> The mechanism you want is:
>>>>
>>>>  ${(q)variable}    # Escaped
>>>>  ${(qq)variable}   # Single quoted
>>>>  ${(qqq)variable}  # Double quoted
>>>
>>> Thank you Philippe for the tip (I learned something new). But I don't
>>> think that's what I want here (or maybe I'm just too stupid to see how
>>> I
>>> can make use of it to do what I want :)
>>
>> You can't prevent zsh from removing the quotes if you add them to the
>> command line of your sql script, as far as I know.
>>
>> But using the (q..) expansion flag you can re-add the quotes later.
>
> I think he wants Perl quoting operators:
>
>
>    Customary  Generic        Meaning        Interpolates
>        ''       q{}          Literal             no
>        ""      qq{}          Literal             yes
>        ``      qx{}          Command             yes*
>                qw{}         Word list            no
>        //       m{}       Pattern match          yes*
>                qr{}          Pattern             yes*
>                 s{}{}      Substitution          yes*
>                tr{}{}    Transliteration         no (but see below)
>        <<EOF                 here-doc            yes*
>
>        * unless the delimiter is ''.
>
> So one could write "ordinary" quoting characters for other programming
> languages, without quoting those characters in the zsh script source. Tha=
t
> would look like this:
>
>   sql_execute q{select * from foo where id=3D'bar';}
>
> Since the pair 'q{', '}' encloses the string, one doesn't need to quote
> apostrophes inside. Something like that would be useful, mostly because
> "{}" can be replaced with any pair of delimiters, so one can pick
> characters which are not used in the other language (SQL in this example)=
.
> The above example could also be written as:
>
>   sql_execute q(select * from foo where id=3D'bar';)
>
> The minimal quoting syntax I managed to find in zsh is:
>
>   setopt rc_quotes
>   sql_execute 'select * from foo where id=3D''bar'';'
>
> That's a bit more readable than id=3D\'bar\' but still requires quoting.

Or you can just use double quotes instead.
sql "select * from foo where id =3D 'bar';"
or you can make sql read a line of input and do
sql
select * from foo where id =3D 'bar';
but of course, the whole point of the exercise was to have 'select' be an a=
lias,
and maybe
select "* from foo where id =3D 'bar';"
looks weird?

I think an accept-line widget is really the only thing that could
work, but of course it will only work in simple commands, ie not for
things like echo $(for i in 1 2; do select foo) or something. (Unless
you reimplement all of zsh's parsing in the widget (not recommended)).

--=20
Mikael Magnusson

