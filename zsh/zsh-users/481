From zsh-workers-request@euclid.skiles.gatech.edu  Thu Oct 31 03:39:09 1996
Return-Path: zsh-workers-request@euclid.skiles.gatech.edu
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by coral.primenet.com.au (8.7.5/8.7.3) with ESMTP id DAA22542 for <mason@primenet.com.au>; Thu, 31 Oct 1996 03:39:06 +1100 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id LAA03392; Wed, 30 Oct 1996 11:22:19 -0500 (EST)
Resent-Date: Wed, 30 Oct 1996 11:09:50 -0500 (EST)
From: Zoltan Hidvegi <hzoli@cs.elte.hu>
Message-Id: <199610301609.RAA03910@labor5.cs.elte.hu>
Subject: Re: zsh 3.0.1 bug? read -c
In-Reply-To: <199610292327.AAA22922@boukha.ens-lyon.fr> from Vincent Lefevre at "Oct 30, 96 00:27:48 am"
To: vlefevre@ens-lyon.fr (Vincent Lefevre)
Date: Wed, 30 Oct 1996 17:09:48 +0100 (MET)
Cc: zsh-users@math.gatech.edu
Organization: Dept. of Comp. Sci., Eotvos University, Budapest, Hungary
Phone: (36 1)2669833 ext: 2667, home phone: (36 1) 2752368
X-Mailer: ELM [version 2.4ME+ PL27 (25)]
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Resent-Message-ID: <"CR4Du.0.-k.EttTo"@euclid>
Resent-From: zsh-users@math.gatech.edu
X-Mailing-List: <zsh-users@math.gatech.edu> archive/latest/481
X-Loop: zsh-users@math.gatech.edu
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu

Vincent Lefevre wrote:
> The first argument after "read -c" seems to be skipped, e.g.
> 
> $ repl () {
>         read -c a0 a1 a2 a3
>         echo
>         echo "a0:" $a0
>         echo "a1:" $a1
>         echo "a2:" $a2
>         echo "a3:" $a3
>         reply=()
> }
> $ compctl -K repl testrepl
> $ testrepl x y z [TAB]   (note: AUTO_MENU and LIST_AMBIGUOUS are set)
> a0:
> a1: testrepl
> a2: x
> a3: y

The patch below should fix it.  It changes the behaviour to behave more
like the the way described in the documentation.  E.g. read -c will read
all words to REPLY and read -c a b c reads the first word to a, the second
to b and the rest to c.

Zoltan


*** Src/builtin.c	1996/10/16 22:47:53	2.95
--- Src/builtin.c	1996/10/30 15:59:07
***************
*** 4980,4985 ****
--- 4980,4987 ----
  
      /* option -c is used in compctl functions */
      if (ops['c']) {
+ 	int i;
+ 
  	/* only allowed to be called by ZLE */
  	if (!inzlefunc) {
  	    zwarnnam(name, "option valid only in functions called from zle",
***************
*** 5006,5012 ****
  	    /* the -A option means that one array is specified, instead of
  	    many parameters */
  	    char **p, **b = (char **)zcalloc((clwnum + 1) * sizeof(char *));
- 	    int i;
  
  	    for (i = 0, p = b; i < clwnum; p++, i++)
  		*p = ztrdup(clwords[i]);
--- 5008,5013 ----
***************
*** 5015,5022 ****
  	    return 0;
  	}
  	if (ops['e'] || ops['E']) {
- 	    int i;
- 
  	    for (i = 0; i < clwnum; i++) {
  		zputs(clwords[i], stdout);
  		putchar('\n');
--- 5016,5021 ----
***************
*** 5025,5037 ****
  	    if (ops['e'])
  		return 0;
  	}
- 	if (*args) {
- 	    int i = 0;
  
! 	    for (; i < clwnum && *args; args++, i++)
! 		setsparam(*args, ztrdup(clwords[i]));
  	} else
! 	    setsparam("REPLY", ztrdup(clwords[clwpos]));
  
  	return 0;
      }
--- 5024,5046 ----
  	    if (ops['e'])
  		return 0;
  	}
  
! 	for (i = 0; i < clwnum && *args; reply = *args++, i++)
! 	    setsparam(reply, ztrdup(clwords[i]));
! 
! 	if (i < clwnum) {
! 	    int j, len;
! 
! 	    for (j = i, len = 0; j < clwnum; len += strlen(clwords[j++]));
! 	    bptr = buf = zalloc(len + j - i);
! 	    while (i < clwnum) {
! 		strucpy(&bptr, clwords[i++]);
! 		*bptr++ = ' ';
! 	    }
! 	    bptr[-1] = '\0';
  	} else
! 	    buf = ztrdup("");
! 	setsparam(reply, buf);
  
  	return 0;
      }

