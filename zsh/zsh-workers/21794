From zsh-workers-return-21794-mason-zsh=primenet.com.au@sunsite.dk Sat Oct 01 19:10:18 2005
Return-Path: <zsh-workers-return-21794-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 11214 invoked from network); 1 Oct 2005 19:10:12 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 1 Oct 2005 19:10:12 -0000
Received: (qmail 24635 invoked from network); 1 Oct 2005 19:10:06 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 1 Oct 2005 19:10:06 -0000
Received: (qmail 28578 invoked by alias); 1 Oct 2005 19:10:04 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 21794
Received: (qmail 28568 invoked from network); 1 Oct 2005 19:10:03 -0000
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by sunsite.dk with SMTP; 1 Oct 2005 19:10:03 -0000
Received: (qmail 24237 invoked from network); 1 Oct 2005 19:10:03 -0000
Received: from smtp1.wanadoo.co.uk (HELO smtp1.freeserve.com) (193.252.22.158)
  by a.mx.sunsite.dk with SMTP; 1 Oct 2005 19:10:01 -0000
Received: from me-wanadoo.net (localhost [127.0.0.1])
	by mwinf3007.me.freeserve.com (SMTP Server) with ESMTP id 057951C00085
	for <zsh-workers@sunsite.dk>; Sat,  1 Oct 2005 21:10:01 +0200 (CEST)
Received: from pwstephenson.fsnet.co.uk (modem-2968.marahu.dialup.pol.co.uk [81.78.219.152])
	by mwinf3007.me.freeserve.com (SMTP Server) with ESMTP id E4A0A1C00089
	for <zsh-workers@sunsite.dk>; Sat,  1 Oct 2005 21:09:59 +0200 (CEST)
X-ME-UUID: 20051001190959936.E4A0A1C00089@mwinf3007.me.freeserve.com
Received: by pwstephenson.fsnet.co.uk (Postfix, from userid 501)
	id 2A4F48673; Sat,  1 Oct 2005 15:10:35 -0400 (EDT)
Received: from pwstephenson.fsnet.co.uk (localhost [127.0.0.1])
	by pwstephenson.fsnet.co.uk (Postfix) with ESMTP id 25790863B
	for <zsh-workers@sunsite.dk>; Sat,  1 Oct 2005 20:10:35 +0100 (BST)
To: zsh-workers@sunsite.dk
Subject: Re: Exception handling and "trap" vs. TRAPNAL() 
In-reply-to: <1051001183818.ZM27904@candle.brasslantern.com> 
References: <20050929200741.GA1156@DervishD> <20050930124130.45eb0463.pws@csr.com> <20051001153756.GA12183@DervishD> <1051001183818.ZM27904@candle.brasslantern.com>
Date: Sat, 01 Oct 2005 20:10:33 +0100
From: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Message-Id: <20051001191035.2A4F48673@pwstephenson.fsnet.co.uk>
X-Spam-Checker-Version: SpamAssassin 3.0.4 (2005-06-05) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham 
	version=3.0.4

Bart Schaefer wrote:
> So the question is:  Why ignore errors that occur in inline traps?

I'm glad you looked at this rather than me...

Correct me if I'm wrong, but I don't think that's quite the question,
which is in two parts: (1) why ignore errors in traps (the save/restore
behaviour seen regardless of the trap style) (2) why flag an error only
when returning a non-zero status from a function-style trap (the
explicit setting of "errflag" when returning with non-zero status from
such a trap).

The answer to (1) is that traps are present as error handlers (of some
sort and for some debatable value of "error") and to avoid confusing
matters the error is taken from the code surrounding the trap, not the
trap itself.  Traps are supposed to operate in a sort of semi-permeable
sandbox.  (Yes, I know that's meaningless.)

The answer to (2) is this, from the manual regarding function-style traps:

  The return status from the function is handled specially.  If it
  is  zero, the signal is assumed to have been handled, and execu‚Äê
  tion continues normally.  Otherwise, the normal  effect  of  the
  signal  is  produced; if this causes execution to terminate, the
  status returned to the shell is the  status  returned  from  the
  function.

So the whole behaviour that DervishD is seeing is a side affect of the
fact that this:

  TRAPZERR() { throw DEFAULT; }

finishes by executing a command with non-zero status, the throw, causing
the special behaviour described above.

You can certainly argue that the "normal effect" of a ZERR trap is not
to cause an error, and it's certainly possible to argue that yet more
hacked-up special cases and additional bug-prone complexity in the trap
code are warranted.  However, I'm still not convinced this is going
anywhere I want to go.

-- 
Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Work: pws@csr.com
Web: http://www.pwstephenson.fsnet.co.uk

