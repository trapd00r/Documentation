From zsh-workers-return-28403-mason-zsh=primenet.com.au@zsh.org Wed Nov 10 17:23:19 2010
Return-Path: <zsh-workers-return-28403-mason-zsh=primenet.com.au@zsh.org>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 27533 invoked by alias); 10 Nov 2010 17:23:19 -0000
Mailing-List: contact zsh-workers-help@zsh.org; run by ezmlm
Precedence: bulk
X-No-Archive: yes
List-Id: Zsh Workers List <zsh-workers.zsh.org>
List-Post: <mailto:zsh-workers@zsh.org>
List-Help: <mailto:zsh-workers-help@zsh.org>
Delivered-To: mailing list zsh-workers@zsh.org
X-Seq: 28403
Received: (qmail 2940 invoked from network); 10 Nov 2010 17:23:07 -0000
X-Spam-Checker-Version: SpamAssassin 3.3.1 (2010-03-16) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.9 required=5.0 tests=BAYES_00,RCVD_IN_DNSWL_NONE
	autolearn=ham version=3.3.1
Received-SPF: none (ns1.primenet.com.au: domain at closedmail.com does not designate permitted sender hosts)
From: Bart Schaefer <schaefer@brasslantern.com>
Message-id: <101110092252.ZM6257@torch.brasslantern.com>
Date: Wed, 10 Nov 2010 09:22:50 -0800
In-reply-to: <4CD9C64E.8060307@redhat.com>
Comments: In reply to Eric Blake <eblake@redhat.com>
 "static vs. dynamic scoping" (Nov  9,  3:08pm)
References: <4CD9C64E.8060307@redhat.com>
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
To: Eric Blake <eblake@redhat.com>, zsh-workers@zsh.org
Subject: Re: static vs. dynamic scoping
MIME-version: 1.0
Content-type: text/plain; charset=us-ascii

One additional thought on this ...

Zsh does have the "-g" option of "typeset" to allow one declare or
to change the properties of a variable that is not in the scope of
the current function.  However, "-g" doesn't really mean "global";
it means only "the nearest dynamic scope where this variable is
already declared" which is the global scope if the parameter has
never been declared, but might even be the current scope if there
has previously been a "local" delcaration of the variable.

Does ksh93 have any mechanism for explicitly declaring a variable to
be global from inside a function scope?

-- 

