From zsh-workers-return-11512-mason-zsh=primenet.com.au@sunsite.auc.dk Mon May 22 16:36:39 2000
Return-Path: <zsh-workers-return-11512-mason-zsh=primenet.com.au@sunsite.auc.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 4442 invoked from network); 22 May 2000 16:36:34 -0000
Received: from sunsite.auc.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 22 May 2000 16:36:34 -0000
Received: (qmail 18717 invoked by alias); 22 May 2000 16:36:25 -0000
Mailing-List: contact zsh-workers-help@sunsite.auc.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.auc.dk
X-Seq: 11512
Received: (qmail 18704 invoked from network); 22 May 2000 16:36:20 -0000
X-Envelope-Sender-Is: Andrej.Borsenkow@mow.siemens.ru (at relayer goliath.siemens.de)
From: "Andrej Borsenkow" <Andrej.Borsenkow@mow.siemens.ru>
To: "Peter Stephenson" <pws@cambridgesiliconradio.com>,
   "Zsh hackers list" <zsh-workers@sunsite.auc.dk>
Subject: RE: Proxy support for zftp functions
Date: Mon, 22 May 2000 20:35:53 +0400
Message-ID: <001101bfc40b$cc325c00$21c9ca95@mow.siemens.ru>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="koi8-r"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
In-reply-to: <0FUY009QZYKZGE@la-la.cambridgesiliconradio.com>
Importance: Normal
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6700

> >
> > Yes, it makes more sense. Proxy is relevant only for a
> logon - then it
> > is completely transparent (hopefully :-).
>
> Actually, for just that reason, your idea of doing it in the
> functions is
> probably better.  The less hidden code the more I like it.
>

May be. For a start function is easier, of course.

> > Actually, much more interesting (needed) feature is ls parsing.
> > Currently, zftp relies on MDTM/SIZE to exist - and,
> unfortunately, they
> > are missing in "common" Unix servers. Have you ever thought
> about it?
>
> There's a nice project for someone with a bit of time.  This
> can probably
> be done in shell functions too --- it's system-specific, so
> not good to
> hard code, and the only place this is used internally is for
> supplying to
> functions doing progress reports, which can be rewritten to
> use information
> returned by ls where necessary.
>

The main use for it is to be able to compare times on remote/local
files. Without it no real directory sync (and even reliable reget) is
possible. Is it possible to pass file date/size from function to zftp.c
code? O.K., file mtime can be set by function as well ...

There are some possibilities:

- use external Perl code. The excellent piece of work is Mirror, that
understands a dozen remote systems (inluding DOS-based FTP server! Wow!
:-) That may do for a start, but thinking about calling Perl every time
I need to parse ls line makes me shudder. What is the status of Perl
module for Zsh? It would make life much easier.

- rewrite Perl modules (system detection + parsing routines) in Zsh.
They are based on regexps, so it is doable (but needs some time, of
course).

If we had working Perl module, I would favour the first approach. No
need to reinvent the wheel.

-andrej

