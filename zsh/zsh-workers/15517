From zsh-workers-return-15517-mason-zsh=primenet.com.au@sunsite.dk Sun Jul 29 21:03:54 2001
Return-Path: <zsh-workers-return-15517-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 6523 invoked from network); 29 Jul 2001 21:03:53 -0000
Received: from sunsite.dk (130.225.51.30)
  by ns1.primenet.com.au with SMTP; 29 Jul 2001 21:03:53 -0000
Received: (qmail 12410 invoked by alias); 29 Jul 2001 21:03:40 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 15517
Received: (qmail 12398 invoked from network); 29 Jul 2001 21:03:39 -0000
To: zsh-workers@sunsite.auc.dk (Zsh hackers list)
Subject: Re: Enhanced shell 
In-reply-to: "Zefram"'s message of "Sun, 29 Jul 2001 10:53:39 BST."
             <E15QnGV-0000hL-00@bowl.fysh.org> 
Date: Sun, 29 Jul 2001 23:07:03 +0100
From: Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Message-Id: <20010729220708.8256314291@pwstephenson.fsnet.co.uk>

Zefram wrote:
> Peter Stephenson wrote:
> >emulate builtin
> 
> We should only standardise "emulate posix_v2" as a way of specifying
> "this is written for the enhanced shell standard".  Then future
> revisions of the standard get to add new permitted arguments to emulate.
> Without an emulate command in a script, the shell has to behave in a
> manner compatible with the original POSIX.

Hmm.  Zsh obviously doesn't, you have to trick it some other way.
 
> >? =cmd?
> 
> With cleaned-up semantics, yes.  It shouldn't be doing alias expansion.

Yes, I'm not sure how long that's been there, and I don't think it's all
that useful --- using the parameters module for this as for other
similar things strikes me as a better bet.  I find it hard to believe
anyone is relying on it, either, given that you can't tell if you're
going to end up with an external command, which are found in preference,
opposite to the normal order of lookup.  So I'm very tempted to remove
it or stick it in a deprecated option, off by default.

> >? glob qualifiers (perhaps in some standardised NO_BARE_GLOB_QUAL form)
> 
> The NO_BARE_GLOB_QUAL form should probably simply be an explicit way of
> introducing the qualifier syntax we already have.  That was the idea
> behind the option -- BARE_GLOB_QUAL makes glob qualifier syntax clash
> with glob grouping syntax.

I suppose you mean any enhanced-shell version should be a separate
option.  I can certainly see a point in that.

-- 
Peter Stephenson <pws@pwstephenson.fsnet.co.uk>
Work: pws@csr.com
Web: http://www.pwstephenson.fsnet.co.uk

