From gjb@moa.cs.duke.edu Sun May 26 03:43:40 1996
Received: from euclid.skiles.gatech.edu (list@euclid.skiles.gatech.edu [130.207.146.50]) by melb.werple.net.au (8.7.5/8.7.3) with ESMTP id DAA07269 for <mason@werple.mira.net.au>; Sun, 26 May 1996 03:43:36 +1000 (EST)
Received: (from list@localhost) by euclid.skiles.gatech.edu (8.7.3/8.7.3) id NAA05837; Sat, 25 May 1996 13:26:49 -0400 (EDT)
Date: Sat, 25 May 1996 13:20:22 -0400 (EDT)
From: "Greg J. Badros" <gjb@moa.cs.duke.edu>
To: hzoli@cs.elt.hu
Subject: Zsh "POSTPROMPT" Feature
Message-Id: <Pine.SOL.3.93.960525130209.22483A-200000@moa.cs.duke.edu>
Mime-Version: 1.0
Content-Type: MULTIPART/MIXED; BOUNDARY="-559023410-851401618-833044822=:22483"
Resent-Date: Sat, 25 May 1996 13:25:13 -0400 (EDT)
Resent-From: "Greg J. Badros" <gjb@moa.cs.duke.edu>
Resent-To: zsh-workers@math.gatech.edu
Resent-Message-Id: <Pine.SOL.3.93.960525132513.22483D@moa.cs.duke.edu>
X-Mailing-List: <zsh-workers@math.gatech.edu> archive/latest/1174
X-Loop: zsh-workers@math.gatech.edu
Precedence: list
Resent-Sender: zsh-workers-request@math.gatech.edu
Content-Length: 8268
Status: OR

---559023410-851401618-833044822=:22483
Content-Type: TEXT/PLAIN; charset=US-ASCII

Hi,
  First let me thank you for all your work on Zsh... it is an excellent
shell that has proved incredibly useful to my daily work.  Thanks!
  One feature that I've not seen talked about but that would be useful
(mostly in an X environment) is the addition of a POSTPROMPT variable.  I
have patches for zsh-2.5.03 that implement this, and then my .zshrc sets 
my POSTPROMPT to
{%^[]0;%H^G%}
(Where ^[ is ESC, ^G is Ctrl-G-- the xterm sequence for setting the title
and icon). [The %H is a change to print the last/current history item].
  The changes are pretty simple, and add almost nothing to zsh's size, but
prove very helpful in negotiating a large number of xterm-s doing various
things.
  For zsh2.6, my patches are attached but not perfect.  I don't know the
best place to print out the postprompt... I do it in parse.c, now, but may
not have the right guards to prevent printing of the prompt in scripts.
Also, the %H addition to the special prompt sequences might better be
replaced by a general mechanism to give the last commandline (as a special
variable, perhaps).  You certainly could pick a better spot to output the
prompt-- I was just trying different places, from trashzle() to parse, to
lots in between.  Ideally, one would like to postpone it until right
before exec'ing the process (then it might be "EXECPROMPT" or
"PREEXECPROMPT".  Also it's not clear that many of the prompt characters
are useful in this operation, so the feature could change to a postcmdfcn,
like the pre-prompt function.
  Note, for me building under solaris, I added index.c which contains
calls to strchr and strrchr for index and rindex.  These only get linked
in w/ ucb libraries, but the ucb libraries cause an off-by-two characters
bug in the pattern matching section.  I don't know if this is a problem
with the configuration that doesn't detect it shouldn't use index/rindex,
or what, but this is a simple solution.

Patches are attached.  Thanks for your time, both in dealing with my 
note, and in general for Zsh.

Greg J. Badros                 8816 Nesbit Ave N., Apt 303
gjb@cs.duke.edu                Seattle, WA  98103-4067
http://www.cs.duke.edu/~gjb    voice 206/528.7513   fax 206/523.9328


---559023410-851401618-833044822=:22483
Content-Type: TEXT/PLAIN; charset=US-ASCII; name="2.6.zsh.patchs"
Content-Transfer-Encoding: BASE64
Content-ID: <Pine.SOL.3.93.960525132022.22483B@moa.cs.duke.edu>
Content-Description: 

ZGlmZiAtciAtYyB6c2gtMi42LWJldGExOS9NYWtlZmlsZSBteXpzaC0yLjYt
YmV0YTE5YS9NYWtlZmlsZQ0KZGlmZiAtciAtYyB6c2gtMi42LWJldGExOS9T
cmMvTWFrZWZpbGUgbXl6c2gtMi42LWJldGExOWEvU3JjL01ha2VmaWxlDQoq
KiogenNoLTIuNi1iZXRhMTkvU3JjL01ha2VmaWxlCUZyaSBNYXkgMjQgMjE6
Mjk6MTQgMTk5Ng0KLS0tIG15enNoLTIuNi1iZXRhMTlhL1NyYy9NYWtlZmls
ZQlGcmkgTWF5IDI0IDE2OjE0OjA0IDE5OTYNCioqKioqKioqKioqKioqKg0K
KioqIDEwMywxMDkgKioqKg0KICAkVW1hdGgubyAkVW1lbS5vICRVcGFyYW1z
Lm8gJFVwYXJzZS5vICRVc2lnbmFscy5vICRVc3Vic3QubyAkVXRleHQubyBc
DQogICRVdXRpbHMubyAkVXdhdGNoLm8gJFV6bGVfYmluZGluZ3MubyAkVXps
ZV9oaXN0Lm8gJFV6bGVfbWFpbi5vIFwNCiAgJFV6bGVfbWlzYy5vICRVemxl
X21vdmUubyAkVXpsZV9yZWZyZXNoLm8gJFV6bGVfdHJpY2t5Lm8gJFV6bGVf
dXRpbHMubyBcDQohICRVemxlX3ZpLm8gJFV6bGVfd29yZC5vIGluZGV4LmMN
CiAgDQogICMgYXV4aWxpYXJ5IGZpbGVzDQogIEFVWCA9IE1ha2VmaWxlLmlu
IC5pbmRlbnQucHJvIHNpZ25hbWVzLmF3ayBtYWtlcHJvLnNlZCBhbnNpMmtu
ci5jIFRBR1MgdGFncw0KLS0tIDEwMywxMDkgLS0tLQ0KICAkVW1hdGgubyAk
VW1lbS5vICRVcGFyYW1zLm8gJFVwYXJzZS5vICRVc2lnbmFscy5vICRVc3Vi
c3QubyAkVXRleHQubyBcDQogICRVdXRpbHMubyAkVXdhdGNoLm8gJFV6bGVf
YmluZGluZ3MubyAkVXpsZV9oaXN0Lm8gJFV6bGVfbWFpbi5vIFwNCiAgJFV6
bGVfbWlzYy5vICRVemxlX21vdmUubyAkVXpsZV9yZWZyZXNoLm8gJFV6bGVf
dHJpY2t5Lm8gJFV6bGVfdXRpbHMubyBcDQohICRVemxlX3ZpLm8gJFV6bGVf
d29yZC5vICRVaW5kZXguYw0KICANCiAgIyBhdXhpbGlhcnkgZmlsZXMNCiAg
QVVYID0gTWFrZWZpbGUuaW4gLmluZGVudC5wcm8gc2lnbmFtZXMuYXdrIG1h
a2Vwcm8uc2VkIGFuc2kya25yLmMgVEFHUyB0YWdzDQpPbmx5IGluIG15enNo
LTIuNi1iZXRhMTlhL1NyYzogY29yZQ0KZGlmZiAtciAtYyB6c2gtMi42LWJl
dGExOS9TcmMvZ2xvYmFscy5oIG15enNoLTIuNi1iZXRhMTlhL1NyYy9nbG9i
YWxzLmgNCioqKiB6c2gtMi42LWJldGExOS9TcmMvZ2xvYmFscy5oCU1vbiBN
YXkgMjAgMDU6Mzk6NTcgMTk5Ng0KLS0tIG15enNoLTIuNi1iZXRhMTlhL1Ny
Yy9nbG9iYWxzLmgJRnJpIE1heSAyNCAxNTo1MTowOSAxOTk2DQoqKioqKioq
KioqKioqKioNCioqKiAzMjUsMzMwICoqKioNCi0tLSAzMjUsMzMxIC0tLS0N
CiAgDQogIEVYVEVSTiBjaGFyICp6b3B0YXJnOwkJLyogJE9QVEFSRyAgICAg
Ki8NCiAgRVhURVJOIGxvbmcgem9wdGluZDsJCS8qICRPUFRJTkQgICAgICov
DQorIEVYVEVSTiBjaGFyICpwb3N0cHJvbXB0OwkvKiAkUE9TVFBST01QVCAq
Lw0KICBFWFRFUk4gY2hhciAqcHJvbXB0OwkJLyogJFBST01QVCAgICAgKi8N
CiAgRVhURVJOIGNoYXIgKnByb21wdDI7CQkvKiBldGMuICAgICAgICAqLw0K
ICBFWFRFUk4gY2hhciAqcHJvbXB0MzsNCmRpZmYgLXIgLWMgenNoLTIuNi1i
ZXRhMTkvU3JjL2hhc2h0YWJsZS5oIG15enNoLTIuNi1iZXRhMTlhL1NyYy9o
YXNodGFibGUuaA0KKioqIHpzaC0yLjYtYmV0YTE5L1NyYy9oYXNodGFibGUu
aAlNb24gTWF5ICA2IDA3OjA4OjU4IDE5OTYNCi0tLSBteXpzaC0yLjYtYmV0
YTE5YS9TcmMvaGFzaHRhYmxlLmgJRnJpIE1heSAyNCAxNTo1MzozOCAxOTk2
DQoqKioqKioqKioqKioqKioNCioqKiAxNDUsMTUwICoqKioNCi0tLSAxNDUs
MTUxIC0tLS0NCiAgSVBERUY3KCJQT1NURURJVCIsICZwb3N0ZWRpdCksDQog
IElQREVGNygiUkVBRE5VTExDTUQiLCAmcmVhZG51bGxjbWQpLA0KICBJUERF
RjcoIlJQUk9NUFQiLCAmcnByb21wdCksDQorIElQREVGNygiUE9TVFBST01Q
VCIsICZwb3N0cHJvbXB0KSwNCiAgSVBERUY3KCJQUzEiLCAmcHJvbXB0KSwN
CiAgSVBERUY3KCJQUzIiLCAmcHJvbXB0MiksDQogIElQREVGNygiUFMzIiwg
JnByb21wdDMpLA0KZGlmZiAtciAtYyB6c2gtMi42LWJldGExOS9TcmMvaW5p
dC5jIG15enNoLTIuNi1iZXRhMTlhL1NyYy9pbml0LmMNCioqKiB6c2gtMi42
LWJldGExOS9TcmMvaW5pdC5jCVRodSBNYXkgMjMgMDM6Mjg6MjIgMTk5Ng0K
LS0tIG15enNoLTIuNi1iZXRhMTlhL1NyYy9pbml0LmMJRnJpIE1heSAyNCAx
NTo1MjowMyAxOTk2DQoqKioqKioqKioqKioqKioNCioqKiA1OTMsNTk4ICoq
KioNCi0tLSA1OTMsNTk5IC0tLS0NCiAgCXByb21wdDMgPSB6dHJkdXAoIiIp
Ow0KICAJcHJvbXB0NCA9IHp0cmR1cCgiIik7DQogICAgICB9DQorICAgICBw
b3N0cHJvbXB0ID0genRyZHVwKCIiKTsNCiAgICAgIHNwcm9tcHQgPSB6dHJk
dXAoInpzaDogY29ycmVjdCAnJVInIHRvICclcicgW255YWVdPyAiKTsNCiAg
DQogICAgICBpZiAoISh0dHlzdHJuYW1lID0genRyZHVwKHR0eW5hbWUoU0hU
VFkpKSkpDQpCaW5hcnkgZmlsZXMgenNoLTIuNi1iZXRhMTkvU3JjL2luaXQu
byBhbmQgbXl6c2gtMi42LWJldGExOWEvU3JjL2luaXQubyBkaWZmZXINCkJp
bmFyeSBmaWxlcyB6c2gtMi42LWJldGExOS9TcmMvcGFyYW1zLm8gYW5kIG15
enNoLTIuNi1iZXRhMTlhL1NyYy9wYXJhbXMubyBkaWZmZXINCmRpZmYgLXIg
LWMgenNoLTIuNi1iZXRhMTkvU3JjL3BhcnNlLmMgbXl6c2gtMi42LWJldGEx
OWEvU3JjL3BhcnNlLmMNCioqKiB6c2gtMi42LWJldGExOS9TcmMvcGFyc2Uu
YwlGcmkgTWF5IDE3IDA3OjI1OjIxIDE5OTYNCi0tLSBteXpzaC0yLjYtYmV0
YTE5YS9TcmMvcGFyc2UuYwlGcmkgTWF5IDI0IDIxOjMzOjU5IDE5OTYNCioq
KioqKioqKioqKioqKg0KKioqIDExOSwxMjQgKioqKg0KLS0tIDExOSwxMzIg
LS0tLQ0KICAgICAgfSBlbHNlIHsNCiAgCWwtPnJpZ2h0ID0gcGFyX2V2ZW50
KCk7DQogICAgICB9DQorICAgICAvKiBnamIgYWRkZWQgKi8NCisgICAgIGlm
IChpbnRlcmFjdCAmJiBwb3N0cHJvbXB0ICE9IDAgJiYgKnBvc3Rwcm9tcHQg
IT0gTlVMTCkgew0KKyAgICAgICAgIGludCBwbGVuID0gMDsNCisgCWN1cmhp
c3QrKzsNCisgCS8qCXByaW50ZigiJXMiLCBwdXRwcm9tcHQocG9zdHByb21w
dCwmcGxlbixOVUxMLDApKTsgKi8NCisgCWZmbHVzaChzdGRvdXQpOw0KKyAJ
Y3VyaGlzdC0tOw0KKyAgICAgfQ0KICAgICAgcmV0dXJuIGw7DQogIH0NCiAg
DQpCaW5hcnkgZmlsZXMgenNoLTIuNi1iZXRhMTkvU3JjL3BhcnNlLm8gYW5k
IG15enNoLTIuNi1iZXRhMTlhL1NyYy9wYXJzZS5vIGRpZmZlcg0KZGlmZiAt
ciAtYyB6c2gtMi42LWJldGExOS9TcmMvdmVyc2lvbi5oIG15enNoLTIuNi1i
ZXRhMTlhL1NyYy92ZXJzaW9uLmgNCioqKiB6c2gtMi42LWJldGExOS9TcmMv
dmVyc2lvbi5oCVR1ZSBNYXkgMjEgMTE6MDE6MTcgMTk5Ng0KLS0tIG15enNo
LTIuNi1iZXRhMTlhL1NyYy92ZXJzaW9uLmgJRnJpIE1heSAyNCAxNjowMjo0
MyAxOTk2DQoqKioqKioqKioqKioqKioNCioqKiAxICoqKioNCiEgI2RlZmlu
ZSBaU0hfVkVSU0lPTiAiMi42LWJldGExOSINCi0tLSAxIC0tLS0NCiEgI2Rl
ZmluZSBaU0hfVkVSU0lPTiAiMi42LWJldGExOWEiDQpkaWZmIC1yIC1jIHpz
aC0yLjYtYmV0YTE5L1NyYy96bGVfbWlzYy5jIG15enNoLTIuNi1iZXRhMTlh
L1NyYy96bGVfbWlzYy5jDQoqKiogenNoLTIuNi1iZXRhMTkvU3JjL3psZV9t
aXNjLmMJVHVlIE1heSAyMSAxMToyNDo0MSAxOTk2DQotLS0gbXl6c2gtMi42
LWJldGExOWEvU3JjL3psZV9taXNjLmMJRnJpIE1heSAyNCAxNjoxNTowMCAx
OTk2DQoqKioqKioqKioqKioqKioNCioqKiAxMDIyLDEwMjcgKioqKg0KLS0t
IDEwMjIsMTAzOCAtLS0tDQogIAkJICAgIHNzKys7DQogIAkJc3RyYWRkKHNz
KTsNCiAgCQlicmVhazsNCisgCSAgICAvKiBnamIgYWRkZWQgdGhpcyAqLw0K
KyAJICAgIGNhc2UgJ0gnOg0KKyAJICAgICAgICBpZiAoY3VyaGlzdCA+IDAp
IHsNCisgCQkgICAgY2hhciAqc3ogPSBxZ2V0ZXZlbnQoY3VyaGlzdC0xKTsN
CisgCQkgICAgaWYgKHN6ICE9IDApIHsNCisgCQkgICAgICAgIHN0cmFkZChz
eik7DQorIAkJCWlmICgqKGJwLTEpID09ICdcbicgfHwgKihicC0xKT09J1xy
JykNCisgCQkJICAgIGJwLS07DQorIAkJICAgIH0NCisgCQl9DQorIAkJYnJl
YWs7DQogIAkgICAgY2FzZSAnaCc6DQogIAkgICAgY2FzZSAnISc6DQogIAkJ
YWRkYnVmc3BjKERJR0JVRlNJWkUpOw0K
---559023410-851401618-833044822=:22483--


