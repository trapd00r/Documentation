From zsh-workers-return-19754-mason-zsh=primenet.com.au@sunsite.dk Sun Apr 11 16:09:55 2004
Return-Path: <zsh-workers-return-19754-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 29934 invoked from network); 11 Apr 2004 16:09:53 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 11 Apr 2004 16:09:53 -0000
Received: (qmail 1034 invoked by alias); 11 Apr 2004 16:09:43 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 19754
Received: (qmail 987 invoked from network); 11 Apr 2004 16:09:42 -0000
Received: from localhost (HELO sunsite.dk) (127.0.0.1)
  by localhost with SMTP; 11 Apr 2004 16:09:42 -0000
X-MessageWall-Score: 0 (sunsite.dk)
Received: from [130.225.247.86] by sunsite.dk (MessageWall 1.0.8) with SMTP; 11 Apr 2004 16:9:42 -0000
Received: (qmail 4887 invoked from network); 11 Apr 2004 16:09:42 -0000
Received: from wbar3.sjo1-4-11-009-147.sjo1.dsl-verizon.net (HELO candle.brasslantern.com) (4.11.9.147)
  by a.mx.sunsite.dk with SMTP; 11 Apr 2004 16:09:40 -0000
Received: (from schaefer@localhost)
	by candle.brasslantern.com (8.11.6/8.11.6) id i3BG9c617941
	for zsh-workers@sunsite.dk; Sun, 11 Apr 2004 09:09:38 -0700
X-Authentication-Warning: candle.brasslantern.com: schaefer set sender to schaefer@closedmail.com using -f
From: Bart Schaefer <schaefer@brasslantern.com>
Message-Id: <1040411160938.ZM17940@candle.brasslantern.com>
Date: Sun, 11 Apr 2004 16:09:38 +0000
In-Reply-To: <slrnc7hv93.g5j.mason@g.primenet.com.au>
Comments: In reply to Geoff Wing <mason@primenet.com.au>
        "Re: Crash of 4.2.0-dev-1" (Apr 11,  8:09am)
References: <1040411053038.ZM11840@candle.brasslantern.com> 
	<slrnc7hv93.g5j.mason@g.primenet.com.au>
X-Mailer: Z-Mail (5.0.0 30July97)
To: zsh-workers@sunsite.dk
Subject: Re: Crash of 4.2.0-dev-1
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Spam-Checker-Version: SpamAssassin 2.63 on a.mx.sunsite.dk
X-Spam-Level: ****
X-Spam-Status: No, hits=4.7 required=6.0 tests=RCVD_IN_DYNABLOCK,
	RCVD_IN_NJABL,RCVD_IN_NJABL_DIALUP,RCVD_IN_SORBS autolearn=no 
	version=2.63
X-Spam-Hits: 4.7

On Apr 11,  8:09am, Geoff Wing wrote:
} Subject: Re: Crash of 4.2.0-dev-1
}
} Bart Schaefer <schaefer@brasslantern.com> typed:
} : I presume of 4.2.0 also.  Reproduce as follows:
} :
} : (1) Create a file "kshtest" in a directory in fpath.  This file should NOT
} : define the function "kshtest"
} 
} Any specific kshtest example for us?

Hmm, I thought I'd reproduced this with a very simple example but I guess
there is one more thing necessary for it to happen reliably.  Here are
the first two steps again, corrected.

(1) Place the following in a file "kshtest" in a directory in fpath:

    print "Running kshtest"
    unfunction kshtest

(2) Run zsh -f and execute:

    setopt kshautoload
    autoload +X -k kshtest
    kshtest

} : (3) Observe the [correct] error:
} :
} : 	zsh: kshtest: function not defined by file
} 
} I don't understand why this is the correct error

Because files loaded with kshautoload have to contain the full function
definition, like so:

    kshtest() {
	print "Running kshtest"
	unfunction kshtest
    }

And the kshtest file as created in (1) does not do so.

} since you setopt kshautload

That's another critical bit in tripping the bug.  After "autoload +X -k"
of the "incorrect" kshtest file, the function kshtest is defined as:

    kshtest () {
        print "Running kshtest"
        unfunction kshtest
	kshtest "$@"
    }

Whereas zsh expects it to have been defined as:

    kshtest () {
	kshtest () {
	    print "Running kshtest"
	    unfunction kshtest
	}
	kshtest "$@"
    }

The extra layer of function wrapper plus the call with "$@" is added
by "autoload +X".

} Also, I haven't yet understood why it was run twice in my case (but
} I've been sick so maybe my brain isn't working properly yet).

Normally, the function redefines itself and then the new definition is
called.  When the file itself does not contain its own function wrapper,
it ends up calling itself -- but only once, because that call re-auto-
loads the file without the +X behavior.  When that happens after the
function has been "unfunction"d, something bad results.

(Normally zsh protects itself against functions that unfunction them-
selves, otherwise "compinit" wouldn't work properly.  Somehow having
kshautoload set is bypassing those defenses.)

} : (4) Memory is now corrupted.  At some point soon, usually but not always
} : during printing of the next prompt, the shell will crash in malloc().
} 
} I'm still going.  Haven't seen any memory problems yet.

The "unfunction" appears to be necessary.

