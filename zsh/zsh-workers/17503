From zsh-workers-return-17503-mason-zsh=primenet.com.au@sunsite.dk Mon Aug 05 12:32:01 2002
Return-Path: <zsh-workers-return-17503-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 3815 invoked from network); 5 Aug 2002 12:31:59 -0000
Received: from sunsite.dk (130.225.247.90)
  by ns1.primenet.com.au with SMTP; 5 Aug 2002 12:31:59 -0000
Received: (qmail 19065 invoked by alias); 5 Aug 2002 12:31:50 -0000
Mailing-List: contact zsh-workers-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-workers@sunsite.dk
X-Seq: 17503
Received: (qmail 19050 invoked from network); 5 Aug 2002 12:31:49 -0000
X-VirusChecked: Checked
In-reply-to: <19337.1028540626@csr.com>
From: Oliver Kiddle <okiddle@yahoo.co.uk>
References: <19337.1028540626@csr.com>
To: Zsh workers <zsh-workers@sunsite.dk>
Subject: Re: zsh 4.0.5/4.1.0 release soon?
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="----- =_aaaaaaaaaa0"
Content-ID: <32170.1028550630.0@logica.com>
Date: Mon, 05 Aug 2002 13:31:21 +0100
Sender: kiddleo@logica.com
Message-Id: <E17bh17-00007d-00@bimbo.logica.co.uk>

------- =_aaaaaaaaaa0
Content-Type: text/plain; charset="us-ascii"
Content-ID: <32170.1028550630.1@logica.com>

On 5 Aug, Peter wrote:
> 
> 4.0.5 has been imminent for some time now, but every time I say I'm
> thinking about releasing it, people say, hang on here's a list of other
> patches to look at.  It looks like no-one has.  I think it's perfectly
> releasable in it's present form, however, so I may be able to sneak it
> out while everyone's on holiday.

I can't see much by way of patches that could go across to 4.0.5. A
quick search for new completion functions which aren't on the 4.0 branch
gives me this list:
_apt-show-versions _debchange _larch _mysqldiff _texinfo _valgrind _limit
I'll apply _texinfo across unless Andrej says otherwise.

Also, we should perhaps either move _mondo out of Completion/Linux or
move _modutils and _valgrind in to join it.

Also, I had lying about patches against both the documentation and
comments in the source code to fix some typos, spellings and poor
wordings. I've attached these below. I'll only change documentation
files on the 4.0 branch though.

> The target for 4.1.0 was to have the parameter support tidied up.
> However, that seems to be receeding into the background, too.  We
> really need to draw up a more limited set of goals since at the moment
> it looks like nobody's got the time for large scale new code.  There's
> plenty of new stuff there in modules and the odd builtin.

Sorry, I've not had much time to look at the parameter stuff. It'd
perhaps be best to put out 4.1.x releases without any single big change.
As you say there is plenty of new stuff.

Oliver



This e-mail and any attachment is for authorised use by the intended recipient(s) only.  It may contain proprietary material, confidential information and/or be subject to legal privilege.  It should not be copied, disclosed to, retained or used by, any other party.  If you are not an intended recipient then please promptly delete this e-mail and any attachment and all copies and inform the sender.  Thank you.
------- =_aaaaaaaaaa0
Content-Type: text/plain; charset="us-ascii"
Content-ID: <32170.1028550630.2@logica.com>
Content-Description: patch against doc files

Index: Doc/Zsh/builtins.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/builtins.yo,v
retrieving revision 1.46
diff -u -r1.46 builtins.yo
--- Doc/Zsh/builtins.yo	20 Jun 2002 16:39:58 -0000	1.46
+++ Doc/Zsh/builtins.yo	5 Aug 2002 11:40:02 -0000
@@ -656,7 +656,7 @@
 findex(print)
 item(tt(print) [ tt(-bnrslzpNDPoOicm) ] [ tt(-u)var(n) ] [ tt(-f) var(format) ] [ tt(-R) [ tt(-en) ]] [ var(arg) ... ])(
 With the `tt(-f)' option the arguments are printed as described by tt(printf).
-With no flags or with flag `tt(-)', the arguments are printed on
+With no flags or with the flag `tt(-)', the arguments are printed on
 the standard output as described by tt(echo), with the following differences:
 the escape sequence `tt(\M-)var(x)' metafies the character
 var(x) (sets the highest bit),
Index: Doc/Zsh/compsys.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/compsys.yo,v
retrieving revision 1.159
diff -u -r1.159 compsys.yo
--- Doc/Zsh/compsys.yo	1 Jul 2002 08:25:17 -0000	1.159
+++ Doc/Zsh/compsys.yo	5 Aug 2002 11:40:02 -0000
@@ -274,10 +274,10 @@
 
 The var(function) may actually be a string containing any shell code
 and that string will be executed via the tt(eval) builtin command. 
-This allows to easily define completions for commands that need to call
-one of the completion functions with arguments.  For example to make
-files ending in `tt(.h)' be completed as arguments to the command
-tt(foo), one would use:
+This allows for the easy definition of completions for commands that
+need to call one of the completion functions with arguments.  For
+example to make files ending in `tt(.h)' be completed as arguments to
+the command tt(foo), one would use:
 
 example(compdef '_files -g "*.h"' foo)
 
@@ -568,7 +568,7 @@
 kindex(characters, completion tag)
 item(tt(characters))(
 used for commands like tt(stty) when completing characters; also used
-when completing character classes after a opening bracket
+when completing character classes after an opening bracket
 )
 kindex(colormapids, completion tag)
 item(tt(colormapids))(
@@ -3090,7 +3090,7 @@
 completion is being performed.  The description is given as arguments to
 this function, with each var(spec) describing one option or normal
 argument of the command.  To separate these var(spec)s from the
-options given to tt(_arguments) itself, they can be preceeded by an
+options given to tt(_arguments) itself, they can be preceded by an
 argument containing a single colon.  The forms of var(spec)
 understood are:
 
@@ -4274,7 +4274,7 @@
 value whose argument is to be completed.
 
 Note also that tt(_values) normally adds the character used as the
-separator between values as a auto-removable suffix so that users don't
+separator between values as an auto-removable suffix so that users don't
 have to type it themselves.  But when using a `tt(->)var(string)' action
 tt(_values) can't do that because the matches for the argument will be
 generated by the calling function.  To get the usual behaviour, the
Index: Doc/Zsh/contrib.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/contrib.yo,v
retrieving revision 1.21
diff -u -r1.21 contrib.yo
--- Doc/Zsh/contrib.yo	5 Jul 2002 10:49:47 -0000	1.21
+++ Doc/Zsh/contrib.yo	5 Aug 2002 11:40:02 -0000
@@ -438,7 +438,7 @@
 down within the buffer, otherwise they search for a history line matching
 the start of the current line.  In this case, however, they search for
 a line which matches the current line up to the current cursor position, in
-the manner of tt(history-begining-search-backward) and tt(-forward), rather
+the manner of tt(history-beginning-search-backward) and tt(-forward), rather
 than the first word on the line.
 )
 tindex(incarg)
@@ -909,7 +909,7 @@
 Each line typed is evaluated as an expression.  The prompt shows a number,
 which corresponds to a positional parameter where the result of that
 calculation is stored.  For example, the result of the calculation on the
-line preceeded by `tt(4> )' is available as tt($4).  Full command line
+line preceded by `tt(4> )' is available as tt($4).  Full command line
 editing, including the history of previous calculations, is available; the
 history is saved in the file tt(~/.zcalc_history).  To exit, enter a blank
 line or type `tt(q)' on its own.
@@ -923,7 +923,7 @@
 into the global namespace.
 
 An extra facility is provided for changing the default output base.  Use,
-for example, `tt([#16])' to display hexadecimal output preceeded by an
+for example, `tt([#16])' to display hexadecimal output preceded by an
 indication of the base, or `tt([##16])' just to display the raw number in
 the given base.  Bases themselves are always specified in decimal.
 `tt([#])' restores the normal output format.
Index: Doc/Zsh/expn.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/expn.yo,v
retrieving revision 1.42
diff -u -r1.42 expn.yo
--- Doc/Zsh/expn.yo	22 Feb 2002 17:28:05 -0000	1.42
+++ Doc/Zsh/expn.yo	5 Aug 2002 11:40:03 -0000
@@ -1680,11 +1680,11 @@
 up to the next matching character (`tt([)', `tt({)', and `tt(<)' match 
 `tt(])', `tt(})', and `tt(>)' respectively, any other character
 matches itself) is taken as a list of comma-separated
-var(sub-spec)s. Each var(sub-spec) may be either a octal number as
+var(sub-spec)s. Each var(sub-spec) may be either an octal number as
 described above or a list of any of the characters `tt(u)', `tt(g)',
 `tt(o)', and `tt(a)', followed by a `tt(=)', a `tt(PLUS())', or a
 `tt(-)', followed by a list of any of the characters `tt(r)', `tt(w)', 
-`tt(x)', `tt(s)', and `tt(t)', or a octal digit. The first list of
+`tt(x)', `tt(s)', and `tt(t)', or an octal digit. The first list of
 characters specify which access rights are to be checked. If a `tt(u)'
 is given, those for the owner of the file are used, if a `tt(g)' is
 given, those of the group are checked, a `tt(o)' means to test those
@@ -1886,5 +1886,5 @@
 demonstrates how colon modifiers and other qualifiers may be chained
 together.  The ordinary qualifier `tt(.)' is applied first, then the colon
 modifiers in order from left to right.  So if tt(EXTENDED_GLOB) is set and
-the base battern matches the regular file tt(builtin.pro), the shell will
+the base pattern matches the regular file tt(builtin.pro), the shell will
 print `tt(shmiltin.shmo)'.
Index: Doc/Zsh/files.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/files.yo,v
retrieving revision 1.3
diff -u -r1.3 files.yo
--- Doc/Zsh/files.yo	10 Jul 2001 08:59:18 -0000	1.3
+++ Doc/Zsh/files.yo	5 Aug 2002 11:40:03 -0000
@@ -10,7 +10,7 @@
 pindex(NO_RCS, use of)
 pindex(NO_GLOBAL_RCS, use of)
 vindex(ZDOTDIR, use of)
-@cindex(zshenv)
+cindex(zshenv)
 Commands are first read from tt(/etc/zshenv); this cannot be overridden.
 Subsequent behaviour is modified by the tt(RCS) and
 tt(GLOBAL_RCS) options; the former affects all startup files, while the
Index: Doc/Zsh/params.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/params.yo,v
retrieving revision 1.15
diff -u -r1.15 params.yo
--- Doc/Zsh/params.yo	21 Feb 2002 13:43:00 -0000	1.15
+++ Doc/Zsh/params.yo	5 Aug 2002 11:40:03 -0000
@@ -707,9 +707,8 @@
 item(tt(fignore) <S> <Z> (tt(FIGNORE) <S>))(
 An array (colon separated list)
 containing the suffixes of files to be ignored
-during filename completion.  However, if the completion generates only files
-which would match if this variable would be ignored, than these files are
-completed anyway.
+during filename completion.  However, if completion only generates files
+with suffixes in this list, then these files are completed anyway.
 )
 vindex(fpath)
 vindex(FPATH)
Index: Doc/Zsh/zle.yo
===================================================================
RCS file: /cvsroot/zsh/zsh/Doc/Zsh/zle.yo,v
retrieving revision 1.25
diff -u -r1.25 zle.yo
--- Doc/Zsh/zle.yo	4 Jul 2002 10:13:39 -0000	1.25
+++ Doc/Zsh/zle.yo	5 Aug 2002 11:40:03 -0000
@@ -1045,7 +1045,7 @@
 the default behaviour is used, while if it is 1, successive calls will move
 forwards through the history.  The value 0 can be used to indicate that the
 history line examined by the previous execution of the command will be
-reexamined.  Note that negative numbers should be preceeded with a
+reexamined.  Note that negative numbers should be preceded with a
 `tt(-)tt(-)' argument to avoid confusing them with options.
 
 If two arguments are given, the second specifies the word on the command

------- =_aaaaaaaaaa0
Content-Type: text/plain; charset="us-ascii"
Content-ID: <32170.1028550630.3@logica.com>
Content-Description: patch against src files

Index: Src/builtin.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/builtin.c,v
retrieving revision 1.79
diff -u -r1.79 builtin.c
--- Src/builtin.c	1 Aug 2002 15:50:07 -0000	1.79
+++ Src/builtin.c	5 Aug 2002 11:40:03 -0000
@@ -477,8 +477,8 @@
 	hadplus = 0, hadend = 0, sort = 0;
     char **x;
 
-    /* Obsolecent sh compatibility: set - is the same as set +xv *
-     * and set - args is the same as set +xv -- args             */
+    /* Obsolescent sh compatibility: set - is the same as set +xv *
+     * and set - args is the same as set +xv -- args              */
     if (*args && **args == '-' && !args[0][1]) {
 	dosetopt(VERBOSE, 0, 0);
 	dosetopt(XTRACE, 0, 0);
@@ -699,7 +699,7 @@
 /* The main pwd changing function.  The real work is done by other     *
  * functions.  cd_get_dest() does the initial argument processing;     *
  * cd_do_chdir() actually changes directory, if possible; cd_new_pwd() *
- * does the ancilliary processing associated with actually changing    *
+ * does the ancillary processing associated with actually changing    *
  * directory.                                                          */
 
 /**/
@@ -1409,7 +1409,7 @@
     return cmd;
 }
 
-/* Perform old=new substituions.  Uses the asgment structure from zsh.h, *
+/* Perform old=new substitutions.  Uses the asgment structure from zsh.h, *
  * which is essentially a linked list of string,replacement pairs.       */
 
 /**/
@@ -1643,7 +1643,7 @@
 	 * If the original parameter was special and we're creating
 	 * a new one, we need to keep it special.
 	 *
-	 * The -h (hide) flags prevents an existing special being made
+	 * The -h (hide) flag prevents an existing special being made
 	 * local.  It can be applied either to the special or in the
 	 * typeset/local statement for the local variable.
 	 */
@@ -1965,7 +1965,7 @@
 	    off |= bit;
     roff = off;
 
-    /* Sanity checks on the options.  Remove conficting options. */
+    /* Sanity checks on the options.  Remove conflicting options. */
     if (on & PM_FFLOAT) {
 	off |= PM_RIGHT_B | PM_LEFT | PM_RIGHT_Z | PM_UPPER | PM_ARRAY |
 	    PM_HASHED | PM_INTEGER | PM_EFLOAT;
Index: Src/compat.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/compat.c,v
retrieving revision 1.11
diff -u -r1.11 compat.c
--- Src/compat.c	3 Nov 2001 23:39:11 -0000	1.11
+++ Src/compat.c	5 Aug 2002 11:40:03 -0000
@@ -1,5 +1,5 @@
 /*
- * compat.c - compatibiltiy routines for the deprived
+ * compat.c - compatibility routines for the deprived
  *
  * This file is part of zsh, the Z shell.
  *
@@ -377,7 +377,7 @@
 }
 
 /* chdir with arbitrary long pathname.  Returns 0 on success, 0 on normal *
- * faliliure and -2 when chdir failed and the current directory is lost.  */
+ * failure and -2 when chdir failed and the current directory is lost.  */
 
 /**/
 mod_export int
Index: Src/exec.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/exec.c,v
retrieving revision 1.44
diff -u -r1.44 exec.c
--- Src/exec.c	1 Aug 2002 15:06:27 -0000	1.44
+++ Src/exec.c	5 Aug 2002 11:40:03 -0000
@@ -2372,7 +2372,7 @@
 		execute((Cmdnam) hn, cflags & BINF_DASH);
 	    } else {		/* ( ... ) */
 		DPUTS(varspc,
-		      "BUG: assigment before complex command");
+		      "BUG: assignment before complex command");
 		list_pipe = 0;
 		if (subsh_close >= 0)
 		    zclose(subsh_close);
Index: Src/glob.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/glob.c,v
retrieving revision 1.27
diff -u -r1.27 glob.c
--- Src/glob.c	6 May 2002 14:46:11 -0000	1.27
+++ Src/glob.c	5 Aug 2002 11:40:03 -0000
@@ -355,7 +355,7 @@
 
     while (!inserts || (news = dupstring(*inserts++))) {
 	if (colonmod) {
-	    /* Handle the remainder of the qualifer:  e.g. (:r:s/foo/bar/). */
+	    /* Handle the remainder of the qualifier:  e.g. (:r:s/foo/bar/). */
 	    s = colonmod;
 	    modify(&news, &s);
 	}
@@ -685,7 +685,7 @@
 	/* parse single path component */
 	if (!(p1 = patcompile(instr, compflags|PAT_FILET, &instr)))
 	    return NULL;
-	/* then do the remaining path compoents */
+	/* then do the remaining path components */
 	if (*instr == '/' || !*instr) {
 	    int ef = *instr == '/';
 
Index: Src/hashtable.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/hashtable.c,v
retrieving revision 1.11
diff -u -r1.11 hashtable.c
--- Src/hashtable.c	5 Jul 2001 11:43:11 -0000	1.11
+++ Src/hashtable.c	5 Aug 2002 11:40:03 -0000
@@ -156,7 +156,7 @@
 	ht->freenode(oldnode);
 }
 
-/* Add a node to a hash table, returning the old node on replacment. */
+/* Add a node to a hash table, returning the old node on replacement. */
 
 /**/
 HashNode
Index: Src/init.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/init.c,v
retrieving revision 1.24
diff -u -r1.24 init.c
--- Src/init.c	7 Jun 2002 14:44:25 -0000	1.24
+++ Src/init.c	5 Aug 2002 11:40:03 -0000
@@ -805,7 +805,7 @@
     createshfunctable();    /* create hash table for shell functions   */
     createbuiltintable();   /* create hash table for builtin commands  */
     createnameddirtable();  /* create hash table for named directories */
-    createparamtable();     /* create paramater hash table             */
+    createparamtable();     /* create parameter hash table             */
 
     condtab = NULL;
     wrappers = NULL;
Index: Src/lex.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/lex.c,v
retrieving revision 1.22
diff -u -r1.22 lex.c
--- Src/lex.c	8 Jan 2002 15:33:23 -0000	1.22
+++ Src/lex.c	5 Aug 2002 11:40:03 -0000
@@ -122,7 +122,7 @@
 /**/
 mod_export int nocomments;
 
-/* text of puctuation tokens */
+/* text of punctuation tokens */
 
 /**/
 mod_export char *tokstrings[WHILE + 1] = {
Index: Src/math.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/math.c,v
retrieving revision 1.14
diff -u -r1.14 math.c
--- Src/math.c	17 May 2002 15:14:05 -0000	1.14
+++ Src/math.c	5 Aug 2002 11:40:03 -0000
@@ -648,7 +648,7 @@
 		   (a.type != MN_UNSET || what != EQ)) {
 	    /*
 	     * Different types, so coerce to float.
-	     * It may happen during an assigment that the LHS
+	     * It may happen during an assignment that the LHS
 	     * variable is actually an integer, but there's still
 	     * no harm in doing the arithmetic in floating point;
 	     * the assignment will do the correct conversion.
Index: Src/mem.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/mem.c,v
retrieving revision 1.5
diff -u -r1.5 mem.c
--- Src/mem.c	7 Mar 2001 12:58:41 -0000	1.5
+++ Src/mem.c	5 Aug 2002 11:40:03 -0000
@@ -693,7 +693,7 @@
    size of the small blocks held in a memory block, given a pointer to the
    header of it.  M_SBLEN() gives the size of a memory block that can hold
    an array of small blocks, given the size of these small blocks.  M_BSLEN()
-   caculates the size of the small blocks held in a memory block, given the
+   calculates the size of the small blocks held in a memory block, given the
    length of that block (including the header of the memory block.  M_NSMALL
    is the number of possible block sizes that small blocks should be used
    for. */
@@ -1286,7 +1286,7 @@
 	printf("\nThe list of memory blocks. For each block the following\n");
 	printf("information is shown:\n\n");
 	printf("num\tthe number of this block\n");
-	printf("tnum\tlike num but counted separatedly for used and free\n");
+	printf("tnum\tlike num but counted separately for used and free\n");
 	printf("\tblocks\n");
 	printf("addr\tthe address of this block\n");
 	printf("len\tthe length of the block\n");
@@ -1295,7 +1295,7 @@
 	printf("\t  free\tthis block is free\n");
 	printf("\t  small\tthis block is used for an array of small blocks\n");
 	printf("cum\tthe accumulated sizes of the blocks, counted\n");
-	printf("\tseparatedly for used and free blocks\n");
+	printf("\tseparately for used and free blocks\n");
 	printf("\nFor blocks holding small blocks the number of free\n");
 	printf("blocks, the number of used blocks and the size of the\n");
 	printf("blocks is shown. For otherwise used blocks the first few\n");
Index: Src/module.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/module.c,v
retrieving revision 1.9
diff -u -r1.9 module.c
--- Src/module.c	18 May 2001 15:23:09 -0000	1.9
+++ Src/module.c	5 Aug 2002 11:40:03 -0000
@@ -903,7 +903,7 @@
      * If we were passed an alias, we must resolve it to a final
      * module name (and maybe add the corresponding struct), since otherwise
      * we would need to check all modules to see if they happen
-     * to be aliased to the same thing to implement depencies properly.
+     * to be aliased to the same thing to implement dependencies properly.
      *
      * This should mean that an attempt to add an alias which would
      * have the same name as a module which has dependencies is correctly
Index: Src/params.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/params.c,v
retrieving revision 1.64
diff -u -r1.64 params.c
--- Src/params.c	20 Jun 2002 16:39:58 -0000	1.64
+++ Src/params.c	5 Aug 2002 11:40:03 -0000
@@ -225,7 +225,7 @@
 {NULL, NULL},
 #define IPDEF10(A,B,C) {NULL,A,PM_ARRAY|PM_SPECIAL,BR(NULL),SFN(C),GFN(B),stdunsetfn,10,NULL,NULL,NULL,0}
 
-/* The following parameters are not avaible in sh/ksh compatibility *
+/* The following parameters are not available in sh/ksh compatibility *
  * mode. All of these have sh compatible equivalents.                */
 IPDEF1("ARGC", poundgetfn, nullintsetfn, PM_READONLY),
 IPDEF2("HISTCHARS", histcharsgetfn, histcharssetfn, PM_DONTIMPORT),
@@ -678,7 +678,7 @@
 			 paramtab->getnode(paramtab, name));
 
 	DPUTS(oldpm && oldpm->level > locallevel,
-	      "BUG:  old local parameter not deleteed");
+	      "BUG: old local parameter not deleted");
 	if (oldpm && (oldpm->level == locallevel || !(flags & PM_LOCAL))) {
 	    if (!(oldpm->flags & PM_UNSET) || (oldpm->flags & PM_SPECIAL)) {
 		oldpm->flags &= ~PM_UNSET;
@@ -1205,7 +1205,7 @@
 
     *s++ = '[';
     s = parse_subscript(s, dq);	/* Error handled after untokenizing */
-    /* Now we untokenize everthing except INULL() markers so we can check *
+    /* Now we untokenize everything except INULL() markers so we can check *
      * for the '*' and '@' special subscripts.  The INULL()s are removed  *
      * in getarg() after we know whether we're doing reverse indexing.    */
     for (tbrack = *pptr + 1; *tbrack && tbrack != s; tbrack++) {
@@ -2269,7 +2269,7 @@
 	    /*
 	     * Re-export the old value which we removed in typeset_single().
 	     * I don't think we need to test for ALL_EXPORT here, since if
-	     * it was used to export the parameter originally the parmeter
+	     * it was used to export the parameter originally the parameter
 	     * should still have the PM_EXPORTED flag.
 	     */
 	    export_param(oldpm);
Index: Src/parse.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/parse.c,v
retrieving revision 1.36
diff -u -r1.36 parse.c
--- Src/parse.c	7 Jun 2002 14:44:25 -0000	1.36
+++ Src/parse.c	5 Aug 2002 11:40:03 -0000
@@ -93,7 +93,7 @@
  *
  *   WC_LIST
  *     - data contains type (sync, ...)
- *     - follwed by code for this list
+ *     - followed by code for this list
  *     - if not (type & Z_END), followed by next WC_LIST
  *
  *   WC_SUBLIST
@@ -139,7 +139,7 @@
  *     - followed by offset to first string
  *     - followed by length of string table
  *     - followed by number of patterns for body
- *     - follwoed by codes for body
+ *     - followed by codes for body
  *     - followed by strings for body
  *
  *   WC_FOR
Index: Src/pattern.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/pattern.c,v
retrieving revision 1.11
diff -u -r1.11 pattern.c
--- Src/pattern.c	22 Jan 2002 12:40:26 -0000	1.11
+++ Src/pattern.c	5 Aug 2002 11:40:03 -0000
@@ -70,7 +70,7 @@
 
 #include "pattern.pro"
 
-/* Number of active parenthesised expressions allowed in backreferencing */
+/* Number of active parenthesized expressions allowed in backreferencing */
 #define NSUBEXP  9
 
 /* definition	number	opnd?	meaning */
@@ -119,7 +119,7 @@
  *
  *  P_ANY, P_ANYOF:  the operand is a null terminated
  *    string.  Normal characters match as expected.  Characters
- *    in the range Meta+PP_ALPHA..Meta+PP_UNKNWN do the approprate
+ *    in the range Meta+PP_ALPHA..Meta+PP_UNKNWN do the appropriate
  *    Posix range tests.  This relies on imeta returning true for these
  *    characters.  We treat unknown POSIX ranges as never matching.
  *    PP_RANGE means the next two (possibly metafied) characters form
@@ -448,7 +448,7 @@
 }
 
 /*
- * Main body or parenthesised subexpression in pattern
+ * Main body or parenthesized subexpression in pattern
  * Parenthesis (and any ksh_glob gubbins) will have been removed.
  */
 
@@ -830,7 +830,7 @@
     for (;;) {
 	/*
 	 * Check if we have a string. First, we need to make sure
-	 * the string doesn't introduce a ksh-like parenthesised expression.
+	 * the string doesn't introduce a ksh-like parenthesized expression.
 	 */
 	kshchar = '\0';
 	if (isset(KSHGLOB) && *patparse && patparse[1] == Inpar) {
@@ -1972,7 +1972,7 @@
 	     * This is just simple cases, matching one character.
 	     * With approximations, we still handle * this way, since
 	     * no approximation is ever necessary, but other closures
-	     * are handled by the more compicated branching method
+	     * are handled by the more complicated branching method
 	     */
 	    op = P_OP(scan);
 	    /* Note that no counts possibly metafied characters */
Index: Src/prompt.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/prompt.c,v
retrieving revision 1.9
diff -u -r1.9 prompt.c
--- Src/prompt.c	31 Jan 2002 15:13:27 -0000	1.9
+++ Src/prompt.c	5 Aug 2002 11:40:03 -0000
@@ -75,7 +75,7 @@
 
 static char *bufline;
 
-/* bp1 is an auxilliary pointer into the buffer, which when non-NULL is *
+/* bp1 is an auxiliary pointer into the buffer, which when non-NULL is *
  * moved whenever the buffer is reallocated.  It is used when data is   *
  * being temporarily held in the buffer.                                */
 
Index: Src/utils.c
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/utils.c,v
retrieving revision 1.40
diff -u -r1.40 utils.c
--- Src/utils.c	21 May 2002 11:10:16 -0000	1.40
+++ Src/utils.c	5 Aug 2002 11:40:03 -0000
@@ -2553,7 +2553,7 @@
 
 /* Escape tokens and null characters.  Buf is the string which should be     *
  * escaped.  len is the length of the string.  If len is -1, buf should be   *
- * null terminated.  If len is non-negative and the third paramerer is not   *
+ * null terminated.  If len is non-negative and the third parameter is not   *
  * META_DUP, buf should point to an at least len+1 long memory area.  The    *
  * return value points to the quoted string.  If the given string does not   *
  * contain any special character which should be quoted and the third        *
Index: Src/zsh.h
===================================================================
RCS file: /cvsroot/zsh/zsh/Src/zsh.h,v
retrieving revision 1.39
diff -u -r1.39 zsh.h
--- Src/zsh.h	1 Jul 2002 08:25:17 -0000	1.39
+++ Src/zsh.h	5 Aug 2002 11:40:04 -0000
@@ -476,7 +476,7 @@
 #define MAX_ARRLEN    262144
 
 /********************************************/
-/* Defintions for word code                 */
+/* Definitions for word code                 */
 /********************************************/
 
 typedef unsigned int wordcode;
@@ -680,7 +680,7 @@
 #define WCB_AUTOFN()        wc_bld(WC_AUTOFN, 0)
 
 /********************************************/
-/* Defintions for job table and job control */
+/* Definitions for job table and job control */
 /********************************************/
 
 #ifdef NEED_LINUX_TASKS_H
@@ -1181,7 +1181,7 @@
  * could a lot of other things.
  */
 
-#define SUB_END		0x0001	/* match end instead of begining, % or %%  */
+#define SUB_END		0x0001	/* match end instead of beginning, % or %%  */
 #define SUB_LONG	0x0002	/* % or # doubled, get longest match */
 #define SUB_SUBSTR	0x0004	/* match a substring */
 #define SUB_MATCH	0x0008	/* include the matched portion */
@@ -1486,7 +1486,7 @@
 #define islogin  (isset(LOGINSHELL))
 
 /***********************************************/
-/* Defintions for terminal and display control */
+/* Definitions for terminal and display control */
 /***********************************************/
 
 /* tty state structure */

------- =_aaaaaaaaaa0--

