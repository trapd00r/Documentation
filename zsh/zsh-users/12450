From zsh-users-return-12450-mason-zsh=primenet.com.au@sunsite.dk Thu Jan 17 03:11:53 2008
Return-Path: <zsh-users-return-12450-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 8487 invoked from network); 17 Jan 2008 03:11:41 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.6 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 17 Jan 2008 03:11:41 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 68741 invoked from network); 17 Jan 2008 03:11:26 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 17 Jan 2008 03:11:26 -0000
Received: (qmail 23981 invoked by alias); 17 Jan 2008 03:11:17 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12450
Received: (qmail 23965 invoked from network); 17 Jan 2008 03:11:16 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 17 Jan 2008 03:11:16 -0000
Received: from virusfilter.dotsrc.org (bifrost [127.0.0.1])
	by spamfilter.dotsrc.org (Postfix) with ESMTP id E992680307F6
	for <zsh-users@sunsite.dk>; Thu, 17 Jan 2008 04:11:12 +0100 (CET)
Received: from vms046pub.verizon.net (vms046pub.verizon.net [206.46.252.46])
	by bifrost.dotsrc.org (Postfix) with ESMTP
	for <zsh-users@sunsite.dk>; Thu, 17 Jan 2008 04:11:12 +0100 (CET)
Received: from torch.brasslantern.com ([71.121.18.67])
 by vms046.mailsrvcs.net (Sun Java System Messaging Server 6.2-6.01 (built Apr
 3 2006)) with ESMTPA id <0JUR006C6Q6GV6H1@vms046.mailsrvcs.net> for
 zsh-users@sunsite.dk; Wed, 16 Jan 2008 21:11:05 -0600 (CST)
Received: from torch.brasslantern.com (localhost.localdomain [127.0.0.1])
	by torch.brasslantern.com (8.13.1/8.13.1) with ESMTP id m0H3B3G9012891	for
 <zsh-users@sunsite.dk>; Wed, 16 Jan 2008 19:11:04 -0800
Received: (from schaefer@localhost)	by torch.brasslantern.com
 (8.13.1/8.13.1/Submit) id m0H3B32R012890	for zsh-users@sunsite.dk; Wed,
 16 Jan 2008 19:11:03 -0800
Date: Wed, 16 Jan 2008 19:11:03 -0800
From: Bart Schaefer <schaefer@brasslantern.com>
Subject: Re: idea for new feature (was: Re: sticky-note and zle bindings)
In-reply-to: <20080116171253.GF16058@spiegl.de>
To: zsh-users@sunsite.dk
Message-id: <080116191103.ZM12889@torch.brasslantern.com>
MIME-version: 1.0
X-Mailer: OpenZMail Classic (0.9.2 24April2005)
Content-type: text/plain; charset=us-ascii
References: <20080104105900.37a87f7e@news01>
	<237967ef0801040304h494987bv939bf6ff9541123f@mail.gmail.com>
	<477E177A.3060303@kotiportti.fi>
	<Xns9A20C0F173D23zzappergmailcom@80.91.229.13>
	<080113000048.ZM15017@torch.brasslantern.com>
	<20080116131048.GC16058@spiegl.de>
	<080116075915.ZM12209@torch.brasslantern.com>
	<20080116171253.GF16058@spiegl.de>
Comments: In reply to Andy Spiegl <zsh.Andy@spiegl.de>
 "idea for new feature (was: Re: sticky-note and zle bindings)" (Jan 16,
 6:12pm)
X-Virus-Scanned: ClamAV using ClamSMTP

On Jan 16,  6:12pm, Andy Spiegl wrote:
}
} How about saving the current directory (or even the whole directory
} stack) of every zsh-instance so that it's possible to restore the
} status of all shells after an (in)voluntary crash, like network splits
} or an X-server crash.

Of course this is what share_history and inc_append_history are in
part intended to accomplish.

The problem is that zsh can't do it by iself.  So, your X server has
crashed and 20 shell windows went kablooie.  Even if every zsh has
faithfully been recording its state somewhere, how does each new
xterm you launch on the retarted X desktop know which one of the 20
saved states it should restore?

This is actually made *worse* by the fact that many modern X desktops
have "session managers" that will remember the apps and placement of
your windows and re-launch them on restart, so you may have 20 new
xterms all examining the set of state files effectively at once.

Even supposing your session manager doesn't do this, and you have a
command to launch a new xterm for every state file and somehow pass it
(ZDOTDIR maybe?) the name of the file it should initialize, zsh can't
track window placements or much of anything else that would help you
to tell which window is which after they reappear.

The upshot is that this isn't a zsh feature -- it's a cooperative
feature that requires effort from both the shell and whatever other
user interface environment it's running inside.  It's pretty simple
to dump state somewhere from the precmd() function, if only you know
what to do with it later.

One of my sysadmins back in grad school had a collection of csh scripts
read from his .login to do something like this, 20 years ago.  I never
saw them in detail, but I got the impression that they were stashing
away data they'd extracted from the SunWindows environment on his old
Sun-1 desktop (before there was such a thing as a sparc chip or even
OpenWindows -- can you say "black-and-white bitmap"?).  And he didn't
even have such a thing as precmd -- he was relying on aliases for "cd"
and the like.

