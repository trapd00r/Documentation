From zsh-users-return-12677-mason-zsh=primenet.com.au@sunsite.dk Thu Mar 06 14:53:42 2008
Return-Path: <zsh-users-return-12677-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 24953 invoked from network); 6 Mar 2008 14:53:39 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.4 (2008-01-01) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-2.4 required=5.0 tests=AWL,BAYES_00 autolearn=ham
	version=3.2.4
Received: from news.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.247.88)
  by ns1.primenet.com.au with SMTP; 6 Mar 2008 14:53:39 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 91139 invoked from network); 6 Mar 2008 14:53:16 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 6 Mar 2008 14:53:16 -0000
Received: (qmail 14420 invoked by alias); 6 Mar 2008 14:53:03 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 12677
Received: (qmail 14397 invoked from network); 6 Mar 2008 14:53:02 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 6 Mar 2008 14:53:02 -0000
Received: from cluster-g.mailcontrol.com (cluster-g.mailcontrol.com [85.115.41.190])
	by bifrost.dotsrc.org (Postfix) with ESMTP id E67DC8029404
	for <zsh-users@sunsite.dk>; Thu,  6 Mar 2008 15:52:55 +0100 (CET)
Received: from cameurexb01.EUROPE.ROOT.PRI ([62.189.241.200])
	by rly07g.srv.mailcontrol.com (MailControl) with ESMTP id m26Eoknu007455
	for <zsh-users@sunsite.dk>; Thu, 6 Mar 2008 14:52:47 GMT
Received: from news01 ([10.103.143.38]) by cameurexb01.EUROPE.ROOT.PRI with Microsoft SMTPSVC(6.0.3790.3959);
	 Thu, 6 Mar 2008 14:52:01 +0000
Date: Thu, 6 Mar 2008 14:52:01 +0000
From: Peter Stephenson <pws@csr.com>
To: zsh-users@sunsite.dk
Subject: Re: do not interpret special characters
Message-ID: <20080306145201.0235d344@news01>
In-Reply-To: <20080303084847.GA25626@fruitcom.com>
References: <20080303084847.GA25626@fruitcom.com>
Organization: CSR
X-Mailer: Claws Mail 3.3.1 (GTK+ 2.12.5; i386-redhat-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 06 Mar 2008 14:52:01.0073 (UTC) FILETIME=[A25C2210:01C87F99]
X-Scanned-By: MailControl A-08-00-05 (www.mailcontrol.com) on 10.71.0.117
X-Virus-Scanned: ClamAV 0.91.2/6153/Thu Mar  6 14:59:13 2008 on bifrost
X-Virus-Status: Clean

On Mon, 3 Mar 2008 09:48:47 +0100
Eric Smith <Eric.Smith@fruitcom.com> wrote:
> How do I temporarily set zsh not to interpret and ~ < characters
> on the command line but to pass them directly to my script? 
> (for now I - tediously -  use backslash)

You can alter the line in accept-line,

  accept-line() {
    emulate -L zsh
    setopt extendedglob

    local MATCH MBEGIN MEND
    BUFFER=${BUFFER//(#m)((#s)|[^\\])[<~]/$MATCH[1,-2]\\$MATCH[-1]}

    zle .accept-line
  }
  zle -N accept-line

Obviously this has a dire effect on anything other than the simplest
command lines.  You turn it off with:

  zle -A .accept-line accept-line

However, I haven't been able to think of a general way of detecting whether
the < or ~ is already quoted (the above is just a hack to look for a
preceding backslash).  Using the utility function split-shell-arguments
that's now distributed with the shell you can quote *all* metacharacters,
if you don't mind the quoting on the line being rewritten in the shell
history:

  accept-line() {
    emulate -L zsh
    setopt extendedglob

    local -a reply
    local REPLY REPLY2 unquote
    integer i

    autoload -U split-shell-arguments
    split-shell-arguments

    for (( i = 2; i <= ${#reply}; i += 2 )); do
      unquote=${(Q)reply[i]}
      if [[ $unquote != ${(q)unquote} ]]; then
        # if there's anything worth quoting, use double quotes
        reply[i]="${(qqq)unquote}"
      fi
    done
    BUFFER=${(j..)reply}

    zle .accept-line
  }
  zle -N accept-line

Note you'll get extra "" pairs if the original splitting thought the
words were different despite the lack of whitespace.  That's fixable
by checking the odd words in $reply which are the white space ($reply[1] is
at the start of the line, $reply[-1] at the end).  (This is why I didn't
use '' since that will break with RC_QUOTES set.)

I discovered a bug looking at this:

  unquote=">"
  print -r -- ${(Q)unquote}

prints nothing with the latest version of the shell.  Something funny is
happening in string token extraction that I don't understand (there's some
obscure trick and there are no comments explaining what it's supposed to be
doing).  I'll report on this separately.

-- 
Peter Stephenson <pws@csr.com>                  Software Engineer
CSR PLC, Churchill House, Cambridge Business Park, Cowley Road
Cambridge, CB4 0WZ, UK                          Tel: +44 (0)1223 692070

