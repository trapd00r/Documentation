From zsh-users-return-14208-mason-zsh=primenet.com.au@sunsite.dk Sun Jun 28 10:32:51 2009
Return-Path: <zsh-users-return-14208-mason-zsh=primenet.com.au@sunsite.dk>
Delivered-To: mason-zsh@primenet.com.au
Received: (qmail 10553 invoked from network); 28 Jun 2009 10:32:37 -0000
X-Spam-Checker-Version: SpamAssassin 3.2.5 (2008-06-10) on f.primenet.com.au
X-Spam-Level: 
X-Spam-Status: No, score=-1.5 required=5.0 tests=BAYES_00,URIBL_RHS_DOB
	autolearn=no version=3.2.5
Received: from new-brage.dotsrc.org (HELO a.mx.sunsite.dk) (130.225.254.104)
  by ns1.primenet.com.au with SMTP; 28 Jun 2009 10:32:37 -0000
Received-SPF: none (ns1.primenet.com.au: domain at sunsite.dk does not designate permitted sender hosts)
Received: (qmail 50103 invoked from network); 28 Jun 2009 10:32:15 -0000
Received: from sunsite.dk (130.225.247.90)
  by a.mx.sunsite.dk with SMTP; 28 Jun 2009 10:32:15 -0000
Received: (qmail 15352 invoked by alias); 28 Jun 2009 10:31:37 -0000
Mailing-List: contact zsh-users-help@sunsite.dk; run by ezmlm
Precedence: bulk
X-No-Archive: yes
Delivered-To: mailing list zsh-users@sunsite.dk
X-Seq: 14208
Received: (qmail 15328 invoked from network); 28 Jun 2009 10:31:36 -0000
Received: from bifrost.dotsrc.org (130.225.254.106)
  by sunsite.dk with SMTP; 28 Jun 2009 10:31:36 -0000
Received: from mailgw10.technion.ac.il (mailgw10.technion.ac.il [132.68.225.10])
	by bifrost.dotsrc.org (Postfix) with ESMTP id 39E72801E289
	for <zsh-users@sunsite.dk>; Sun, 28 Jun 2009 12:31:32 +0200 (CEST)
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApoEALvjRkqERHMG/2dsb2JhbADLTAKECwU
X-IronPort-AV: E=Sophos;i="4.42,303,1243803600"; 
   d="scan'208";a="185152621"
Received: from fermat.math.technion.ac.il ([132.68.115.6])
  by mailgw10.technion.ac.il with ESMTP; 28 Jun 2009 13:31:30 +0300
Received: from fermat.math.technion.ac.il (localhost [127.0.0.1])
	by fermat.math.technion.ac.il (8.12.10/8.12.10) with ESMTP id n5SAVUPA018279;
	Sun, 28 Jun 2009 13:31:30 +0300 (IDT)
Received: (from nyh@localhost)
	by fermat.math.technion.ac.il (8.12.10/8.12.10/Submit) id n5SAVTkp018278;
	Sun, 28 Jun 2009 13:31:29 +0300 (IDT)
X-Authentication-Warning: fermat.math.technion.ac.il: nyh set sender to nyh@math.technion.ac.il using -f
Date: Sun, 28 Jun 2009 13:31:29 +0300
From: "Nadav Har'El" <nyh@math.technion.ac.il>
To: zsh-users@sunsite.dk
Subject: Multi-core loops
Message-ID: <20090628103129.GA15270@fermat.math.technion.ac.il>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.4.2.2i
Hebrew-Date: 6 Tammuz 5769
X-Virus-Scanned: ClamAV 0.94.2/9515/Sun Jun 28 05:42:49 2009 on bifrost
X-Virus-Status: Clean

Hi, I've been a very happy user of Zsh for the last 18 years (!).
Regretfully I haven't been on this list for many years, and now I have
resubscribed to propose a simple, but I think useful, feature for zsh.

Zsh, like all shells, lets you easily do something many times in a loop.
E.g.,

	for i in ...
	do
		dosomething $i
	done
	
But when "dosomething" is CPU intensive, this is *not* what you'd want to
do on a multi-core (multi CPU) machine, which have more-or-less become
standard nowadays...
Such a loop would only use one of the CPUs, and leave the other(s) unused.
Instead, you'll want to keep all CPUs busy all the time, running M (=number
of CPUs) processes at the same time.

This idea has been raised before on this list by others - one thread I found
dates back to 10 years ago,
	http://www.zsh.org/mla/users/1999/msg00644.html
and another one from 7 years ago
	http://www.zsh.org/mla/users/2002/msg00117.html

But at the time, I guess that the whole concept of multi-CPU machines sounded
esoteric. This is no longer the case, most people nowadays have multi-CPU
machines, and probably run into this issue often. I know I do. So I believe
zsh should make it easy to handle this useful case easily.

The first thread I cited suggested adding a loop new syntax, e.g.

	for i in * PARALLEL N ; do job $i ; done

I think this is a very interesting idea (not necessarily with that syntax),
and I think among all the other options I'll mention below, this is probably
the best one. However, I fear that it may be harder for the developers to
accept than the other options below because it involves new syntax and
possibly quite a bit of code (because of all the different types of loops that
are involved). I wonder what other people think - are we ready for a new
syntax for this multi-process loop feature?

If there is a chance that this option will be accepted, I will be happy to
volunteer to write a patch.

The second option, suggested in both threads, requires the user to write more
code, along the lines of this pseudo-code:

	for i in ...
	do
		if ((number_of_jobs >= number_of_processors ))
		then
			wait any_job
		fi
		command &
	done
	
The problem with this is that "wait" currently has no way to ask to wait
for just one job - it can either wait for a specific job, or *all* jobs to
finish. I wonder if there is a reason not to add such a feature?

Because the lack of such a "wait for any job" feature, Bart Schaefer
suggested in the first thread an eleborate technique involving a coprocess
to do something similar.

A somewhat similar option I'd like to propose is to add a builtin, or better
yet, a new option for the existing builtin "jobs". "jobs -w 4" will wait
until there are 4 or less jobs in the job-control list. Then the 4-cpu loop
is as easy as writing:

	for i in ...
	do
		jobs -w 4
		dosomething $i &
	done


Another possibility I wanted to raise is adding a new parameter, say
MAXBACKGROUND; If that parameter is set to 4, then any time you run a
"command &" when there are already 4 jobs in the job-control list,
instead of forking immediately zsh first waits for one of the previous jobs
to finish, and only then runs the command line. With this parameter set,
the multi-CPU loop becomes trivial:

	for i in ...
	do
		dosomething $i &
	done



Any thoughts?

Thanks,
Nadav.

-- 
Nadav Har'El                        |       Sunday, Jun 28 2009, 6 Tammuz 5769
nyh@math.technion.ac.il             |-----------------------------------------
Phone +972-523-790466, ICQ 13349191 |In Fortran, God is real unless declared
http://nadav.harel.org.il           |an integer.

